[
    {
        "id": 0,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['A4 paper size (210mm × 297mm)', '80g/m² paper weight'], 'relations': ['paper_size_to_mass (Paper_Size → mass_per_page)', 'group_by_paper_size (Paper_Size → total_mass)'], 'intent': 'calculate_total_paper_mass_by_size', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [210, 297, 80], 'units': {'dimensions': 'mm (converted to m² for calculation)', 'paper_weight': 'g/m²', 'mass_output': 'kg (grams/1000)'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Paper_Size', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '纸张尺寸', 'examples': ['A4', 'Letter', 'Legal', 'A3']}, {'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}]}}\nA physical knowledge question is as follows:\nAssuming all printing tasks use A4 paper (210mm × 297mm, 80g/m²), group statistics by paper size to calculate the total paper mass consumed for each size of printing task (unit: kilogram)?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Paper_Size, SUM(Page_Count * 80 * 0.06237 * (CASE WHEN Duplex=1 THEN 0.5 ELSE 1 END)) / 1000 AS Total_Mass_Kg FROM print_jobs GROUP BY Paper_Size;",
        "db_id": "printer"
    },
    {
        "id": 1,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['double-sided printing mode', 'single-sided printing baseline', 'print jobs', 'paper sheets'], 'relations': ['group_by (Duplex field)', 'paper_saving_formula (saved_sheets = Page_Count / 2 for Duplex=True)'], 'intent': 'calculate_paper_savings_from_duplex_printing', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['Page_Count from print_jobs'], 'units': {'paper_sheets': 'sheets', 'pages': 'pages', 'conversion': '1 sheet = 2 pages (double-sided), 1 sheet = 1 page (single-sided)'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Duplex', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否双面打印（0-否，1-是）', 'examples': ['1', '0']}, {'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}]}}\nA mathematical logic question is as follows:\nGroup by double-sided printing mode and calculate the total number of physical paper sheets saved for all print jobs (assuming single-sided printing as the standard baseline)?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Duplex, SUM(Page_Count) - SUM(CEIL(Page_Count/(CASE WHEN Duplex=1 THEN 2 ELSE 1 END))) AS Saved_Pages FROM print_jobs GROUP BY Duplex;",
        "db_id": "printer"
    },
    {
        "id": 2,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['color printing', 'monochrome printing', 'print_jobs'], 'relations': ['print_job_to_color_usage (print_jobs.Color_Usage)', 'consumable_usage_proportion (color:3x, monochrome:1x)'], 'intent': 'group_and_count_print_tasks_by_color_with_consumable_usage_weighting', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3, 1], 'units': {'consumable_usage': 'theoretical units (color: 3 units/job, monochrome: 1 unit/job)'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Job_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印任务唯一标识', 'examples': ['1', '20', '30', '31', '100']}, {'column': 'Color_Usage', 'type': 'ENUM', 'primary_key': False, 'comment': '颜色使用', 'examples': ['Color', 'Monochrome']}]}}\nA common sense reasoning question is as follows:\nGroup and count print tasks by color, calculating the theoretical proportion of consumable usage (assuming color printing consumes 3 times more consumables than monochrome printing)?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Color_Usage, SUM(Page_Count * (CASE WHEN Color_Usage='Color' THEN 3 ELSE 1 END)) AS Consumption_Ratio FROM print_jobs GROUP BY Color_Usage;",
        "db_id": "printer"
    },
    {
        "id": 3,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['print_jobs.Job_ID', 'Page_Count=100,000,000', 'INT maximum value=2147483647', 'duplex printing mode'], 'relations': ['job_to_pages (Job_ID → Page_Count)', 'pages_to_sheets (Page_Count/2=50,000,000 sheets)', 'critical_threshold (INT max=2,147,483,647 sheets)'], 'intent': 'calculate_critical_sheet_threshold_for_INT_overflow', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100000000, 2147483647], 'units': {'page_count': 'pages', 'sheet_count': 'physical sheets', 'threshold': 'INT32 maximum value (2^31-1)'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}, {'column': 'Duplex', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否双面打印（0-否，1-是）', 'examples': ['1', '0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming there is a printing task with Page_Count=100,000,000 pages, calculate the boundary condition under which the system might crash (when the total physical sheet count exceeds the INT maximum value of 2147483647) under duplex printing mode grouping?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Duplex, CASE WHEN CEIL(100000000/(CASE WHEN Duplex=1 THEN 2 ELSE 1 END)) > 2147483647 THEN 1 ELSE 0 END AS Crash_Condition FROM (SELECT 0 AS Duplex UNION SELECT 1) AS modes;",
        "db_id": "printer"
    },
    {
        "id": 4,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['print_jobs', 'printer', 'rated_power_consumption', 'A4 paper (80gsm)', '10% excess power'], 'relations': ['print_jobs.use_paper_size (A4)', 'printer.has_rated_power_consumption', 'print_jobs.associated_printer (via Printer_ID)', 'paper_weight.impact_on_power (80gsm → 10% increase)'], 'intent': 'identify_print_jobs_with_power_exceedance', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [10, 80], 'units': {'power_consumption': 'watts (implied by Power_Consumption column)', 'paper_weight': 'grams per square meter (gsm)', 'percentage_excess': '% (10% increase over rated power)'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Job_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印任务唯一标识', 'examples': ['1', '20', '30', '31', '100']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Paper_Size', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '纸张尺寸', 'examples': ['A4', 'Letter', 'Legal', 'A3']}], 'printer.printers': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}, {'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}]}}\nA physical knowledge question is as follows:\nIdentify all print jobs where the total power consumption of the printer exceeds the rated power consumption by 10% due to paper weight, assuming all papers are A4 size (80 grams per square meter).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pj.* FROM print_jobs pj JOIN printers pr ON pj.Printer_ID = pr.Printer_ID WHERE pj.Paper_Size = 'A4' AND ((pj.Page_Count * 4.9896 * POWER(2, pj.Duplex) * 9.8 * 0.1) / (pj.Page_Count / NULLIF(CAST(REGEXP_REPLACE(pr.Print_Speed, '^0-9', '', 'g') AS INTEGER), 0))) > (pr.Power_Consumption * 0.1);",
        "db_id": "printer"
    },
    {
        "id": 5,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['color printing tasks', 'ink consumption', 'color ink consumables'], 'relations': ['print_jobs_to_consumables (via Printer_ID)', 'page_count_to_ink_usage (0.05ml/page)', 'consumables_to_cost_per_ml (Cost/Capacity adjusted by density)'], 'intent': 'calculate_total_ink_cost_for_color_printing', 'reasoning_type': 'physical knowledge reasoning and mathematical logic reasoning', 'numerical_values': [1.2, 0.05], 'units': {'ink_density': '1.2g/ml', 'ink_consumption': '0.05ml/page', 'cost_conversion': 'Cost_per_ml = (Consumables.Cost * 1.2) / Consumables.Capacity (if Capacity is in grams)'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}, {'column': 'Color_Usage', 'type': 'ENUM', 'primary_key': False, 'comment': '颜色使用', 'examples': ['Color', 'Monochrome']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}], 'printer.consumables': [{'column': 'Cost', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '耗材成本（美元）', 'examples': ['100.0', '120.0', '80.0', '90.0', '110.0']}, {'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}, {'column': 'Type', 'type': 'ENUM', 'primary_key': False, 'comment': '耗材类型', 'examples': ['Toner', 'Ink', 'Paper', 'Drum', 'Fuser']}]}}\nA mathematical logic question is as follows:\nCalculate the total cost generated by ink consumption in color printing tasks, with precision down to the cost per milliliter of ink (assuming the density of color ink is 1.2g/ml, and each page consumes 0.05ml of ink).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pj.Job_ID, pj.Page_Count * 0.05 * (c.Cost / 250) AS Total_Ink_Cost FROM print_jobs pj JOIN consumables c ON pj.Printer_ID = c.Printer_ID WHERE pj.Color_Usage = 'Color' AND c.Type = 'Ink';",
        "db_id": "printer"
    },
    {
        "id": 6,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['duplex printing tasks', 'tray capacity', 'actual paper consumption'], 'relations': ['print_job_to_printer (print_jobs.Printer_ID → printers.Printer_ID)', 'paper_consumption_to_tray_capacity (Page_Count / 2 > 0.8 * Tray_Capacity)'], 'intent': 'filter_duplex_print_jobs_exceeding_tray_capacity', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.8], 'units': {'paper_consumption': 'pages (for non-duplex) or sheets (for duplex, Page_Count / 2)', 'tray_capacity': 'sheets (Tray_Capacity)', 'comparison': 'Page_Count / 2 > 0.8 * Tray_Capacity'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Job_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印任务唯一标识', 'examples': ['1', '20', '30', '31', '100']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}, {'column': 'Duplex', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否双面打印（0-否，1-是）', 'examples': ['1', '0']}], 'printer.printers': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}, {'column': 'Tray_Capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '纸盘容量（张）', 'examples': ['250', '300', '150', '350', '500']}]}}\nA common sense reasoning question is as follows:\nFilter all duplex printing tasks where the actual paper consumption exceeds 80% of the tray capacity (assuming the tray capacity is Tray_Capacity).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pj.* FROM print_jobs pj JOIN printers pr ON pj.Printer_ID = pr.Printer_ID WHERE pj.Paper_Size = 'A4' AND ((pj.Page_Count * 4.9896 * POWER(2, pj.Duplex) * 9.8 * 0.1) / (pj.Page_Count / NULLIF(CAST(REGEXP_SUBSTR(pr.Print_Speed, '[0-9]+') AS UNSIGNED), 0))) > (pr.Power_Consumption * 0.1);",
        "db_id": "printer"
    },
    {
        "id": 7,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['print jobs', '1 billion pages', '0.1 millimeters per page', 'Mount Everest (8,848 meters)'], 'relations': ['print_jobs_to_page_count (print_jobs → Page_Count)', 'page_thickness_to_total_height (0.1 mm/page → cumulative height)', \"height_comparison (total_height vs Everest's 8,848 m)\"], 'intent': 'determine_if_paper_stack_exceeds_mount_everest', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000000000, 0.1, 8848], 'units': {'page_thickness': '0.1 mm (per page)', 'height_comparison': '8,848 m (Everest height)', 'conversion': '1 m = 1000 mm → 0.1 mm/page × 1e9 pages = 1e8 mm = 100,000 m', 'comparison_result': '100,000 m > 8,848 m'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}]}}\nA hypothetical reasoning question is as follows:\nFind all print jobs with more than 1 billion pages, assuming a thickness of 0.1 millimeters per page, and determine whether the stacked paper height exceeds Mount Everest (8,848 meters).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM print_jobs WHERE Page_Count > 8848000000 / (0.1 * 0.001);",
        "db_id": "printer"
    },
    {
        "id": 8,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laser printer', 'standby power consumption 50 watts', 'operational power consumption 800 watts', '4 hours per day operation', '20 hours per day standby', '30 days'], 'relations': ['power_mode_to_consumption (standby → 50W, operational → 800W)', 'time_distribution (4h operation + 20h standby = 24h/day)', 'total_period (30 days)'], 'intent': 'calculate_total_power_consumption', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [50, 800, 4, 20, 30], 'units': {'power': 'watts (W)', 'time': 'hours (h)', 'days': '30 days', 'energy_conversion': '1 kWh = 1000 watt-hours'}, 'foreign_keys': [{'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}]}}\nA physical knowledge question is as follows:\nA certain laser printer has a power consumption of 50 watts in standby mode and 800 watts during operation. If the printer operates for 4 hours a day and remains in standby for 20 hours, calculate the total power consumption for one month (30 days) in kilowatt-hours (kWh).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ((800 * 4 + 50 * 20) * 30) / 1000 AS Total_kWh FROM printers WHERE Type = 'Laser' LIMIT 1;",
        "db_id": "printer"
    },
    {
        "id": 9,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\nthere is nothing I can give you about this question.\nA mathematical logic question is as follows:\nA certain model of toner has a capacity of 5,000 pages and currently has a 30% remaining level. The user performs three consecutive print jobs: Job 1 is a 1,200-page monochrome document, Job 2 is an 800-page color chart (with 40% color content), and Job 3 is a 500-page double-sided manual (equivalent pages for double-sided printing are calculated at 50%). Assuming color printing consumes 2.5 times more toner than monochrome printing, calculate the final remaining capacity percentage.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ((5000 * 0.3 - (1200 * 1 + (800 * 0.4 * 2.5 + 800 * 0.6 * 1) + (500 * 0.5))) / 5000 * 100) AS Remaining_Percent FROM consumables WHERE Type = 'Toner' AND Model = '某型号';",
        "db_id": "printer"
    },
    {
        "id": 10,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['monthly printing volume 20,000 pages', 'drum unit capacity 5,000 pages', 'drum unit cost $200', 'fuser replacement cost $500 every 3 drum replacements'], 'relations': ['pages_to_consumables (20,000 pages/month → annual calculation)', 'drum_replacement_cycle (5,000 pages → 4 replacements/month)', 'fuser_dependency (every 3 drum replacements → 1 fuser replacement)'], 'intent': 'calculate_annual_consumables_budget', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20000, 5000, 200, 3, 500], 'units': {'pages': 'monthly (20,000 pages) → annual (240,000 pages)', 'cost': '$200 per drum unit, $500 per fuser', 'replacement_ratio': '1 fuser replacement per 3 drum replacements'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}, {'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}, {'column': 'Cost', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '耗材成本（美元）', 'examples': ['100.0', '120.0', '80.0', '90.0', '110.0']}], 'printer.print_jobs': [{'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}], 'printer.maintenance_logs': [{'column': 'Maintenance_Type'}, {'column': 'Cost'}]}}\nA common sense reasoning question is as follows:\nA department has a monthly average printing volume of 20,000 pages, using a drum unit with a capacity of 5,000 pages. The cost of replacing the drum unit is $200 per unit, and maintenance records show that on average, for every 3 drum unit replacements, a $500 fuser needs to be replaced as well. Calculate the minimum annual consumables budget.\nyour response just have a SQL without anything.\n",
        "solution": "WITH drum_cost AS (SELECT Cost FROM consumables WHERE Type = 'Drum' LIMIT 1), fuser_cost AS (SELECT Cost FROM consumables WHERE Type = 'Fuser' LIMIT 1) SELECT (200 * 48 + 500 * 16) AS Annual_Budget FROM drum_cost, fuser_cost;",
        "db_id": "printer"
    },
    {
        "id": 11,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['3D printer', '100 years', '5 minutes per task', '1200x1200 dpi', 'duplex printing', '1,000 hours maintenance interval', '$1,500 maintenance cost', '0.2 kg per task'], 'relations': ['time_conversion (years_to_minutes)', 'task_count (total_tasks = operational_minutes / 5)', 'maintenance_frequency (operational_hours / 1,000)', 'cost_aggregation (total_maintenance_cost = maintenance_events * $1,500)', 'material_consumption (total_weight = total_tasks * 0.2 kg)'], 'intent': 'calculate_theoretical_max_tasks, present_value_of_maintenance, total_consumables_weight', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100, 5, 1000, 1500, 0.2], 'units': {'time': 'years, hours, minutes', 'cost': '$ (USD)', 'weight': 'kg', 'conversion': ['1 year = 525600 minutes', '1,000 hours = 60,000 minutes']}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}, {'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Job_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印任务唯一标识', 'examples': ['1', '20', '30', '31', '100']}, {'column': 'Document_Name', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '文档名称', 'examples': ['Quarterly Report.pdf', 'Employee Handbook.docx', 'Financial Statement.xlsx', 'Marketing Plan.pdf', 'Sales Report.docx']}, {'column': 'Duplex', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否双面打印（0-否，1-是）', 'examples': ['1', '0']}], 'printer.maintenance_logs': [{'column': 'Maintenance_ID'}, {'column': 'Cost'}], 'printer.consumables': [{'column': 'Consumable_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '耗材唯一标识', 'examples': ['1', '90', '100', '101', '110']}, {'column': 'Type', 'type': 'ENUM', 'primary_key': False, 'comment': '耗材类型', 'examples': ['Toner', 'Ink', 'Paper', 'Drum', 'Fuser']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a 3D printer operates continuously for 100 years without interruption, with each print task taking 5 minutes, maintaining the highest resolution of 1200x1200 dpi in duplex (double-sided) printing mode. Historical maintenance records indicate that preventive maintenance costing $1,500 is required every 1,000 hours. Calculate: (a) the theoretical maximum number of tasks, (b) the present value of maintenance costs (without considering inflation), and (c) the total weight of consumables used (assuming each task consumes 0.2 kg of material).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (100 * 365 * 24 * 60 / 5) AS Max_Tasks, (100 * 365 * 24 / 1000) * 1500 AS Maintenance_Cost, (100 * 365 * 24 * 60 / 5) * 0.2 AS Total_Weight FROM printers WHERE Type = '3D' LIMIT 1;",
        "db_id": "printer"
    },
    {
        "id": 12,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laser printers', 'past year installation', 'total power consumption', '24 hours/day operation'], 'relations': ['printer_to_power_consumption (Printers.Power_Consumption)', 'time_constraint (Installation_Date ≥ 1 year ago)', 'power_conversion (watts→kilowatt-hours)'], 'intent': 'identify_top_3_highest_power_consumption_printers', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [24, 365], 'units': {'power_consumption': 'W (watts) → kWh (kilowatt-hours)', 'conversion': 'kWh = (Power_Consumption / 1000) * 24 * days_since_installation', 'time_basis': 'hours_per_day = 24, days_operated = DATEDIFF(current_date, Installation_Date)'}, 'foreign_keys': [{'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}, {'column': 'Type', 'type': 'ENUM', 'primary_key': False, 'comment': '打印机类型', 'examples': ['Laser', 'Inkjet', '3D']}, {'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}, {'column': 'Installation_Date', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '安装日期', 'examples': ['2023-01-15', '2023-02-20', '2023-03-10', '2023-04-05', '2023-05-12']}]}}\nA physical knowledge question is as follows:\nFind the top three laser printers installed in the past year with the highest total power consumption (in kilowatt-hours), and calculate their total power consumption (assuming 24 hours of operation per day).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Printer_ID, Model, (Power_Consumption * DATEDIFF(CURRENT_DATE, Installation_Date) * 24) / 1000 AS Total_kWh FROM printers WHERE Type = 'Laser' AND Installation_Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) ORDER BY Total_kWh DESC LIMIT 3;",
        "db_id": "printer"
    },
    {
        "id": 13,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturer', 'printer', 'profit margin', 'industry average profit margin 15%', 'employee count 10,000'], 'relations': ['manufacturer_to_printer (via printers.Manufacturer_ID)', 'profit_margin_comparison (manufacturer.Profit_Margin < 15%)', 'employee_count_filter (Employee_Count > 10,000)'], 'intent': 'calculate_and_filter_manufacturers_by_profit_margin_and_employees', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [15, 10000], 'units': {'profit_margin': '% (percentage)', 'employee_count': 'count (integer)'}, 'foreign_keys': [{'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.manufacturers': [{'column': 'Manufacturer_ID'}, {'column': 'Name'}, {'column': 'Profit_Margin'}, {'column': 'Employee_Count'}], 'printer.printers': [{'column': 'Manufacturer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '制造商ID', 'examples': ['1', '2', '3', '4', '5']}]}}\nA mathematical logic question is as follows:\nCalculate the average profit margin of printers produced by each manufacturer (needs to be linked to Manufacturers.Profit_Margin), and list manufacturers with a profit margin lower than the industry average (assumed to be 15%) and with more than 10,000 employees, sorted by profit margin in ascending order.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT m.Name, m.Profit_Margin FROM manufacturers m WHERE m.Profit_Margin < 15 AND m.Employee_Count > 10000 ORDER BY m.Profit_Margin ASC;",
        "db_id": "printer"
    },
    {
        "id": 14,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['toner supplies', 'current remaining level below 20%', 'not replaced for over 90 days'], 'relations': ['consumable_type (toner)', 'current_level_threshold (20%)', 'replacement_age_threshold (90 days)'], 'intent': 'retrieve_low_toner_supplies', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20, 90], 'units': {'percentage': '% (percentage)', 'time_interval': 'days'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Type', 'type': 'ENUM', 'primary_key': False, 'comment': '耗材类型', 'examples': ['Toner', 'Ink', 'Paper', 'Drum', 'Fuser']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}, {'column': 'Last_Replacement_Date', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '上次更换日期', 'examples': ['2023-01-15', '2023-02-20', '2023-03-10', '2023-04-05', '2023-05-12']}]}}\nA common sense reasoning question is as follows:\nList toner supplies with a current remaining level below 20% that have not been replaced for over 90 days, sorted in ascending order by the percentage of remaining level.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Consumable_ID, Printer_ID, Current_Level, Last_Replacement_Date FROM consumables WHERE Type = 'Toner' AND Current_Level < 20 AND DATEDIFF(CURRENT_DATE, Last_Replacement_Date) > 90 ORDER BY Current_Level ASC;",
        "db_id": "printer"
    },
    {
        "id": 15,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['double-sided print job', '100 million pages', '4.5 grams per sheet'], 'relations': ['pages_to_sheets_saved (100,000,000 pages → 50,000,000 sheets saved)', 'grams_to_tons_conversion (4.5g × 50,000,000 → 225,000,000g → 225 tons)'], 'intent': 'calculate_theoretical_paper_savings', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [100000000, 4.5], 'units': {'paper_weight': 'grams (g)', 'conversion': '1 ton = 1,000,000 grams (metric ton)'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}, {'column': 'Duplex', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否双面打印（0-否，1-是）', 'examples': ['1', '0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a user submits a double-sided printing job with 100 million pages, calculate the theoretical amount of paper saved (measured in tons), given that each sheet of paper weighs 4.5 grams, and sort the results in descending order of the savings (even if the data exceeds practical system limits).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (100000000 / 2) AS Saved_Pages, ((100000000 / 2) * 4.5) / 1000000 AS Saved_Weight_Tons ORDER BY Saved_Weight_Tons DESC;",
        "db_id": "printer"
    },
    {
        "id": 16,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laser printer (Type=lase)', '800 watts power consumption', '24 hours operation', '65% average duty cycle'], 'relations': ['printer_to_power_consumption (Printer_ID → Power_Consumption)', 'duty_cycle_conversion (65% → 0.65)', 'time_duration (24 hours)'], 'intent': 'calculate_energy_consumption', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [800, 24, 65], 'units': {'power': 'watts → kilowatts (1 kW = 1000 W)', 'time': 'hours', 'duty_cycle': '% → decimal (65% = 0.65)', 'energy': 'kWh = (power [kW] × time [hours] × duty_cycle)'}, 'foreign_keys': [{'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}, {'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}]}}\nA physical knowledge question is as follows:\nAssuming a certain laser printer (Type=lase) has a power consumption of 800 watts, if the printer operates continuously for 24 hours with an average duty cycle of 65% per hour for printing tasks during that period, calculate its total energy consumption (in kilowatt-hours) and output the results grouped by Printer_ID.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Printer_ID, (Power_Consumption * 24 * 0.65 / 1000) AS Total_Energy_kWh FROM printers WHERE Type = '激光' GROUP BY Printer_ID;",
        "db_id": "printer"
    },
    {
        "id": 17,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['toner model', '5000 pages capacity', '25% remaining', '3800 pages', '30 days', '3x color consumption rate'], 'relations': ['model_to_capacity (toner model → 5000 pages)', 'remaining_level (25% → 1250 pages)', 'color_consumption_rate (3x multiplier)', 'effective_pages (3800 pages adjusted for color)'], 'intent': 'calculate_remaining_usable_days', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5000, 25, 3800, 30, 3], 'units': {'capacity': 'pages', 'consumption_rate': 'page-equivalents', 'time': 'days'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '耗材型号', 'examples': ['HP 414A', 'Canon 057H', 'Epson 212', 'Brother TN-760', 'Xerox 106R01359']}, {'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}], 'printer.print_jobs': [{'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}, {'column': 'Color_Usage', 'type': 'ENUM', 'primary_key': False, 'comment': '颜色使用', 'examples': ['Color', 'Monochrome']}, {'column': 'Job_Date', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '任务日期', 'examples': ['2023-01-16 10:00:00', '2023-02-21 11:00:00', '2023-03-11 12:00:00', '2023-04-06 09:00:00', '2023-05-13 10:00:00']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}]}}\nA mathematical logic question is as follows:\nIf a toner (Type=toner) model has a capacity of 5,000 pages and currently has 25% remaining, and it is known that the printer has completed printing tasks totaling 3,800 pages (including both monochrome and mixed-color tasks) in the past 30 days. Assuming that color pages consume supplies at 3 times the rate of monochrome pages, calculate the remaining usable days of the consumable and output the results grouped by consumable model.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT c.Model, (c.Capacity * (c.Current_Level / 100) / 3) / (SUM(p.Page_Count * 3) / 30) AS Remaining_Days FROM consumables c JOIN printers pr ON c.Printer_ID = pr.Printer_ID JOIN print_jobs p ON pr.Printer_ID = p.Printer_ID WHERE c.Type = '碳粉' AND p.Job_Date >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY) GROUP BY c.Model;",
        "db_id": "printer"
    },
    {
        "id": 18,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Sales Department', 'Q4 2023', '1200 pages', 'Duplex=1', 'A4 paper'], 'relations': ['user_to_print_job (User_ID → Department)', 'duplex_saving_calculation (Duplex=1 → 50% paper reduction)', 'time_range_filter (Job_Date ∈ Q4 2023)'], 'intent': 'calculate_paper_saving_by_print_mode_conversion', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1200, 4], 'units': {'paper_saving': 'A4 sheets (standard unit)', 'conversion': 'Duplex saves 1 sheet per 2 pages (1200 pages → 600 sheets used vs 1200 sheets single-sided)'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'users', 'pk_column': 'User_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}, {'column': 'Duplex', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否双面打印（0-否，1-是）', 'examples': ['1', '0']}, {'column': 'Job_Date', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '任务日期', 'examples': ['2023-01-16 10:00:00', '2023-02-21 11:00:00', '2023-03-11 12:00:00', '2023-04-06 09:00:00', '2023-05-13 10:00:00']}, {'column': 'User_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '用户ID', 'examples': ['1', '2', '3', '4', '5']}], 'printer.users': [{'column': 'Department'}]}}\nA common sense reasoning question is as follows:\nUsers from a certain department (Department=Sales Department) completed a total of 1,200 pages of duplex printing tasks (Duplex=1) in Q4 2023. If all tasks had been printed in single-sided mode, calculate the number of sheets of paper saved (paper specification: A4) and output the results grouped by user department.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT u.Department, SUM(p.Page_Count - CEIL(p.Page_Count / 2)) AS Saved_Papers FROM print_jobs p JOIN users u ON p.User_ID = u.User_ID WHERE u.Department = '销售部' AND p.Duplex = 1 AND YEAR(p.Job_Date) = 2023 AND QUARTER(p.Job_Date) = 4 GROUP BY u.Department;",
        "db_id": "printer"
    },
    {
        "id": 19,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['3D printer', 'material capacity 1×10^18 pages', 'remaining capacity 0.1%', 'print speed 1 page/sec', 'universe age 1.38×10^10 years'], 'relations': ['printer_type (3D printer → Type=3D)', 'capacity_to_remaining (1×10^18 pages × 0.1% = 1×10^15 pages)', 'time_to_exhaust (1×10^15 pages ÷ 1 page/sec = 1×10^15 seconds)', 'universe_age_conversion (1×10^15 seconds ≈ 3.17×10^7 years)'], 'intent': 'calculate_printer_material_exhaustion_time_in_universe_ages', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1e+18, 0.1, 1, 13800000000.0], 'units': {'capacity': 'pages (1×10^18 pages)', 'remaining_percentage': '% (0.1%)', 'print_speed': 'pages/sec (1 page/sec)', 'time_seconds': 'seconds (1×10^15 seconds)', 'time_years': 'years (≈3.17×10^7 years)', 'universe_age': 'years (1.38×10^10 years)', 'conversion_factor': 'universe_ages = 3.17×10^7 ÷ 1.38×10^10 ≈ 0.0023'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}, {'column': 'Type', 'type': 'ENUM', 'primary_key': False, 'comment': '打印机类型', 'examples': ['Laser', 'Inkjet', '3D']}], 'printer.consumables': [{'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}]}}\nA hypothetical reasoning question is as follows:\nAssume a 3D printer (Type=3D) has its material capacity incorrectly configured as 1×10^18 pages, with a current remaining capacity of 0.1%. If it prints 1 page per second without interruption, calculate how many universe ages (current universe age ≈1.38×10^10 years) are required to exhaust the material, and output the results grouped by Printer_ID.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT c.Model, (c.Capacity * (c.Current_Level / 100) / 3) / (SUM(p.Page_Count * 3) / 30) AS Remaining_Days FROM consumables c JOIN printers pr ON c.Printer_ID = pr.Printer_ID JOIN print_jobs p ON pr.Printer_ID = p.Printer_ID WHERE c.Type = '碳粉' AND p.Job_Date >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY) GROUP BY c.Model, c.Capacity, c.Current_Level;",
        "db_id": "printer"
    },
    {
        "id": 20,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laser printer', 'power consumption 800 watts', '24 hours', '20% instantaneous power surge', '5 seconds'], 'relations': ['printer_to_power_consumption (printer → printers.Power_Consumption)', 'surge_to_base_power (20% of 800W = 160W surge)', 'time_conversion (5 seconds → 0.0013889 hours)'], 'intent': 'calculate_total_energy_consumption_including_surge', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [800, 24, 20, 5], 'units': {'power': 'Watts (W) → kilowatts (kW) [conversion: 1 kW = 1000 W]', 'time': 'seconds → hours (3600 seconds/hour); hours → 24 hours', 'energy': 'kilowatt-hours (kWh) = (kW × hours)', 'surge_duration': '5 seconds = 5/3600 hours ≈ 0.0013889 hours'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}], 'printer.print_jobs': [{'column': 'Job_Date', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '任务日期', 'examples': ['2023-01-16 10:00:00', '2023-02-21 11:00:00', '2023-03-11 12:00:00', '2023-04-06 09:00:00', '2023-05-13 10:00:00']}]}}\nA physical knowledge question is as follows:\nCalculate the total energy consumption (in kilowatt-hours) of a laser printer after operating continuously for 24 hours, given that its power consumption is 800 watts, and each print job starts with an additional 20% instantaneous power surge lasting 5 seconds.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Printer_ID, ((Power_Consumption * (86400 - 5) + Power_Consumption * 1.2 * 5) / 1000) AS Total_Energy_kWh FROM printers WHERE Type = 'Laser' AND Power_Consumption = 800;",
        "db_id": "printer"
    },
    {
        "id": 21,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['printers', 'paper tray capacity 250 sheets', 'A4 paper 4.5 grams', 'device weight 18 kilograms', 'certain department'], 'relations': ['printer_to_department (Printer.Location → department)', 'paper_weight_total (250 sheets * 4.5 grams)', 'total_weight (18 kg + paper_weight_total converted to kg)', 'years_of_use (current date - Installation_Date)'], 'intent': 'calculate_total_weight_years_product', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [250, 4.5, 18], 'units': {'paper_tray_capacity': 'sheets', 'paper_weight_per_sheet': 'grams', 'device_weight': 'kilograms', 'paper_weight_total': 'grams (converted to kg)', 'total_weight': 'kg', 'years_of_use': 'years', 'conversion': '1 kg = 1000 grams'}, 'foreign_keys': [{'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}, {'column': 'Location', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '安装位置', 'examples': ['Office A', 'Office B', 'Office C', 'Office D', 'Office E']}, {'column': 'Installation_Date', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '安装日期', 'examples': ['2023-01-15', '2023-02-20', '2023-03-10', '2023-04-05', '2023-05-12']}]}}\nA mathematical logic question is as follows:\nCalculate the annual theoretical maximum paper throughput for all printers in a certain department, given that each printer's paper tray capacity is 250 sheets, supports A4 paper (single sheet weight 4.5 grams), and the device weight is 18 kilograms. The requirement is to output the product of total weight (device + paper) and the years of use.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.Printer_ID, (p.Weight + (p.Tray_Capacity * 365 * 0.0045)) * (YEAR(CURDATE()) - p.Year) AS Composite_Value FROM printers p WHERE p.Printer_ID IN (SELECT DISTINCT j.Printer_ID FROM print_jobs j JOIN users u ON j.User_ID = u.User_ID WHERE u.Department = '某部门');",
        "db_id": "printer"
    },
    {
        "id": 22,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['printers', 'departments', 'locations'], 'relations': ['printer_to_location (Printer_ID → Location)', 'user_to_department (User_ID → Department)', 'printer_to_user (Printer_ID → User_ID via print_jobs)'], 'intent': 'identify_printers_with_location_department_mismatch', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}, {'pk_table': 'users', 'pk_column': 'User_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}, {'column': 'Location', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '安装位置', 'examples': ['Office A', 'Office B', 'Office C', 'Office D', 'Office E']}], 'printer.users': [{'column': 'Department'}], 'printer.print_jobs': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'User_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '用户ID', 'examples': ['1', '2', '3', '4', '5']}]}}\nA common sense reasoning question is as follows:\nIdentify printers whose installation location does not match their assigned department. For example, a printer belonging to the Finance Department should be deployed in the Finance Office, but it is actually installed in the Warehouse. The query should return all records where the Department field and Location field do not contain the same keywords.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.Printer_ID, p.Location FROM printers p WHERE NOT EXISTS (SELECT 1 FROM print_jobs j JOIN users u ON j.User_ID = u.User_ID WHERE j.Printer_ID = p.Printer_ID AND LOCATE(LOWER(u.Department), LOWER(p.Location)) > 0);",
        "db_id": "printer"
    },
    {
        "id": 23,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['industrial printer', 'power consumption 100 million watts', 'operation duration 100 years', 'Moon mass 7.342×10²² kg'], 'relations': ['printer_power (printer → 100 million watts)', 'operation_time (printer → 100 years)', 'mass_energy_equivalence (Moon mass → E=mc²)'], 'intent': 'calculate_total_energy_consumption_and_convert_to_moon_mass_equivalent', 'reasoning_type': 'physical knowledge reasoning + mathematical logic reasoning', 'numerical_values': [100000000, 100, 7.342e+22], 'units': {'power': 'watts (W)', 'time': 'years → seconds (conversion required)', 'energy': 'joules (J) calculated via E = P*t', 'mass_energy': 'kg·m²/s² (J) derived from Moon mass via E=mc²', 'conversion_factor': 'c² = (3×10⁸ m/s)²'}, 'foreign_keys': [{'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the existence of an industrial printer with a power consumption of 100 million watts, operating continuously at 1200 ppm for 100 years, calculate its total energy consumption equivalent to how many Moon mass-energy conversions (based on E=mc², with the Moon's mass being 7.342×10²² kg).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ((1e8 * 100 * 365 * 24 * 3600) / (POWER(3e8, 2))) / 7.342e22 AS Equivalent_Moon_Masses;",
        "db_id": "printer"
    },
    {
        "id": 24,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laser printer', 'power consumption 800 watts', 'warm-up phase 200 watts', '15-minute warm-up', '24-hour operation'], 'relations': ['printer_to_power_specs (laser printer → power consumption specifications)', 'operation_time_split (24 hours = 0.25 hours warm-up + 23.75 hours normal)'], 'intent': 'calculate_energy_consumption_for_printer_operation', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [800, 200, 15, 24], 'units': {'power': 'watts', 'time': 'hours', 'energy': 'kilowatt-hours (kWh)', 'conversion': '15 minutes = 0.25 hours, 1000 watts = 1 kilowatt'}, 'foreign_keys': [{'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}]}}\nA physical knowledge question is as follows:\nCalculate the total electrical energy (in kilowatt-hours) required for a certain laser printer to operate continuously at maximum resolution for 24 hours, given that its power consumption is 800 watts, with an additional 200 watts consumed during the 15-minute warm-up phase.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (Power_Consumption * 23.75 + 200 * 0.25) / 1000 AS Total_Energy_KWh FROM printers WHERE Type = 'Laser' AND Max_Resolution = '最大分辨率值';",
        "db_id": "printer"
    },
    {
        "id": 25,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['printer manufacturers', 'R&D expenditure', 'revenue', 'market share', 'past five years'], 'relations': ['manufacturer_to_rnd_spending (Manufacturer_ID → R&D_Spending)', 'manufacturer_to_revenue (Manufacturer_ID → Revenue)', 'revenue_to_market_share (Revenue → market share ranking)'], 'intent': 'calculate_average_rnd_intensity_for_top_manufacturers', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3, 4], 'units': {'rnd_intensity': 'unitless (ratio)', 'rounding_precision': '4 decimal places'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}], 'tableinfo': {'printer.manufacturers': [{'column': 'Name'}, {'column': 'Revenue'}, {'column': 'R&D_Spending'}]}}\nA mathematical logic question is as follows:\nCalculate the average R&D intensity (ratio of R&D expenditure to revenue) over the past five years for the top 3 printer manufacturers by market share, with results rounded to four decimal places.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name, ROUND((SUM(RD_Spending) / SUM(Revenue)) * 100, 4) AS RD_Intensity FROM manufacturers WHERE Founded_Year < 2019 GROUP BY Manufacturer_ID ORDER BY Production_Volume_Total DESC LIMIT 3;",
        "db_id": "printer"
    },
    {
        "id": 26,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['duplex printing mode', 'A4 paper', 'paper saving rate', 'industry standards'], 'relations': ['print_job_duplex_analysis (print_jobs.Duplex → paper_saving_rate)', 'paper_size_filter (Paper_Size=A4)', 'compliance_check (calculated_saving_rate ≥ industry_standard_rate)'], 'intent': 'verify_compliance_with_industry_stardards', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50], 'units': {'paper_saving_rate': '% (percentage)', 'page_count': 'pages', 'calculation_basis': 'Standard duplex saving rate assumption: 50% (each sheet used twice)'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Duplex', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否双面打印（0-否，1-是）', 'examples': ['1', '0']}, {'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}, {'column': 'Paper_Size', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '纸张尺寸', 'examples': ['A4', 'Letter', 'Legal', 'A3']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}], 'printer.printers': [{'column': 'Manufacturer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '制造商ID', 'examples': ['1', '2', '3', '4', '5']}]}}\nA common sense reasoning question is as follows:\nDetermine whether the paper saving rate of duplex printing mode for A4 paper complies with industry standards.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN (SUM(Page_Count * 2 - Page_Count) / SUM(Page_Count * 2) * 100) BETWEEN 45 AND 47.5 THEN '符合' ELSE '不符合' END AS Compliance FROM print_jobs WHERE Duplex = 1 AND Paper_Size = 'A4';",
        "db_id": "printer"
    },
    {
        "id": 27,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['3D printer', 'drum component lifespan 500000 pages', 'printer speed 1000 ppm', 'continuous runtime 100 years'], 'relations': ['printer_to_speed (3D printer → printers.Print_Speed)', 'component_to_lifespan (drum component → consumables.Capacity)', 'time_conversion (years → minutes)', 'total_pages (printer_speed * total_minutes)', 'replacements_required (total_pages / component_lifespan)'], 'intent': 'calculate_component_replacement_frequency', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100, 500000, 1000], 'units': {'time': 'years (converted to minutes)', 'speed': 'pages per minute (ppm)', 'lifespan': 'pages', 'conversion': '1 year = 525600 minutes (non-leap years)'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Print_Speed', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '打印速度（如 30 ppm）', 'examples': ['30 ppm', '28 ppm', '25 ppm', '33 ppm', '35 ppm']}], 'printer.consumables': [{'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a 3D printer runs continuously for 100 years without interruption, calculate the number of drum component replacements required (given that the drum component lifespan is 500,000 pages and the printer speed is 1000 ppm).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name, ROUND((SUM('RD_Spending') / SUM(Revenue)) * 100, 4) AS RD_Intensity FROM manufacturers WHERE Founded_Year < 2019 GROUP BY Manufacturer_ID ORDER BY Production_Volume_Total DESC LIMIT 3;",
        "db_id": "printer"
    },
    {
        "id": 28,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': [\"Administrator users (Role='Admin')\", \"Laser printers (Type='Laser')\", 'continuous operation for 24 hours'], 'relations': [\"user_role_filter (users.Role='Admin')\", \"printer_type_filter (printers.Type='Laser')\", 'printer_user_association (print_jobs.User_ID ↔ users.User_ID)', 'printer_consumption_relation (printers.Power_Consumption)'], 'intent': 'calculate_total_energy_consumption_for_admin_users_on_laser_printers', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [24], 'units': {'time': 'hours (operational duration)', 'power': 'watts (printers.Power_Consumption)', 'energy': 'kilowatt-hours (kWh, derived via Power_Consumption * 24 / 1000)'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}, {'pk_table': 'users', 'pk_column': 'User_ID'}], 'tableinfo': {'printer.users': [{'column': 'Role'}, {'column': 'User_ID'}], 'printer.print_jobs': [{'column': 'User_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '用户ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}], 'printer.printers': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}, {'column': 'Type', 'type': 'ENUM', 'primary_key': False, 'comment': '打印机类型', 'examples': ['Laser', 'Inkjet', '3D']}, {'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}]}}\nA physical knowledge question is as follows:\nCalculate the total energy consumption (in kilowatt-hours) for all administrator users (Role='Admin') using laser printers (Type='Laser') after continuous operation for 24 hours, and list the top 3 results in descending order of total energy consumption.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT users.User_ID, SUM(printers.Power_Consumption / 1000 * 24) AS total_energy_kWh FROM users JOIN print_jobs ON users.User_ID = print_jobs.User_ID JOIN printers ON print_jobs.Printer_ID = printers.Printer_ID WHERE users.Role = 'Admin' AND printers.Type = 'Laser' GROUP BY users.User_ID ORDER BY total_energy_kWh DESC LIMIT 3;",
        "db_id": "printer"
    },
    {
        "id": 29,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': [\"monochrome prints (Color_Usage='Monochrome')\", \"color prints (Color_Usage='Color')\", 'departments (Department)'], 'relations': ['print_jobs_to_users (User_ID → Department)', \"color_usage_classification (Color_Usage='Monochrome' vs 'Color')\", 'ratio_calculation (monochrome_count / color_count)'], 'intent': 'calculate_ratio_of_monochrome_to_color_prints_per_department', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'print_count': 'unitless count (COUNT(Job_ID))', 'ratio': 'unitless proportion (monochrome/color)'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'users', 'pk_column': 'User_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Color_Usage', 'type': 'ENUM', 'primary_key': False, 'comment': '颜色使用', 'examples': ['Color', 'Monochrome']}, {'column': 'User_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '用户ID', 'examples': ['1', '2', '3', '4', '5']}], 'printer.users': [{'column': 'Department'}]}}\nA mathematical logic question is as follows:\nStatistics the ratio of the total number of monochrome prints (Color_Usage='Monochrome') to the total number of color prints (Color_Usage='Color') for users in each department (Department), and sort the top 5 departments by this ratio in ascending order.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT u.Department, (SUM(CASE WHEN pj.Color_Usage = 'Monochrome' THEN pj.Page_Count ELSE 0 END) * 1.0 / SUM(CASE WHEN pj.Color_Usage = 'Color' THEN pj.Page_Count ELSE 0 END)) AS ratio FROM users u JOIN print_jobs pj ON u.User_ID = pj.User_ID WHERE pj.Color_Usage IN ('Monochrome', 'Color') GROUP BY u.Department HAVING SUM(CASE WHEN pj.Color_Usage = 'Color' THEN pj.Page_Count ELSE 0 END) > 0 ORDER BY ratio ASC LIMIT 5;",
        "db_id": "printer"
    },
    {
        "id": 30,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Guest role', 'Page count threshold 50'], 'relations': ['user_to_role (User_ID → Role)', 'print_job_to_page_count (Job_ID → Page_Count)'], 'intent': 'filter_and_sort_print_jobs_by_role_and_page_count', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50], 'units': {'page_count': 'pages'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'users', 'pk_column': 'User_ID'}], 'tableinfo': {'printer.users': [{'column': 'Role'}, {'column': 'User_ID'}], 'printer.print_jobs': [{'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}, {'column': 'User_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '用户ID', 'examples': ['1', '2', '3', '4', '5']}]}}\nA common sense reasoning question is as follows:\nFind records where the user role is Guest (Role='Guest') but the number of pages printed per session exceeds 50, and sort the top 10 by page count in descending order.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT u.*, pj.* FROM users u JOIN print_jobs pj ON u.User_ID = pj.User_ID WHERE u.Role = 'Guest' AND pj.Page_Count > 50 ORDER BY pj.Page_Count DESC LIMIT 10;",
        "db_id": "printer"
    },
    {
        "id": 31,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['users with daily print volume ≥1,000,000 pages', 'departments', 'total page count per department'], 'relations': ['user_to_department (users.User_ID → users.Department)', 'print_jobs_to_users (print_jobs.User_ID → users.User_ID)', 'department_to_page_count (Department → Total_Page_Count)'], 'intent': 'query_department_distribution_and_rank_top_5', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000000], 'units': {'page_count': 'pages'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'users', 'pk_column': 'User_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'User_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '用户ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Job_Date', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '任务日期', 'examples': ['2023-01-16 10:00:00', '2023-02-21 11:00:00', '2023-03-11 12:00:00', '2023-04-06 09:00:00', '2023-05-13 10:00:00']}, {'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}], 'printer.users': [{'column': 'User_ID'}, {'column': 'Department'}]}}\nA hypothetical reasoning question is as follows:\nAssuming there are users who submit a daily printing task volume reaching 1,000,000 pages (normal value <1,000 pages), please query the department distribution of these users and rank the top 5 departments in descending order by the total page count.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT u.Department, SUM(pj.Page_Count) AS total_pages FROM users u JOIN print_jobs pj ON u.User_ID = pj.User_ID WHERE pj.Page_Count >= 1000000 GROUP BY u.Department ORDER BY total_pages DESC LIMIT 5;",
        "db_id": "printer"
    },
    {
        "id": 32,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['print_jobs', 'users', 'printers', 'departments'], 'relations': ['print_jobs_to_users (User_ID)', 'print_jobs_to_printers (Printer_ID)', 'users_to_departments (Department)'], 'intent': 'calculate_total_electricity_consumption_per_department', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['Page_Count', 'Print_Speed', 'Power_Consumption'], 'units': {'power_consumption': 'W (Watts)', 'print_speed': 'pages per minute', 'time': 'hours (derived from Page_Count / Print_Speed / 60)', 'energy': 'kWh (W * (Page_Count / Print_Speed / 60) / 1000)'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}, {'pk_table': 'users', 'pk_column': 'User_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Job_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印任务唯一标识', 'examples': ['1', '20', '30', '31', '100']}, {'column': 'User_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '用户ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}, {'column': 'Status', 'type': 'ENUM', 'primary_key': False, 'comment': '任务状态', 'examples': ['Completed', 'Pending']}], 'printer.users': [{'column': 'User_ID'}, {'column': 'Department'}], 'printer.printers': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}, {'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}, {'column': 'Print_Speed', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '打印速度（如 30 ppm）', 'examples': ['30 ppm', '28 ppm', '25 ppm', '33 ppm', '35 ppm']}]}}\nA physical knowledge question is as follows:\nCalculate the total electricity consumption (in kilowatt-hours) of print tasks completed by users in each department.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT u.Department, SUM((p.Page_Count / (1 + p.Duplex) / pr.Print_Speed / 60) * (pr.Power_Consumption / 1000)) AS Total_Energy_kWh FROM users u JOIN print_jobs p ON u.User_ID = p.User_ID JOIN printers pr ON p.Printer_ID = pr.Printer_ID GROUP BY u.Department;",
        "db_id": "printer"
    },
    {
        "id": 33,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['print_jobs', 'users', 'printers'], 'relations': ['print_jobs.User_ID → users.User_ID', 'print_jobs.Printer_ID → printers.Printer_ID'], 'intent': 'calculate_average_time_per_role_for_single_page_jobs', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1, 60], 'units': {'time': 'seconds', 'print_speed': 'pages per minute', 'conversion': '60 seconds / print_speed = time per single-page job'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}, {'pk_table': 'users', 'pk_column': 'User_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Job_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印任务唯一标识', 'examples': ['1', '20', '30', '31', '100']}, {'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}, {'column': 'User_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '用户ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}], 'printer.users': [{'column': 'Role'}], 'printer.printers': [{'column': 'Print_Speed', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '打印速度（如 30 ppm）', 'examples': ['30 ppm', '28 ppm', '25 ppm', '33 ppm', '35 ppm']}]}}\nA mathematical logic question is as follows:\nStatistics the average time spent (in seconds) on single-page printing tasks by different user roles (Role).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT u.Role, SUM(p.Page_Count * (CASE WHEN p.Color_Usage = 'Color' THEN 1.2 ELSE 1 END) / pr.Print_Speed * 60) / SUM(p.Page_Count) AS Avg_Time_Per_Page FROM users u JOIN print_jobs p ON u.User_ID = p.User_ID JOIN printers pr ON p.Printer_ID = pr.Printer_ID GROUP BY u.Role ORDER BY Avg_Time_Per_Page;",
        "db_id": "printer"
    },
    {
        "id": 34,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Department', 'Paper_Size'], 'relations': ['user_department (User_ID → Department)', 'print_job_paper_size (Job_ID → Paper_Size)'], 'intent': 'analyze_most_common_paper_size_per_department', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'count': 'number of print jobs'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'users', 'pk_column': 'User_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Paper_Size', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '纸张尺寸', 'examples': ['A4', 'Letter', 'Legal', 'A3']}, {'column': 'User_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '用户ID', 'examples': ['1', '2', '3', '4', '5']}], 'printer.users': [{'column': 'Department'}]}}\nA common sense reasoning question is as follows:\nAnalyze the most commonly used paper size (Paper_Size) among users in each department.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT u.Department, p.Paper_Size, COUNT(*) AS Usage_Count FROM users u JOIN print_jobs p ON u.User_ID = p.User_ID GROUP BY u.Department, p.Paper_Size ORDER BY u.Department, Usage_Count DESC;",
        "db_id": "printer"
    },
    {
        "id": 35,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['user ID 999', '10,000,000-page full-color duplex printing task'], 'relations': ['user_to_print_job (User_ID 999 → print_jobs.Job_ID)', 'print_job_to_printer (Job_ID → Printer_ID)', 'printer_to_consumables (Printer_ID → Consumable_ID)'], 'intent': 'calculate_ink_consumption_and_replacement_frequency', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [10000000], 'units': {'page_count': 'pages (raw count)', 'ink_consumption': 'ml/liters (implied by Consumables.Capacity unit)', 'replacement_frequency': 'units (count of replacements)'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}, {'pk_table': 'users', 'pk_column': 'User_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'User_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '用户ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}, {'column': 'Color_Usage', 'type': 'ENUM', 'primary_key': False, 'comment': '颜色使用', 'examples': ['Color', 'Monochrome']}, {'column': 'Duplex', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否双面打印（0-否，1-是）', 'examples': ['1', '0']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}], 'printer.consumables': [{'column': 'Type', 'type': 'ENUM', 'primary_key': False, 'comment': '耗材类型', 'examples': ['Toner', 'Ink', 'Paper', 'Drum', 'Fuser']}, {'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}], 'printer.printers': [{'column': 'Model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '型号', 'examples': ['HP LaserJet Pro MFP M428fdw', 'Canon imageCLASS MF644Cdw', 'Epson WorkForce Pro WF-4740', 'Brother HL-L8360CDW', 'Xerox VersaLink C405']}], 'printer.users': [{'column': 'User_ID'}]}}\nA hypothetical reasoning question is as follows:\nCalculate the ink consumption and replacement frequency for a 10,000,000-page full-color duplex printing task with user ID 999.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 10000000 * 0.05 * 2 AS Total_Ink_ml, CEIL((10000000 * 0.05 * 2) / 500) AS Replacement_Count;",
        "db_id": "printer"
    },
    {
        "id": 36,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['users', 'printers', 'print_jobs', 'maintenance_logs'], 'relations': ['print_jobs_to_users (User_ID)', 'print_jobs_to_printers (Printer_ID)', 'printers_to_maintenance_logs (Printer_ID)', 'sum_page_count_to_power_ratio (> 10x)'], 'intent': 'filter_users_by_page_power_ratio_and_maintenance', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10], 'units': {'page_count': 'pages', 'power_consumption': 'watts (assumed based on context)', 'ratio': 'pages per watt'}, 'foreign_keys': [{'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}, {'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'User_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '用户ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}], 'printer.printers': [{'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}], 'printer.maintenance_logs': [{'column': 'Printer_ID'}]}}\nA physical knowledge question is as follows:\nFind all users whose total page count from cumulative print tasks consumes more than 10 times the printer's rated power, and among these users, return those who do not appear in the maintenance records.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT u.User_ID, u.Name FROM users u JOIN print_jobs pj ON u.User_ID = pj.User_ID JOIN printers pr ON pj.Printer_ID = pr.Printer_ID WHERE pr.Power_Consumption * 1.2 * SUM(pj.Page_Count) / pr.Print_Speed > pr.Power_Consumption * 10 AND NOT EXISTS (SELECT 1 FROM maintenance_logs ml WHERE ml.Printer_ID = pr.Printer_ID) GROUP BY u.User_ID, u.Name HAVING SUM(pj.Page_Count) > 0;",
        "db_id": "printer"
    },
    {
        "id": 37,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['print_jobs', 'users', 'consumables', 'department', 'Page_Count', 'Cost', 'maintenance_logs'], 'relations': ['print_jobs_to_users (User_ID)', 'print_jobs_to_printers (Printer_ID)', 'printers_to_consumables (Printer_ID)', 'users_to_departments (Department)', 'consumables_to_cost (Cost)'], 'intent': 'calculate_average_printing_cost_and_filter_users', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'cost': 'currency (implied by Cost column)', 'page_count': 'pages (unitless count)', 'average_cost': 'currency per page'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}, {'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'users', 'pk_column': 'User_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}, {'column': 'User_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '用户ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}], 'printer.users': [{'column': 'Department'}, {'column': 'User_ID'}], 'printer.consumables': [{'column': 'Cost', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '耗材成本（美元）', 'examples': ['100.0', '120.0', '80.0', '90.0', '110.0']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}], 'printer.maintenance_logs': [{'column': 'Printer_ID'}]}}\nA mathematical logic question is as follows:\nCalculate the average single-page printing cost for each user's department, and return users within the department whose cost is below the average and do not appear in the high-volume consumable replacement records.\nyour response just have a SQL without anything.\n",
        "solution": "WITH DeptCost AS (SELECT u.Department, SUM(c.Cost / c.Capacity * pj.Page_Count) / SUM(pj.Page_Count) AS DeptAvg FROM users u JOIN print_jobs pj ON u.User_ID = pj.User_ID JOIN consumables c ON pj.Printer_ID = c.Printer_ID WHERE c.Type IN ('Toner', 'Ink') GROUP BY u.Department) SELECT u.User_ID, u.Name FROM users u JOIN DeptCost dc ON u.Department = dc.Department WHERE (c.Cost / c.Capacity) < dc.DeptAvg AND NOT EXISTS (SELECT 1 FROM maintenance_logs ml WHERE ml.Printer_ID = c.Printer_ID AND ml.Maintenance_Type = 'Replacement');",
        "db_id": "printer"
    },
    {
        "id": 38,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['users', 'duplex printing', 'department tray capacity', 'consumable replacements'], 'relations': ['user_to_print_jobs (users.User_ID → print_jobs.User_ID)', 'print_jobs_to_printers (print_jobs.Printer_ID → printers.Printer_ID)', 'printer_to_tray_capacity (printers.Tray_Capacity)', 'printer_to_consumables (printers.Printer_ID → consumables.Printer_ID)', 'printer_to_department (printers.Location → users.Department assumption)'], 'intent': 'retrieve_users_with_conditions', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'tray_capacity': 'unknown (as per schema)'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}, {'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}, {'pk_table': 'users', 'pk_column': 'User_ID'}], 'tableinfo': {'printer.users': [{'column': 'User_ID'}, {'column': 'Department'}], 'printer.print_jobs': [{'column': 'User_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '用户ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Duplex', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否双面打印（0-否，1-是）', 'examples': ['1', '0']}], 'printer.printers': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}, {'column': 'Tray_Capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '纸盘容量（张）', 'examples': ['250', '300', '150', '350', '500']}, {'column': 'Location', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '安装位置', 'examples': ['Office A', 'Office B', 'Office C', 'Office D', 'Office E']}], 'printer.consumables': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Last_Replacement_Date', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '上次更换日期', 'examples': ['2023-01-15', '2023-02-20', '2023-03-10', '2023-04-05', '2023-05-12']}], 'printer.maintenance_logs': [{'column': 'Printer_ID'}, {'column': 'Maintenance_Type'}]}}\nA common sense reasoning question is as follows:\nRetrieve users who have never performed duplex printing (Duplex=1) and whose department's tray capacity (Tray_Capacity) is below the average, and these users have not participated in consumable replacements.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT u.User_ID, u.Name FROM users u JOIN print_jobs pj ON u.User_ID = pj.User_ID JOIN printers pr ON pj.Printer_ID = pr.Printer_ID WHERE pr.Power_Consumption * 1.2 / pr.Print_Speed > pr.Power_Consumption * 10 AND NOT EXISTS (SELECT 1 FROM maintenance_logs ml WHERE ml.Printer_ID = pr.Printer_ID) GROUP BY u.User_ID, u.Name HAVING SUM(pj.Page_Count) > 0;",
        "db_id": "printer"
    },
    {
        "id": 39,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['print job with 1,000,000 pages', 'consumable capacity 5,000 pages', 'current remaining ink level 0.1%', 'users needing ink replacement'], 'relations': ['print_job_to_user (Job_ID → User_ID)', 'print_job_to_printer (Printer_ID → Printer_ID)', 'printer_to_consumables (Printer_ID → Printer_ID)', 'printer_to_maintenance_logs (Printer_ID → Printer_ID)', 'ink_usage_ratio (1,000,000 pages / 5,000 pages capacity = 200 replacements needed)'], 'intent': 'identify_users_requiring_ink_replacement_without_prior_maintenance', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000000, 5000, 0.1], 'units': {'pages': 'standard A4 pages', 'consumable_capacity': 'pages per ink cartridge', 'ink_level': 'percentage of remaining ink'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}, {'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}, {'pk_table': 'users', 'pk_column': 'User_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Job_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印任务唯一标识', 'examples': ['1', '20', '30', '31', '100']}, {'column': 'User_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '用户ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}], 'printer.printers': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}], 'printer.consumables': [{'column': 'Consumable_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '耗材唯一标识', 'examples': ['1', '90', '100', '101', '110']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}, {'column': 'Next_Replacement_Date', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '预计更换日期', 'examples': ['2023-07-15', '2023-08-20', '2023-09-10', '2023-10-05', '2023-11-12']}], 'printer.maintenance_logs': [{'column': 'Maintenance_Date'}], 'printer.users': [{'column': 'User_ID'}, {'column': 'Name'}]}}\nA hypothetical reasoning question is as follows:\nAssuming a user's single print job consists of 1,000,000 pages, the consumable capacity is 5,000 pages, and the current remaining ink level is 0.1%, return users who need to replace the ink but have not completed maintenance before the Next_Replacement_Date.\nyour response just have a SQL without anything.\n",
        "solution": "WITH DeptCost AS (SELECT u.Department, SUM(c.Cost / c.Capacity * pj.Page_Count) / SUM(pj.Page_Count) AS DeptAvg FROM users u JOIN print_jobs pj ON u.User_ID = pj.User_ID JOIN consumables c ON pj.Printer_ID = c.Printer_ID WHERE c.Type IN ('Toner', 'Ink') GROUP BY u.Department) SELECT u.User_ID, u.Name FROM users u JOIN DeptCost dc ON u.Department = dc.Department JOIN print_jobs pj ON u.User_ID = pj.User_ID JOIN consumables c ON pj.Printer_ID = c.Printer_ID WHERE (c.Cost / c.Capacity) < dc.DeptAvg AND NOT EXISTS (SELECT 1 FROM maintenance_logs ml WHERE ml.Printer_ID = c.Printer_ID AND ml.Maintenance_Type = 'Replacement');",
        "db_id": "printer"
    },
    {
        "id": 40,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laser printer', '1,000 pages', 'monochrome documents', 'power consumption', 'printing speed'], 'relations': ['printer_to_specs (printer → power_consumption, print_speed)', 'job_to_pages (print_job → page_count=1000)', 'color_usage_restriction (monochrome)'], 'intent': 'calculate_energy_consumption_for_printing', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1000], 'units': {'power': 'watts (W)', 'speed': 'pages per minute (ppm)', 'time': 'hours (h)', 'energy': 'kilowatt-hours (kWh)', 'conversion': 'Energy (kWh) = Power (W) × Time (h) / 1000'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}, {'column': 'Print_Speed', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '打印速度（如 30 ppm）', 'examples': ['30 ppm', '28 ppm', '25 ppm', '33 ppm', '35 ppm']}], 'printer.print_jobs': [{'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}, {'column': 'Color_Usage', 'type': 'ENUM', 'primary_key': False, 'comment': '颜色使用', 'examples': ['Color', 'Monochrome']}]}}\nA physical knowledge question is as follows:\nSuppose a certain laser printer, during continuous printing, calculates its total energy consumption (in kilowatt-hours) when processing 1,000 pages of monochrome documents based on its power consumption and printing speed.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Printer_ID, Model, (1000 / CAST(SUBSTRING(Print_Speed, 1, LEN(Print_Speed)-3) AS FLOAT)) * Power_Consumption / 1000 / 60 AS Total_Energy_kWh FROM printers WHERE Type = 'Laser' AND Color_Support = 'Monochrome';",
        "db_id": "printer"
    },
    {
        "id": 41,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['specific manufacturer', 'printers from manufacturer', 'total production costs', 'consumables costs', 'maintenance costs', 'market selling price', 'profit margin percentage'], 'relations': ['manufacturer_to_printers (Manufacturer_ID → Printer records)', 'printer_to_consumables (Printer_ID → Consumable cost records)', 'printer_to_maintenance (Printer_ID → Maintenance cost records)', 'profit_formula (Profit Margin = (Selling Price - Total Cost)/Selling Price × 100%)'], 'intent': 'calculate_annual_profit_contribution_rate', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['manufacturers.Revenue', 'manufacturers.Production_Volume_Total', 'consumables.Cost', 'maintenance_logs.Cost'], 'units': {'costs': 'currency (USD implied)', 'selling_price': 'currency (USD derived from manufacturer revenue/volume)', 'profit_margin': 'percentage (%)'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}, {'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.manufacturers': [{'column': 'Manufacturer_ID'}, {'column': 'Name'}, {'column': 'Revenue'}, {'column': 'Production_Volume_Total'}], 'printer.printers': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}, {'column': 'Manufacturer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '制造商ID', 'examples': ['1', '2', '3', '4', '5']}], 'printer.consumables': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Cost', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '耗材成本（美元）', 'examples': ['100.0', '120.0', '80.0', '90.0', '110.0']}], 'printer.maintenance_logs': [{'column': 'Printer_ID'}, {'column': 'Cost'}]}}\nA mathematical logic question is as follows:\nStatistics the annual profit contribution rate of all printers from a specific manufacturer, requiring consideration of the relationship between their total production costs (including consumables and maintenance costs) and the market selling price, and calculating the profit margin percentage.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT m.Manufacturer_ID, m.Name, ((m.Revenue - (COALESCE(c.TotalConsumableCost,0) + COALESCE(ml.TotalMaintenanceCost,0))) / m.Revenue * 100) AS Profit_Margin_Percent FROM manufacturers m LEFT JOIN (SELECT p.Manufacturer_ID, SUM(c.Cost) AS TotalConsumableCost FROM printers p JOIN consumables c ON p.Printer_ID = c.Printer_ID GROUP BY p.Manufacturer_ID) c ON m.Manufacturer_ID = c.Manufacturer_ID LEFT JOIN (SELECT p.Manufacturer_ID, SUM(ml.Cost) AS TotalMaintenanceCost FROM printers p JOIN maintenance_logs ml ON p.Printer_ID = ml.Printer_ID GROUP BY p.Manufacturer_ID) ml ON m.Manufacturer_ID = ml.Manufacturer_ID;",
        "db_id": "printer"
    },
    {
        "id": 42,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['drum unit model', 'consumable capacity', 'current consumable level', 'historical department average daily printing volume'], 'relations': ['consumable_to_printer (consumables.Printer_ID → printers.Printer_ID)', 'print_job_to_user (print_jobs.User_ID → users.User_ID)', 'consumable_remaining_pages (remaining_pages = Capacity - Current_Level)'], 'intent': 'calculate_remaining_lifespan', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['consumables.Capacity', 'consumables.Current_Level'], 'units': {'capacity': 'pages (remaining_pages = Capacity - Current_Level)', 'lifespan': 'days (remaining_pages / average_daily_pages)'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'users', 'pk_column': 'User_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}], 'printer.print_jobs': [{'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}], 'printer.users': [{'column': 'Department'}]}}\nA common sense reasoning question is as follows:\nBased on the consumable capacity and the number of pages for printing tasks, estimate the remaining lifespan (in days) of a specific model of drum unit, assuming the average daily printing volume is the historical department average.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Printer_ID, Model, (1000 / CAST(SUBSTRING(Print_Speed, 1, LENGTH(Print_Speed)-3) AS FLOAT)) * Power_Consumption / 1000 / 60 AS Total_Energy_kWh FROM printers WHERE Type = 'Laser' AND Color_Support = 'Monochrome';",
        "db_id": "printer"
    },
    {
        "id": 43,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['3D printer', 'maintenance cost', '100 years', '200% annual growth', 'initial maintenance cost $1000'], 'relations': ['printer_to_maintenance_cost (direct cost projection)', 'exponential_growth_model (Cost_year_n = Initial_cost × (1 + growth_rate)^(n-1))'], 'intent': 'calculate_future_maintenance_cost', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000, 200, 100], 'units': {'currency': 'USD ($)', 'growth_rate': 'percentage (200% → annual multiplier of 3)', 'time': 'years'}, 'foreign_keys': [], 'primary_keys': [], 'tableinfo': 'This sql query does not need table and columns information as it is about mathematical calculations.'}\nA hypothetical reasoning question is as follows:\nIf a 3D printer operates continuously for 100 years without interruption, assuming its maintenance cost grows exponentially (increasing by 200% annually), calculate its single-year maintenance cost in the 100th year (the initial annual maintenance cost is $1000).\nyour response just have a SQL without anything.\n",
        "solution": "WITH RECURSIVE YearlyCost (Year, Annual_Cost) AS (SELECT 1, 1000.0 UNION ALL SELECT Year+1, Annual_Cost*3 FROM YearlyCost WHERE Year < 100) SELECT Annual_Cost AS Year_100_Cost FROM YearlyCost WHERE Year = 100;",
        "db_id": "printer"
    },
    {
        "id": 44,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['printer_max_resolution', 'ink_density_1.2_g/cm³', 'print_area_1_m²', 'ink_coverage_80%'], 'relations': ['printer_to_specs (max_resolution)', 'coverage_percentage (80%)', 'area_to_volume_conversion (1 m² → 10,000 cm²)'], 'intent': 'calculate_ink_mass_for_printing', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1.2, 1, 80], 'units': {'area': 'm² → cm² (1 m² = 10,000 cm²)', 'density': 'g/cm³', 'coverage': 'percentage (80% → 0.8)', 'mass': 'grams (calculated)'}, 'foreign_keys': [{'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Max_Resolution', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '最大分辨率（如 1200x1200 dpi）', 'examples': ['1200x1200 dpi', '4800x1200 dpi', '2400x600 dpi', '1200x2400 dpi', '1200x1200dpi']}]}}\nA physical knowledge question is as follows:\nCalculate the mass of ink required to print a 1-square-meter color image at the highest resolution of a certain inkjet printer (assuming an ink density of 1.2 g/cm³ and 80% coverage).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT c.Consumable_ID, (c.Capacity - SUM(pj.Page_Count)) / (AVG(pj.Page_Count / NULLIF(DATEDIFF((SELECT MAX(Job_Date) FROM print_jobs WHERE Printer_ID = c.Printer_ID), (SELECT MIN(Job_Date) FROM print_jobs WHERE Printer_ID = c.Printer_ID)), 0)) * (1 + AVG(pj.Duplex)*0.5)) AS Remaining_Days FROM consumables c JOIN print_jobs pj ON c.Printer_ID = pj.Printer_ID WHERE c.Type = 'Drum' AND c.Model = 'X-DrumUltra' GROUP BY c.Consumable_ID, c.Capacity;",
        "db_id": "printer"
    },
    {
        "id": 45,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['printer manufacturers', 'R&D expenditures', 'employee count', 'production volume'], 'relations': ['manufacturer_to_financials (Manufacturer_ID → R&D_Spending, Employee_Count, Production_Volume_Total)', 'efficiency_ratio (Production_Volume / R&D_Spending)', 'employee_normalized_efficiency (Efficiency_Ratio / Employee_Count)'], 'intent': 'calculate_research_development_efficiency_index', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'R&D_spending': 'USD (dollars)', 'employee_count': 'number of employees', 'production_volume': 'units produced annually', 'efficiency_index': 'production_units/(R&D_dollar * employee_count) → unit efficiency index'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}], 'tableinfo': {'printer.manufacturers': [{'column': 'R&D_Spending'}, {'column': 'Employee_Count'}, {'column': 'Production_Volume_Total'}]}}\nA mathematical logic question is as follows:\nConstruct a research and development efficiency index for printer manufacturers, integrating their R&D expenditures, employee count, and production volume, to calculate the unit increase in production output per dollar spent on R&D.\nyour response just have a SQL without anything.\n",
        "solution": "WITH RECURSIVE YearlyCost (Year, Annual_Cost) AS (SELECT 1, CAST(1000.0 AS DECIMAL(65,2)) UNION ALL SELECT Year+1, Annual_Cost*3 FROM YearlyCost WHERE Year < 100) SELECT Annual_Cost AS Year_100_Cost FROM YearlyCost WHERE Year = 100;",
        "db_id": "printer"
    },
    {
        "id": 46,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['department', 'paper_size A4', 'paper_size Letter', 'duplex printing ratio'], 'relations': ['department_to_print_jobs (via User_ID)', 'paper_size_distribution (A4:70%, Letter:30%)', 'duplex_usage_ratio (derived from Duplex field)'], 'intent': 'predict_paper_consumption', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [70, 30], 'units': {'paper_consumption': 'sheets (Page_Count adjusted by Duplex setting)', 'distribution': '% (A4 70%, Letter 30%)', 'calculation': 'Single-sided: 1 sheet per page | Duplex: 0.5 sheets per page'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'users', 'pk_column': 'User_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Paper_Size', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '纸张尺寸', 'examples': ['A4', 'Letter', 'Legal', 'A3']}, {'column': 'Duplex', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否双面打印（0-否，1-是）', 'examples': ['1', '0']}, {'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}], 'printer.users': [{'column': 'Department'}]}}\nA common sense reasoning question is as follows:\nPredict the paper consumption for a certain department next month based on the historical distribution of printing task paper sizes (A4 accounts for 70%, Letter for 30%) and the duplex printing ratio.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT u.Department, (SUM(CASE WHEN pj.Paper_Size = 'A4' THEN pj.Page_Count / (1 + pj.Duplex) ELSE 0 END) * 0.7 + SUM(CASE WHEN pj.Paper_Size = 'Letter' THEN pj.Page_Count / (1 + pj.Duplex) ELSE 0 END) * 0.3) AS Predicted_Sheets FROM print_jobs pj JOIN users u ON pj.User_ID = u.User_ID WHERE u.Department = 'Sales' GROUP BY u.Department;",
        "db_id": "printer"
    },
    {
        "id": 47,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['print job with 10^18 pages', 'toner capacity rated for 5000 pages', 'current remaining 99% toner capacity'], 'relations': ['page_count_to_toner_consumption (10^18 pages → toner usage calculation)', 'current_toner_level (99% of 5000 pages = 4950 pages)', 'toner_capacity (5000 pages)'], 'intent': 'calculate_theoretical_remaining_toner_percentage', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1e+18, 99, 5000], 'units': {'pages': 'pages (count)', 'toner_capacity': 'pages (per toner rating)', 'percentage': '% (remaining toner)'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}], 'printer.consumables': [{'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a print job is submitted with 10^18 pages of documents, using the current remaining 99% toner capacity (rated for 5000 pages), calculate the theoretical remaining percentage of toner after executing this task.\nyour response just have a SQL without anything.\n",
        "solution": "WITH YearlyData AS (SELECT Manufacturer_ID, Founded_Year, `R&D_Spending`, Employee_Count, Production_Volume_Total, LAG(Production_Volume_Total) OVER (PARTITION BY Manufacturer_ID ORDER BY Founded_Year) AS Prev_Production FROM manufacturers) SELECT m.Name, ((yd.Production_Volume_Total - yd.Prev_Production) / yd.`R&D_Spending`) * (1.0 / yd.Employee_Count) AS `R&D_Efficiency` FROM YearlyData yd JOIN manufacturers m ON yd.Manufacturer_ID = m.Manufacturer_ID WHERE yd.Prev_Production IS NOT NULL;",
        "db_id": "printer"
    },
    {
        "id": 48,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Rain gauge number 1', 'October 1, 2023', 'October 31, 2023'], 'relations': ['rain_gauge_to_data (GaugeId → RainfallData)', 'time_range_filter (2023-10-01 to 2023-10-31)'], 'intent': 'query_total_rainfall', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [1, '2023-10-01', '2023-10-31'], 'units': {'rainfall': 'mm (millimeters)', 'time': 'YYYY-MM-DD format'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}]}}\nA physical knowledge question is as follows:\nQuery the total rainfall recorded by rain gauge number 1 from October 1, 2023 to October 31, 2023.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1, SUM(RainfallMm) AS TotalRainfallMm FROM RainfallData WHERE CollectionTime BETWEEN '2023-10-01 00:00:00' AND '2023-10-31 23:59:59' GROUP BY 1;",
        "db_id": "RainGauge"
    },
    {
        "id": 49,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 1', 'year 2023'], 'relations': ['gauge_to_data (rain_gauge_id=1 → rainfall_data)', 'time_period (2023 coverage)'], 'intent': 'calculate_ratio_and_trend_analysis', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1, 2023], 'units': {'rainfall_intensity': 'mm/h (millimeters per hour)', 'ratio': 'unitless (average/max)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}]}}\nA mathematical logic question is as follows:\nCalculate the ratio of the average rainfall intensity to the maximum rainfall intensity for rain gauge No. 1 throughout the year 2023, and analyze its trend of change.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1, AnalysisTime, DataStartTime, DataEndTime, (AverageRainfallIntensityMmH / MaxRainfallIntensityMmH) AS IntensityRatio, AnalysisResult FROM HistoricalRainfallAnalysis WHERE DataStartTime >= '2023-01-01 00:00:00' AND DataEndTime <= '2023-12-31 23:59:59' ORDER BY AnalysisTime;",
        "db_id": "RainGauge"
    },
    {
        "id": 50,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Rain gauge No. 1', 'Historical rainfall data', 'Extreme weather event threshold', 'Specific time period'], 'relations': ['rain_gauge_to_data (GaugeId → RainfallData)', 'time_period_to_analysis (DataStartTime/DataEndTime → HistoricalRainfallAnalysis)', 'threshold_to_rule (ThresholdValue → RainfallWarningRule)'], 'intent': 'determine_extreme_weather_event', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['Specific time period start/end times (unspecified values)'], 'units': {'rainfall': 'mm (millimeters)', 'intensity': 'mm/h (millimeters per hour)', 'threshold': 'Rule-defined thresholds (e.g., mm, mm/h)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}, {'column': 'MaxRainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '25.0', '12.0', '8.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA common sense reasoning question is as follows:\nBased on historical data analysis, determine whether the rainfall recorded by rain gauge No. 1 during a specific time period constitutes an extreme weather event.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, DataStartTime, DataEndTime, TotalRainfallMm, CASE WHEN TotalRainfallMm > (SELECT AVG(TotalRainfallMm) * 2 FROM HistoricalRainfallAnalysis WHERE GaugeId = 1) THEN '极端天气事件' ELSE '非极端天气事件' END AS WeatherEventType FROM HistoricalRainfallAnalysis WHERE GaugeId = 1 AND DataStartTime >= '2023-01-01 00:00:00' AND DataEndTime <= '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 51,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 1', 'total rainfall 10,000 millimeters', 'pressure on ground', 'environmental impact'], 'relations': ['rain_gauge_to_historical_data (rain gauge No. 1 → HistoricalRainfallAnalysis.TotalRainfallMm)', 'rainfall_to_pressure (10,000 mm → pressure calculation using fluid mechanics)', 'pressure_to_environment (pressure → environmental impact analysis)', 'rainfall_to_warning_rules (10,000 mm → RainfallWarningRule.ThresholdValue comparison)'], 'intent': 'calculate_pressure_exerted_by_rainfall_and_analyze_environmental_impact', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [10000], 'units': {'rainfall': 'mm (millimeters)', 'pressure': 'Pa (Pascals, derived via P = ρgh, where h = 10 m, ρ = 1000 kg/m³, g = 9.81 m/s²)', 'conversion': '10,000 mm = 10 meters (unit conversion for pressure calculation)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.HistoricalRainfallAnalysis': [{'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}, {'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'RainGauge.RainGauge': [{'column': 'ElevationMeters', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1200.5', '50.0', '10.0', '4500.0', '1800.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['9', '8', '6', '10', '7']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the total rainfall measured by rain gauge No. 1 reaches 10,000 millimeters during a certain period, calculate the pressure it exerts on the ground and analyze its environmental impact.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, DataStartTime, DataEndTime, TotalRainfallMm, (10000 * 1000 * 9.81 / 1000) AS PressurePa, CASE WHEN TotalRainfallMm >= 10000 THEN '可能导致洪水、土壤侵蚀等环境影响' ELSE '环境影响较小' END AS EnvironmentalImpact FROM HistoricalRainfallAnalysis WHERE GaugeId = 1 AND TotalRainfallMm >= 10000;",
        "db_id": "RainGauge"
    },
    {
        "id": 52,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 1', 'specific time period'], 'relations': ['rain_gauge_to_data (No. 1 → RainfallData)', 'time_period_to_collection_time (period → CollectionTime)'], 'intent': 'calculate_mass_of_water_from_rainfall', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [], 'units': {'rainfall': 'mm (millimeters)', 'mass': 'kg (kilograms, derived from 1 mm = 1 L/m² and water density 1 kg/L)', 'conversion': 'mass_kg = total_rainfall_mm * collection_area_m²'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}]}}\nA physical knowledge question is as follows:\nCalculate the mass of water corresponding to the rainfall collected by rain gauge No. 1 during a specific time period.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, DataStartTime, DataEndTime, TotalRainfallMm, (TotalRainfallMm * 1 * 1000 / 1000) AS WaterMassKg FROM HistoricalRainfallAnalysis WHERE GaugeId = 1 AND DataStartTime >= '2023-01-01 00:00:00' AND DataEndTime <= '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 53,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 1', 'specified time period', 'rainfall intensity'], 'relations': ['gauge_to_data (rain gauge No. 1 → RainfallData)', 'time_to_intensity (timestamp → rainfall intensity)'], 'intent': 'calculate_rate_of_change_in_rainfall_intensity_and_analyze_trend', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'rainfall_intensity': 'mm/h', 'time_interval': 'hours (implied for CollectionTime in RainfallData)', 'rate_of_change': 'mm/h² (rainfall intensity per unit time)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}]}}\nA mathematical logic question is as follows:\nCalculate the rate of change in rainfall intensity at rain gauge No. 1 over a specified time period and analyze its trend of variation.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT t1.GaugeId, t1.CollectionTime AS Time1, t2.CollectionTime AS Time2, t1.RainfallIntensityMmH AS Intensity1, t2.RainfallIntensityMmH AS Intensity2, (t2.RainfallIntensityMmH - t1.RainfallIntensityMmH) / (UNIX_TIMESTAMP(t2.CollectionTime) - UNIX_TIMESTAMP(t1.CollectionTime)) * 3600 AS ChangeRate FROM RainfallData t1 JOIN RainfallData t2 ON t1.GaugeId = t2.GaugeId AND t2.CollectionTime > t1.CollectionTime WHERE t1.GaugeId = 1 AND t1.CollectionTime >= '2023-01-01 00:00:00' AND t2.CollectionTime <= '2023-12-31 23:59:59' ORDER BY t1.CollectionTime;",
        "db_id": "RainGauge"
    },
    {
        "id": 54,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge number 1', 'historical rainfall data', 'flood threshold', 'time period'], 'relations': ['rain_gauge_to_historical_data (1→HistoricalRainfallAnalysis)', 'rain_gauge_to_realtime_data (1→RainfallData)', 'threshold_to_rainfall (RainfallWarningRule→rainfall metrics)'], 'intent': 'flood_risk_assessment', 'reasoning_type': 'physical knowledge reasoning + common sense understanding reasoning', 'numerical_values': ['TotalRainfallMm', 'MaxRainfallIntensityMmH', 'ThresholdValue'], 'units': {'rainfall': 'mm (millimeters)', 'intensity': 'mm/h (millimeters per hour)', 'threshold': 'Rule-specific units (from ThresholdUnit)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'DataStartTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-09-01 00:00:00', '2023-08-01 00:00:00', '2023-07-01 00:00:00', '2023-06-01 00:00:00', '2023-05-01 00:00:00']}, {'column': 'DataEndTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-09-30 23:59:59', '2023-08-31 23:59:59', '2023-07-31 23:59:59', '2023-06-30 23:59:59', '2023-05-31 23:59:59']}, {'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}, {'column': 'MaxRainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '25.0', '12.0', '8.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA common sense reasoning question is as follows:\nBased on historical data analysis, determine whether the rainfall measured by rain gauge number 1 during a certain time period could potentially cause a flood.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, DataStartTime, DataEndTime, TotalRainfallMm, CASE WHEN TotalRainfallMm > (SELECT AVG(TotalRainfallMm) * 3 FROM HistoricalRainfallAnalysis WHERE GaugeId = 1) THEN '可能导致洪水' ELSE '洪水风险较低' END AS FloodRisk FROM HistoricalRainfallAnalysis WHERE GaugeId = 1 AND DataStartTime >= '2023-01-01 00:00:00' AND DataEndTime <= '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 55,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Rain Gauge No. 2', 'rainfall intensity 1000 mm/hour'], 'relations': ['gauge_to_elevation (Gauge No. 2 → ElevationMeters)', 'intensity_to_force (1000 mm/h → impact force calculation)', 'threshold_to_severity (1000 mm/h → RainfallWarningRule.SeverityLevel)'], 'intent': 'calculate_impact_force_and_environmental_effects', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1000], 'units': {'rainfall_intensity': 'mm/h', 'elevation': 'meters', 'force': 'N/m² (derived from kinetic energy formula)', 'threshold_conversion': '1000 mm/h exceeds ThresholdValue in RainfallWarningRule'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'ElevationMeters', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1200.5', '50.0', '10.0', '4500.0', '1800.0']}], 'RainGauge.RainfallData': [{'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['9', '8', '6', '10', '7']}]}}\nA hypothetical reasoning question is as follows:\nAssuming that the rainfall intensity at Rain Gauge No. 2 reaches 1000 mm/hour during a certain time period, calculate the impact force it generates on the ground and analyze its potential environmental effects.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, DataStartTime, DataEndTime, MaxRainfallIntensityMmH, (1000 * 1 * 1000 * 9.81 / 3600) AS ImpactForceN, CASE WHEN MaxRainfallIntensityMmH >= 1000 THEN '可能导致洪水、土壤侵蚀等环境影响' ELSE '环境影响较小' END AS EnvironmentalImpact FROM HistoricalRainfallAnalysis WHERE GaugeId = 2 AND MaxRainfallIntensityMmH >= 1000;",
        "db_id": "RainGauge"
    },
    {
        "id": 56,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n```json\n{\n  \"entities\": [\"rain gauge No. 1\", \"altitude\", \"atmospheric pressure\"],\n  \"relations\": [\"rain_gauge_to_altitude (rain gauge No. 1 → elevation)\", \"altitude_to_pressure (inverse relationship)\", \"measured_vs_calculated (comparison)\"],\n  \"intent\": \"calculate_elevation_impact_on_pressure_and_compare\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [1],\n  \"units\": {\n    \"altitude\": \"meters (from ElevationMeters column)\",\n    \"pressure\": \"hPa (hectopascals, from AtmosphericPressureHpa column)\",\n    \"conversion\": \"barometric formula: P = P0 * exp(-L*h/T)\"\n  },\n  \"required_tables\": [\"RainGauge\", \"RainfallData\"],\n  \"required_fields\": [\n    \"RainGauge.Id\",\n    \"RainGauge.ElevationMeters\",\n    \"RainfallData.AtmosphericPressureHpa\"\n  ],\n  \"foreign_keys\": {\n    \"RainfallData.GaugeId → RainGauge.Id\"\n  }\n}\n```\nA physical knowledge question is as follows:\nCalculate the influence of the altitude at the location of rain gauge No. 1 on atmospheric pressure, and return the ID of rain gauge No. 1, its altitude, the calculated atmospheric pressure, and the actual measured atmospheric pressure.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RG.Id, RG.ElevationMeters, 1013.25 * EXP(-RG.ElevationMeters / 8400) AS CalculatedPressure, RD.AtmosphericPressureHpa FROM RainGauge RG JOIN RainfallData RD ON RG.Id = RD.GaugeId WHERE RG.Id = 1;",
        "db_id": "RainGauge"
    },
    {
        "id": 57,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 1', 'rainfall (mm)', 'temperature (°C)', 'specific time period'], 'relations': ['gauge_to_data (RainGauge.Id → RainfallData.GaugeId)', 'temporal_filter (CollectionTime BETWEEN DataStartTime AND DataEndTime)', 'regression_dependency (RainfallMm ~ TemperatureCelsius)'], 'intent': 'calculate_linear_regression_and_predict_future_rainfall', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'rainfall': 'mm (millimeters)', 'temperature': '°C (Celsius)', 'time_period': 'datetime range (CollectionTime)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.3', '18.5', '25.0', '20.0', '28.0']}]}}\nA mathematical logic question is as follows:\nCalculate the linear regression relationship between rainfall and temperature for rain gauge No. 1 during a specific time period and predict future rainfall.\nyour response just have a SQL without anything.\n",
        "solution": "WITH Data AS (SELECT TemperatureCelsius AS X, RainfallMm AS Y FROM RainfallData WHERE GaugeId = 1 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59'), Stats AS (SELECT AVG(X) AS X_avg, AVG(Y) AS Y_avg, SUM((X - (SELECT AVG(X) FROM Data)) * (Y - (SELECT AVG(Y) FROM Data))) / SUM((X - (SELECT AVG(X) FROM Data)) * (X - (SELECT AVG(X) FROM Data))) AS slope, AVG(Y) - (SUM((X - (SELECT AVG(X) FROM Data)) * (Y - (SELECT AVG(Y) FROM Data))) / SUM((X - (SELECT AVG(X) FROM Data)) * (X - (SELECT AVG(X) FROM Data)))) * AVG(X) AS intercept FROM Data) SELECT slope, intercept, slope * 25 + intercept AS PredictedRainfall FROM Stats;",
        "db_id": "RainGauge"
    },
    {
        "id": 58,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n```json\n{\n  \"entities\": [\"rain gauge\", \"manufacture date\", \"installation date\", \"aging effect\"],\n  \"relations\": [\n    \"gauge_to_dates (rain gauge → manufacture date & installation date)\",\n    \"aging_impact_assessment (date difference → data accuracy risk)\"\n  ],\n  \"intent\": \"assess_data_accuracy_impact_from_device_age\",\n  \"reasoning_type\": \"common_sense_understanding_reasoning\",\n  \"numerical_values\": [],\n  \"units\": {\n    \"date\": \"YYYY-MM-DD (ISO 8601)\",\n    \"age_calculation\": \"years/months since manufacture/installation\"\n  },\n  \"required_tables\": [\"RainGauge\"],\n  \"required_fields\": [\n    \"RainGauge.ManufactureDate\",\n    \"RainGauge.InstallationDate\"\n  ]\n}\n```\nA common sense reasoning question is as follows:\nBased on the production date and installation date of the rain gauge, determine whether it is likely to affect data accuracy due to aging.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Id, GaugeModel, ManufactureDate, InstallationDate, DATEDIFF(CURDATE(), ManufactureDate) / 365 AS UsageYears, CASE WHEN DATEDIFF(CURDATE(), ManufactureDate) / 365 > 10 THEN '可能因老化影响数据准确性' ELSE '未达到老化影响年限' END AS AgingImpact FROM RainGauge;",
        "db_id": "RainGauge"
    },
    {
        "id": 59,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 2', 'elevation 10,000 meters', 'atmospheric pressure'], 'relations': ['gauge_to_elevation (rain gauge No. 2 → elevation 10,000 meters)', 'elevation_to_pressure (10,000m → atmospheric pressure calculation)'], 'intent': 'calculate_atmospheric_pressure_impact_and_data_collection_analysis', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [10000], 'units': {'elevation': 'meters', 'pressure': 'hPa (hectopascals)', 'conversion': 'Standard atmospheric pressure lapse rate (~12% pressure decrease per 1000m elevation gain)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'ElevationMeters', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1200.5', '50.0', '10.0', '4500.0', '1800.0']}, {'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'RainGauge.RainfallData': [{'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the elevation of rain gauge No. 2 reaches 10,000 meters, calculate its impact on atmospheric pressure and analyze the potential effects on data collection.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Id, GaugeModel, ElevationMeters, 1013.25 * EXP(-10000 / 8400) AS CalculatedPressure, CASE WHEN 1013.25 * EXP(-10000 / 8400) < 300 THEN '可能导致数据失真或设备故障' ELSE '影响较小' END AS ImpactAnalysis FROM RainGauge WHERE Id = 2;",
        "db_id": "RainGauge"
    },
    {
        "id": 60,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 2', 'altitude (elevation)', 'atmospheric pressure'], 'relations': ['gauge_to_elevation (RainGauge.Id=2 → RainGauge.ElevationMeters)', 'elevation_to_pressure (ElevationMeters → AtmosphericPressureHpa)'], 'intent': 'calculate_altitude_impact_on_atmospheric_pressure', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['rain_gauge_2_elevation', 'atmospheric_pressure_readings'], 'units': {'elevation': 'meters (m)', 'atmospheric_pressure': 'hectopascals (hPa)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'ElevationMeters', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1200.5', '50.0', '10.0', '4500.0', '1800.0']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}]}}\nA physical knowledge question is as follows:\nCalculate the impact of the altitude at the location of rain gauge No. 2 on atmospheric pressure.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Id, ElevationMeters, 1013.25 * EXP(-ElevationMeters / 8400) AS AtmosphericPressureHpa FROM RainGauge WHERE Id = 2;",
        "db_id": "RainGauge"
    },
    {
        "id": 61,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 2', 'installation latitude', 'historical rainfall data', 'future rainfall prediction'], 'relations': ['gauge_to_location (rain gauge No. 2 → Latitude)', 'rainfall_to_time (RainfallData.RainfallMm → [DataStartTime, DataEndTime])', 'regression_model (Linear regression relationship: Rainfall = m*Latitude + b)'], 'intent': 'perform_linear_regression_analysis_and_prediction', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'rainfall': 'mm (millimeters)', 'latitude': '° (degrees)', 'time': 'datetime (user-defined period)', 'regression_coefficient': 'mm/degree (implied by calculation)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Latitude', 'type': 'DECIMAL(10, 6)', 'primary_key': False, 'comment': '', 'examples': ['30.658601', '39.904202', '31.230416', '29.654084', '25.045806']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}]}}\nA mathematical logic question is as follows:\nCalculate the linear regression relationship between the rainfall measured by rain gauge No. 2 during a certain time period and the latitude of its installation location, and predict future rainfall.\nyour response just have a SQL without anything.\n",
        "solution": "WITH RainfallLatitude AS (SELECT rg.Latitude AS Latitude, rd.RainfallMm AS Rainfall FROM RainGauge rg JOIN RainfallData rd ON rg.Id = rd.GaugeId WHERE rg.Id = 2 AND rd.CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59'), Stats AS (SELECT AVG(Latitude) AS AvgLatitude, AVG(Rainfall) AS AvgRainfall, COUNT(*) AS N FROM RainfallLatitude), Slope AS (SELECT SUM((Latitude - AvgLatitude) * (Rainfall - AvgRainfall)) / SUM((Latitude - AvgLatitude) * (Latitude - AvgLatitude)) AS Slope FROM RainfallLatitude, Stats), Intercept AS (SELECT AvgRainfall - Slope * AvgLatitude AS Intercept FROM Stats, Slope) SELECT Slope, Intercept FROM Slope, Intercept;",
        "db_id": "RainGauge"
    },
    {
        "id": 62,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge number 2', 'elevation'], 'relations': ['gauge_id_to_elevation (RainGauge.Id → RainGauge.ElevationMeters)'], 'intent': 'determine_installation_suitability_by_altitude', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'elevation': 'meters (m)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'ElevationMeters', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1200.5', '50.0', '10.0', '4500.0', '1800.0']}]}}\nA common sense reasoning question is as follows:\nBased on the altitude of rain gauge number 2, determine whether it is suitable for installation in the current area.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Id, ElevationMeters, CASE WHEN ElevationMeters >= 0 AND ElevationMeters <= 5000 THEN '适合安装' ELSE '不适合安装' END AS InstallationSuitability FROM RainGauge WHERE Id = 2;",
        "db_id": "RainGauge"
    },
    {
        "id": 63,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge', 'temperature 100°C', 'humidity 200%'], 'relations': ['rain_gauge_to_data_collection (RainGauge → RainfallData)', 'temperature_impact (100°C → sensor_accuracy)', 'humidity_impact (200% → measurement_reliability)'], 'intent': 'analyze_data_collection_impact_from_extreme_conditions', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [100, 200], 'units': {'temperature': '°C (Celsius)', 'humidity': '% (Percent)', 'physical_limits': 'Typical humidity range 0-100%, extreme temperature limits vary by sensor specifications'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Status', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['Running', 'Maintenance', 'Stopped']}, {'column': 'Manufacturer', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RainTech', 'HydroSense']}, {'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Mountainside, Sichuan', 'Urban Area, Beijing', 'Coastal Area, Shanghai', 'Plateau, Tibet', 'Forest Area, Yunnan']}], 'RainGauge.RainfallData': [{'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.3', '18.5', '25.0', '20.0', '28.0']}, {'column': 'HumidityPercent', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['65.0', '70.0', '80.0', '60.0', '85.0']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a rain gauge recorded a temperature of 100 degrees Celsius and a humidity of 200% during a certain time period, analyze the potential impact on data collection.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, CollectionTime, TemperatureCelsius, HumidityPercent, CASE WHEN TemperatureCelsius >= 100 AND HumidityPercent >= 200 THEN '可能导致设备传感器损坏、数据失真或完全不可用' ELSE '数据采集正常' END AS ImpactAnalysis FROM RainfallData WHERE TemperatureCelsius >= 100 AND HumidityPercent >= 200;",
        "db_id": "RainGauge"
    },
    {
        "id": 64,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge number 1', 'specific time period', 'pressure exerted by rainfall'], 'relations': ['gauge_to_analysis (RainGauge.Id → HistoricalRainfallAnalysis.GaugeId)', 'time_period_to_data (DataStartTime/DataEndTime → RainfallData.CollectionTime)'], 'intent': 'calculate_pressure_exerted_by_rainfall', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1], 'units': {'rainfall': 'mm (millimeters)', 'intensity': 'mm/h (millimeters per hour)', 'pressure': 'Pa (Pascals) or derived from rainfall physics', 'time': 'hours or seconds depending on calculation formula'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'ElevationMeters', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1200.5', '50.0', '10.0', '4500.0', '1800.0']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'DataStartTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-09-01 00:00:00', '2023-08-01 00:00:00', '2023-07-01 00:00:00', '2023-06-01 00:00:00', '2023-05-01 00:00:00']}, {'column': 'DataEndTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-09-30 23:59:59', '2023-08-31 23:59:59', '2023-07-31 23:59:59', '2023-06-30 23:59:59', '2023-05-31 23:59:59']}, {'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}, {'column': 'AverageRainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '6.8', '10.5', '3.5', '1.8']}], 'RainGauge.RainfallData': [{'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}]}}\nA physical knowledge question is as follows:\nCalculate the pressure exerted by the rainfall recorded at rain gauge number 1 on the ground over a specific time period.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, SUM(RainfallMm) AS TotalRainfallMm, (SUM(RainfallMm) * 1000 * 9.81 / 1000) AS PressurePa FROM RainfallData WHERE GaugeId = 1 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59' GROUP BY GaugeId;",
        "db_id": "RainGauge"
    },
    {
        "id": 65,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 2', 'rainfall', 'temperature', 'linear regression', 'future rainfall prediction'], 'relations': ['rain_gauge_to_data (2 → RainfallData)', 'rainfall_to_temperature_correlation', 'regression_model_for_prediction'], 'intent': 'calculate_linear_regression_and_predict_future_rainfall', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'rainfall': 'mm (millimeters)', 'temperature': '°C (Celsius)', 'regression_coefficients': 'implied by calculation'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.3', '18.5', '25.0', '20.0', '28.0']}]}}\nA mathematical logic question is as follows:\nCalculate the linear regression relationship between the rainfall and temperature of rain gauge No. 2 over a certain period of time and predict future rainfall.\nyour response just have a SQL without anything.\n",
        "solution": "WITH RainfallTemperature AS (SELECT TemperatureCelsius AS Temperature, RainfallMm AS Rainfall FROM RainfallData WHERE GaugeId = 2 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59'), Stats AS (SELECT AVG(Temperature) AS AvgTemperature, AVG(Rainfall) AS AvgRainfall, COUNT(*) AS N FROM RainfallTemperature), Slope AS (SELECT SUM((Temperature - AvgTemperature) * (Rainfall - AvgRainfall)) / SUM((Temperature - AvgTemperature) * (Temperature - AvgTemperature)) AS Slope FROM RainfallTemperature, Stats), Intercept AS (SELECT AvgRainfall - Slope * AvgTemperature AS Intercept FROM Stats, Slope) SELECT Slope, Intercept FROM Slope, Intercept;",
        "db_id": "RainGauge"
    },
    {
        "id": 66,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 2', 'flood potential', 'specific time period'], 'relations': ['rain_gauge_to_data (gauge_id=2 → rainfall_data)', 'time_period_filter (data_start_time/data_end_time)', 'threshold_comparison (rainfall_value > flood_threshold)'], 'intent': 'assess_flood_risk_from_rainfall_data', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [2], 'units': {'rainfall': 'mm (millimeters)', 'intensity': 'mm/h (millimeters per hour)', 'threshold': 'threshold_value unit from RainfallWarningRule (dynamic)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}, {'column': 'MaxRainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '25.0', '12.0', '8.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA common sense reasoning question is as follows:\nBased on the rainfall data from rain gauge No. 2 during a specific time period, determine whether it may potentially cause a flood.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, SUM(RainfallMm) AS TotalRainfallMm, CASE WHEN SUM(RainfallMm) > (SELECT ThresholdValue FROM RainfallWarningRule WHERE ParameterType = '降雨量' AND ConditionOperator = '>' AND IsActive = TRUE) THEN '可能引发洪水' ELSE '洪水风险较低' END AS FloodRisk FROM RainfallData WHERE GaugeId = 2 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59' GROUP BY GaugeId;",
        "db_id": "RainGauge"
    },
    {
        "id": 67,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n```json\n{\n  \"entities\": [\"rain gauge No. 2\", \"rainfall 10,000 millimeters\", \"ground pressure\", \"environmental impact\"],\n  \"relations\": [\n    \"rain_gauge_to_elevation (rain gauge No. 2 → ElevationMeters)\",\n    \"rainfall_to_pressure (10,000 mm → pressure calculation)\",\n    \"pressure_to_environmental_impact (pressure → environmental thresholds)\"\n  ],\n  \"intent\": \"calculate_pressure_and_environmental_impact\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [10000],\n  \"units\": {\n    \"rainfall\": \"millimeters (mm)\",\n    \"pressure\": \"Pascals (Pa) derived from mm → meters conversion\",\n    \"conversion\": \"10,000 mm = 10 meters; water density = 1000 kg/m³; gravity = 9.81 m/s²\"\n  },\n  \"required_tables\": [\"RainGauge\", \"RainfallWarningRule\"],\n  \"required_fields\": [\n    \"RainGauge.ElevationMeters\",\n    \"RainfallWarningRule.ThresholdValue\",\n    \"RainfallWarningRule.ThresholdUnit\",\n    \"RainfallWarningRule.SeverityLevel\"\n  ]\n}\n```\nA hypothetical reasoning question is as follows:\nAssuming that the rainfall recorded by rain gauge No. 2 reaches 10,000 millimeters during a specific period, calculate the pressure it exerts on the ground and analyze its potential environmental impact.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, CollectionTime, RainfallMm, (10000 * 1000 * 9.81 / 1000) AS PressurePa, CASE WHEN RainfallMm >= 10000 THEN '可能导致洪水、土壤侵蚀等环境影响' ELSE '环境影响较小' END AS EnvironmentalImpact FROM RainfallData WHERE GaugeId = 2 AND RainfallMm >= 10000;",
        "db_id": "RainGauge"
    },
    {
        "id": 68,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"rain gauge No. 3\", \"rainfall intensity\", \"impact force\", \"specific time period\"],\n  \"relations\": [\"rain_gauge_to_data (No. 3 → RainfallData records)\", \"time_period_filter (collection_time between start/end timestamps)\", \"intensity_to_force (rainfall intensity → impact force calculation)\"],\n  \"intent\": \"calculate_impact_force_from_rainfall\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [3],  // GaugeId=3\n  \"units\": {\n    \"rainfall_intensity\": \"mm/h (from RainfallData.RainfallIntensityMmH)\",\n    \"time_period\": \"duration in hours (derived from CollectionTime range)\",\n    \"force\": \"Newtons (calculated using water density, gravity, and intensity)\"\n  },\n  \"required_tables\": [\"RainGauge\", \"RainfallData\", \"HistoricalRainfallAnalysis\"],\n  \"required_fields\": [\n    \"RainGauge.Id\",\n    \"RainGauge.InstallationLocation\",\n    \"RainfallData.GaugeId\",\n    \"RainfallData.CollectionTime\",\n    \"RainfallData.RainfallIntensityMmH\",\n    \"HistoricalRainfallAnalysis.DataStartTime\",\n    \"HistoricalRainfallAnalysis.DataEndTime\"\n  ]\n}\nA physical knowledge question is as follows:\nCalculate the impact force on the ground caused by the rainfall intensity of rain gauge No. 3 over a specific time period.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, CollectionTime, RainfallIntensityMmH, (RainfallIntensityMmH * 1 * 1000 * 9.81 / 3600) AS ImpactForceN FROM RainfallData WHERE GaugeId = 3 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 69,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 3', 'specific time period', 'rainfall intensity'], 'relations': ['rain_gauge_to_data (GaugeId 3 → RainfallData records)', 'time_period_to_analysis (AnalysisTime/DataStartTime-DataEndTime → temporal scope)', 'intensity_rate_of_change (ΔRainfallIntensity/ΔTime)'], 'intent': 'calculate_rainfall_intensity_rate_of_change_and_trend', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3], 'units': {'rainfall_intensity': 'mm/h (millimeters per hour)', 'time_period': 'hours/minutes (based on CollectionTime resolution)', 'rate_of_change': 'mm/h² (change in intensity per unit time)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Mountainside, Sichuan', 'Urban Area, Beijing', 'Coastal Area, Shanghai', 'Plateau, Tibet', 'Forest Area, Yunnan']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}]}}\nA mathematical logic question is as follows:\nCalculate the rate of change of rainfall intensity at rain gauge No. 3 over a specific time period, and analyze its trend of variation.\nyour response just have a SQL without anything.\n",
        "solution": "WITH RainfallIntensityChange AS (SELECT t1.CollectionTime AS Time1, t2.CollectionTime AS Time2, t1.RainfallIntensityMmH AS Intensity1, t2.RainfallIntensityMmH AS Intensity2, (t2.RainfallIntensityMmH - t1.RainfallIntensityMmH) / (UNIX_TIMESTAMP(t2.CollectionTime) - UNIX_TIMESTAMP(t1.CollectionTime)) * 3600 AS ChangeRate FROM RainfallData t1 JOIN RainfallData t2 ON t1.GaugeId = t2.GaugeId AND t2.CollectionTime > t1.CollectionTime WHERE t1.GaugeId = 3 AND t1.CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59') SELECT Time1, Time2, Intensity1, Intensity2, ChangeRate FROM RainfallIntensityChange ORDER BY Time1;",
        "db_id": "RainGauge"
    },
    {
        "id": 70,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge number 3', 'flash flood', 'rainfall intensity'], 'relations': ['rain_gauge_to_data (3 → RainfallData records)', 'rainfall_intensity_to_threshold (intensity value → RainfallWarningRule threshold)'], 'intent': 'assess_flash_flood_risk', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3], 'units': {'rainfall_intensity': 'mm/h (millimeters per hour)', 'threshold_comparison': 'threshold value from RainfallWarningRule'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}], 'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}]}}\nA common sense reasoning question is as follows:\nBased on the rainfall intensity recorded by rain gauge number 3 over a certain period, determine whether there is a possibility of triggering a flash flood.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, CollectionTime, RainfallIntensityMmH, CASE WHEN RainfallIntensityMmH > (SELECT ThresholdValue FROM RainfallWarningRule WHERE ParameterType = '降雨强度' AND ConditionOperator = '>' AND IsActive = TRUE) THEN '可能引发山洪' ELSE '山洪风险较低' END AS FloodRisk FROM RainfallData WHERE GaugeId = 3 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 71,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n```json\n{\n  \"entities\": [\"rain gauge No. 3\", \"rainfall intensity 1000 mm/h\", \"impact force\", \"environmental effects\"],\n  \"relations\": [\n    \"rain_gauge_to_data (No. 3 → RainfallData)\",\n    \"intensity_to_impact_force (1000 mm/h → physical calculation)\",\n    \"impact_force_to_environmental_effects (impact force → erosion, flooding, etc.)\"\n  ],\n  \"intent\": \"calculate_impact_force_and_analyze_environmental_effects\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [1000],\n  \"units\": {\n    \"rainfall_intensity\": \"mm/h (millimeters per hour)\",\n    \"impact_force\": \"N/m² (Newtons per square meter, derived via physical formula)\",\n    \"threshold_comparison\": \"mm/h (matching RainfallWarningRule unit)\"\n  },\n  \"required_tables\": [\"RainGauge\", \"RainfallData\", \"RainfallWarningRule\"],\n  \"required_fields\": [\n    \"RainGauge.Id\", \n    \"RainGauge.InstallationLocation\",\n    \"RainGauge.Latitude\",\n    \"RainGauge.Longitude\",\n    \"RainGauge.ElevationMeters\",\n    \"RainfallData.GaugeId\",\n    \"RainfallData.RainfallIntensityMmH\",\n    \"RainfallWarningRule.ThresholdValue\",\n    \"RainfallWarningRule.ThresholdUnit\",\n    \"RainfallWarningRule.SeverityLevel\"\n  ]\n}\n```\nA hypothetical reasoning question is as follows:\nAssuming that the rainfall intensity of rain gauge No. 3 reaches 1000 mm/h during a certain period, calculate the impact force it exerts on the ground and analyze its potential environmental effects.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, CollectionTime, RainfallIntensityMmH, (1000 * 1 * 1000 * 9.81 / 3600) AS ImpactForceN FROM RainfallData WHERE GaugeId = 3 AND RainfallIntensityMmH = 1000;",
        "db_id": "RainGauge"
    },
    {
        "id": 72,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 2', 'temperature', 'atmospheric pressure', 'specific time period'], 'relations': ['rain_gauge_to_data (RainGauge.Id = 2 → RainfallData.GaugeId)', 'temperature_to_pressure (TemperatureCelsius → AtmosphericPressureHpa)', 'time_period (CollectionTime ∈ [start_time, end_time])'], 'intent': 'analyze_temperature_impact_on_pressure', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [2], 'units': {'temperature': '°C (Celsius)', 'atmospheric_pressure': 'hPa (hectopascals)', 'time': 'datetime (dependent on database format)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.3', '18.5', '25.0', '20.0', '28.0']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}]}}\nA physical knowledge question is as follows:\nCalculate the impact of temperature on atmospheric pressure for rain gauge No. 2 over a specific time period.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, CollectionTime, TemperatureCelsius, (TemperatureCelsius + 273.15) * 287 * 1.225 / 0.02896 AS AtmosphericPressureHpa FROM RainfallData WHERE GaugeId = 2 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 73,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge number 2', 'specific time period'], 'relations': ['GaugeId_to_rainfall_data (2 → RainfallData)', 'time_period_to_collection_time (specific period → CollectionTime)'], 'intent': 'calculate_average_temperature_and_trend_analysis', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'temperature': '°C (Celsius)', 'time': 'datetime (CollectionTime)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.3', '18.5', '25.0', '20.0', '28.0']}]}}\nA mathematical logic question is as follows:\nCalculate the average temperature of rain gauge number 2 over a specific time period and analyze its trend of change.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, AVG(TemperatureCelsius) AS AvgTemperature, COUNT(*) AS N FROM RainfallData WHERE GaugeId = 2 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59' GROUP BY GaugeId;",
        "db_id": "RainGauge"
    },
    {
        "id": 74,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 2', 'specific time period', 'equipment operation'], 'relations': ['rain_gauge_to_data (RainGauge.Id → RainfallData.GaugeId)', 'temperature_to_operation_impact (inferred relationship)'], 'intent': 'assess_equipment_operation_risk_from_temperature', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': ['temperature_readings'], 'units': {'temperature': '°C (from RainfallData.TemperatureCelsius)', 'impact_threshold': 'unknown (requires domain knowledge or specification lookup)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Status', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['Running', 'Maintenance', 'Stopped']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.3', '18.5', '25.0', '20.0', '28.0']}]}}\nA common sense reasoning question is as follows:\nBased on the temperature readings from rain gauge No. 2 during a specific time period, determine whether it may potentially affect the normal operation of the equipment.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, CollectionTime, TemperatureCelsius, CASE WHEN TemperatureCelsius >= -20 AND TemperatureCelsius <= 50 THEN '正常运行' ELSE '可能影响运行' END AS DeviceStatus FROM RainfallData WHERE GaugeId = 2 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 75,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 2', 'temperature -200°C', 'atmospheric pressure', 'data collection'], 'relations': ['rain_gauge_to_temperature (rain gauge No. 2 → temperature measurement)', 'temperature_to_pressure (physical relationship -200°C → atmospheric pressure)', 'data_collection_analysis (temperature impact → data accuracy/reliability)'], 'intent': 'calculate_impact_of_extreme_temperature_on_pressure_and_analyze_data_effects', 'reasoning_type': 'physical knowledge reasoning + common sense understanding reasoning', 'numerical_values': [-200], 'units': {'temperature': '°C (Celsius)', 'pressure': 'hPa (hectopascals)', 'conversion': 'ideal gas law (PV=nRT) or atmospheric models for temperature-pressure correlation'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.3', '18.5', '25.0', '20.0', '28.0']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}], 'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Status', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['Running', 'Maintenance', 'Stopped']}]}}\nA hypothetical reasoning question is as follows:\nAssuming that the temperature recorded by rain gauge No. 2 reached -200 degrees Celsius during a certain time period, calculate its impact on atmospheric pressure and analyze the potential effects on data collection.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, CollectionTime, TemperatureCelsius, (73.15 * 287 * 1.225 / 0.02896) AS AtmosphericPressureHpa, CASE WHEN TemperatureCelsius <= -200 THEN '可能导致设备冻结、数据失真' ELSE '数据采集正常' END AS ImpactAnalysis FROM RainfallData WHERE GaugeId = 2 AND TemperatureCelsius <= -200;",
        "db_id": "RainGauge"
    },
    {
        "id": 76,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge number 2', 'humidity', 'atmospheric pressure'], 'relations': ['RainGauge.Id → RainfallData.GaugeId', 'HumidityPercent → AtmosphericPressureHpa correlation'], 'intent': 'analyze_relationship_between_humidity_and_atmospheric_pressure', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [2], 'units': {'humidity': '% (percent)', 'atmospheric_pressure': 'hPa (hectopascals)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'HumidityPercent', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['65.0', '70.0', '80.0', '60.0', '85.0']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}]}}\nA physical knowledge question is as follows:\nCalculate the impact of humidity from rain gauge number 2 on atmospheric pressure over a certain time period.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, CollectionTime, HumidityPercent, (HumidityPercent * 0.01 * 23.76) + (AtmosphericPressureHpa - (HumidityPercent * 0.01 * 23.76)) AS AdjustedAtmosphericPressureHpa FROM RainfallData WHERE GaugeId = 2 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 77,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 2', 'specific time period'], 'relations': ['gauge_to_data (RainGauge.Id → RainfallData.GaugeId)', 'time_range_filter (CollectionTime ∈ [start_time, end_time])', 'humidity_trend_analysis'], 'intent': 'calculate_average_humidity_and_analyze_trend', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'humidity': '% (percent)', 'time': 'datetime (CollectionTime)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'HumidityPercent', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['65.0', '70.0', '80.0', '60.0', '85.0']}]}}\nA mathematical logic question is as follows:\nCalculate the average humidity value of rain gauge No. 2 over a specific time period and analyze its change trend.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, AVG(HumidityPercent) AS AvgHumidity, MIN(HumidityPercent) AS MinHumidity, MAX(HumidityPercent) AS MaxHumidity FROM RainfallData WHERE GaugeId = 2 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59' GROUP BY GaugeId;",
        "db_id": "RainGauge"
    },
    {
        "id": 78,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge number 2', 'humidity', 'equipment failure'], 'relations': ['rain_gauge_to_humidity_data (GaugeId 2 → RainfallData.HumidityPercent)', 'humidity_to_failure_threshold (Humidity → RainfallWarningRule.ThresholdValue)', 'humidity_data_over_time (RainfallData.CollectionTime)'], 'intent': 'assess_equipment_failure_risk_from_humidity', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'humidity': '% (Percent from RainfallData.HumidityPercent)', 'threshold_unit': '% (ThresholdUnit from RainfallWarningRule)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Status', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['Running', 'Maintenance', 'Stopped']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'HumidityPercent', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['65.0', '70.0', '80.0', '60.0', '85.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'ActionType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Issue Public Warning', 'Notify Authorities', 'Monitor Drought Conditions', 'Evacuate Affected Areas', 'Issue Local Warning']}]}}\nA common sense reasoning question is as follows:\nBased on the humidity recorded by rain gauge number 2 over a certain period of time, determine whether it is likely to cause equipment failure.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, CollectionTime, HumidityPercent, CASE WHEN HumidityPercent >= 0 AND HumidityPercent <= 90 THEN '正常运行' ELSE '可能引发故障' END AS DeviceStatus FROM RainfallData WHERE GaugeId = 2 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 79,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge number 2', 'humidity 200%'], 'relations': ['rain_gauge_to_data (GaugeId → RainfallData)', 'humidity_impact_on_pressure (Physical relationship)'], 'intent': 'calculate_impact_on_atmospheric_pressure_and_analyze_effects_on_data_collection', 'reasoning_type': 'physical knowledge reasoning + common sense understanding reasoning', 'numerical_values': [200], 'units': {'humidity': 'Percent (%)', 'atmospheric_pressure': 'hPa (hectopascals)', 'threshold_humidity': '100% (physical limit for saturation)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Mountainside, Sichuan', 'Urban Area, Beijing', 'Coastal Area, Shanghai', 'Plateau, Tibet', 'Forest Area, Yunnan']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'HumidityPercent', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['65.0', '70.0', '80.0', '60.0', '85.0']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the humidity at rain gauge number 2 reaches 200% during a certain period, calculate its impact on atmospheric pressure and analyze the potential effects on data collection.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, CollectionTime, HumidityPercent, AtmosphericPressureHpa, (200 * AtmosphericPressureHpa * 0.01) + (AtmosphericPressureHpa * 0.99) AS EstimatedPressureHpa, CASE WHEN HumidityPercent = 200 THEN '可能影响数据采集' ELSE '数据采集正常' END AS DataImpact FROM RainfallData WHERE GaugeId = 2 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 80,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge number 2', 'wind speed', 'rainfall', 'specific time period'], 'relations': ['rain_gauge_to_data (Rain Gauge 2 → RainfallData)', 'wind_speed_impact (WindSpeedMps → RainfallMm)', 'time_period_filter (CollectionTime within specified range)'], 'intent': 'analyze_impact_of_wind_speed_on_rainfall', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [2], 'units': {'wind_speed': 'Mps (meters per second)', 'rainfall': 'mm (millimeters)', 'time': 'datetime (analysis period)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}], 'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}]}}\nA physical knowledge question is as follows:\nCalculate the impact of wind speed on rainfall during a specific time period for rain gauge number 2.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, RainfallMm, WindSpeedMps, RainfallMm * (1 + WindSpeedMps / 10) AS AdjustedRainfallMm FROM RainfallData WHERE GaugeId = 2 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 81,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 2', 'wind speed', 'certain period', 'changing trend'], 'relations': ['rain_gauge_to_data (RainGauge.Id → RainfallData.GaugeId)', 'time_period_to_wind_speed (CollectionTime → WindSpeedMps)'], 'intent': 'calculate_average_wind_speed_and_analyze_trend', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'wind_speed': 'm/s (meters per second)', 'time': 'period unspecified (requires user input for exact timeframe)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Mountainside, Sichuan', 'Urban Area, Beijing', 'Coastal Area, Shanghai', 'Plateau, Tibet', 'Forest Area, Yunnan']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}]}}\nA mathematical logic question is as follows:\nCalculate the average wind speed of rain gauge No. 2 over a certain period and analyze its changing trend.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, AVG(WindSpeedMps) AS AvgWindSpeed, MIN(WindSpeedMps) AS MinWindSpeed, MAX(WindSpeedMps) AS MaxWindSpeed FROM RainfallData WHERE GaugeId = 2 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59' GROUP BY GaugeId;",
        "db_id": "RainGauge"
    },
    {
        "id": 82,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 2', 'wind speed data', 'specific time period'], 'relations': ['rain_gauge_to_data (RainGauge.Id → RainfallData.GaugeId)', 'wind_speed_to_threshold (RainfallData.WindSpeedMps → RainfallWarningRule.ThresholdValue)'], 'intent': 'assess_wind_speed_risk_for_equipment_failure', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [2], 'units': {'wind_speed': 'm/s (meters per second)', 'threshold_units': 'm/s (as defined in RainfallWarningRule.ThresholdUnit)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'IsActive', 'type': 'TINYINT', 'primary_key': False, 'comment': '', 'examples': ['1']}]}}\nA common sense reasoning question is as follows:\nBased on the wind speed data from rain gauge No. 2 during a specific time period, determine whether it could potentially cause equipment failure.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, WindSpeedMps, CASE WHEN WindSpeedMps < 0 OR WindSpeedMps > 20 THEN '可能引发设备故障' ELSE '风速在正常范围内' END AS FaultRisk FROM RainfallData WHERE GaugeId = 2 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 83,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 2', 'wind speed 100 meters per second'], 'relations': ['gauge_to_data (rain gauge No. 2 → RainfallData.WindSpeedMps)', 'wind_to_rainfall_impact (wind speed → measurement distortion)'], 'intent': 'analyze_impact_of_wind_speed_on_rainfall_measurement', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [100], 'units': {'wind_speed': 'meters per second (m/s)', 'rainfall': 'millimeters (mm) and mm/hour (implied by database schema)', 'conversion': '100 m/s wind speed threshold for measurement distortion analysis'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Mountainside, Sichuan', 'Urban Area, Beijing', 'Coastal Area, Shanghai', 'Plateau, Tibet', 'Forest Area, Yunnan']}, {'column': 'ElevationMeters', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1200.5', '50.0', '10.0', '4500.0', '1800.0']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}, {'column': 'AverageRainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '6.8', '10.5', '3.5', '1.8']}]}}\nA hypothetical reasoning question is as follows:\nAssuming that the wind speed at rain gauge No. 2 reaches 100 meters per second during a certain time period, calculate its impact on rainfall measurement and analyze the potential effects on data collection.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, RainfallMm, 100 AS AssumedWindSpeedMps, RainfallMm * (1 + 100 / 10) AS AdjustedRainfallMm, CASE WHEN 100 > 20 THEN '可能引发设备故障或数据失真' ELSE '风速在正常范围内' END AS PotentialImpact FROM RainfallData WHERE GaugeId = 2 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 84,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Rain gauge number 4', 'Wind direction', 'Rainfall distribution', 'Specific time period'], 'relations': ['RainGauge_to_Data (Gauge 4 → RainfallData entries)', 'WindDirection_to_Rainfall (WindDirectionDegrees → RainfallMm correlation)'], 'intent': 'calculate_impact_of_wind_direction_on_rainfall_distribution', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [4], 'units': {'wind_direction': 'degrees (WindDirectionDegrees)', 'rainfall': 'mm (TotalRainfallMm, RainfallMm)', 'time_period': 'datetime range (DataStartTime/DataEndTime, CollectionTime)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'WindDirectionDegrees', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['120.0', '90.0', '150.0', '180.0', '200.0']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}], 'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}]}}\nA physical knowledge question is as follows:\nCalculate the impact of wind direction on rainfall distribution for rain gauge number 4 during a specific time period.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, RainfallMm, WindDirectionDegrees, RainfallMm * (1 + WindDirectionDegrees / 360) AS AdjustedRainfallDistribution FROM RainfallData WHERE GaugeId = 4 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 85,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['RainGauge Id 3', 'specific time period (start and end)'], 'relations': ['RainGauge_to_RainfallData (GaugeId 3 → RainfallData.GaugeId)', 'WindDirection_over_Time (WindDirectionDegrees → CollectionTime)'], 'intent': 'calculate_average_wind_direction_and_analyze_trend', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['WindDirectionDegrees (from RainfallData)'], 'units': {'wind_direction': 'degrees (°)', 'time': 'timestamp (CollectionTime)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'WindDirectionDegrees', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['120.0', '90.0', '150.0', '180.0', '200.0']}]}}\nA mathematical logic question is as follows:\nCalculate the average wind direction of rain gauge number 3 over a certain time period and analyze its trend of change.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(WindDirectionDegrees) AS AverageWindDirection, COUNT(*) AS DataPoints FROM RainfallData WHERE GaugeId = 3 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 86,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 3', 'wind direction data', 'equipment operational parameters'], 'relations': ['rain_gauge_to_data (3 → RainfallData.WindDirectionDegrees)', 'environmental_impact_assessment (wind direction → equipment status)'], 'intent': 'assess_environmental_impact_on_equipment', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [3], 'units': {'wind_direction': 'degrees (from RainfallData.WindDirectionDegrees)', 'time_period': 'unspecified but required for filtering data'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Status', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['Running', 'Maintenance', 'Stopped']}, {'column': 'Notes', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['Monitoring rainfall in mountainous region.', 'Currently under maintenance for sensor calibration.', 'Monitoring rainfall in coastal region.', 'Station temporarily stopped due to extreme weather conditions.', 'Monitoring rainfall in forested region.']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'WindDirectionDegrees', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['120.0', '90.0', '150.0', '180.0', '200.0']}]}}\nA common sense reasoning question is as follows:\nBased on the wind direction recorded by rain gauge No. 3 during a specific time period, determine whether it may affect the normal operation of the equipment.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, CollectionTime, WindDirectionDegrees, CASE WHEN WindDirectionDegrees >= 0 AND WindDirectionDegrees <= 360 THEN '正常运行' ELSE '可能影响运行' END AS DeviceStatus FROM RainfallData WHERE GaugeId = 3 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 87,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 3', 'wind direction 720 degrees', 'rainfall distribution'], 'relations': ['gauge_to_data (rain gauge No. 3 → RainfallData)', 'wind_direction_to_rainfall (720 degrees → rainfall measurement correlation)'], 'intent': 'analyze_data_quality_impact_of_wind_direction', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [720], 'units': {'wind_direction': 'degrees', 'rainfall': 'mm (millimeters)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Mountainside, Sichuan', 'Urban Area, Beijing', 'Coastal Area, Shanghai', 'Plateau, Tibet', 'Forest Area, Yunnan']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'WindDirectionDegrees', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['120.0', '90.0', '150.0', '180.0', '200.0']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}, {'column': 'AnalysisResult', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['September rainfall analysis: Moderate rainfall with occasional heavy downpours.', 'August rainfall analysis: Heavy rainfall with consistent intensity.', 'July rainfall analysis: Extreme rainfall with high intensity.', 'June rainfall analysis: Moderate rainfall with light intensity.', 'May rainfall analysis: Light rainfall with low intensity.']}]}}\nA hypothetical reasoning question is as follows:\nAssuming that the wind direction of rain gauge No. 3 reaches 720 degrees during a certain period, calculate its impact on rainfall distribution and analyze the potential effects on data collection.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, CollectionTime, WindDirectionDegrees, RainfallMm, (RainfallMm * (1 + 720 / 360)) AS EstimatedRainfallDistribution, CASE WHEN WindDirectionDegrees = 720 THEN '可能影响数据采集' ELSE '数据采集正常' END AS DataImpact FROM RainfallData WHERE GaugeId = 3 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 88,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 1', 'atmospheric pressure', 'rainfall', 'specific time period'], 'relations': ['RainGauge.Id → RainfallData.GaugeId', 'RainfallData.AtmosphericPressureHpa → RainfallData.RainfallMm', 'RainfallData.CollectionTime ∈ time_period'], 'intent': 'analyze_relationship_between_atmospheric_pressure_and_rainfall', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1], 'units': {'atmospheric_pressure': 'Hpa (Hectopascals)', 'rainfall': 'mm (millimeters)', 'time_period': 'duration unspecified, requires user input'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}]}}\nA physical knowledge question is as follows:\nCalculate the impact of atmospheric pressure from rain gauge No. 1 on rainfall during a specific time period.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, RainfallMm, AtmosphericPressureHpa, RainfallMm * (1 + (1013.25 - AtmosphericPressureHpa) / 1013.25) AS AdjustedRainfallMm FROM RainfallData WHERE GaugeId = 1 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 89,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 1', 'atmospheric pressure', 'specific time period'], 'relations': ['rain_gauge_to_data (RainGauge.Id → RainfallData.GaugeId)', 'time_period_filter (CollectionTime BETWEEN DataStartTime AND DataEndTime)'], 'intent': 'calculate_average_and_analyze_trend', 'reasoning_type': 'mathematical logic reasoning + common sense understanding reasoning', 'numerical_values': [1], 'units': {'atmospheric_pressure': 'hPa (hectopascals)', 'time_period': 'datetime range (defined by DataStartTime/DataEndTime)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}]}}\nA mathematical logic question is as follows:\nCalculate the average atmospheric pressure of rain gauge No. 1 over a specific time period and analyze its changing trend.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, AVG(AtmosphericPressureHpa) AS AvgPressure, MIN(AtmosphericPressureHpa) AS MinPressure, MAX(AtmosphericPressureHpa) AS MaxPressure FROM RainfallData WHERE GaugeId = 1 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59' GROUP BY GaugeId;",
        "db_id": "RainGauge"
    },
    {
        "id": 90,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 1', 'atmospheric pressure data', 'equipment failure', 'specific time period'], 'relations': ['rain_gauge_to_data (rain gauge No. 1 → RainfallData)', 'time_period_filter (RainfallData.CollectionTime ∈ [DataStartTime, DataEndTime])', 'atmospheric_pressure_to_threshold (AtmosphericPressureHpa → RainfallWarningRule.ThresholdValue)'], 'intent': 'assess_equipment_failure_risk_from_pressure_data', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [], 'units': {'atmospheric_pressure': 'hPa (hectopascals)', 'threshold_comparison': 'comparison operators (>, <, =) from RainfallWarningRule.ConditionOperator'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'GaugeModel', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RG-100', 'RG-200', 'RG-150', 'RG-300', 'RG-250']}, {'column': 'Status', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['Running', 'Maintenance', 'Stopped']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['9', '8', '6', '10', '7']}]}}\nA common sense reasoning question is as follows:\nBased on the atmospheric pressure data from rain gauge No. 1 during a certain time period, determine whether it may potentially cause equipment failure.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, AtmosphericPressureHpa, CASE WHEN AtmosphericPressureHpa < 800 OR AtmosphericPressureHpa > 1100 THEN '可能引发设备故障' ELSE '大气压力在正常范围内' END AS FaultRisk FROM RainfallData WHERE GaugeId = 1 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 91,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 1', 'atmospheric pressure 2000 hPa'], 'relations': ['gauge_to_data (rain gauge No. 1 → RainfallData records)', 'pressure_to_rainfall (atmospheric pressure → RainfallMm/RainfallIntensityMmH correlation)'], 'intent': 'analyze_atmospheric_pressure_impact_on_rainfall_measurement', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [2000], 'units': {'atmospheric_pressure': 'hPa', 'rainfall': 'mm (millimeters)', 'rainfall_intensity': 'mm/h (millimeters per hour)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Mountainside, Sichuan', 'Urban Area, Beijing', 'Coastal Area, Shanghai', 'Plateau, Tibet', 'Forest Area, Yunnan']}, {'column': 'ElevationMeters', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1200.5', '50.0', '10.0', '4500.0', '1800.0']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming that the atmospheric pressure at rain gauge No. 1 reached 2000 hPa during a certain time period, calculate its impact on rainfall and analyze its potential effects on data collection.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, RainfallMm, 2000 AS AssumedAtmosphericPressureHpa, RainfallMm * (1 + (1013.25 - 2000) / 1013.25) AS AdjustedRainfallMm, CASE WHEN 2000 < 800 OR 2000 > 1100 THEN '可能引发设备故障或数据失真' ELSE '大气压力在正常范围内' END AS PotentialImpact FROM RainfallData WHERE GaugeId = 1 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 92,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['atmospheric pressure', 'temperature', 'rain gauge No. 1', 'specific time period'], 'relations': ['rain_gauge_to_data (RainGauge.Id → RainfallData.GaugeId)', 'pressure_temperature_correlation (AtmosphericPressureHpa → TemperatureCelsius)'], 'intent': 'calculate_atmospheric_pressure_impact_on_temperature', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1], 'units': {'temperature': '°C (Celsius)', 'atmospheric_pressure': 'hPa (hectopascals)', 'time': 'datetime (CollectionTime format)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.3', '18.5', '25.0', '20.0', '28.0']}]}}\nA physical knowledge question is as follows:\nCalculate the impact of atmospheric pressure on temperature for rain gauge No. 1 during a specific time period.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, TemperatureCelsius, AtmosphericPressureHpa, TemperatureCelsius * (1 + AtmosphericPressureHpa / 1013.25) AS AdjustedTemperature FROM RainfallData WHERE GaugeId = 1 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 93,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge number 1', 'specific time period'], 'relations': ['rain_gauge_to_data (RainGauge.Id → RainfallData.GaugeId)', 'time_filter (CollectionTime BETWEEN start_time AND end_time)'], 'intent': 'find_atmospheric_pressure_extremes', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1], 'units': {'atmospheric_pressure': 'hPa (hectopascals)', 'time_period': 'datetime range (implied by CollectionTime field)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}]}}\nA mathematical logic question is as follows:\nCalculate the maximum and minimum atmospheric pressure values for rain gauge number 1 during a specific time period.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, MAX(AtmosphericPressureHpa) AS MaxPressure, MIN(AtmosphericPressureHpa) AS MinPressure FROM RainfallData WHERE GaugeId = 1 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59' GROUP BY GaugeId;",
        "db_id": "RainGauge"
    },
    {
        "id": 94,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge No. 1', 'atmospheric pressure readings', 'equipment operation status'], 'relations': ['rain_gauge_to_data (RainGauge.Id → RainfallData.GaugeId)', 'pressure_to_operation_impact (AtmosphericPressureHpa → Status)'], 'intent': 'assess_equipment_impact_from_pressure', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [], 'units': {'atmospheric_pressure': 'hPa (hectopascals)', 'time_period': 'dynamic (dependent on user-defined range)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Status', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['Running', 'Maintenance', 'Stopped']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}]}}\nA common sense reasoning question is as follows:\nBased on the atmospheric pressure readings from rain gauge No. 1 during a certain time period, determine whether it may affect the normal operation of the equipment.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, AtmosphericPressureHpa, CASE WHEN AtmosphericPressureHpa < 800 OR AtmosphericPressureHpa > 1100 THEN '可能影响设备正常运行' ELSE '大气压力在正常范围内' END AS OperationalImpact FROM RainfallData WHERE GaugeId = 1 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 95,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['RainGauge No.1', 'atmospheric pressure 3000 hPa', 'temperature'], 'relations': ['gauge_to_data (RainGauge No.1 → RainfallData records)', 'pressure_to_temperature_effect (atmospheric pressure → temperature correlation)'], 'intent': 'calculate_impact_of_pressure_on_temperature_and_analyze_data_effects', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [3000], 'units': {'atmospheric_pressure': 'hPa (hectopascals)', 'temperature': '°C (Celsius)', 'conversion': 'Standard atmospheric pressure-temperature relationships (e.g., gas laws, environmental lapse rate)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.3', '18.5', '25.0', '20.0', '28.0']}], 'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Mountainside, Sichuan', 'Urban Area, Beijing', 'Coastal Area, Shanghai', 'Plateau, Tibet', 'Forest Area, Yunnan']}]}}\nA hypothetical reasoning question is as follows:\nAssuming that the atmospheric pressure measured by rain gauge No. 1 reaches 3000 hectopascals over a certain period, calculate its impact on temperature and analyze the potential effects on data collection.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, CollectionTime, AtmosphericPressureHpa, TemperatureCelsius, (TemperatureCelsius * (1 + 3000 / 1013.25)) AS EstimatedTemperature, CASE WHEN AtmosphericPressureHpa = 3000 THEN '可能影响数据采集' ELSE '数据采集正常' END AS DataImpact FROM RainfallData WHERE GaugeId = 1 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59';",
        "db_id": "RainGauge"
    },
    {
        "id": 96,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Heavy Rainfall Alert', 'rainfall threshold', 'rainfall amount'], 'relations': ['threshold_to_data (RainfallWarningRule.ThresholdValue → RainfallData.RainfallMm)', 'alert_to_analysis (Heavy Rainfall Alert → HistoricalRainfallAnalysis.AnalysisResult)'], 'intent': 'calculate_impact_of_threshold_on_rainfall_amount', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [25, 50, 100], 'units': {'rainfall_threshold': 'mm (millimeters)', 'rainfall_amount': 'mm (millimeters)', 'intensity': 'mm/h (millimeters per hour)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['9', '8', '6', '10', '7']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}], 'RainGauge.RainfallData': [{'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}, {'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}]}}\nA physical knowledge question is as follows:\nCalculate the impact of rainfall threshold in Heavy Rainfall Alert on rainfall amount,\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RuleName, ThresholdValue, RainfallMm, (RainfallMm * (1 + ThresholdValue / 100)) AS EstimatedRainfall FROM RainfallWarningRule JOIN RainfallData ON RainfallWarningRule.ParameterType = '降雨量' AND RainfallData.RainfallMm > RainfallWarningRule.ThresholdValue WHERE RainfallWarningRule.RuleName = 'Heavy Rainfall Alert';",
        "db_id": "RainGauge"
    },
    {
        "id": 97,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Rainfall Threshold', 'Rainfall Intensity'], 'relations': ['threshold_to_intensity (ThresholdValue ↔ RainfallIntensityMmH)'], 'intent': 'calculate_correlation_between_threshold_and_intensity', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['ThresholdValue (from RainfallWarningRule)', 'RainfallIntensityMmH (from RainfallData)'], 'units': {'rainfall_intensity': 'mm/h (millimeters per hour)', 'threshold_value': 'unit specified in ThresholdUnit (likely mm/h for rainfall intensity)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}]}}\nA mathematical logic question is as follows:\nCalculate the correlation between the rainfall threshold and rainfall intensity in the Heavy Rainfall Alert.\nyour response just have a SQL without anything.\n",
        "solution": "WITH ThresholdData AS (SELECT ThresholdValue FROM RainfallWarningRule WHERE RuleName = 'Heavy Rainfall Alert' AND ParameterType = '降雨量'), IntensityData AS (SELECT RainfallIntensityMmH FROM RainfallData) SELECT (SUM((ThresholdValue - (SELECT AVG(ThresholdValue) FROM ThresholdData)) * (RainfallIntensityMmH - (SELECT AVG(RainfallIntensityMmH) FROM IntensityData))) / (SQRT(SUM(POWER(ThresholdValue - (SELECT AVG(ThresholdValue) FROM ThresholdData), 2)) * SUM(POWER(RainfallIntensityMmH - (SELECT AVG(RainfallIntensityMmH) FROM IntensityData), 2))))) AS PearsonCorrelation FROM ThresholdData, IntensityData;",
        "db_id": "RainGauge"
    },
    {
        "id": 98,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall threshold', 'equipment failure', 'Heavy Rainfall Alert'], 'relations': ['threshold_to_alert (rainfall threshold → Heavy Rainfall Alert)', 'alert_to_failure (Heavy Rainfall Alert → equipment failure risk)'], 'intent': 'assess_equipment_failure_risk_from_rainfall', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': ['ThresholdValue'], 'units': {'rainfall_threshold': 'ThresholdUnit (e.g., mm, mm/h)', 'failure_risk': 'boolean (yes/no)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}], 'RainGauge.RainGauge': [{'column': 'Status', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['Running', 'Maintenance', 'Stopped']}], 'RainGauge.RainfallData': [{'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}]}}\nA common sense reasoning question is as follows:\nBased on the rainfall threshold in the Heavy Rainfall Alert, determine whether it may cause equipment failure.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RuleName, ThresholdValue, CASE WHEN ThresholdValue >= 0 AND ThresholdValue <= 1000 THEN '正常运行' ELSE '可能引发设备故障' END AS DeviceStatus FROM RainfallWarningRule WHERE RuleName = 'Heavy Rainfall Alert';",
        "db_id": "RainGauge"
    },
    {
        "id": 99,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall threshold 10,000 mm', 'Heavy Rainfall Alert'], 'relations': ['threshold_to_data (10,000 mm → RainfallData.RainfallMm comparison)', 'alert_to_rule (Heavy Rainfall Alert → RainfallWarningRule)'], 'intent': 'analyze_threshold_impact_on_data_collection', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [10000], 'units': {'rainfall': 'mm (millimeters)', 'intensity': 'mm/h (millimeters per hour)', 'threshold_comparison': 'exceedance analysis (10,000 mm vs actual RainfallMm values)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}], 'RainGauge.RainfallData': [{'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}], 'RainGauge.RainGauge': [{'column': 'Status', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['Running', 'Maintenance', 'Stopped']}, {'column': 'ElevationMeters', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1200.5', '50.0', '10.0', '4500.0', '1800.0']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}, {'column': 'MaxRainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '25.0', '12.0', '8.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the rainfall threshold in the Heavy Rainfall Alert reaches 10,000 millimeters, calculate its impact on rainfall measurements and analyze the potential effects on data collection.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, RainfallMm, 10000 AS AssumedThresholdValue, RainfallMm * (1 + 10000 / 100) AS AdjustedRainfallMm, CASE WHEN 10000 > (SELECT ThresholdValue FROM RainfallWarningRule WHERE RuleName = 'Heavy Rainfall Alert' AND ParameterType = '降雨量') THEN '可能引发设备故障或数据失真' ELSE '降雨量阈值在正常范围内' END AS PotentialImpact FROM RainfallData;",
        "db_id": "RainGauge"
    },
    {
        "id": 100,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['total rainfall', 'Low Rainfall Alert'], 'relations': ['rainfall_to_pressure (rainfall depth → pressure calculation)'], 'intent': 'calculate_ground_pressure_from_rainfall', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1000, 9.81], 'units': {'rainfall': 'mm (millimeters)', 'pressure': 'Pa (Pascals)', 'conversion': 'rainfall_depth_meters = total_rainfall_mm / 1000'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.HistoricalRainfallAnalysis': [{'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['9', '8', '6', '10', '7']}]}}\nA physical knowledge question is as follows:\nCalculate the pressure exerted on the ground by the total rainfall in the Low Rainfall Alert.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RuleName, TotalRainfallMm, (TotalRainfallMm * 1000 * 9.81 / 1000) AS PressurePa FROM HistoricalRainfallAnalysis JOIN RainfallWarningRule ON HistoricalRainfallAnalysis.GaugeId = RainfallWarningRule.Id WHERE RainfallWarningRule.RuleName = 'Low Rainfall Alert';",
        "db_id": "RainGauge"
    },
    {
        "id": 101,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Low Rainfall Alert', 'TotalRainfallMm', 'standard deviation'], 'relations': ['filter_by_threshold (RainfallWarningRule.ThresholdValue applied to HistoricalRainfallAnalysis.TotalRainfallMm)'], 'intent': 'calculate_standard_deviation_and_analyze_rainfall_variability', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['RainfallWarningRule.ThresholdValue'], 'units': {'rainfall': 'mm (millimeters)', 'standard_deviation': 'mm (derived from TotalRainfallMm)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.HistoricalRainfallAnalysis': [{'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'RuleName', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Heavy Rainfall Alert', 'High Rainfall Intensity Alert', 'Low Rainfall Alert', 'Extreme Rainfall Alert', 'Moderate Rainfall Intensity Alert']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}]}}\nA mathematical logic question is as follows:\nCalculate the standard deviation of the total rainfall in the Low Rainfall Alert and analyze the variability of the rainfall.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SQRT(SUM(POWER(TotalRainfallMm - (SELECT AVG(TotalRainfallMm) FROM HistoricalRainfallAnalysis WHERE GaugeId IN (SELECT Id FROM RainGauge WHERE Status = '运行')), 2)) / COUNT(*)) AS StandardDeviation FROM HistoricalRainfallAnalysis WHERE GaugeId IN (SELECT Id FROM RainGauge WHERE Status = '运行');",
        "db_id": "RainGauge"
    },
    {
        "id": 102,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['RainfallWarningRule', 'HistoricalRainfallAnalysis', 'TotalRainfallMm', 'ThresholdValue'], 'relations': ['rule_to_threshold (RainfallWarningRule → ThresholdValue)', 'rainfall_to_threshold_comparison (TotalRainfallMm ≥ ThresholdValue)'], 'intent': 'determine_flood_trigger', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': ['ThresholdValue (dynamic from RainfallWarningRule)', 'TotalRainfallMm (dynamic from HistoricalRainfallAnalysis)'], 'units': {'rainfall': 'mm (millimeters)', 'threshold_value': 'mm (ThresholdUnit field confirms unit consistency)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'IsActive', 'type': 'TINYINT', 'primary_key': False, 'comment': '', 'examples': ['1']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}, {'column': 'AnalysisResult', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['September rainfall analysis: Moderate rainfall with occasional heavy downpours.', 'August rainfall analysis: Heavy rainfall with consistent intensity.', 'July rainfall analysis: Extreme rainfall with high intensity.', 'June rainfall analysis: Moderate rainfall with light intensity.', 'May rainfall analysis: Light rainfall with low intensity.']}]}}\nA common sense reasoning question is as follows:\nAccording to the total rainfall in a certain rainfall warning rule, determine whether it may trigger a flood.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AnalysisTime, TotalRainfallMm, CASE WHEN TotalRainfallMm > (SELECT ThresholdValue FROM RainfallWarningRule WHERE RuleName = '洪水预警' AND ParameterType = '降雨量') THEN '可能引发洪水' ELSE '总降雨量在安全范围内' END AS FloodRisk FROM HistoricalRainfallAnalysis;",
        "db_id": "RainGauge"
    },
    {
        "id": 103,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['total rainfall -1000 millimeters', 'Low Rainfall Alert'], 'relations': ['rainfall_to_pressure (rainfall volume → ground pressure calculation)', 'environmental_impact_analysis (pressure → soil erosion, groundwater recharge, ecosystem stress)'], 'intent': 'calculate_pressure_exerted_by_rainfall_and_analyze_environmental_impacts', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [-1000], 'units': {'rainfall': 'mm (millimeters)', 'pressure': 'Pa (Pascals) calculated via hydrostatic pressure formula (P = ρgh)', 'conversion': '1 mm rainfall = 0.001 m water depth → P = 1000 kg/m³ * 9.81 m/s² * h(m)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.HistoricalRainfallAnalysis': [{'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}], 'RainGauge.RainfallData': [{'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['9', '8', '6', '10', '7']}, {'column': 'RuleDescription', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['Triggered when rainfall exceeds 50 mm. Indicates potential flooding risk.', 'Triggered when rainfall intensity exceeds 10 mm/h. Indicates heavy downpour.', 'Triggered when rainfall drops below 5 mm. Indicates potential drought.', 'Triggered when rainfall exceeds 100 mm. Indicates severe flooding risk.', 'Triggered when rainfall intensity exceeds 5 mm/h. Indicates moderate rain.']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the total rainfall in the Low Rainfall Alert reaches -1000 millimeters, calculate the pressure it exerts on the ground and analyze its potential environmental impacts.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AnalysisTime, TotalRainfallMm, -1000 AS AssumedTotalRainfallMm, (-1000 * 1000 * 9.81 / 1000) AS PressurePa, CASE WHEN -1000 < (SELECT ThresholdValue FROM RainfallWarningRule WHERE RuleName = 'Low Rainfall Alert' AND ParameterType = '降雨量') THEN '可能导致干旱或土壤干裂' ELSE '降雨量在正常范围内' END AS EnvironmentalImpact FROM HistoricalRainfallAnalysis;",
        "db_id": "RainGauge"
    },
    {
        "id": 104,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Extreme Rainfall Alert', 'average rainfall intensity', 'ground impact force'], 'relations': ['alert_to_threshold_value (Extreme Rainfall Alert → ThresholdValue)', 'intensity_to_force (average rainfall intensity → impact force)'], 'intent': 'calculate_impact_force_rainfall', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['ThresholdValue (from RainfallWarningRule)'], 'units': {'rainfall_intensity': 'mm/h (millimeters per hour)', 'impact_force': 'N/m² (Newtons per square meter, assuming standard water density and impact velocity conversion)', 'conversion': '1 mm/h = 2.7778×10⁻⁴ m/s; Force = density_water × velocity_raindrop × rainfall_intensity (requires assumptions about terminal velocity and area)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'AverageRainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '6.8', '10.5', '3.5', '1.8']}]}}\nA physical knowledge question is as follows:\nCalculate the impact force of the average rainfall intensity in the Extreme Rainfall Alert on the ground.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RuleName, AverageRainfallIntensityMmH, (AverageRainfallIntensityMmH * 1 * 1000 * 9.81 / 3600) AS ImpactForceN FROM HistoricalRainfallAnalysis JOIN RainfallWarningRule ON HistoricalRainfallAnalysis.GaugeId = RainfallWarningRule.Id WHERE RainfallWarningRule.RuleName = 'Extreme Rainfall Alert';",
        "db_id": "RainGauge"
    },
    {
        "id": 105,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Extreme Rainfall Alert', 'HistoricalRainfallAnalysis', 'RainfallIntensity'], 'relations': ['alert_to_threshold (Extreme Rainfall Alert → RainfallWarningRule.ThresholdValue)', 'analysis_to_intensity (HistoricalRainfallAnalysis → AverageRainfallIntensityMmH)'], 'intent': 'calculate_standard_deviation_and_analyze_variability', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['RainfallWarningRule.ThresholdValue'], 'units': {'rainfall_intensity': 'mm/h (millimeters per hour)', 'threshold_unit': 'mm/h (from RainfallWarningRule.ThresholdUnit)', 'calculation_result': 'standard_deviation (unit: mm/h)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.HistoricalRainfallAnalysis': [{'column': 'AverageRainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '6.8', '10.5', '3.5', '1.8']}], 'RainGauge.RainfallWarningRule': [{'column': 'RuleName', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Heavy Rainfall Alert', 'High Rainfall Intensity Alert', 'Low Rainfall Alert', 'Extreme Rainfall Alert', 'Moderate Rainfall Intensity Alert']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA mathematical logic question is as follows:\nCalculate the standard deviation of the average rainfall intensity in the Extreme Rainfall Alert and analyze the variability of its rainfall intensity.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SQRT(SUM(POWER(AverageRainfallIntensityMmH - (SELECT AVG(AverageRainfallIntensityMmH) FROM HistoricalRainfallAnalysis WHERE GaugeId IN (SELECT Id FROM RainGauge WHERE Status = '运行')), 2)) / COUNT(*)) AS StandardDeviation FROM HistoricalRainfallAnalysis WHERE GaugeId IN (SELECT Id FROM RainGauge WHERE Status = '运行');",
        "db_id": "RainGauge"
    },
    {
        "id": 106,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Extreme Rainfall Alert', 'RainfallWarningRule', 'urban waterlogging threshold'], 'relations': ['alert_to_threshold (alert average intensity → threshold comparison)', 'threshold_to_severity (waterlogging criteria → severity level)'], 'intent': 'determine_waterlogging_trigger_condition', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['RainfallWarningRule.ThresholdValue', 'HistoricalRainfallAnalysis.AverageRainfallIntensityMmH'], 'units': {'rainfall_intensity': 'mm/h (millimeters per hour)', 'conversion': 'direct_value_comparison'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallWarningRule': [{'column': 'RuleName', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Heavy Rainfall Alert', 'High Rainfall Intensity Alert', 'Low Rainfall Alert', 'Extreme Rainfall Alert', 'Moderate Rainfall Intensity Alert']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['9', '8', '6', '10', '7']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'AverageRainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '6.8', '10.5', '3.5', '1.8']}]}}\nA common sense reasoning question is as follows:\nBased on the average rainfall intensity in the Extreme Rainfall Alert, determine whether it may trigger urban waterlogging.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AnalysisTime, AverageRainfallIntensityMmH, CASE WHEN AverageRainfallIntensityMmH > (SELECT ThresholdValue FROM RainfallWarningRule WHERE RuleName = 'Extreme Rainfall Alert' AND ParameterType = '降雨强度') THEN '可能引发城市内涝' ELSE '降雨强度在安全范围内' END AS FloodRisk FROM HistoricalRainfallAnalysis;",
        "db_id": "RainGauge"
    },
    {
        "id": 107,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Extreme Rainfall Alert', 'rainfall intensity 1000 mm/hour'], 'relations': ['rainfall_intensity_to_impact_force', 'impact_force_to_environmental_effects'], 'intent': 'calculate_impact_force_and_analyze_environmental_effects', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1000], 'units': {'rainfall_intensity': 'mm/hour (converted to m/s for calculation)', 'impact_force': 'N/m² (requires density of water, gravity acceleration, and velocity calculations)', 'environmental_effects': 'qualitative analysis of erosion, flooding, soil saturation'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}], 'RainGauge.RainfallData': [{'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}, {'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}], 'RainGauge.RainGauge': [{'column': 'ElevationMeters', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1200.5', '50.0', '10.0', '4500.0', '1800.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the average rainfall intensity in the Extreme Rainfall Alert reaches 1000 mm/hour, calculate the impact force it exerts on the ground and analyze its potential environmental effects.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AnalysisTime, AverageRainfallIntensityMmH, 1000 AS AssumedRainfallIntensity, (1000 * 1 * 1000 * 9.81 / 3600) AS ImpactForceN, CASE WHEN 1000 > (SELECT ThresholdValue FROM RainfallWarningRule WHERE RuleName = 'Extreme Rainfall Alert' AND ParameterType = '降雨强度') THEN '可能引发洪水或土壤侵蚀' ELSE '降雨强度在正常范围内' END AS EnvironmentalImpact FROM HistoricalRainfallAnalysis;",
        "db_id": "RainGauge"
    },
    {
        "id": 108,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Light Rainfall Alert', 'Maximum Rainfall Intensity', 'Impact Force on Ground'], 'relations': ['alert_to_threshold (Light Rainfall Alert → ThresholdValue)', 'intensity_to_force (Rainfall Intensity → Impact Force)'], 'intent': 'calculate_impact_force', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['ThresholdValue from RainfallWarningRule', 'Density of water (1000 kg/m³)', 'Gravitational acceleration (9.81 m/s²)'], 'units': {'rainfall_intensity': 'mm/h (threshold unit)', 'conversion': '1 mm/h = 2.7778×10^-7 m/s', 'force': 'Newtons (N)', 'density': 'kg/m³', 'acceleration': 'm/s²'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallWarningRule': [{'column': 'RuleName', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Heavy Rainfall Alert', 'High Rainfall Intensity Alert', 'Low Rainfall Alert', 'Extreme Rainfall Alert', 'Moderate Rainfall Intensity Alert']}, {'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}]}}\nA physical knowledge question is as follows:\nCalculate the impact force exerted by the maximum rainfall intensity in the Light Rainfall Alert on the ground.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RuleName, MaxRainfallIntensityMmH, (MaxRainfallIntensityMmH * 1 * 1000 * 9.81 / 3600) AS ImpactForceN FROM HistoricalRainfallAnalysis JOIN RainfallWarningRule ON HistoricalRainfallAnalysis.GaugeId = RainfallWarningRule.Id WHERE RainfallWarningRule.RuleName = 'Light Rainfall Alert';",
        "db_id": "RainGauge"
    },
    {
        "id": 109,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Light Rainfall Alert', 'maximum rainfall intensity', 'standard deviation', 'variability'], 'relations': ['RainfallWarningRule_to_threshold (Light Rainfall Alert → ThresholdValue)', 'HistoricalRainfallAnalysis_to_max_intensity (MaxRainfallIntensityMmH)', 'threshold_to_intensity_filter (ThresholdValue ≤ MaxRainfallIntensityMmH)'], 'intent': 'calculate_standard_deviation_of_max_rainfall_intensity_under_alert', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [\"ThresholdValue from RainfallWarningRule where RuleName = 'Light Rainfall Alert'\"], 'units': {'rainfall_intensity': 'mm/h (millimeters per hour)', 'standard_deviation': 'mm/h (same unit as rainfall intensity)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.HistoricalRainfallAnalysis': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'MaxRainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '25.0', '12.0', '8.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'RuleName', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Heavy Rainfall Alert', 'High Rainfall Intensity Alert', 'Low Rainfall Alert', 'Extreme Rainfall Alert', 'Moderate Rainfall Intensity Alert']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA mathematical logic question is as follows:\nCalculate the standard deviation of the maximum rainfall intensity in the Light Rainfall Alert and analyze the variability of its rainfall intensity.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SQRT(SUM(POWER(MaxRainfallIntensityMmH - (SELECT AVG(MaxRainfallIntensityMmH) FROM HistoricalRainfallAnalysis WHERE GaugeId IN (SELECT Id FROM RainGauge WHERE Status = '运行')), 2)) / COUNT(*)) AS StandardDeviation FROM HistoricalRainfallAnalysis WHERE GaugeId IN (SELECT Id FROM RainGauge WHERE Status = '运行');",
        "db_id": "RainGauge"
    },
    {
        "id": 110,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Light Rainfall Alert', 'maximum rainfall intensity', 'outdoor activities'], 'relations': ['alert_to_threshold (Light Rainfall Alert → ThresholdValue)', 'intensity_to_analysis (MaxRainfallIntensityMmH → HistoricalRainfallAnalysis)'], 'intent': 'assess_impact_of_rainfall_on_activities', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [], 'units': {'rainfall_intensity': 'mm/h (millimeters per hour)', 'threshold': 'threshold value from RainfallWarningRule table'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallWarningRule': [{'column': 'RuleName', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Heavy Rainfall Alert', 'High Rainfall Intensity Alert', 'Low Rainfall Alert', 'Extreme Rainfall Alert', 'Moderate Rainfall Intensity Alert']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'MaxRainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '25.0', '12.0', '8.0']}]}}\nA common sense reasoning question is as follows:\nBased on the maximum rainfall intensity in the Light Rainfall Alert, determine whether it may affect outdoor activities.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AnalysisTime, MaxRainfallIntensityMmH, CASE WHEN MaxRainfallIntensityMmH > (SELECT ThresholdValue FROM RainfallWarningRule WHERE RuleName = 'Light Rainfall Alert' AND ParameterType = '降雨强度') THEN '可能影响户外活动' ELSE '降雨强度在安全范围内' END AS OutdoorActivityImpact FROM HistoricalRainfallAnalysis;",
        "db_id": "RainGauge"
    },
    {
        "id": 111,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Light Rainfall Alert', 'maximum rainfall intensity 10,000 millimeters per hour'], 'relations': ['rainfall_intensity_to_alert (10,000 mm/h → exceeds threshold in RainfallWarningRule)', 'impact_force_analysis (hydrodynamic force calculation)'], 'intent': 'calculate_rainfall_impact_force_and_environmental_effects', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [10000], 'units': {'rainfall_intensity': 'millimeters per hour (mm/h)', 'force': 'newtons (N, implied by physics formula)', 'conversion': '10,000 mm/h converted to m/s for force calculation (2.7778 m/s)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}, {'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'MaxRainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '25.0', '12.0', '8.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['9', '8', '6', '10', '7']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the maximum rainfall intensity in the Light Rainfall Alert reaches 10,000 millimeters per hour, calculate the impact force it generates on the ground and analyze its potential environmental effects.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AnalysisTime, MaxRainfallIntensityMmH, 10000 AS AssumedMaxRainfallIntensity, (10000 * 1 * 1000 * 9.81 / 3600) AS ImpactForceN, CASE WHEN 10000 > (SELECT ThresholdValue FROM RainfallWarningRule WHERE RuleName = 'Light Rainfall Alert' AND ParameterType = '降雨强度') THEN '可能引发洪水或土壤侵蚀' ELSE '降雨强度在正常范围内' END AS EnvironmentalImpact FROM HistoricalRainfallAnalysis;",
        "db_id": "RainGauge"
    },
    {
        "id": 112,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Moderate Rainfall Intensity Alert', 'Minimum Rainfall Intensity', 'Impact Force on Ground'], 'relations': ['alert_to_threshold (Moderate Rainfall Intensity Alert → ThresholdValue)', 'intensity_to_impact (Minimum Rainfall Intensity → Impact Force)'], 'intent': 'calculate_impact_force_from_rainfall', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [], 'units': {'rainfall_intensity': 'mm/h (millimeters per hour)', 'impact_force': 'N/m² (Newtons per square meter, derived from rainfall kinetic energy)', 'conversion': 'Impact force = 0.5 * density_of_water * (rainfall_intensity_m/s)^2 * surface_area'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['9', '8', '6', '10', '7']}, {'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'MinRainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['0.5', '1.0', '2.0', '0.2', '0.1']}]}}\nA physical knowledge question is as follows:\nCalculate the impact force on the ground caused by the minimum rainfall intensity in the Moderate Rainfall Intensity Alert.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RuleName, MinRainfallIntensityMmH, (MinRainfallIntensityMmH * 1 * 1000 * 9.81 / 3600) AS ImpactForceN FROM HistoricalRainfallAnalysis JOIN RainfallWarningRule ON HistoricalRainfallAnalysis.GaugeId = RainfallWarningRule.Id WHERE RainfallWarningRule.RuleName = 'Moderate Rainfall Intensity Alert';",
        "db_id": "RainGauge"
    },
    {
        "id": 113,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Moderate Rainfall Intensity Alert', 'Minimum Rainfall Intensity', 'Standard Deviation'], 'relations': ['alert_to_threshold (Moderate Alert → ThresholdValue in RainfallWarningRule)', 'analysis_to_min_intensity (HistoricalRainfallAnalysis → MinRainfallIntensityMmH)', 'statistical_analysis (Standard Deviation → MinRainfallIntensityMmH distribution)'], 'intent': 'statistical_analysis_of_rainfall_variability', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [\"ThresholdValue from RainfallWarningRule where SeverityLevel='Moderate'\"], 'units': {'rainfall_intensity': 'mm/h (millimeters per hour)', 'threshold_unit': 'mm/h (from ThresholdUnit column)', 'standard_deviation_unit': 'mm/h (derived from intensity unit)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallWarningRule': [{'column': 'RuleName', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Heavy Rainfall Alert', 'High Rainfall Intensity Alert', 'Low Rainfall Alert', 'Extreme Rainfall Alert', 'Moderate Rainfall Intensity Alert']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['9', '8', '6', '10', '7']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'MinRainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['0.5', '1.0', '2.0', '0.2', '0.1']}, {'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}]}}\nA mathematical logic question is as follows:\nCalculate the standard deviation of the minimum rainfall intensity in the Moderate Rainfall Intensity Alert and analyze the variability of its rainfall intensity.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SQRT(SUM(POWER(MinRainfallIntensityMmH - (SELECT AVG(MinRainfallIntensityMmH) FROM HistoricalRainfallAnalysis WHERE GaugeId IN (SELECT Id FROM RainGauge WHERE Status = '运行')), 2)) / COUNT(*)) AS StandardDeviation FROM HistoricalRainfallAnalysis WHERE GaugeId IN (SELECT Id FROM RainGauge WHERE Status = '运行');",
        "db_id": "RainGauge"
    },
    {
        "id": 114,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Moderate Rainfall Intensity Alert', 'minimum rainfall intensity', 'crop growth'], 'relations': ['alert_to_threshold (Moderate Alert → ThresholdValue)', 'threshold_to_impact (ThresholdValue → crop growth analysis)'], 'intent': 'assess_impact_on_crop_growth', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': ['ThresholdValue from RainfallWarningRule', 'MinRainfallIntensityMmH from HistoricalRainfallAnalysis'], 'units': {'rainfall_intensity': 'mm/h (millimeters per hour)', 'conversion': 'ThresholdUnit from RainfallWarningRule (assumed mm/h)', 'analysis_result': 'AnalysisResult from HistoricalRainfallAnalysis (qualitative)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallWarningRule': [{'column': 'RuleName', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Heavy Rainfall Alert', 'High Rainfall Intensity Alert', 'Low Rainfall Alert', 'Extreme Rainfall Alert', 'Moderate Rainfall Intensity Alert']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'MinRainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['0.5', '1.0', '2.0', '0.2', '0.1']}, {'column': 'AnalysisResult', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['September rainfall analysis: Moderate rainfall with occasional heavy downpours.', 'August rainfall analysis: Heavy rainfall with consistent intensity.', 'July rainfall analysis: Extreme rainfall with high intensity.', 'June rainfall analysis: Moderate rainfall with light intensity.', 'May rainfall analysis: Light rainfall with low intensity.']}]}}\nA common sense reasoning question is as follows:\nBased on the minimum rainfall intensity in the Moderate Rainfall Intensity Alert, determine whether it may affect crop growth and return the relevant analysis results.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT HRA.AnalysisResult FROM HistoricalRainfallAnalysis HRA JOIN RainfallWarningRule RWR ON HRA.GaugeId = RWR.Id WHERE RWR.RuleName = 'Moderate Rainfall Intensity Alert' AND HRA.MinRainfallIntensityMmH < 5;",
        "db_id": "RainGauge"
    },
    {
        "id": 115,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['-1000 mm/hour rainfall intensity', 'Moderate Rainfall Intensity Alert'], 'relations': ['rainfall_intensity_to_alert_threshold (-1000 mm/h → RainfallWarningRule.ThresholdValue)', 'environmental_impact_analysis (force → HistoricalRainfallAnalysis.AnalysisResult)'], 'intent': 'calculate_force_of_rainfall_impact_and_analyze_environmental_effects', 'reasoning_type': 'physical_knowledge_reasoning (force calculation) + common_sense_understanding_reasoning (environmental impact analysis)', 'numerical_values': [-1000], 'units': {'rainfall_intensity': 'mm/hour', 'force': 'Newtons (N)', 'conversion_formula': 'Force (N) = density_water (kg/m³) × rainfall_intensity (m/s) × area (m²) × gravity (m/s²)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['9', '8', '6', '10', '7']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'AnalysisResult', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['September rainfall analysis: Moderate rainfall with occasional heavy downpours.', 'August rainfall analysis: Heavy rainfall with consistent intensity.', 'July rainfall analysis: Extreme rainfall with high intensity.', 'June rainfall analysis: Moderate rainfall with light intensity.', 'May rainfall analysis: Light rainfall with low intensity.']}], 'RainGauge.RainGauge': [{'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Mountainside, Sichuan', 'Urban Area, Beijing', 'Coastal Area, Shanghai', 'Plateau, Tibet', 'Forest Area, Yunnan']}, {'column': 'ElevationMeters', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1200.5', '50.0', '10.0', '4500.0', '1800.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the minimal rainfall intensity in the Moderate Rainfall Intensity Alert reaches -1000 mm/hour, calculate its impact force on the ground and analyze its potential environmental effects.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AnalysisTime, MinRainfallIntensityMmH, -1000 AS AssumedMinRainfallIntensity, (-1000 * 1 * 1000 * 9.81 / 3600) AS ImpactForceN, CASE WHEN -1000 < (SELECT ThresholdValue FROM RainfallWarningRule WHERE RuleName = 'Moderate Rainfall Intensity Alert' AND ParameterType = '降雨强度') THEN '可能导致干旱或土壤干裂' ELSE '降雨强度在正常范围内' END AS EnvironmentalImpact FROM HistoricalRainfallAnalysis;",
        "db_id": "RainGauge"
    },
    {
        "id": 116,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall intensity', 'rainfall depth', 'ground pressure', 'rainfall monitoring data'], 'relations': ['rainfall_intensity_to_pressure (RainfallIntensityMmH → pressure calculation)', 'rainfall_depth_to_pressure (RainfallMm → hydrostatic pressure calculation)'], 'intent': 'calculate_ground_pressure_exerted_by_rainfall', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [9.81, 1000], 'units': {'rainfall_depth': 'mm (millimeters)', 'rainfall_intensity': 'mm/h (millimeters per hour)', 'pressure': 'Pa (Pascals)', 'gravity': 'm/s² (meters per second squared)', 'water_density': 'kg/m³ (kilograms per cubic meter)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}, {'column': 'AverageRainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '6.8', '10.5', '3.5', '1.8']}]}}\nA physical knowledge question is as follows:\nCalculate the pressure exerted by the rainfall on the ground based on rainfall monitoring data.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, RainfallMm, (RainfallMm * 1000 * 9.81 / 1000) AS PressurePa FROM RainfallData;",
        "db_id": "RainGauge"
    },
    {
        "id": 117,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall (RainfallMm)', 'rainfall intensity (RainfallIntensityMmH)'], 'relations': ['correlation_between_rainfall_and_intensity'], 'intent': 'calculate_correlation_coefficient', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'rainfall': 'mm (millimeters)', 'rainfall_intensity': 'mm/h (millimeters per hour)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}]}}\nA mathematical logic question is as follows:\nCalculate the correlation between rainfall and rainfall intensity in the precipitation monitoring data.\nyour response just have a SQL without anything.\n",
        "solution": "WITH RainfallStats AS (SELECT RainfallMm AS X, RainfallIntensityMmH AS Y, AVG(RainfallMm) OVER () AS X_avg, AVG(RainfallIntensityMmH) OVER () AS Y_avg FROM RainfallData) SELECT (SUM((X - X_avg) * (Y - Y_avg)) / (SQRT(SUM(POWER(X - X_avg, 2)) * SUM(POWER(Y - Y_avg, 2))))) AS PearsonCorrelation FROM RainfallStats;",
        "db_id": "RainGauge"
    },
    {
        "id": 118,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['RainfallData', 'RainfallWarningRule', 'RainGauge', 'HistoricalRainfallAnalysis'], 'relations': ['RainfallData_to_RainGauge (GaugeId)', 'RainfallData_to_HistoricalRainfallAnalysis (time-based correlation)', 'RainfallWarningRule_to_FloodRisk (threshold comparison)'], 'intent': 'assess_flood_likelihood_based_on_rainfall_data', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': ['ThresholdValue', 'RainfallMm', 'RainfallIntensityMmH', 'TotalRainfallMm'], 'units': {'rainfall': 'mm (millimeters)', 'intensity': 'mm/h (millimeters per hour)', 'threshold': 'values defined in ThresholdUnit column'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}], 'RainGauge.RainfallWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['9', '8', '6', '10', '7']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}, {'column': 'AnalysisTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}], 'RainGauge.RainGauge': [{'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Mountainside, Sichuan', 'Urban Area, Beijing', 'Coastal Area, Shanghai', 'Plateau, Tibet', 'Forest Area, Yunnan']}]}}\nA common sense reasoning question is as follows:\nBased on rainfall data from a certain rain monitoring station, determine whether it is likely to cause flooding,\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, RainfallMm, CASE WHEN RainfallMm > (SELECT ThresholdValue FROM RainfallWarningRule WHERE ParameterType = '降雨量' AND RuleName = '洪水预警') THEN '可能引发洪水' ELSE '洪水风险较低' END AS FloodRisk FROM RainfallData;",
        "db_id": "RainGauge"
    },
    {
        "id": 119,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall 10,000 millimeters', 'ground pressure', 'environmental impact'], 'relations': ['rainfall_to_pressure (hydrostatic pressure calculation)', 'rainfall_to_environmental_impact (threshold-based hazard analysis)'], 'intent': 'calculate_pressure_from_rainfall_and_analyze_environmental_impact', 'reasoning_type': 'physical knowledge reasoning + common sense understanding reasoning', 'numerical_values': [10000], 'units': {'rainfall': 'mm (millimeters)', 'pressure': 'Pa (Pascals) or hPa (hectopascals)', 'conversion': 'Pressure = density_water × gravity × rainfall_depth (10,000 mm = 10 m)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.HistoricalRainfallAnalysis': [{'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['9', '8', '6', '10', '7']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the rainfall in a precipitation monitoring dataset reaches 10,000 millimeters, calculate its pressure on the ground and analyze its potential environmental impact.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, RainfallMm, (10000 * 1000 * 9.81 / 1000) AS PressurePa, CASE WHEN 10000 > (SELECT ThresholdValue FROM RainfallWarningRule WHERE ParameterType = '降雨量' AND ConditionOperator = '>' AND IsActive = TRUE) THEN '可能导致洪水或土壤侵蚀' ELSE '降雨量在正常范围内' END AS EnvironmentalImpact FROM RainfallData WHERE RainfallMm >= 10000;",
        "db_id": "RainGauge"
    },
    {
        "id": 120,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['humidity', 'atmospheric pressure', 'rainfall monitoring data'], 'relations': ['humidity_to_pressure_correlation', 'data_analysis_relationship (RainfallData.humidity_percent → RainfallData.atmospheric_pressure_hpa)'], 'intent': 'calculate_effect_of_humidity_on_atmospheric_pressure', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [], 'units': {'humidity': '% (percentage)', 'atmospheric_pressure': 'hPa (hectopascals)', 'conversion': 'Humidity percentage ↔ Pressure in hPa (direct correlation analysis)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'HumidityPercent', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['65.0', '70.0', '80.0', '60.0', '85.0']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}]}}\nA physical knowledge question is as follows:\nCalculate the effect of humidity on atmospheric pressure in a certain rainfall monitoring data.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, HumidityPercent, AtmosphericPressureHpa, (HumidityPercent * 0.01 * AtmosphericPressureHpa) + ((1 - HumidityPercent * 0.01) * AtmosphericPressureHpa) AS EstimatedPressureHpa FROM RainfallData;",
        "db_id": "RainGauge"
    },
    {
        "id": 121,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['humidity', 'wind speed'], 'relations': ['data_pairing (humidity ↔ wind speed)'], 'intent': 'calculate_correlation_between_parameters', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'humidity': '% (Percent)', 'wind_speed': 'm/s (meters per second)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'HumidityPercent', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['65.0', '70.0', '80.0', '60.0', '85.0']}, {'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}]}}\nA mathematical logic question is as follows:\nCalculate the correlation between humidity and wind speed in the rainfall monitoring data.\nyour response just have a SQL without anything.\n",
        "solution": "WITH HumidityWindStats AS (SELECT HumidityPercent AS X, WindSpeedMps AS Y, AVG(HumidityPercent) OVER () AS X_avg, AVG(WindSpeedMps) OVER () AS Y_avg FROM RainfallData) SELECT (SUM((X - X_avg) * (Y - Y_avg)) / (SQRT(SUM(POWER(X - X_avg, 2)) * SUM(POWER(Y - Y_avg, 2))))) AS PearsonCorrelation FROM HumidityWindStats;",
        "db_id": "RainGauge"
    },
    {
        "id": 122,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['humidity', 'wind speed', 'equipment failure', 'Rainfall monitoring system'], 'relations': ['humidity_to_failure (humidity → equipment failure risk)', 'wind_speed_to_failure (wind speed → equipment failure risk)', 'rainfall_data_to_gauge (RainfallData.GaugeId → RainGauge.Id)'], 'intent': 'predict_equipment_failure_based_on_environmental_conditions', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [85, 15], 'units': {'humidity': '% (Percent)', 'wind_speed': 'm/s (Meters per second)', 'threshold': 'Rule-defined values from RainfallWarningRule table'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'HumidityPercent', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['65.0', '70.0', '80.0', '60.0', '85.0']}, {'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}, {'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'RainGauge.RainfallWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}], 'RainGauge.RainGauge': [{'column': 'Status', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['Running', 'Maintenance', 'Stopped']}]}}\nA common sense reasoning question is as follows:\nBased on the humidity and wind speed data from a certain rainfall monitoring system, determine whether equipment failure might be triggered.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT GaugeId, CollectionTime, HumidityPercent, WindSpeedMps, CASE WHEN HumidityPercent > 90 OR WindSpeedMps > 20 THEN '可能引发设备故障' ELSE '设备工作正常' END AS FaultRisk FROM RainfallData;",
        "db_id": "RainGauge"
    },
    {
        "id": 123,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['humidity 200%', 'wind speed 100 m/s', 'atmospheric pressure', 'data collection integrity'], 'relations': ['humidity_to_pressure (non-linear meteorological relationship)', 'wind_speed_to_pressure (direct physical influence)', 'extreme_values_to_data_quality (anomaly detection)'], 'intent': 'calculate_atmospheric_pressure_impact_and_assess_data_quality', 'reasoning_type': 'combined_physical_knowledge_and_common_sense_reasoning', 'numerical_values': [200, 100], 'units': {'humidity': '% (percent)', 'wind_speed': 'm/s (meters per second)', 'atmospheric_pressure': 'hPa (hectopascals)', 'threshold_conversion': 'humidity >100% indicates sensor error, wind speed >70 m/s classified as catastrophic'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'HumidityPercent', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['65.0', '70.0', '80.0', '60.0', '85.0']}, {'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA hypothetical reasoning question is as follows:\nAssuming that in a certain rainfall monitoring data, the humidity reaches 200% and the wind speed reaches 100 meters per second, calculate its impact on atmospheric pressure and analyze its potential effects on data collection.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, HumidityPercent, WindSpeedMps, AtmosphericPressureHpa, (200 * 0.01 * AtmosphericPressureHpa) + ((1 - 200 * 0.01) * AtmosphericPressureHpa) AS EstimatedPressureHpa, CASE WHEN HumidityPercent = 200 OR WindSpeedMps = 100 THEN '可能影响数据采集' ELSE '数据采集正常' END AS DataImpact FROM RainfallData;",
        "db_id": "RainGauge"
    },
    {
        "id": 124,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['wind speed', 'rainfall distribution', 'RainfallData table'], 'relations': ['wind_speed_to_rainfall (WindSpeedMps → RainfallMm)', 'data_correlation (statistical relationship)'], 'intent': 'calculate_influence_of_wind_speed_on_rainfall_distribution', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'wind_speed': 'm/s (meters per second)', 'rainfall': 'mm (millimeters)', 'threshold': 'unitless correlation coefficient'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}]}}\nA physical knowledge question is as follows:\nCalculate the influence of wind speed on rainfall distribution in a certain rainfall monitoring dataset.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RainfallMm, WindSpeedMps, RainfallMm * (1 + WindSpeedMps / 10) AS AdjustedRainfall FROM RainfallData WHERE GaugeId = '特定雨量计ID';",
        "db_id": "RainGauge"
    },
    {
        "id": 125,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['wind speed', 'rainfall monitoring data'], 'relations': ['RainfallData.wind_speed_mps', 'RainfallData.collection_time'], 'intent': 'calculate_average_and_analyze_variation_trend', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'wind_speed': 'm/s (meters per second)', 'time': 'timestamp (collection_time)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}]}}\nA mathematical logic question is as follows:\nCalculate the average value of wind speed in rainfall monitoring data and analyze its variation trend.\nyour response just have a SQL without anything.\n",
        "solution": "WITH WindSpeedStats AS (SELECT AVG(WindSpeedMps) AS AvgWindSpeed, COUNT(*) AS DataPoints FROM RainfallData), WindSpeedTrend AS (SELECT CollectionTime, WindSpeedMps, AVG(WindSpeedMps) OVER (ORDER BY CollectionTime ROWS BETWEEN 10 PRECEDING AND CURRENT ROW) AS MovingAvg FROM RainfallData) SELECT AvgWindSpeed, MovingAvg FROM WindSpeedStats, WindSpeedTrend;",
        "db_id": "RainGauge"
    },
    {
        "id": 126,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['wind speed', 'wind direction', 'equipment failure', 'rainfall monitoring station'], 'relations': ['wind_speed_to_threshold (comparison)', 'equipment_failure_probability (inference)'], 'intent': 'assess_equipment_failure_risk_based_on_wind', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['current_wind_speed_mps', 'current_wind_direction_degrees', 'manufacturer_max_wind_rating_mps'], 'units': {'wind_speed': 'm/s (meters per second)', 'wind_direction': 'degrees (0-360°)', 'threshold': 'm/s (from manufacturer specs)', 'conversion': 'none required'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}, {'column': 'WindDirectionDegrees', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['120.0', '90.0', '150.0', '180.0', '200.0']}], 'RainGauge.RainGauge': [{'column': 'Manufacturer', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RainTech', 'HydroSense']}, {'column': 'GaugeModel', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RG-100', 'RG-200', 'RG-150', 'RG-300', 'RG-250']}], 'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}]}}\nA common sense reasoning question is as follows:\nBased on the wind speed and direction data from a certain rainfall monitoring station, determine whether it is likely to cause equipment failure.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, WindSpeedMps, WindDirectionDegrees, CASE WHEN WindSpeedMps < 0 OR WindSpeedMps > 20 OR WindDirectionDegrees < 0 OR WindDirectionDegrees > 360 THEN '可能引发设备故障' ELSE '设备运行正常' END AS DeviceStatus FROM RainfallData;",
        "db_id": "RainGauge"
    },
    {
        "id": 127,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['wind speed 100 m/s', 'wind direction 720°', 'rainfall distribution', 'data collection accuracy'], 'relations': ['wind_speed_to_rainfall_correlation', 'wind_direction_to_measurement_bias', 'environmental_parameters_to_data_quality'], 'intent': 'analyze_wind_impact_on_rainfall_measurement', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [100, 720], 'units': {'wind_speed': 'm/s (meters per second)', 'wind_direction': '° (degrees)', 'rainfall': 'mm (millimeters)', 'conversion': '720° wind direction normalization (equivalent to 720°-360°=360°, indicating full rotation)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}, {'column': 'WindDirectionDegrees', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['120.0', '90.0', '150.0', '180.0', '200.0']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'AnalysisResult', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['September rainfall analysis: Moderate rainfall with occasional heavy downpours.', 'August rainfall analysis: Heavy rainfall with consistent intensity.', 'July rainfall analysis: Extreme rainfall with high intensity.', 'June rainfall analysis: Moderate rainfall with light intensity.', 'May rainfall analysis: Light rainfall with low intensity.']}], 'RainGauge.RainGauge': [{'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Mountainside, Sichuan', 'Urban Area, Beijing', 'Coastal Area, Shanghai', 'Plateau, Tibet', 'Forest Area, Yunnan']}, {'column': 'ElevationMeters', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1200.5', '50.0', '10.0', '4500.0', '1800.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the wind speed in a certain rainfall monitoring data reaches 100 meters per second and the wind direction reaches 720 degrees, calculate its impact on rainfall distribution and analyze its potential effects on data collection.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, RainfallMm, (RainfallMm * (1 + 100 / 10)) AS AdjustedRainfallMm, CASE WHEN WindSpeedMps >= 100 OR WindDirectionDegrees >= 720 THEN '可能导致设备损坏或数据失真' ELSE '风速和风向在正常范围内' END AS DataImpact FROM RainfallData WHERE WindSpeedMps >= 100 OR WindDirectionDegrees >= 720;",
        "db_id": "RainGauge"
    },
    {
        "id": 128,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['WindDirectionDegrees', 'AtmosphericPressureHpa'], 'relations': ['wind_direction_to_pressure_correlation'], 'intent': 'analyze_relationship_between_wind_direction_and_atmospheric_pressure', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'wind_direction': 'Degrees (°)', 'atmospheric_pressure': 'Hpa (Hectopascals)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'WindDirectionDegrees', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['120.0', '90.0', '150.0', '180.0', '200.0']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}]}}\nA physical knowledge question is as follows:\nCalculate the influence of wind direction on atmospheric pressure in rainfall monitoring data.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT WindDirectionDegrees, AtmosphericPressureHpa, AtmosphericPressureHpa * (1 + WindDirectionDegrees / 360) AS AdjustedPressure FROM RainfallData WHERE GaugeId = '特定雨量计ID';",
        "db_id": "RainGauge"
    },
    {
        "id": 129,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['wind direction', 'rainfall monitoring data', 'trend analysis'], 'relations': ['wind_direction_to_time (WindDirectionDegrees → CollectionTime)', 'temporal_trend (CollectionTime → direction_change_pattern)'], 'intent': 'calculate_average_wind_direction_and_analyze_trend', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [360], 'units': {'direction': 'degrees (0-360°)', 'time': 'datetime', 'circular_statistic': 'true (requires directional mean calculation)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'WindDirectionDegrees', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['120.0', '90.0', '150.0', '180.0', '200.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}]}}\nA mathematical logic question is as follows:\nCalculate the average wind direction in a certain rainfall monitoring data and analyze its trend of change.\nyour response just have a SQL without anything.\n",
        "solution": "WITH WindDirectionStats AS (SELECT AVG(WindDirectionDegrees) AS AvgWindDirection, COUNT(*) AS DataPoints FROM RainfallData), WindDirectionTrend AS (SELECT CollectionTime, WindDirectionDegrees, AVG(WindDirectionDegrees) OVER (ORDER BY CollectionTime ROWS BETWEEN 10 PRECEDING AND CURRENT ROW) AS MovingAvg FROM RainfallData) SELECT AvgWindDirection, MovingAvg FROM WindDirectionStats, WindDirectionTrend;",
        "db_id": "RainGauge"
    },
    {
        "id": 130,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['wind direction', 'atmospheric pressure', 'equipment failure', 'RainGauge'], 'relations': ['RainGauge_to_RainfallData (RainGauge.Id → RainfallData.GaugeId)', 'RainfallData_to_WindDirection (RainfallData.WindDirectionDegrees)', 'RainfallData_to_AtmosphericPressure (RainfallData.AtmosphericPressureHpa)'], 'intent': 'assess_potential_equipment_failure', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [], 'units': {'wind_direction': 'Degrees (°)', 'atmospheric_pressure': 'Hpa (Hectopascals)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Status', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['Running', 'Maintenance', 'Stopped']}], 'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'WindDirectionDegrees', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['120.0', '90.0', '150.0', '180.0', '200.0']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}]}}\nA common sense reasoning question is as follows:\nBased on the wind direction and atmospheric pressure data from a certain rainfall monitoring system, determine whether it may potentially cause equipment failure.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, WindDirectionDegrees, AtmosphericPressureHpa, CASE WHEN WindDirectionDegrees < 0 OR WindDirectionDegrees > 360 OR AtmosphericPressureHpa < 800 OR AtmosphericPressureHpa > 1100 THEN '可能引发设备故障' ELSE '设备运行正常' END AS DeviceStatus FROM RainfallData;",
        "db_id": "RainGauge"
    },
    {
        "id": 131,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['wind direction 720 degrees', 'atmospheric pressure 2000 hPa'], 'relations': ['wind_to_pressure_relationship (wind direction → atmospheric pressure)', 'data_collection_impact (wind direction/atmospheric pressure → RainfallData table)'], 'intent': 'calculate_impact_on_atmospheric_pressure_and_analyze_data_collection_effects', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [720, 2000], 'units': {'wind_direction': 'degrees (circular measurement, normalized to 0-360°)', 'atmospheric_pressure': 'hPa (hectopascals)', 'conversion': '720° = 0° (equivalent) due to 360° modulus'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'WindDirectionDegrees', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['120.0', '90.0', '150.0', '180.0', '200.0']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}]}}\nA hypothetical reasoning question is as follows:\nAssuming that in a certain rainfall monitoring data the wind direction reaches 720 degrees and the atmospheric pressure reaches 2000 hPa, calculate its impact on atmospheric pressure and analyze its potential effects on data collection.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, AtmosphericPressureHpa, (AtmosphericPressureHpa * (1 + 720 / 360)) AS AdjustedAtmosphericPressureHpa, CASE WHEN WindDirectionDegrees >= 720 OR AtmosphericPressureHpa >= 2000 THEN '可能导致设备损坏或数据失真' ELSE '风向和大气压力在正常范围内' END AS DataImpact FROM RainfallData WHERE WindDirectionDegrees >= 720 OR AtmosphericPressureHpa >= 2000;",
        "db_id": "RainGauge"
    },
    {
        "id": 132,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['RainfallMm', 'TemperatureCelsius'], 'relations': ['rainfall_temperature_correlation (RainfallMm ↔ TemperatureCelsius)'], 'intent': 'calculate_relationship_between_rainfall_and_temperature', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['RainfallMm', 'TemperatureCelsius'], 'units': {'rainfall': 'mm (millimeters)', 'temperature': '°C (Celsius)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.3', '18.5', '25.0', '20.0', '28.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}]}}\nA physical knowledge question is as follows:\nCalculating the impact of rainfall on temperature in certain precipitation monitoring data.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RainfallMm, TemperatureCelsius, TemperatureCelsius - (RainfallMm / 10) AS AdjustedTemperature FROM RainfallData WHERE GaugeId = '1';",
        "db_id": "RainGauge"
    },
    {
        "id": 133,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall monitoring dataset', 'average rainfall', 'change trend'], 'relations': ['dataset_to_location (RainfallData.GaugeId → RainGauge.Id)', 'time_series_analysis (RainfallData.CollectionTime → RainfallMm)', 'statistical_computation (RainfallData.RainfallMm → Average)'], 'intent': 'calculate_average_rainfall_and_analyze_trend', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'rainfall': 'mm (millimeters)', 'time': 'datetime (CollectionTime)', 'intensity': 'mm/h (RainfallIntensityMmH)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}], 'RainGauge.RainGauge': [{'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Mountainside, Sichuan', 'Urban Area, Beijing', 'Coastal Area, Shanghai', 'Plateau, Tibet', 'Forest Area, Yunnan']}, {'column': 'Latitude', 'type': 'DECIMAL(10, 6)', 'primary_key': False, 'comment': '', 'examples': ['30.658601', '39.904202', '31.230416', '29.654084', '25.045806']}, {'column': 'Longitude', 'type': 'DECIMAL(10, 6)', 'primary_key': False, 'comment': '', 'examples': ['104.064762', '116.407394', '121.473701', '91.110221', '102.709999']}]}}\nA mathematical logic question is as follows:\nCalculate the average rainfall in a certain rainfall monitoring data set and analyze its change trend.\nyour response just have a SQL without anything.\n",
        "solution": "WITH RainfallStats AS (SELECT AVG(RainfallMm) AS AvgRainfall, COUNT(*) AS DataPoints FROM RainfallData), RainfallTrend AS (SELECT CollectionTime, RainfallMm, AVG(RainfallMm) OVER (ORDER BY CollectionTime ROWS BETWEEN 10 PRECEDING AND CURRENT ROW) AS MovingAvg FROM RainfallData) SELECT AvgRainfall, MovingAvg FROM RainfallStats, RainfallTrend;",
        "db_id": "RainGauge"
    },
    {
        "id": 134,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall intensity', 'temperature', 'equipment failure', 'RainfallWarningRule'], 'relations': ['rainfall_intensity_to_threshold (comparison against RainfallWarningRule.ThresholdValue)', 'temperature_to_threshold (comparison against RainfallWarningRule.ThresholdValue)', 'environmental_condition_to_failure_risk (causal relationship)'], 'intent': 'predict_equipment_failure_risk', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': ['RainfallWarningRule.ThresholdValue', 'RainfallData.RainfallIntensityMmH', 'RainfallData.TemperatureCelsius'], 'units': {'rainfall_intensity': 'mm/h (millimeters per hour)', 'temperature': '°C (Celsius)', 'threshold_units': 'mm/h or °C (depending on ParameterType)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.3', '18.5', '25.0', '20.0', '28.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['9', '8', '6', '10', '7']}, {'column': 'IsActive', 'type': 'TINYINT', 'primary_key': False, 'comment': '', 'examples': ['1']}]}}\nA common sense reasoning question is as follows:\nBased on the rainfall and temperature data from a certain rainfall monitoring system, determine whether it is likely to cause equipment failure,\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, RainfallMm, TemperatureCelsius, CASE WHEN RainfallMm < 0 OR RainfallMm > 1000 OR TemperatureCelsius < -20 OR TemperatureCelsius > 50 THEN '可能引发设备故障' ELSE '设备运行正常' END AS DeviceStatus FROM RainfallData;",
        "db_id": "RainGauge"
    },
    {
        "id": 135,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall 10,000 mm', 'temperature 1,000°C', 'precipitation monitoring data'], 'relations': ['extreme_rainfall_to_temperature_impact', 'data_collection_analysis'], 'intent': 'analyze_climatological_extremes_impact', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [10000, 1000], 'units': {'rainfall': 'mm (millimeters)', 'temperature': '°C (Celsius)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.3', '18.5', '25.0', '20.0', '28.0']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['9', '8', '6', '10', '7']}]}}\nA hypothetical reasoning question is as follows:\nAssuming that rainfall in a certain precipitation monitoring data reaches 10,000 millimeters and the temperature reaches 1,000 degrees Celsius, calculate its impact on temperature, and analyze its potential effects on data collection.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, TemperatureCelsius, (TemperatureCelsius - (10000 / 10)) AS AdjustedTemperatureCelsius, CASE WHEN RainfallMm >= 10000 OR TemperatureCelsius >= 1000 THEN '可能导致设备损坏或数据失真' ELSE '降雨量和温度在正常范围内' END AS DataImpact FROM RainfallData WHERE RainfallMm >= 10000 OR TemperatureCelsius >= 1000;",
        "db_id": "RainGauge"
    },
    {
        "id": 136,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall', 'humidity', 'rainfall monitoring dataset'], 'relations': ['rainfall_to_humidity_correlation (dependent relationship)', 'dataset_to_environmental_analysis'], 'intent': 'calculate_influence_of_rainfall_on_humidity', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'rainfall': 'mm (millimeters)', 'humidity': 'percent (%)', 'rainfall_intensity': 'mm/h (millimeters per hour)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'HumidityPercent', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['65.0', '70.0', '80.0', '60.0', '85.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}, {'column': 'AnalysisTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}]}}\nA physical knowledge question is as follows:\nCalculating the influence of rainfall on humidity in a certain rainfall monitoring dataset.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RainfallMm, HumidityPercent, HumidityPercent + (RainfallMm / 10) AS AdjustedHumidity FROM RainfallData WHERE GaugeId = '1';",
        "db_id": "RainGauge"
    },
    {
        "id": 137,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['humidity data', 'rainfall monitoring data', 'trend analysis'], 'relations': ['humidity_to_time (HumidityPercent ↔ CollectionTime)', 'data_aggregation (RainfallData → average_humidity)', 'trend_analysis (humidity over time)'], 'intent': 'calculate_average_humidity_and_analyze_trend', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'humidity': '% (percentage)', 'time': 'datetime (CollectionTime)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'HumidityPercent', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['65.0', '70.0', '80.0', '60.0', '85.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}]}}\nA mathematical logic question is as follows:\nCalculate the average humidity in certain rainfall monitoring data and analyze its trend of change.\nyour response just have a SQL without anything.\n",
        "solution": "WITH HumidityStats AS (SELECT AVG(HumidityPercent) AS AvgHumidity, COUNT(*) AS DataPoints FROM RainfallData), HumidityTrend AS (SELECT CollectionTime, HumidityPercent, AVG(HumidityPercent) OVER (ORDER BY CollectionTime ROWS BETWEEN 10 PRECEDING AND CURRENT ROW) AS MovingAvg FROM RainfallData) SELECT AvgHumidity, MovingAvg FROM HumidityStats, HumidityTrend;",
        "db_id": "RainGauge"
    },
    {
        "id": 138,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall data', 'humidity data', 'equipment failure', 'rainfall monitoring station'], 'relations': ['monitoring_station_to_data (station → rainfall/humidity measurements)', 'threshold_condition (parameter_type → threshold_value comparison)', 'environmental_impact (rainfall/humidity → equipment failure risk)'], 'intent': 'assess_environmental_risk_for_equipment_failure', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': None, 'units': {'rainfall': 'mm (millimeters)', 'humidity': '% (percent)', 'thresholds': 'context-dependent (from RainfallWarningRule)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'HumidityPercent', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['65.0', '70.0', '80.0', '60.0', '85.0']}, {'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'RainGauge.RainfallWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['9', '8', '6', '10', '7']}]}}\nA common sense reasoning question is as follows:\nBased on the rainfall and humidity data from a certain rainfall monitoring station, determine whether equipment failure may be triggered.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, RainfallMm, HumidityPercent, CASE WHEN RainfallMm < 0 OR RainfallMm > 1000 OR HumidityPercent < 0 OR HumidityPercent > 100 THEN '可能引发设备故障' ELSE '设备运行正常' END AS DeviceStatus FROM RainfallData;",
        "db_id": "RainGauge"
    },
    {
        "id": 139,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall 10,000 millimeters', 'humidity 200%'], 'relations': ['rainfall_to_humidity_impact', 'humidity_to_data_collection_effect'], 'intent': 'analyze_impact_of_extreme_weather_on_humidity_and_data_collection', 'reasoning_type': 'ideal hypothesis reasoning', 'numerical_values': [10000, 200], 'units': {'rainfall': 'mm (millimeters)', 'humidity': '% (percentage)', 'threshold': '200% (hypothetical, as humidity cannot exceed 100% under normal conditions)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'HumidityPercent', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['65.0', '70.0', '80.0', '60.0', '85.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'Notes', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['Moderate rainfall with light wind.', 'Light rainfall with calm wind.', 'Heavy rainfall with moderate wind.', 'Extreme rainfall with strong wind.', 'Morning rainfall']}], 'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}], 'RainGauge.RainGauge': [{'column': 'Status', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['Running', 'Maintenance', 'Stopped']}, {'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Mountainside, Sichuan', 'Urban Area, Beijing', 'Coastal Area, Shanghai', 'Plateau, Tibet', 'Forest Area, Yunnan']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the rainfall in a certain precipitation monitoring data reaches 10,000 millimeters and the humidity reaches 200%, calculate its impact on humidity and analyze the potential effects on data collection.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, HumidityPercent, (HumidityPercent + (10000 / 10)) AS AdjustedHumidityPercent, CASE WHEN RainfallMm >= 10000 OR HumidityPercent >= 200 THEN '可能导致设备损坏或数据失真' ELSE '降雨量和湿度在正常范围内' END AS DataImpact FROM RainfallData WHERE RainfallMm >= 10000 OR HumidityPercent >= 200;",
        "db_id": "RainGauge"
    },
    {
        "id": 140,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['RainfallIntensityMmH', 'WindSpeedMps'], 'relations': ['rainfall_wind_correlation (RainfallIntensityMmH → WindSpeedMps)'], 'intent': 'calculate_rainfall_impact_on_wind_speed', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'rainfall_intensity': 'mm/h (millimeters per hour)', 'wind_speed': 'm/s (meters per second)', 'relationship_type': 'statistical regression/correlation'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}, {'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}]}}\nA physical knowledge question is as follows:\nCalculate the impact of rainfall on wind speed in a certain rainfall monitoring dataset.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RainfallMm, WindSpeedMps, WindSpeedMps + (RainfallMm / 10) AS AdjustedWindSpeed FROM RainfallData WHERE GaugeId = '1';",
        "db_id": "RainGauge"
    },
    {
        "id": 141,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['average wind speed', 'wind speed trend analysis'], 'relations': ['wind_speed_to_time_series (time-series relationship)', 'average_calculation (aggregation of wind speed values)'], 'intent': 'calculate_average_and_trend_analysis', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['WindSpeedMps (raw data values)'], 'units': {'wind_speed': 'm/s (meters per second)', 'time_interval': 'variable (e.g., daily/weekly/monthly for trend analysis)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}]}}\nA mathematical logic question is as follows:\nCalculate the average wind speed from rainfall monitoring data and analyze its trend of change.\nyour response just have a SQL without anything.\n",
        "solution": "WITH WindSpeedStats AS (SELECT AVG(WindSpeedMps) AS AvgWindSpeed, COUNT(*) AS DataPoints FROM RainfallData), WindSpeedTrend AS (SELECT CollectionTime, WindSpeedMps, AVG(WindSpeedMps) OVER (ORDER BY CollectionTime ROWS BETWEEN 10 PRECEDING AND CURRENT ROW) AS MovingAvg FROM RainfallData) SELECT AvgWindSpeed, MovingAvg FROM WindSpeedStats, WindSpeedTrend;",
        "db_id": "RainGauge"
    },
    {
        "id": 142,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall intensity', 'wind speed', 'equipment failure threshold'], 'relations': ['rainfall_data_to_warning_rules (RainfallData.GaugeId → RainfallWarningRule.Id)', 'threshold_comparison (RainfallData.RainfallIntensityMmH/WindSpeedMps vs RainfallWarningRule.ThresholdValue)'], 'intent': 'predict_equipment_failure_risk', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [None], 'units': {'rainfall_intensity': 'mm/h', 'wind_speed': 'm/s', 'threshold_comparison': 'unit-matched conditional operators'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}, {'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA common sense reasoning question is as follows:\nBased on rainfall and wind speed data from a certain rainfall monitoring system, determine whether it may cause equipment failure.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, RainfallMm, WindSpeedMps, CASE WHEN RainfallMm < 0 OR RainfallMm > 1000 OR WindSpeedMps < 0 OR WindSpeedMps > 20 THEN '可能引发设备故障' ELSE '设备运行正常' END AS DeviceStatus FROM RainfallData;",
        "db_id": "RainGauge"
    },
    {
        "id": 143,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall 10000 mm', 'wind speed 100 m/s', 'precipitation monitoring system'], 'relations': ['rainfall_to_wind_speed_correlation', 'environmental_data_collection_impact'], 'intent': 'analyze_environmental_impact_relationship', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [10000, 100], 'units': {'rainfall': 'mm (millimeters)', 'wind_speed': 'm/s (meters per second)', 'threshold_comparison': ['RainfallWarningRule.ThresholdValue', 'RainfallWarningRule.ThresholdUnit']}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.3', '18.5', '25.0', '20.0', '28.0']}, {'column': 'HumidityPercent', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['65.0', '70.0', '80.0', '60.0', '85.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the rainfall data in a precipitation monitoring system records rainfall reaching 10,000 millimeters and wind speed reaching 100 meters per second, calculate the impact of rainfall on wind speed and analyze its potential effects on data collection.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, WindSpeedMps, (WindSpeedMps + (10000 / 10)) AS AdjustedWindSpeedMps, CASE WHEN RainfallMm >= 10000 OR WindSpeedMps >= 100 THEN '可能导致设备损坏或数据失真' ELSE '降雨量和风速在正常范围内' END AS DataImpact FROM RainfallData WHERE RainfallMm >= 10000 OR WindSpeedMps >= 100;",
        "db_id": "RainGauge"
    },
    {
        "id": 144,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['RainfallData', 'WindDirectionDegrees', 'RainGauge', 'HistoricalRainfallAnalysis'], 'relations': ['RainGauge.Id → RainfallData.GaugeId', 'HistoricalRainfallAnalysis.GaugeId → RainGauge.Id', 'RainfallData.CollectionTime ∈ [HistoricalRainfallAnalysis.DataStartTime, HistoricalRainfallAnalysis.DataEndTime]', 'RainfallData.RainfallMm → WindDirectionDegrees'], 'intent': 'calculate_correlation_between_rainfall_and_wind_direction', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': ['RainfallMm (rainfall volume in mm)', 'WindDirectionDegrees (wind direction in 0-360° scale)'], 'units': {'rainfall': 'mm (millimeters)', 'wind_direction': '° (degrees, 0-360° azimuth)', 'time': 'datetime (for temporal alignment)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'WindDirectionDegrees', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['120.0', '90.0', '150.0', '180.0', '200.0']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'DataStartTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-09-01 00:00:00', '2023-08-01 00:00:00', '2023-07-01 00:00:00', '2023-06-01 00:00:00', '2023-05-01 00:00:00']}, {'column': 'DataEndTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-09-30 23:59:59', '2023-08-31 23:59:59', '2023-07-31 23:59:59', '2023-06-30 23:59:59', '2023-05-31 23:59:59']}], 'RainGauge.RainGauge': [{'column': 'Latitude', 'type': 'DECIMAL(10, 6)', 'primary_key': False, 'comment': '', 'examples': ['30.658601', '39.904202', '31.230416', '29.654084', '25.045806']}, {'column': 'Longitude', 'type': 'DECIMAL(10, 6)', 'primary_key': False, 'comment': '', 'examples': ['104.064762', '116.407394', '121.473701', '91.110221', '102.709999']}]}}\nA physical knowledge question is as follows:\nCalculate the influence of rainfall on wind direction in a specific precipitation monitoring dataset.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RainfallMm, WindDirectionDegrees, WindDirectionDegrees + (RainfallMm / 10) AS AdjustedWindDirection FROM RainfallData WHERE GaugeId = '1';",
        "db_id": "RainGauge"
    },
    {
        "id": 145,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['precipitation monitoring dataset', 'rainfall data', 'trend analysis'], 'relations': ['RainfallData_to_total_sum (RainfallData.RainfallMm → aggregation)', 'RainfallData_to_trend_analysis (RainfallData.CollectionTime → RainfallMm)'], 'intent': 'calculate_total_rainfall_and_analyze_trend', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'rainfall': 'mm (millimeters)', 'time': 'timestamp from CollectionTime'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}]}}\nA mathematical logic question is as follows:\nCalculate the total sum of rainfall in a certain precipitation monitoring dataset and analyze its trend of change.\nyour response just have a SQL without anything.\n",
        "solution": "WITH RainfallTotal AS (SELECT SUM(RainfallMm) AS TotalRainfall FROM RainfallData), RainfallTrend AS (SELECT CollectionTime, RainfallMm, SUM(RainfallMm) OVER (ORDER BY CollectionTime ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS CumulativeRainfall FROM RainfallData) SELECT TotalRainfall, CumulativeRainfall FROM RainfallTotal, RainfallTrend;",
        "db_id": "RainGauge"
    },
    {
        "id": 146,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['RainfallData', 'WindDirectionDegrees', 'EquipmentFailureRisk'], 'relations': ['RainfallData_to_RainGauge (GaugeId)', 'data_to_failure_risk (rainfall/wind → threshold rules → failure risk)'], 'intent': 'assess_equipment_failure_risk', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [], 'units': {'rainfall': 'mm', 'wind_direction': 'degrees', 'threshold_values': 'varies (e.g., mm, mm/h, degrees)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'WindDirectionDegrees', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['120.0', '90.0', '150.0', '180.0', '200.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA common sense reasoning question is as follows:\nBased on the rainfall and wind direction data from a certain rainfall monitoring system, determine whether it may trigger equipment failure.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, RainfallMm, WindDirectionDegrees, CASE WHEN RainfallMm < 0 OR RainfallMm > 1000 OR WindDirectionDegrees < 0 OR WindDirectionDegrees > 360 THEN '可能引发设备故障' ELSE '设备运行正常' END AS DeviceStatus FROM RainfallData;",
        "db_id": "RainGauge"
    },
    {
        "id": 147,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall 10,000 mm', 'wind direction 720°'], 'relations': ['rainfall_to_sensor_impact (10,000 mm → potential overrange measurement)', 'wind_direction_to_data_validity (720° → invalid circular value)'], 'intent': 'analyze_environmental_impact_on_data', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [10000, 720], 'units': {'rainfall': 'mm (millimeters)', 'wind_direction': '° (degrees)', 'note': '720° exceeds standard 0-360° range for wind direction'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'WindDirectionDegrees', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['120.0', '90.0', '150.0', '180.0', '200.0']}], 'RainGauge.RainGauge': [{'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Mountainside, Sichuan', 'Urban Area, Beijing', 'Coastal Area, Shanghai', 'Plateau, Tibet', 'Forest Area, Yunnan']}, {'column': 'Status', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['Running', 'Maintenance', 'Stopped']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}, {'column': 'AnalysisResult', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['September rainfall analysis: Moderate rainfall with occasional heavy downpours.', 'August rainfall analysis: Heavy rainfall with consistent intensity.', 'July rainfall analysis: Extreme rainfall with high intensity.', 'June rainfall analysis: Moderate rainfall with light intensity.', 'May rainfall analysis: Light rainfall with low intensity.']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a rainfall monitoring data shows precipitation reaching 10,000 millimeters and wind direction reaching 720 degrees, calculate its impact on wind direction and analyze the potential effects on data collection.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, WindDirectionDegrees, (WindDirectionDegrees + (10000 / 10)) AS AdjustedWindDirectionDegrees, CASE WHEN RainfallMm >= 10000 OR WindDirectionDegrees >= 720 THEN '可能导致设备损坏或数据失真' ELSE '降雨量和风向在正常范围内' END AS DataImpact FROM RainfallData WHERE RainfallMm >= 10000 OR WindDirectionDegrees >= 720;",
        "db_id": "RainGauge"
    },
    {
        "id": 148,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall data', 'atmospheric pressure'], 'relations': ['rainfall_to_pressure_correlation', 'temporal_relationship (time-series analysis)'], 'intent': 'calculate_correlation_between_rainfall_and_atmospheric_pressure', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['rainfall_amount', 'pressure_values'], 'units': {'rainfall': 'mm (millimeters)', 'pressure': 'hPa (hectopascals)', 'intensity': 'mm/h (millimeters per hour)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}]}}\nA physical knowledge question is as follows:\nCalculate the impact of rainfall on atmospheric pressure in a certain rainfall monitoring dataset.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RainfallMm, AtmosphericPressureHpa, AtmosphericPressureHpa - (RainfallMm / 10) AS AdjustedPressure FROM RainfallData WHERE GaugeId = '特定雨量计ID';",
        "db_id": "RainGauge"
    },
    {
        "id": 149,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['atmospheric pressure data', 'rainfall monitoring dataset'], 'relations': ['pressure_to_time (AtmosphericPressureHpa → CollectionTime)', 'dataset_composition (RainfallData → atmospheric pressure measurements)'], 'intent': 'calculate_average_atmospheric_pressure_and_analyze_trend', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'pressure': 'hPa (hectopascals)', 'time': 'timestamp (CollectionTime field)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}]}}\nA mathematical logic question is as follows:\nCalculate the average value of atmospheric pressure in a rainfall monitoring dataset and analyze its trend of variation.\nyour response just have a SQL without anything.\n",
        "solution": "WITH PressureStats AS (SELECT AVG(AtmosphericPressureHpa) AS AvgPressure, COUNT(*) AS DataPoints FROM RainfallData), PressureTrend AS (SELECT CollectionTime, AtmosphericPressureHpa, AVG(AtmosphericPressureHpa) OVER (ORDER BY CollectionTime ROWS BETWEEN 10 PRECEDING AND CURRENT ROW) AS MovingAvg FROM RainfallData) SELECT AvgPressure, MovingAvg FROM PressureStats, PressureTrend;",
        "db_id": "RainGauge"
    },
    {
        "id": 150,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall data', 'atmospheric pressure data', 'equipment failure likelihood'], 'relations': ['GaugeId_to_equipment (RainfallData.GaugeId → RainGauge.Id)', 'rainfall_to_failure_likelihood', 'pressure_to_failure_likelihood'], 'intent': 'predict_equipment_failure_risk', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['rainfall threshold', 'pressure threshold'], 'units': {'rainfall': 'mm (millimeters)', 'pressure': 'hPa (hectopascals)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}, {'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'RainGauge.RainGauge': [{'column': 'Status', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['Running', 'Maintenance', 'Stopped']}]}}\nA common sense reasoning question is as follows:\nBased on rainfall and atmospheric pressure data from a rain monitoring station, determine whether equipment failure is likely to occur.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, RainfallMm, AtmosphericPressureHpa, CASE WHEN RainfallMm < 0 OR RainfallMm > 1000 OR AtmosphericPressureHpa < 800 OR AtmosphericPressureHpa > 1100 THEN '可能引发设备故障' ELSE '设备运行正常' END AS DeviceStatus FROM RainfallData;",
        "db_id": "RainGauge"
    },
    {
        "id": 151,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall 10,000 millimeters', 'atmospheric pressure 2,000 hectopascals'], 'relations': ['rainfall_to_pressure_correlation (potential inverse relationship)', 'extreme_values_to_data_collection_impact (sensor accuracy/validity)'], 'intent': 'evaluate_impact_of_extreme_weather_conditions_on_pressure_and_data_collection', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [10000, 2000], 'units': {'rainfall': 'millimeters', 'atmospheric_pressure': 'hectopascals', 'threshold': '2000 hPa (extreme pressure benchmark)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the rainfall in a certain precipitation monitoring data reaches 10,000 millimeters and the atmospheric pressure reaches 2,000 hectopascals, calculate its impact on atmospheric pressure and analyze its potential influence on data collection.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, AtmosphericPressureHpa, (AtmosphericPressureHpa - (10000 / 10)) AS AdjustedAtmosphericPressureHpa, CASE WHEN RainfallMm >= 10000 OR AtmosphericPressureHpa >= 2000 THEN '可能导致设备损坏或数据失真' ELSE '降雨量和大气压力在正常范围内' END AS DataImpact FROM RainfallData WHERE RainfallMm >= 10000 OR AtmosphericPressureHpa >= 2000;",
        "db_id": "RainGauge"
    },
    {
        "id": 152,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"rainfall intensity (mm/h)\", \"humidity (%)\", \"rainfall monitoring dataset\"],\n  \"relations\": [\"rainfall_intensity_to_humidity (impact correlation)\"],\n  \"intent\": \"calculate_relationship_between_rainfall_intensity_and_humidity\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [\"various rainfall intensity values\", \"corresponding humidity values\"],\n  \"units\": {\n    \"rainfall_intensity\": \"mm/h (millimeters per hour)\",\n    \"humidity\": \"% (percentage)\",\n    \"conversion\": \"none required for correlation analysis\"\n  },\n  \"required_tables\": [\"RainfallData\"],\n  \"required_fields\": [\n    \"RainfallData.RainfallIntensityMmH\",\n    \"RainfallData.HumidityPercent\"\n  ]\n} \n\n**Explanation:**  \nThe analysis requires examining how rainfall intensity (independent variable) correlates with humidity (dependent variable) using raw measurements from the `RainfallData` table. No additional tables are needed since both required parameters exist in the same table. This would typically involve statistical analysis like regression to determine correlation/impact strength.\nA physical knowledge question is as follows:\nCalculate the impact of rainfall intensity on humidity in a certain rainfall monitoring dataset.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RainfallIntensityMmH, HumidityPercent, HumidityPercent + (RainfallIntensityMmH / 10) AS AdjustedHumidity FROM RainfallData WHERE GaugeId = '2';",
        "db_id": "RainGauge"
    },
    {
        "id": 153,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['RainfallData table', 'HumidityPercent', 'CollectionTime'], 'relations': ['HumidityPercent_to_time (humidity over time)', 'Data_aggregation (for trend analysis)'], 'intent': 'calculate_average_humidity_and_analyze_its_trend_of_change', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'humidity': '% (percentage)', 'time': 'time intervals (e.g., daily/monthly)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'HumidityPercent', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['65.0', '70.0', '80.0', '60.0', '85.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}]}}\nA mathematical logic question is as follows:\nCalculate the average humidity in a certain rainfall monitoring dataset and analyze its trend of change.\nyour response just have a SQL without anything.\n",
        "solution": "WITH HumidityStats AS (SELECT AVG(HumidityPercent) AS AvgHumidity, COUNT(*) AS DataPoints FROM RainfallData), HumidityTrend AS (SELECT CollectionTime, HumidityPercent, AVG(HumidityPercent) OVER (ORDER BY CollectionTime ROWS BETWEEN 10 PRECEDING AND CURRENT ROW) AS MovingAvg FROM RainfallData) SELECT AvgHumidity, MovingAvg FROM HumidityStats, HumidityTrend;",
        "db_id": "RainGauge"
    },
    {
        "id": 154,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall intensity', 'humidity', 'equipment failure'], 'relations': ['rainfall_intensity_to_threshold (RainfallData.RainfallIntensityMmH → RainfallWarningRule.ThresholdValue)', 'humidity_to_threshold (RainfallData.HumidityPercent → RainfallWarningRule.ThresholdValue)', 'parameter_to_severity (RainfallWarningRule.ParameterType → RainfallWarningRule.SeverityLevel)'], 'intent': 'predict_equipment_failure_risk', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': ['RainfallWarningRule.ThresholdValue (dynamic from rules)'], 'units': {'rainfall_intensity': 'mm/h (millimeters per hour)', 'humidity': 'percent (%)', 'threshold_comparison': 'operator-based (e.g., >, >=, =) from ConditionOperator column'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}, {'column': 'HumidityPercent', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['65.0', '70.0', '80.0', '60.0', '85.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['9', '8', '6', '10', '7']}, {'column': 'IsActive', 'type': 'TINYINT', 'primary_key': False, 'comment': '', 'examples': ['1']}]}}\nA common sense reasoning question is as follows:\nBased on the rainfall intensity and humidity in a certain rainfall monitoring data, determine whether it may trigger equipment failure.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, RainfallIntensityMmH, HumidityPercent, CASE WHEN RainfallIntensityMmH < 0 OR RainfallIntensityMmH > 100 OR HumidityPercent < 0 OR HumidityPercent > 100 THEN '可能引发设备故障' ELSE '设备运行正常' END AS DeviceStatus FROM RainfallData;",
        "db_id": "RainGauge"
    },
    {
        "id": 155,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall intensity 1000 mm/hour', 'humidity 200%'], 'relations': ['rainfall_intensity_to_humidity_impact', 'environmental_conditions_to_data_collection_effects'], 'intent': 'calculate_humidity_impact_and_analyze_data_collection_effects', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [1000, 200], 'units': {'rainfall_intensity': 'mm/hour', 'humidity': 'percent', 'threshold': 'percent (for humidity validation)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainGauge', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}, {'column': 'HumidityPercent', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['65.0', '70.0', '80.0', '60.0', '85.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'AtmosphericPressureHpa', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1013.25', '1012.5', '1010.0', '1014.0', '1008.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'MaxRainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '25.0', '12.0', '8.0']}, {'column': 'AnalysisResult', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['September rainfall analysis: Moderate rainfall with occasional heavy downpours.', 'August rainfall analysis: Heavy rainfall with consistent intensity.', 'July rainfall analysis: Extreme rainfall with high intensity.', 'June rainfall analysis: Moderate rainfall with light intensity.', 'May rainfall analysis: Light rainfall with low intensity.']}], 'RainGauge.RainGauge': [{'column': 'Status', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['Running', 'Maintenance', 'Stopped']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the rainfall intensity in a certain precipitation monitoring data reaches 1000 mm/hour and the humidity reaches 200%, calculate its impact on humidity and analyze the potential effects on data collection.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, HumidityPercent, (HumidityPercent + (1000 / 10)) AS AdjustedHumidityPercent, CASE WHEN RainfallIntensityMmH >= 1000 OR HumidityPercent >= 200 THEN '可能导致设备损坏或数据失真' ELSE '降雨强度和湿度在正常范围内' END AS DataImpact FROM RainfallData WHERE RainfallIntensityMmH >= 1000 OR HumidityPercent >= 200;",
        "db_id": "RainGauge"
    },
    {
        "id": 156,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall intensity', 'wind speed'], 'relations': ['rainfall_intensity_to_wind_speed (correlational impact)'], 'intent': 'calculate_impact_of_rainfall_intensity_on_wind_speed', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'rainfall_intensity': 'mm/h (millimeters per hour)', 'wind_speed': 'm/s (meters per second)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}, {'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}]}}\nA physical knowledge question is as follows:\nCalculate the impact of rainfall intensity on wind speed in a certain rainfall monitoring data.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RainfallIntensityMmH, WindSpeedMps, WindSpeedMps + (RainfallIntensityMmH / 10) AS AdjustedWindSpeed FROM RainfallData WHERE GaugeId = '2';",
        "db_id": "RainGauge"
    },
    {
        "id": 157,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['wind speed', 'rainfall monitoring data'], 'relations': ['wind_speed_to_time (WindSpeedMps → CollectionTime)', 'data_source (RainfallData → wind speed measurements)'], 'intent': 'calculate_average_and_analyze_variation_trend', 'reasoning_type': 'mathematical logic reasoning (for average) + common sense understanding reasoning (for trend)', 'numerical_values': [], 'units': {'wind_speed': 'm/s (meters per second)', 'time': 'datetime (CollectionTime)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}]}}\nA mathematical logic question is as follows:\nCalculate the average wind speed from certain rainfall monitoring data and analyze its variation trend.\nyour response just have a SQL without anything.\n",
        "solution": "WITH WindSpeedStats AS (SELECT AVG(WindSpeedMps) AS AvgWindSpeed, COUNT(*) AS DataPoints FROM RainfallData), WindSpeedTrend AS (SELECT CollectionTime, WindSpeedMps, AVG(WindSpeedMps) OVER (ORDER BY CollectionTime ROWS BETWEEN 10 PRECEDING AND CURRENT ROW) AS MovingAvg FROM RainfallData) SELECT AvgWindSpeed, MovingAvg FROM WindSpeedStats, WindSpeedTrend;",
        "db_id": "RainGauge"
    },
    {
        "id": 158,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n```json\n{\n  \"entities\": [\"rainfall intensity\", \"wind speed\", \"equipment failure\"],\n  \"relations\": [\n    \"rainfall_intensity_to_threshold (rainfall intensity → RainfallWarningRule.ThresholdValue)\", \n    \"wind_speed_to_threshold (wind speed → RainfallWarningRule.ThresholdValue)\", \n    \"data_to_failure_risk (RainfallData → equipment failure)\"\n  ],\n  \"intent\": \"assess_equipment_failure_risk\",\n  \"reasoning_type\": \"mathematical logic reasoning\",\n  \"numerical_values\": [],\n  \"units\": {\n    \"rainfall_intensity\": \"mm/h (millimeters per hour)\",\n    \"wind_speed\": \"m/s (meters per second)\",\n    \"threshold\": \"varies by RainfallWarningRule.ThresholdUnit\"\n  },\n  \"required_tables\": [\"RainfallData\", \"RainfallWarningRule\"],\n  \"required_fields\": [\n    \"RainfallData.RainfallIntensityMmH\",\n    \"RainfallData.WindSpeedMps\",\n    \"RainfallWarningRule.ParameterType\",\n    \"RainfallWarningRule.ThresholdValue\",\n    \"RainfallWarningRule.ConditionOperator\",\n    \"RainfallWarningRule.ThresholdUnit\"\n  ]\n}\n```\nA common sense reasoning question is as follows:\nBased on the rainfall intensity and wind speed data from a certain rainfall monitoring system, determine whether it may cause equipment failure.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, RainfallIntensityMmH, WindSpeedMps, CASE WHEN RainfallIntensityMmH < 0 OR RainfallIntensityMmH > 100 OR WindSpeedMps < 0 OR WindSpeedMps > 20 THEN '可能引发设备故障' ELSE '设备运行正常' END AS DeviceStatus FROM RainfallData;",
        "db_id": "RainGauge"
    },
    {
        "id": 159,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall intensity 1000 mm/hour', 'wind speed 100 m/s'], 'relations': ['rainfall_to_wind_impact (high rainfall intensity → potential wind speed measurement interference)', 'extreme_values_to_data_quality (extreme weather → sensor reliability risks)'], 'intent': 'analyze_impact_on_wind_speed_and_data_collection', 'reasoning_type': 'physical knowledge reasoning AND common sense understanding reasoning', 'numerical_values': [1000, 100], 'units': {'rainfall_intensity': 'mm/hour (millimeters per hour)', 'wind_speed': 'm/s (meters per second)', 'reference_thresholds': 'threshold values from RainfallWarningRule'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}, {'column': 'WindSpeedMps', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.0', '5.0', '1.5', '7.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA hypothetical reasoning question is as follows:\nAssuming that the rainfall intensity in a certain rainfall monitoring data reaches 1000 mm/hour and the wind speed reaches 100 m/s, calculate its impact on the wind speed and analyze its potential effects on data collection.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CollectionTime, WindSpeedMps, (WindSpeedMps + (1000 / 10)) AS AdjustedWindSpeedMps, CASE WHEN RainfallIntensityMmH >= 1000 OR WindSpeedMps >= 100 THEN '可能导致设备损坏或数据失真' ELSE '降雨强度和风速在正常范围内' END AS DataImpact FROM RainfallData WHERE RainfallIntensityMmH >= 1000 OR WindSpeedMps >= 100;",
        "db_id": "RainGauge"
    },
    {
        "id": 160,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge recording 100 millimeters', 'rainfall intensity 100 millimeters per hour', 'threshold in warning rule table'], 'relations': ['gauge_to_rules (GaugeId → RainfallWarningRule)', 'parameter_comparison (rainfall_amount/intensity → threshold_value)', 'unit_consistency (millimeters/millimeters_per_hour → threshold_unit)'], 'intent': 'check_if_rainfall_exceeds_warning_threshold', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [100, 100], 'units': {'rainfall_amount': 'millimeters (mm)', 'rainfall_intensity': 'millimeters per hour (mm/h)', 'threshold_comparison': 'unit_consistency_required'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'GaugeId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'IsActive', 'type': 'TINYINT', 'primary_key': False, 'comment': '', 'examples': ['1']}]}}\nA physical knowledge question is as follows:\nIf a rain gauge records 100 millimeters of rainfall within one hour, with a rainfall intensity of 100 millimeters per hour, does the rainfall amount recorded by the gauge exceed the threshold set in the warning rule table during this period?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RainfallMm, RainfallIntensityMmH, ThresholdValue FROM RainfallData JOIN RainfallWarningRule ON RainfallData.GaugeId = '3' AND RainfallWarningRule.ParameterType = '降雨量' WHERE RainfallMm > ThresholdValue AND RainfallIntensityMmH = 100;",
        "db_id": "RainGauge"
    },
    {
        "id": 161,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall amounts (50mm, 60mm, 70mm, 80mm, 90mm)', 'five consecutive hours'], 'relations': ['hourly_rainfall_to_time_interval', 'rainfall_amount_to_intensity (direct equivalence in hourly measurements)'], 'intent': 'calculate_average_rainfall_intensity_and_total_rainfall', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50, 60, 70, 80, 90], 'units': {'rainfall_amount': 'mm (millimeters)', 'rainfall_intensity': 'mm/h (millimeters per hour)', 'time_interval': 'hours', 'total_rainfall_conversion': '350 mm (sum of values)', 'average_intensity_conversion': '70 mm/h (mean of values)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainfallData', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}, {'column': 'AverageRainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '6.8', '10.5', '3.5', '1.8']}]}}\nA mathematical logic question is as follows:\nAssuming a rain gauge recorded rainfall amounts of 50mm, 60mm, 70mm, 80mm, and 90mm over five consecutive hours, calculate the average rainfall intensity and total rainfall during these five hours.\nyour response just have a SQL without anything.\n",
        "solution": "WITH RainfallData AS (SELECT 50 AS RainfallMm UNION ALL SELECT 60 UNION ALL SELECT 70 UNION ALL SELECT 80 UNION ALL SELECT 90) SELECT AVG(RainfallMm) AS AvgRainfallIntensity, SUM(RainfallMm) AS TotalRainfall FROM RainfallData;",
        "db_id": "RainGauge"
    },
    {
        "id": 162,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rain gauge installation at 1000 meters', 'average annual rainfall 1500 millimeters'], 'relations': ['elevation_to_rainfall_correlation (1000m → 1500mm)'], 'intent': 'assess_installation_suitability', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [1000, 1500], 'units': {'elevation': 'meters', 'rainfall': 'millimeters'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'HistoricalRainfallAnalysis', 'pk_column': 'Id'}, {'pk_table': 'RainGauge', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainGauge': [{'column': 'ElevationMeters', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1200.5', '50.0', '10.0', '4500.0', '1800.0']}], 'RainGauge.HistoricalRainfallAnalysis': [{'column': 'AverageRainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '6.8', '10.5', '3.5', '1.8']}, {'column': 'TotalRainfallMm', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['150.5', '200.75', '300.2', '100.0', '50.0']}]}}\nA common sense reasoning question is as follows:\nIf a rain gauge is installed at an altitude of 1000 meters and the average annual rainfall in the area is 1500 millimeters, is the installation location of the rain gauge suitable for long-term rainfall monitoring?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT InstallationLocation, ElevationMeters, (SELECT AVG(TotalRainfallMm) FROM HistoricalRainfallAnalysis WHERE GaugeId = RainGauge.Id) AS AvgAnnualRainfall, CASE WHEN ElevationMeters = 1000 AND (SELECT AVG(TotalRainfallMm) FROM HistoricalRainfallAnalysis WHERE GaugeId = RainGauge.Id) >= 1500 THEN '适合长期监测' ELSE '不适合长期监测' END AS Suitability FROM RainGauge WHERE ElevationMeters = 1000;",
        "db_id": "RainGauge"
    },
    {
        "id": 163,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rainfall_data (1000 millimeters)', 'rainfall_intensity (1000 millimeters/hour)', 'RainfallWarningRule thresholds'], 'relations': ['rainfall_intensity_to_threshold (comparison)', 'total_rainfall_to_threshold (comparison)'], 'intent': 'evaluate_effectiveness_of_warning_thresholds_under_extreme_rainfall', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [1000, 1000], 'units': {'rainfall': 'millimeters (mm)', 'intensity': 'millimeters per hour (mm/h)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'RainfallData', 'pk_column': 'Id'}, {'pk_table': 'RainfallWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'RainGauge.RainfallData': [{'column': 'RainfallMm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['15.5', '8.75', '30.2', '5.0', '50.0']}, {'column': 'RainfallIntensityMmH', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.2', '2.1', '10.5', '1.5', '15.0']}], 'RainGauge.RainfallWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Rainfall', 'Rainfall Intensity', 'Wind Speed']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['50.0', '10.0', '5.0', '100.0', '1.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['mm', 'mm/h', 'm/s']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a rain gauge recorded 1,000 millimeters of rainfall within one hour, with a rainfall intensity of 1,000 millimeters per hour, under these circumstances, can the thresholds in the warning rule table still effectively determine whether a warning should be issued?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RuleName, ThresholdValue, CASE WHEN 1000 > ThresholdValue THEN '阈值无法有效判断，需调整预警规则' ELSE '阈值仍可有效判断' END AS WarningEffectiveness FROM RainfallWarningRule WHERE ParameterType = '降雨强度' AND IsActive = TRUE;",
        "db_id": "RainGauge"
    },
    {
        "id": 164,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker', 'rated power', 'rated voltage'], 'relations': ['rice_cooker_to_power_rating', 'rice_cooker_to_voltage_rating', 'current_formula (I = P/V)'], 'intent': 'calculate_current_intensity_in_amperes', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['power_rating', 'voltage_rating'], 'units': {'power': 'W (watts)', 'voltage': 'V (volts)', 'current': 'A (amperes)', 'conversion': 'I = P/V (Current = Power / Voltage)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}, {'column': 'voltage_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['220.0']}]}}\nA physical knowledge question is as follows:\nCalculate the current intensity (in amperes) of the rice cooker during normal operation based on its rated power and rated voltage.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT id, model, brand, power_rating, voltage_rating, (power_rating / voltage_rating) AS current_strength FROM rice_cooker_info;",
        "db_id": "rice_cooker"
    },
    {
        "id": 165,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model', 'average energy consumption', 'performance test', 'lowest energy consumption'], 'relations': ['rice_cooker_to_model (rice_cooker_id → model)', 'test_to_energy_consumption (performance_tests → energy_consumption)', 'aggregation (rice_cooker_id → average energy consumption)'], 'intent': 'calculate_average_and_identify_lowest_energy_consumption', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'energy': \"kWh (implied by column name 'energy_consumption')\", 'aggregation': 'average (mean calculation)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.performance_tests': [{'column': 'rice_cooker_id', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '8', '9']}, {'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}], 'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}]}}\nA mathematical logic question is as follows:\nCalculate the average energy consumption of each rice cooker during performance testing, and identify the model with the lowest energy consumption.\nyour response just have a SQL without anything.\n",
        "solution": "WITH avg_energy_consumption AS (SELECT rice_cooker_id, AVG(energy_consumption) AS avg_energy FROM performance_tests GROUP BY rice_cooker_id) SELECT rci.model, aec.avg_energy FROM rice_cooker_info rci JOIN avg_energy_consumption aec ON rci.id = aec.rice_cooker_id ORDER BY aec.avg_energy ASC LIMIT 1;",
        "db_id": "rice_cooker"
    },
    {
        "id": 166,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice_cooker capacity', 'rice_quantity in usage records'], 'relations': ['rice_cooker_capacity_compared_to_usage (rice_cooker_info.capacity → usage_records.rice_quantity)'], 'intent': 'validate_usage_against_capacity', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': ['capacity', 'rice_quantity'], 'units': {'capacity': \"volume unit (e.g., liters or cups, implied by 'capacity' field)\", 'rice_quantity': 'volume unit (same unit as capacity)'}, 'foreign_keys': [{'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}, {'column': 'capacity', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['5.0', '3.5', '6.0', '6.5', '4.0']}], 'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}, {'column': 'rice_quantity'}]}}\nA common sense reasoning question is as follows:\nDetermine whether the rice quantity recorded in each use of the rice cooker exceeds its maximum capacity based on the rice cooker's volume and usage records.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ur.id AS usage_id, ur.rice_cooker_id, rci.capacity, ur.rice_quantity, ur.water_quantity, (ur.rice_quantity + ur.water_quantity) AS total_quantity, CASE WHEN (ur.rice_quantity + ur.water_quantity) <= rci.capacity THEN 'No' ELSE 'Yes' END AS exceeded_capacity FROM usage_records ur JOIN rice_cooker_info rci ON ur.rice_cooker_id = rci.id;",
        "db_id": "rice_cooker"
    },
    {
        "id": 167,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model', '10 times rated power', '24 hours', '1 megawatt-hour threshold'], 'relations': ['model_to_power_rating (rice cooker model → power_rating field)', 'theoretical_consumption_calculation (power_rating × 10 × 24h)', 'consumption_filter (>1 MWh)'], 'intent': 'calculate_theoretical_daily_power_consumption_and_filter', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [10, 24, 1], 'units': {'power': 'watts (W) → megawatt-hours (MWh) conversion: 1 MWh = 1,000,000 watt-hours', 'time': '24 hours', 'calculation': 'power_rating(W) × 10 × 24h ÷ 1,000,000 = MWh'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming all rice cookers operate continuously for 24 hours at 10 times their rated power, calculate the theoretical daily power consumption for each model (in megawatt-hours) and filter out models with a consumption exceeding 1 megawatt-hour.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT model, (10 * power_rating * 24) / 1000000 AS daily_energy_mwh FROM rice_cooker_info WHERE (10 * power_rating * 24) / 1000000 > 1;",
        "db_id": "rice_cooker"
    },
    {
        "id": 168,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['electric rice cooker models', 'thermal conversion efficiency', 'boiling time'], 'relations': ['rice_cooker_info_to_performance_tests (rice_cooker_id → rice_cooker_id)', 'efficiency_formula (output_effective_heat/input_electrical_energy)', 'filter_conditions (efficiency < 60% ∧ time_to_boil > 15 minutes)'], 'intent': 'calculate_and_filter_rice_cooker_efficiency', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [60, 15], 'units': {'temperature': '°C (Celsius)', 'efficiency': '% (percentage)', 'time': 'minutes', 'energy': 'kWh (from energy_consumption field)', 'conversion': 'Specific heat of water = 4.186 kJ/kg°C, 1 kWh = 3600 kJ'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}, {'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'capacity', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['5.0', '3.5', '6.0', '6.5', '4.0']}], 'rice_cooker.performance_tests': [{'column': 'rice_cooker_id', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '8', '9']}, {'column': 'initial_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '20.0', '22.0', '24.0', '26.0']}, {'column': 'final_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['100.0', '95.0', '88.0', '85.0', '87.0']}, {'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}, {'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}]}}\nA physical knowledge question is as follows:\nCalculate the thermal conversion efficiency (output effective heat/input electrical energy) for each model of electric rice cooker, and return the models with efficiency below 60% and boiling time exceeding 15 minutes, sorted by efficiency value in ascending order.\nyour response just have a SQL without anything.\n",
        "solution": "WITH energy_efficiency AS (SELECT rci.model, pt.time_to_boil, (pt.water_evaporation_rate / 100 * 1.5) AS water_quantity, (pt.water_evaporation_rate / 100 * 1.5 * 4186 * (pt.final_temperature - pt.initial_temperature) / 3.6e6) / (rci.power_rating * pt.time_to_boil / 60) * 100 AS efficiency FROM performance_tests pt JOIN rice_cooker_info rci ON pt.rice_cooker_id = rci.id WHERE pt.test_type = 'Boiling') SELECT model, efficiency FROM energy_efficiency WHERE efficiency < 60 AND time_to_boil > 15 ORDER BY efficiency ASC;",
        "db_id": "rice_cooker"
    },
    {
        "id": 169,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker', 'maintenance_records', 'usage_records'], 'relations': ['rice_cooker_to_maintenance (rice_cooker_id)', 'rice_cooker_to_usage (rice_cooker_id)'], 'intent': 'calculate_maintenance_cost_effectiveness_ratio', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50], 'units': {'ratio': 'unitless (usage count / monetary unit)', 'percentage': '50% of data (top half)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}, {'column': 'maintenance_cost'}], 'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}]}}\nA mathematical logic question is as follows:\nCalculate the maintenance cost-effectiveness ratio (total usage count / total maintenance cost) for each rice cooker, excluding records without any maintenance, and take the top 50% of data sorted by the ratio in descending order.\nyour response just have a SQL without anything.\n",
        "solution": "WITH usage_counts AS (SELECT rice_cooker_id, COUNT(id) AS total_usage FROM usage_records GROUP BY rice_cooker_id), maintenance_costs AS (SELECT rice_cooker_id, SUM(maintenance_cost) AS total_cost FROM maintenance_records GROUP BY rice_cooker_id), cost_benefit AS (SELECT rci.model, uc.total_usage, mc.total_cost, CASE WHEN mc.total_cost = 0 THEN NULL ELSE uc.total_usage / mc.total_cost END AS cost_benefit_ratio FROM rice_cooker_info rci JOIN usage_counts uc ON rci.id = uc.rice_cooker_id JOIN maintenance_costs mc ON rci.id = mc.rice_cooker_id), percentile_rank AS (SELECT *, NTILE(2) OVER (ORDER BY cost_benefit_ratio DESC) AS percentile FROM cost_benefit) SELECT model, total_usage, total_cost, cost_benefit_ratio FROM percentile_rank WHERE percentile = 1;",
        "db_id": "rice_cooker"
    },
    {
        "id": 170,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice_cooker models', 'actual_max_temperature', 'temperature_setting', 'rice_quality_score', 'maintenance_records'], 'relations': ['model_to_usage_records (models → usage_records)', 'temperature_compliance (actual_max_temperature < 0.9 * temperature_setting)', 'quality_threshold (rice_quality_score < 8)', 'maintenance_status (exclusion based on maintenance_records)'], 'intent': 'identify_models_with_design_flaws', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.9, 3, 8], 'units': {'temperature': '°C (assumed from context)', 'score': 'points (rice_quality_score)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}], 'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}, {'column': 'temperature_setting'}, {'column': 'actual_max_temperature'}, {'column': 'start_time'}], 'rice_cooker.performance_tests': [{'column': 'rice_quality_score', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['9.0', '8.0', '9.5', '7.5', '7.0']}, {'column': 'rice_cooker_id', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '8', '9']}], 'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}]}}\nA common sense reasoning question is as follows:\nIdentify models with design flaws: Find models where the actual maximum temperature fails to reach 90% of the set temperature for three consecutive times and the rice quality score is below 8 points. Exclude models that have already been fixed.\nyour response just have a SQL without anything.\n",
        "solution": "WITH defect_models AS (SELECT rice_cooker_id FROM performance_tests WHERE final_temperature < 0.9 * 100 AND rice_quality_score < 8 GROUP BY rice_cooker_id HAVING COUNT(*) >= 3), repaired_models AS (SELECT DISTINCT rice_cooker_id FROM maintenance_records WHERE maintenance_type = 'Repair') SELECT rci.model FROM defect_models dm JOIN rice_cooker_info rci ON dm.rice_cooker_id = rci.id WHERE dm.rice_cooker_id NOT IN (SELECT rice_cooker_id FROM repaired_models);",
        "db_id": "rice_cooker"
    },
    {
        "id": 171,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker', 'ultra-low temperature environment -50°C', 'target boiling temperature 100°C', 'water_volume', 'heat_loss_coefficient 50W/m²·℃', 'surface_area 0.12m²'], 'relations': ['rice_cooker_to_power_rating (rice cooker → power_rating)', 'rice_cooker_to_usage_records (rice cooker ↔ water_quantity)', 'temperature_difference (ΔT_water=150°C, ΔT_environment=150°C)', 'formula_components (water_volume*4186*ΔT_water + heat_loss_coefficient*A*t*ΔT_environment)'], 'intent': 'calculate_boiling_time_with_heat_loss', 'reasoning_type': 'physical knowledge reasoning, mathematical logic reasoning', 'numerical_values': [-50, 100, 50, 0.12], 'units': {'temperature': '°C (Celsius)', 'power': 'W (Watts)', 'surface_area': 'm² (square meters)', 'heat_capacity': 'J/kg·°C (water specific heat capacity)', 'time': 's (seconds)', 'conversion': 'ΔT_water = 150°C (100 - (-50)), ΔT_environment = 150°C'}, 'foreign_keys': [{'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}], 'rice_cooker.usage_records': [{'column': 'water_quantity'}]}}\nA hypothetical reasoning question is as follows:\nAssuming the rice cooker operates in an ultra-low temperature environment of -50℃, calculate the boiling time (considering heat loss). The formula is expanded as: t=(water_volume*4186*(100-T_initial) + heat_loss_coefficient*A*t*ΔT)/power, where A=0.12m�0�5 is the assumed surface area and the heat loss coefficient takes an extreme value of 50W/m�0�5·℃.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT model, power_rating, CASE WHEN power_rating > (50 * 0.12 * 150) THEN (1.8 * 4186 * 150) / (power_rating - (50 * 0.12 * 150)) / 60 ELSE NULL END AS boil_time_hours FROM rice_cooker_info WHERE (power_rating - (50 * 0.12 * 150)) > 0 AND (1.8 * 4186 * 150) / (power_rating - (50 * 0.12 * 150)) / 60 > 24;",
        "db_id": "rice_cooker"
    },
    {
        "id": 172,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model RC-3003', 'initial temperature 22°C', '6 liters of water', '18 minutes', 'rated power 900W'], 'relations': ['model_to_power (RC-3003 → 900W)', 'temperature_difference (ΔT=78°C)', 'time_conversion (18 minutes → 1080 seconds)', 'water_volume_to_mass (6 liters → 6 kg)', 'efficiency_calculation (Q/(900*1080)*100%)'], 'intent': 'calculate_heat_transfer_efficiency', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [900, 18, 6, 22], 'units': {'power': 'W (Watts)', 'time': 'minutes → seconds (18*60=1080s)', 'volume': 'liters → kg (6L=6kg)', 'temperature': '°C (Celsius)', 'efficiency': '% (percentage)', 'energy': 'J (Joules), derived from power*time and specific heat capacity'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}], 'rice_cooker.performance_tests': [{'column': 'initial_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '20.0', '22.0', '24.0', '26.0']}, {'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}]}}\nA physical knowledge question is as follows:\nGiven that the BrandC model RC-3003 rice cooker has a rated power of 900W, a performance test showed that it took 18 minutes to boil 6 liters of water with an initial temperature of 22°C. Calculate the heat transfer efficiency of this test (ignoring water evaporation).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (6 * 4186 * 78) / (900 * 18 * 60) * 100 AS thermal_efficiency;",
        "db_id": "rice_cooker"
    },
    {
        "id": 173,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Brand B', 'Brand C', '3 maintenance records in 2 years', '2 maintenance records in 18 months', '5-year period', '100 devices'], 'relations': ['brand_to_maintenance_frequency (Brand B → 3 records/2 years)', 'brand_to_maintenance_frequency (Brand C → 2 records/18 months)', 'time_normalization (18 months → 1.5 years)', 'scaling_to_100_devices (extrapolation factor: 100 devices × 5 years)'], 'intent': 'calculate_expected_maintenance_frequency_per_100_devices', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3, 2, 2, 18, 5, 100], 'units': {'time': 'years (with 18 months → 1.5 years conversion)', 'maintenance_rate': 'incidents per device per year (normalized)', 'scaling': '100 devices × 5 years'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}, {'column': 'maintenance_date'}], 'rice_cooker.rice_cooker_info': [{'column': 'brand', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['BrandA', 'BrandB', 'BrandC', 'HighPowerBrand', 'UltraCook']}, {'column': 'id (for device counting)'}]}}\nA mathematical logic question is as follows:\nAccording to the maintenance records, Brand B products generated 3 maintenance records within two years, while Brand C products had 2 maintenance records within 18 months. Please establish a maintenance frequency prediction model to calculate the expected number of maintenance incidents per hundred devices for each brand over the next five years.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT brand, ROUND((total_incidents / observation_years * 5 * 100), 1) AS expected_repairs_per_100_units FROM (SELECT 'BrandB' AS brand, 3 AS total_incidents, 2.0 AS observation_years UNION ALL SELECT 'BrandC' AS brand, 2 AS total_incidents, 1.5 AS observation_years) AS maintenance_data;",
        "db_id": "rice_cooker"
    },
    {
        "id": 174,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker models', 'water evaporation rate >15%', 'rice quality score <8', 'production date', 'warranty status'], 'relations': ['performance_to_info (rice_cooker_id)', 'warranty_expiry_date = production_date + warranty_period', 'current_date_comparison (2023-12-01)'], 'intent': 'filter_and_retrieve_models_with_criteria', 'reasoning_type': 'mathematical logic reasoning AND common sense understanding reasoning', 'numerical_values': [15, 8, 2023, 12, 1], 'units': {'water_evaporation_rate': '% (percentage)', 'rice_quality_score': 'points (scale of 1-10)', 'warranty_period': 'months (implied by typical warranty calculations)', 'date': 'YYYY-MM-DD format'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.performance_tests': [{'column': 'rice_cooker_id', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '8', '9']}, {'column': 'water_evaporation_rate', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['10.0', '12.0', '11.0', '15.0', '16.0']}, {'column': 'rice_quality_score', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['9.0', '8.0', '9.5', '7.5', '7.0']}], 'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'production_date', 'type': 'DATE', 'primary_key': False, 'comment': '', 'examples': ['2022-01-15']}, {'column': 'warranty_period', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['12', '24', '18', '36', '1000000']}]}}\nA common sense reasoning question is as follows:\nIdentify models with a water evaporation rate exceeding 15% in performance tests and a rice quality score below 8 points. Return the production date and warranty status of these models (determine if the warranty has expired, assuming the current date is 2023-12-01).\nyour response just have a SQL without anything.\n",
        "solution": "WITH defect_models AS (SELECT pt.rice_cooker_id FROM performance_tests pt WHERE pt.water_evaporation_rate > 15 AND pt.rice_quality_score < 8) SELECT rci.model, rci.production_date, CASE WHEN DATE_ADD(rci.production_date, INTERVAL rci.warranty_period MONTH) > '2023-12-01' THEN '在保' ELSE '过保' END AS warranty_status FROM defect_models dm JOIN rice_cooker_info rci ON dm.rice_cooker_id = rci.id;",
        "db_id": "rice_cooker"
    },
    {
        "id": 175,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model RC-3003', 'rated power 900W', 'altitude 5000 meters', 'ambient temperature -15°C', 'boiling point 85°C', 'water volume 2L', 'power reduction 80%', 'heat loss coefficient 20W/m²·°C', 'rice cooker surface area 0.12m²'], 'relations': ['model_to_specs (RC-3003 → rice_cooker_info.power_rating)', 'temperature_difference (ΔT=100°C, from -15°C to 85°C)', 'power_adjustment (900W * 0.8 = 720W effective power at altitude)', 'heat_loss (20W/m²·°C * 0.12m² * 100°C = 240W heat dissipation)'], 'intent': 'calculate_heating_time_with_environmental_factors', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [900, 5000, -15, 85, 2, 0.8, 20, 0.12], 'units': {'power': 'W (Watts)', 'altitude': 'm (meters)', 'temperature': '°C (Celsius)', 'volume': 'L (Liters)', 'heat_loss_coefficient': 'W/m²·°C', 'surface_area': 'm² (Square meters)', 'time': 's (Seconds, derived from calculations)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a rice cooker with model RC-3003 (rated power 900W) is used in a plateau area at an altitude of 5000 meters, where the ambient temperature is -15°C and the boiling point drops to 85°C, calculate the time required to heat 2L of water from -15°C to 85°C (considering power reduction with increasing altitude, assuming power drops to 80% of the rated value, and additionally accounting for heat loss, with a heat loss coefficient of 20W/m²·°C and a rice cooker surface area of 0.12m²).\nyour response just have a SQL without anything.\n",
        "solution": "WITH heat_loss_calc AS (SELECT 20 * 0.12 * (85 - (-15)) AS heat_loss), boil_time_calc AS (SELECT (2 * 4186 * (85 - (-15))) / (0.8 * 900 - (SELECT heat_loss FROM heat_loss_calc)) / 60 AS boil_time_minutes) SELECT boil_time_minutes FROM boil_time_calc;",
        "db_id": "rice_cooker"
    },
    {
        "id": 176,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model RC-3003', 'BrandC', 'rated power 900W', '6 liters water', 'initial temperature 22°C', 'time_to_boil 18 minutes'], 'relations': ['model_to_specs (RC-3003 → rice_cooker_info.power_rating)', 'test_to_parameters (performance_tests.time_to_boil, performance_tests.initial_temperature)', 'water_mass (6 liters → 6 kg, assuming water density 1kg/L)', 'temperature_difference (ΔT = 78°C, from 22°C to boiling 100°C)'], 'intent': 'calculate_heat_transfer_efficiency', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [900, 18, 6, 22], 'units': {'power': 'W (Joules/second)', 'time': 'minutes (converted to seconds: 18*60=1080s)', 'volume': 'liters (converted to kg: 6L → 6kg)', 'temperature': '°C (ΔT=78°C, 100°C boiling point minus 22°C)', 'efficiency': '% (calculated as (Q_actual / E_input)*100)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}, {'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}], 'rice_cooker.performance_tests': [{'column': 'initial_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '20.0', '22.0', '24.0', '26.0']}, {'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}, {'column': 'rice_cooker_id', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '8', '9']}]}}\nA physical knowledge question is as follows:\nGiven that the BrandC model RC-3003 rice cooker has a rated power of 900W, and a performance test showed that it took 18 minutes to boil 6 liters of water with an initial water temperature of 22°C, calculate the heat transfer efficiency of the test (assuming water evaporation is negligible).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (6 * 4186 * 78) / (900 * 18 * 60) * 100 AS thermal_efficiency;",
        "db_id": "rice_cooker"
    },
    {
        "id": 177,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['BrandB', 'BrandC', '3 repair records', '2 repair records', '2 years', '18 months', '5 years'], 'relations': ['brand_to_repair_records (BrandB → 3 repairs in 2 years)', 'brand_to_repair_records (BrandC → 2 repairs in 18 months)', 'time_normalization (18 months = 1.5 years)', 'prediction_horizon (5 years)'], 'intent': 'calculate_expected_repairs_per_100_devices', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3, 2, 2, 18, 5], 'units': {'time': 'years (normalized from months)', 'repair_rate': 'repairs/year/device', 'prediction_unit': 'repairs/100 devices/5 years'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'brand', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['BrandA', 'BrandB', 'BrandC', 'HighPowerBrand', 'UltraCook']}], 'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}, {'column': 'maintenance_date'}]}}\nA mathematical logic question is as follows:\nAccording to the maintenance records, BrandB products had 3 repair records within two years, while BrandC products had 2 repair records within 18 months. Please establish a maintenance frequency prediction model to calculate the expected number of repairs per 100 devices for each brand over the next five years.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT brand, ROUND((total_incidents / observation_years * 5 * 100), 1) AS expected_repairs_per_100_units FROM (SELECT 'BrandB' AS brand, 3 AS total_incidents, 2.0 AS observation_years UNION ALL SELECT 'BrandC' AS brand, 2 AS total_incidents, 1.5 AS observation_years) AS maintenance_data;",
        "db_id": "rice_cooker"
    },
    {
        "id": 178,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water evaporation rate', 'rice quality score', 'production date', 'warranty status', 'rice cooker model'], 'relations': ['model_to_performance (rice cooker model → performance test data)', 'performance_to_warranty (rice cooker model → warranty period and production date)', 'date_comparison (current date 2023-12-01 vs. production date + warranty period)'], 'intent': 'filter_and_evaluate_warranty_status', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [15, 8], 'units': {'water_evaporation_rate': '% (percentage)', 'rice_quality_score': 'points', 'warranty_status': 'expired/not expired (calculated based on warranty period and production date)', 'current_date': '2023-12-01 (fixed reference date)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.performance_tests': [{'column': 'rice_cooker_id', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '8', '9']}, {'column': 'water_evaporation_rate', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['10.0', '12.0', '11.0', '15.0', '16.0']}, {'column': 'rice_quality_score', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['9.0', '8.0', '9.5', '7.5', '7.0']}], 'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'production_date', 'type': 'DATE', 'primary_key': False, 'comment': '', 'examples': ['2022-01-15']}, {'column': 'warranty_period', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['12', '24', '18', '36', '1000000']}]}}\nA common sense reasoning question is as follows:\nFind the models with a water evaporation rate exceeding 15% and a rice quality score below 8 points in the performance test, and return the production dates and warranty status of these models (it is necessary to determine whether the warranty has expired, assuming the current date is 2023-12-01).\nyour response just have a SQL without anything.\n",
        "solution": "WITH defect_models AS (SELECT pt.rice_cooker_id FROM performance_tests pt WHERE pt.water_evaporation_rate > 15 AND pt.rice_quality_score < 8) SELECT rci.model, rci.production_date, CASE WHEN DATE_ADD(rci.production_date, INTERVAL rci.warranty_period MONTH) > '2023-12-01' THEN '在保' ELSE '过保' END AS warranty_status FROM defect_models dm JOIN rice_cooker_info rci ON dm.rice_cooker_id = rci.id;",
        "db_id": "rice_cooker"
    },
    {
        "id": 179,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model RC-3003', 'altitude 5000 meters', 'ambient temperature -15°C', 'boiling point 85°C', 'water volume 2L', 'rated power 900W', 'power decrease to 80%', 'heat loss coefficient 20W/m²·°C', 'rice cooker surface area 0.12m²'], 'relations': ['model_to_power_spec (RC-3003 → power_rating)', 'temperature_difference (ΔT=100°C: -15°C → 85°C)', 'altitude_power_adjustment (900W × 0.8 = 720W)', 'heat_loss_rate (20W/m²·°C × 0.12m² × ΔT = 240W)'], 'intent': 'calculate_heating_time_with_environmental_factors', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [-15, 85, 2, 900, 0.8, 20, 0.12], 'units': {'temperature': '°C (Celsius)', 'volume': 'L (liters)', 'power': 'W (watts)', 'percentage': 'dimensionless', 'heat_loss_coefficient': 'W/m²·°C', 'surface_area': 'm² (square meters)', 'conversion': 'ΔT = 100°C, adjusted_power = 720W, heat_loss = 240W'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}], 'rice_cooker.performance_tests': [{'column': 'initial_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '20.0', '22.0', '24.0', '26.0']}, {'column': 'final_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['100.0', '95.0', '88.0', '85.0', '87.0']}, {'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}, {'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a rice cooker with model RC-3003 (rated power 900W) is used in a high-altitude area at 5000 meters above sea level with an ambient temperature of -15°C, and the boiling point drops to 85°C, calculate the time required to heat 2L of water from -15°C to 85°C. (Account for the power decreasing with altitude, assuming the power decreases to 80% of the rated value, and additionally consider heat loss, assuming a heat loss coefficient of 20W/m²·°C and a rice cooker surface area of 0.12m²).\nyour response just have a SQL without anything.\n",
        "solution": "WITH heat_loss_calc AS (SELECT 20 * 0.12 * (85 - (-15)) AS heat_loss), boil_time_calc AS (SELECT (2 * 4186 * (85 - (-15))) / (0.8 * 900 - (SELECT heat_loss FROM heat_loss_calc)) / 60 AS boil_time_minutes) SELECT boil_time_minutes FROM boil_time_calc;",
        "db_id": "rice_cooker"
    },
    {
        "id": 180,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker models', 'effective heat efficiency', 'water evaporation rate', '65% efficiency threshold', '10% evaporation rate threshold', '2 liters water', '1 kilogram rice'], 'relations': ['rice_cooker_model_to_performance (rice_cooker_info.model → performance_tests.rice_cooker_id)', 'temperature_difference (ΔT = final_temperature - initial_temperature)', 'heating_energy_calculation (based on ΔT, water mass, and specific heat capacity)', 'efficiency_filter (efficiency < 65% AND water_evaporation_rate > 10%)'], 'intent': 'calculate_and_filter_heat_efficiency', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [65, 10, 2, 1], 'units': {'heat_efficiency': '% (percentage)', 'water_evaporation_rate': '% (percentage)', 'water_volume': 'L (liters) → converted to kg (2L = 2kg)', 'energy_consumption': 'kWh (kilowatt-hours)', 'temperature': '°C (Celsius)', 'specific_heat_capacity_water': '4.186 kJ/kg°C (implied constant)', 'conversion': '1 kWh = 3600 kJ (for energy unit conversion)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}, {'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}], 'rice_cooker.performance_tests': [{'column': 'rice_cooker_id', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '8', '9']}, {'column': 'initial_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '20.0', '22.0', '24.0', '26.0']}, {'column': 'final_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['100.0', '95.0', '88.0', '85.0', '87.0']}, {'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}, {'column': 'water_evaporation_rate', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['10.0', '12.0', '11.0', '15.0', '16.0']}]}}\nA physical knowledge question is as follows:\nCalculate the effective heat efficiency (energy consumption for heating water / total input electrical energy) of each rice cooker model in performance tests, return models with heat efficiency below 65% and water evaporation rate above 10%, and sort the results in ascending order of heat efficiency. Additional conditions: each test uses a fixed water volume of 2 liters and a fixed rice quantity of 1 kilogram.\nyour response just have a SQL without anything.\n",
        "solution": "WITH heat_efficiency AS (SELECT rci.model, 2 AS water_quantity, pt.final_temperature, pt.initial_temperature, pt.energy_consumption, pt.water_evaporation_rate, (2 * 4186 * (pt.final_temperature - pt.initial_temperature) / 3.6e6) / pt.energy_consumption * 100 AS efficiency FROM performance_tests pt JOIN rice_cooker_info rci ON pt.rice_cooker_id = rci.id WHERE pt.test_type = 'Boiling') SELECT model, efficiency FROM heat_efficiency WHERE efficiency < 65 AND water_evaporation_rate > 10 ORDER BY efficiency ASC;",
        "db_id": "rice_cooker"
    },
    {
        "id": 181,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model', 'maintenance cost', 'service months', 'monthly maintenance cost rate', '5 RMB/month'], 'relations': ['rice_cooker_to_model (rice_cooker_id → model)', 'maintenance_cost_to_rice_cooker (rice_cooker_id → maintenance_cost)', 'service_months_to_rice_cooker (rice_cooker_id → service duration in months)', 'cost_rate_formula (maintenance_cost / service_months)'], 'intent': 'calculate_and_filter_monthly_maintenance_cost_rate', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [12, 5], 'units': {'service_months': 'months (calculated from production_date to latest maintenance_date)', 'maintenance_cost': 'RMB (maintenance_records.maintenance_cost)', 'cost_rate': 'RMB/month (maintenance_cost / service_months)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}, {'column': 'maintenance_cost'}, {'column': 'maintenance_date'}], 'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}, {'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'production_date', 'type': 'DATE', 'primary_key': False, 'comment': '', 'examples': ['2022-01-15']}]}}\nA mathematical logic question is as follows:\nCalculate the monthly maintenance cost rate (total maintenance cost / service months) for each rice cooker model, filter for models with service months > 12 and cost rate > 5 RMB/month, and select the top 3 with the highest cost rates in descending order.\nyour response just have a SQL without anything.\n",
        "solution": "WITH maintenance_summary AS (SELECT rci.id, rci.model, rci.production_date, SUM(mr.maintenance_cost) AS total_cost, MAX(mr.maintenance_date) AS last_maintenance_date FROM rice_cooker_info rci JOIN maintenance_records mr ON rci.id = mr.rice_cooker_id GROUP BY rci.id, rci.model, rci.production_date HAVING last_maintenance_date IS NOT NULL) SELECT model, total_cost, ROUND(DATEDIFF(last_maintenance_date, production_date)/30.0, 1) AS service_months, ROUND(total_cost / (DATEDIFF(last_maintenance_date, production_date)/30.0), 2) AS cost_rate FROM maintenance_summary WHERE DATEDIFF(last_maintenance_date, production_date)/30.0 > 12 AND total_cost / (DATEDIFF(last_maintenance_date, production_date)/30.0) > 5 ORDER BY cost_rate DESC LIMIT 3;",
        "db_id": "rice_cooker"
    },
    {
        "id": 182,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker models', 'capacity <4L', 'cooking rice ≥1.5kg', 'most recent usage dates'], 'relations': ['model_to_capacity (model → capacity)', 'model_to_usage_records (model → rice_quantity)', 'model_to_usage_date (model → start_time)'], 'intent': 'filter_models_by_capacity_and_usage', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [4, 1.5], 'units': {'capacity': 'L (Liters)', 'rice_quantity': 'kg (Kilograms)', 'usage_date': 'date/time format (derived from start_time)'}, 'foreign_keys': [{'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}, {'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'brand', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['BrandA', 'BrandB', 'BrandC', 'HighPowerBrand', 'UltraCook']}, {'column': 'capacity', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['5.0', '3.5', '6.0', '6.5', '4.0']}], 'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}, {'column': 'rice_quantity'}, {'column': 'start_time'}]}}\nA common sense reasoning question is as follows:\nIdentify models with a capacity <4L but having at least one record of cooking rice ≥1.5kg in a single session, and return the brands of these models along with their most recent usage dates.\nyour response just have a SQL without anything.\n",
        "solution": "WITH qualified_models AS (SELECT rci.id, rci.brand, rci.model FROM rice_cooker_info rci WHERE rci.capacity < 4 AND EXISTS (SELECT 1 FROM usage_records ur WHERE ur.rice_cooker_id = rci.id AND ur.rice_quantity >= 1.5) AND NOT EXISTS (SELECT 1 FROM usage_records ur2 WHERE ur2.rice_cooker_id = rci.id AND ur2.rice_quantity >= 1.5 AND ur2.water_quantity < 2.25)) SELECT qm.brand, qm.model, MAX(ur.end_time) AS last_usage_date FROM qualified_models qm JOIN usage_records ur ON qm.id = ur.rice_cooker_id GROUP BY qm.brand, qm.model;",
        "db_id": "rice_cooker"
    },
    {
        "id": 183,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model RC-2002', '700W power rating', '2 liters of water', '20°C initial temperature', '100°C vaporization temperature', 'space vacuum environment'], 'relations': ['model_to_power_rating (RC-2002 → 700W)', 'water_heating (20°C → 100°C)', 'energy_to_time_conversion (700W → vaporization duration)'], 'intent': 'calculate_time_to_vaporize_water', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [2, 20, 100, 700], 'units': {'volume': 'liters (converted to kg using water density 1kg/L)', 'temperature': '°C (Celsius)', 'power': 'W (Watts)', 'time': 'seconds (calculated via energy/power)', 'conversion': 'ΔT = 80°C (temp rise), latent heat of vaporization 2260 kJ/kg'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}], 'rice_cooker.performance_tests': [{'column': 'water_evaporation_rate', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['10.0', '12.0', '11.0', '15.0', '16.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the model RC-2002 (700W) is used in a space vacuum environment (where the boiling point disappears and water continuously vaporizes at 100°C), calculate the time required for 2 liters of water to completely vaporize from 20°C.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (2 * (4186 * (100 - 20) + 2260000)) / (0.5 * 700 * 0.1) AS total_seconds, ROUND((2 * (4186 * 80 + 2260000)) / (0.5 * 700 * 0.1) / 3600, 1) AS hours;",
        "db_id": "rice_cooker"
    },
    {
        "id": 184,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model', 'thermal efficiency deviation', 'theoretical maximum thermal efficiency', 'actual thermal efficiency', 'water evaporation rate'], 'relations': ['model_to_performance (rice cooker model → performance_tests)', 'deviation_comparison (actual vs theoretical thermal efficiency)', 'threshold_filter (deviation >15% ∧ water_evaporation_rate >12%)'], 'intent': 'calculate_thermal_efficiency_deviation_and_filter_models', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [15, 12], 'units': {'thermal_efficiency_deviation': '% (percentage points)', 'water_evaporation_rate': '% (percentage)'}, 'missing_entities': ['actual_thermal_efficiency', 'theoretical_max_thermal_efficiency'], 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}], 'rice_cooker.performance_tests': [{'column': 'rice_cooker_id', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '8', '9']}, {'column': 'water_evaporation_rate', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['10.0', '12.0', '11.0', '15.0', '16.0']}]}}\nA physical knowledge question is as follows:\nCalculate the thermal efficiency deviation (actual thermal efficiency vs theoretical maximum thermal efficiency) of each rice cooker model in performance tests, and return models where the deviation value is >15% and water evaporation rate >12%, sorted in descending order by deviation value.\nyour response just have a SQL without anything.\n",
        "solution": "WITH efficiency_calc AS (SELECT rci.model, pt.initial_temperature, pt.energy_consumption, pt.time_to_boil, pt.water_evaporation_rate, (2 * 4186 * (100 - pt.initial_temperature)) / (rci.power_rating * pt.time_to_boil / 60 * 1000) AS eta_max, pt.energy_consumption AS eta_real, ((2 * 4186 * (100 - pt.initial_temperature)) / (rci.power_rating * pt.time_to_boil / 60 * 1000) - pt.energy_consumption) / ((2 * 4186 * (100 - pt.initial_temperature)) / (rci.power_rating * pt.time_to_boil / 60 * 1000)) * 100 AS deviation FROM performance_tests pt JOIN rice_cooker_info rci ON pt.rice_cooker_id = rci.id WHERE pt.test_type = 'Boiling') SELECT model, deviation, water_evaporation_rate FROM efficiency_calc WHERE deviation > 15 AND water_evaporation_rate > 12 ORDER BY deviation DESC;",
        "db_id": "rice_cooker"
    },
    {
        "id": 185,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice_cooker brand', 'rice_cooker model', 'maintenance_records'], 'relations': ['brand_to_model (brand → models)', 'rice_cooker_id_to_brand (rice_cooker_id → brand)'], 'intent': 'calculate_fault_recurrence_rate_with_filter_and_ranking', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [30, 2], 'units': {'recurrence_rate': 'percentage (30%)', 'repair_count': 'absolute count (≥2)', 'ranking': 'top 3 by descending rate'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}], 'rice_cooker.rice_cooker_info': [{'column': 'brand', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['BrandA', 'BrandB', 'BrandC', 'HighPowerBrand', 'UltraCook']}]}}\nA mathematical logic question is as follows:\nCalculate the fault recurrence rate (number of repeated repairs for the same model / total number of repairs) for each brand of rice cookers. Only return brands with a recurrence rate >30% and a total number of repairs ≥2, and rank the top 3 by recurrence rate in descending order.\nyour response just have a SQL without anything.\n",
        "solution": "WITH model_maintenance AS (SELECT rci.brand, rci.model, COUNT(*) AS maintenance_count FROM maintenance_records mr JOIN rice_cooker_info rci ON mr.rice_cooker_id = rci.id GROUP BY rci.brand, rci.model), brand_recurrence AS (SELECT brand, SUM(CASE WHEN maintenance_count > 1 THEN 1 ELSE 0 END) * 1.0 / COUNT(*) AS recurrence_rate, SUM(maintenance_count) AS total_maintenance FROM model_maintenance GROUP BY brand HAVING SUM(maintenance_count) >= 2) SELECT brand, ROUND(recurrence_rate * 100, 2) AS recurrence_rate_percent, total_maintenance FROM brand_recurrence WHERE recurrence_rate > 0.3 ORDER BY recurrence_rate DESC LIMIT 3;",
        "db_id": "rice_cooker"
    },
    {
        "id": 186,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model', 'capacity ≥5L', 'rice quantity <0.5kg', 'rice quality score'], 'relations': ['model_to_capacity (rice cooker model → capacity)', 'model_to_usage_records (rice cooker model → usage_records.rice_quantity)', 'model_to_performance_tests (rice cooker model → performance_tests.rice_quality_score)'], 'intent': 'identify_rice_cookers_with_low_rice_load_and_evaluate_quality', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5, 0.5], 'units': {'capacity': 'liters (L)', 'rice_quantity': 'kilograms (kg)', 'rice_quality_score': 'dimensionless (score)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'capacity', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['5.0', '3.5', '6.0', '6.5', '4.0']}], 'rice_cooker.usage_records': [{'column': 'rice_quantity'}], 'rice_cooker.performance_tests': [{'column': 'rice_quality_score', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['9.0', '8.0', '9.5', '7.5', '7.0']}, {'column': 'test_date', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['2023-09-01', '2023-09-05', '2023-09-10', '2023-08-01', '2023-08-05']}]}}\nA common sense reasoning question is as follows:\nIdentify models with a capacity ≥5L that have records of cooking rice with a single batch <0.5kg (note: low rice quantity may lead to uneven heating), and return the average rice quality score of the most recent 3 usage records for these models.\nyour response just have a SQL without anything.\n",
        "solution": "WITH qualified_models AS (SELECT rci.id, rci.model FROM rice_cooker_info rci WHERE rci.capacity >= 5 AND EXISTS (SELECT 1 FROM usage_records ur WHERE ur.rice_cooker_id = rci.id AND ur.rice_quantity < 0.5)), recent_scores AS (SELECT qm.model, pt.rice_quality_score, ROW_NUMBER() OVER (PARTITION BY qm.id ORDER BY pt.test_date DESC) AS rn FROM qualified_models qm JOIN performance_tests pt ON qm.id = pt.rice_cooker_id) SELECT model, ROUND(AVG(rice_quality_score), 2) AS avg_rice_quality FROM recent_scores WHERE rn <= 3 GROUP BY model;",
        "db_id": "rice_cooker"
    },
    {
        "id": 187,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model RC-3003', 'deep-sea environment (4000m)', 'water volume 3L', 'initial temperature 5°C', 'target temperature 280°C', 'power 900W (150% increased)', 'heat loss formula Q_loss=0.08×A×(T_water-2)^4', 'surface area A=0.2m²', 'ambient temperature 2°C', 'pressure 40MPa'], 'relations': ['model_to_power (RC-3003 → 900W)', 'temperature_difference (ΔT=275°C)', 'power_increase (900W → 1350W at 150%)', 'heat_loss_dependency (Q_loss depends on T_water, A, ambient temperature)', 'environment_to_boiling_point (40MPa pressure → 280°C boiling point)'], 'intent': 'calculate_heating_time_with_thermal_loss', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [3, 5, 280, 900, 1.5, 0.08, 0.2, 2], 'units': {'power': 'W (watts, adjusted to 1350W at 150% capacity)', 'temperature': '°C (Celsius)', 'volume': 'L (liters)', 'energy': 'J (joules, derived from watt-seconds)', 'area': 'm² (square meters)', 'time': 'seconds or minutes (calculated result)', 'pressure': 'MPa (megapascals, environmental context)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the model RC-3003 (900W) is used in a deep-sea environment at 4000 meters (boiling point 280°C, pressure 40MPa), calculate the time required to heat 3L of water from 5°C to 280°C (assuming the power is increased to 150%, heat loss formula: Q_loss=0.08×A×(T_water-2)^4, A=0.2m², ambient temperature 2°C).\nyour response just have a SQL without anything.\n",
        "solution": "WITH heat_loss_calc AS (SELECT 0.08 * 0.2 * POWER(280 - 2, 4) AS max_heat_loss), boil_time_calc AS (SELECT (3 * 4186 * (280 - 5)) / (1.5 * 900 - (SELECT max_heat_loss FROM heat_loss_calc)) / 3600 AS boil_time_hours) SELECT boil_time_hours FROM boil_time_calc;",
        "db_id": "rice_cooker"
    },
    {
        "id": 188,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\nthere is nothing I can give you about this question.\nA physical knowledge question is as follows:\nCalculate the difference between the actual thermal efficiency and the theoretical maximum thermal efficiency (theoretical maximum thermal efficiency = 1 - (ambient temperature / final temperature)) for each rice cooker model in the performance test. Return models where the difference is >10% and the water evaporation rate is >8%, sorted in descending order by the difference. Assume the ambient temperature is 25°C.\nyour response just have a SQL without anything.\n",
        "solution": "WITH efficiency_calc AS (SELECT rci.model, pt.final_temperature, pt.initial_temperature, pt.energy_consumption, pt.water_evaporation_rate, (2 * 4186 * (pt.final_temperature - pt.initial_temperature) / 3.6e6) / pt.energy_consumption AS eta_actual, 1 - (298.15 / (pt.final_temperature + 273.15)) AS eta_theoretical, ((2 * 4186 * (pt.final_temperature - pt.initial_temperature) / 3.6e6) / pt.energy_consumption - (1 - (298.15 / (pt.final_temperature + 273.15)))) * 100 AS efficiency_diff FROM performance_tests pt JOIN rice_cooker_info rci ON pt.rice_cooker_id = rci.id WHERE pt.test_type = 'Boiling') SELECT model, efficiency_diff, water_evaporation_rate FROM efficiency_calc WHERE efficiency_diff > 10 AND water_evaporation_rate > 8 ORDER BY efficiency_diff DESC;",
        "db_id": "rice_cooker"
    },
    {
        "id": 189,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker models', 'energy cost-effectiveness ratio (total rice cooked/total energy consumption)', 'usage_count'], 'relations': ['rice_cooker_to_usage_records (rice cooker → usage_records)', 'ratio_calculation (sum(rice_quantity)/sum(energy_consumption))', 'filter_criteria (ratio <0.8 ∧ usage_count >5)'], 'intent': 'calculate_cost_effectiveness_ratio_with_filters', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.8, 5], 'units': {'ratio': 'kg/kWh (rice_cooked_kg / energy_consumption_kWh)', 'usage_count': 'times (count of usage_records entries)', 'conversion': '1 kWh = 1 unit (assumed from database column naming)'}, 'foreign_keys': [{'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}], 'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}, {'column': 'rice_quantity'}, {'column': 'energy_consumption'}]}}\nA mathematical logic question is as follows:\nCalculate the energy cost-effectiveness ratio (total rice cooked/total energy consumption) for each rice cooker, requiring models with a ratio <0.8 kg/kWh and usage count >5 times, sorted in ascending order by the ratio and taking the last 2 entries.\nyour response just have a SQL without anything.\n",
        "solution": "WITH cost_benefit AS (SELECT rci.model, SUM(ur.rice_quantity) AS total_rice, SUM(pt.energy_consumption) AS total_energy, COUNT(*) AS usage_count, SUM(ur.rice_quantity) / SUM(pt.energy_consumption) AS benefit_ratio FROM usage_records ur JOIN performance_tests pt ON ur.rice_cooker_id = pt.rice_cooker_id JOIN rice_cooker_info rci ON ur.rice_cooker_id = rci.id GROUP BY rci.model HAVING COUNT(*) > 5) SELECT model, ROUND(benefit_ratio, 2) AS benefit_ratio FROM cost_benefit WHERE benefit_ratio < 0.8 ORDER BY benefit_ratio ASC LIMIT 2;",
        "db_id": "rice_cooker"
    },
    {
        "id": 190,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice_cooker models', \"maintenance records of type 'repair'\", 'warranty period'], 'relations': ['rice_cooker_id_to_maintenance (maintenance_records.rice_cooker_id → rice_cooker_info.id)', 'warranty_end_date (production_date + warranty_period)', 'last_used_date (MAX(usage_records.end_time))'], 'intent': 'identify_rice_cooker_models_with_repair_within_warranty', 'reasoning_type': 'logical_filtering_with_time_interval_comparison', 'numerical_values': [], 'units': {'date': 'YYYY-MM-DD (maintenance_date, production_date, usage_records.end_time)', 'warranty_period': 'months (assumed from rice_cooker_info.warranty_period)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}, {'column': 'maintenance_type'}, {'column': 'maintenance_date'}, {'column': 'technician_name'}], 'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}, {'column': 'production_date', 'type': 'DATE', 'primary_key': False, 'comment': '', 'examples': ['2022-01-15']}, {'column': 'warranty_period', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['12', '24', '18', '36', '1000000']}], 'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}, {'column': 'end_time'}]}}\nA common sense reasoning question is as follows:\nIdentify models that have maintenance records of the 'repair' type and where the maintenance occurred within the warranty period. Return the last used date and the name of the maintenance technician for these models.\nyour response just have a SQL without anything.\n",
        "solution": "WITH repaired_in_warranty AS (SELECT rci.id, rci.model, mr.technician_name, DATE_ADD(rci.production_date, INTERVAL rci.warranty_period MONTH) AS warranty_end_date, mr.maintenance_date FROM maintenance_records mr JOIN rice_cooker_info rci ON mr.rice_cooker_id = rci.id WHERE mr.maintenance_type = 'Repair' AND mr.maintenance_date <= DATE_ADD(rci.production_date, INTERVAL rci.warranty_period MONTH)), last_usage AS (SELECT ur.rice_cooker_id, MAX(ur.end_time) AS last_usage_date FROM usage_records ur GROUP BY ur.rice_cooker_id) SELECT riw.model, riw.technician_name, lu.last_usage_date FROM repaired_in_warranty riw JOIN last_usage lu ON riw.id = lu.rice_cooker_id;",
        "db_id": "rice_cooker"
    },
    {
        "id": 191,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model RC-1001', '800W power rating', '5L water volume', 'initial temperature 300°C', 'nuclear reactor core environment (300°C coolant, 15MPa pressure)'], 'relations': ['model_to_specs (RC-1001 → rice_cooker_info.power_rating)', 'water_vaporization_time (time = energy / power)', 'environmental_conditions (pressure & temperature affecting vaporization)'], 'intent': 'calculate_vaporization_time_for_water', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [5, 300, 800, 15], 'units': {'volume': 'liters (converted to kg via density assumption)', 'temperature': '°C (Celsius)', 'power': 'W (watts)', 'pressure': 'MPa (converted to Pa for calculations)', 'time': 'seconds (derived via energy/power)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}], 'rice_cooker.performance_tests': [{'column': 'water_evaporation_rate', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['10.0', '12.0', '11.0', '15.0', '16.0']}, {'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the model RC-1001 (800W) is used in a nuclear reactor core environment (coolant temperature 300°C, pressure 15MPa, boiling point eliminated), calculate the time required for 5L of water at 300°C to completely vaporize.\nyour response just have a SQL without anything.\n",
        "solution": "WITH heat_loss_calc AS (SELECT 0.2 * 0.3 AS heat_loss_coeff), boil_time_calc AS (SELECT (5 * (4186 * (500 - 300) + 2260000 * (1 + 400/500))) / (5 * 800 - (SELECT heat_loss_coeff * (POWER(500,4) - POWER(300,4)) FROM heat_loss_calc)) / 3600 AS boil_time_hours) SELECT boil_time_hours FROM boil_time_calc;",
        "db_id": "rice_cooker"
    },
    {
        "id": 192,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker models', 'performance test data', 'sensible heat efficiency <50%', 'boiling time >18 minutes'], 'relations': ['rice_cooker_to_test (rice_cooker_info → performance_tests)', 'efficiency_formula_parameters (water_volume × ΔT ÷ energy_consumption)'], 'intent': 'calculate_and_filter_sensible_heat_efficiency', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [4186, 3600000, 50, 18], 'units': {'water_volume': 'liters (from usage_records.water_quantity)', 'temperature': '°C (Celsius from performance_tests.initial_temperature/final_temperature)', 'energy_consumption': 'kWh (from performance_tests.energy_consumption)', 'time_to_boil': 'minutes (from performance_tests.time_to_boil)', 'efficiency': '% (calculated ratio)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}], 'rice_cooker.performance_tests': [{'column': 'initial_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '20.0', '22.0', '24.0', '26.0']}, {'column': 'final_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['100.0', '95.0', '88.0', '85.0', '87.0']}, {'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}, {'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}], 'rice_cooker.usage_records': [{'column': 'water_quantity'}]}}\nA physical knowledge question is as follows:\nCalculate the sensible heat efficiency of each rice cooker model in the performance test (only counting the energy consumption ratio for water temperature increase), and return the models with a sensible heat efficiency <50% and boiling time >18 minutes, sorted in ascending order by efficiency. The sensible heat efficiency formula is: (Water volume (liters) × 4186 × (Final temperature - Initial temperature) / 3,600,000) / Energy consumption (kWh) × 100%.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rci.model, ((ur.water_quantity * 4186 * (pt.final_temperature - pt.initial_temperature) / 3600000) / pt.energy_consumption) * 100 AS thermal_efficiency FROM performance_tests pt JOIN rice_cooker_info rci ON pt.rice_cooker_id = rci.id JOIN usage_records ur ON pt.rice_cooker_id = ur.rice_cooker_id AND DATE(pt.test_date) = DATE(ur.start_time) WHERE pt.test_type = 'Boiling' AND pt.time_to_boil > 18 AND ((ur.water_quantity * 4186 * (pt.final_temperature - pt.initial_temperature) / 3600000) / pt.energy_consumption) * 100 < 50 ORDER BY thermal_efficiency ASC;",
        "db_id": "rice_cooker"
    },
    {
        "id": 193,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice_cooker brand', 'service months', 'number of failures', 'mean time between failures (MTBF)'], 'relations': ['brand_to_service_months (brand → service months calculation)', 'brand_to_failure_count (brand → distinct maintenance dates count)', 'MTBF_calculation (service_months / failure_count)'], 'intent': 'calculate_and_rank_MTBF_for_rice_cooker_brands', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [30], 'units': {'time': 'months (derived from days/30)', 'conversion': 'days_to_months = 30 days'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'brand', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['BrandA', 'BrandB', 'BrandC', 'HighPowerBrand', 'UltraCook']}, {'column': 'production_date', 'type': 'DATE', 'primary_key': False, 'comment': '', 'examples': ['2022-01-15']}], 'rice_cooker.usage_records': [{'column': 'end_time'}], 'rice_cooker.maintenance_records': [{'column': 'maintenance_date'}]}}\nA mathematical logic question is as follows:\nCalculate the mean time between failures (total service months divided by the number of failures) for each brand of rice cooker, excluding brands with zero failure occurrences. Return the top 3 brands ranked by ascending mean time between failures. Service months = (days between the earliest production date and the last usage date) / 30. Number of failures = count of distinct maintenance dates for all maintenance records of the brand.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rci.brand, DATEDIFF(MAX(ur.end_time), MIN(rci.production_date))/30 AS total_service_months, COUNT(DISTINCT mr.maintenance_date) AS total_faults, (DATEDIFF(MAX(ur.end_time), MIN(rci.production_date))/30) / COUNT(DISTINCT mr.maintenance_date) AS fault_interval FROM rice_cooker_info rci LEFT JOIN usage_records ur ON rci.id = ur.rice_cooker_id LEFT JOIN maintenance_records mr ON rci.id = mr.rice_cooker_id GROUP BY rci.brand HAVING total_faults > 0 ORDER BY fault_interval ASC LIMIT 3;",
        "db_id": "rice_cooker"
    },
    {
        "id": 194,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice_cooker_info', 'maintenance_records', 'usage_records', 'capacity >4L', 'single-use water consumption <1L'], 'relations': ['capacity_filter (capacity >4L)', 'water_consumption_filter (water_quantity <1L)', 'model_to_maintenance (rice_cooker_id → maintenance_records)'], 'intent': 'identify_high_maintenance_risk_rice_cookers', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [4, 1], 'units': {'capacity': 'L (liters)', 'water_consumption': 'L (liters)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}, {'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'capacity', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['5.0', '3.5', '6.0', '6.5', '4.0']}], 'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}, {'column': 'water_quantity'}], 'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}, {'column': 'maintenance_type'}, {'column': 'maintenance_date'}]}}\nA common sense reasoning question is as follows:\nFind models with a capacity >4L but having records of single-use water consumption <1L (common knowledge: low water volume easily triggers dry-boiling protection), and return the maintenance count and last maintenance type for these models.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rci.model, COUNT(mr.id) AS maintenance_count, (SELECT maintenance_type FROM maintenance_records WHERE rice_cooker_id = rci.id ORDER BY maintenance_date DESC LIMIT 1) AS last_maintenance_type FROM rice_cooker_info rci LEFT JOIN maintenance_records mr ON rci.id = mr.rice_cooker_id WHERE rci.capacity > 4 AND EXISTS (SELECT 1 FROM usage_records ur WHERE ur.rice_cooker_id = rci.id AND ur.water_quantity < 1) GROUP BY rci.id;",
        "db_id": "rice_cooker"
    },
    {
        "id": 195,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model RC-2002', 'power rating 700W', 'power increase 1000%', 'water volume 10L', 'initial temperature 300K', 'boiling point 5000K', 'gravitational acceleration 100g', 'heat loss formula Q_loss=2×A×g^0.5×(T-T_env)^3', 'A=0.5m²', 'T_env=5000K'], 'relations': ['model_to_power_rating (RC-2002 → 700W)', 'temperature_difference (ΔT = 4700K)', 'power_increase (700W → 7000W)', 'heat_loss_dependency (A, g, T, T_env)'], 'intent': 'calculate_time_to_heat_water_with_environmental_factors', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [700, 1000, 10, 300, 5000, 100, 0.5], 'units': {'power': 'W (Watts) → increased to 7000W', 'volume': 'L (Liters)', 'temperature': 'K (Kelvin)', 'gravitational_acceleration': 'g (100×9.8m/s²)', 'area': 'm² (square meters)', 'energy_loss': 'W (calculated via formula)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the model RC-2002 (700W) is used in a stellar surface environment (gravitational acceleration 100g, boiling point 5000K), calculate the time required to heat 10L of water from 300K to the boiling point (assuming the power is increased by 1000%, heat loss formula: Q_loss=2×A×g^(0.5)×(T-T_env)^3, A=0.5m², g=100, T_env=5000K).\nyour response just have a SQL without anything.\n",
        "solution": "WITH RECURSIVE heating_time AS (SELECT 300 AS start_temp, 300 + 50 AS end_temp, CAST(0.0 AS DECIMAL(30,3)) AS elapsed_time UNION ALL SELECT end_temp, LEAST(end_temp + CASE WHEN end_temp < 4000 THEN 50 WHEN end_temp < 4900 THEN 10 ELSE 1 END, 5000), CAST(elapsed_time AS DECIMAL(30,3)) + CAST( (10 * 4186 * (end_temp - start_temp)) / GREATEST(7000 - 10 * POWER((start_temp + end_temp)/2 - 5000, 3), 1) AS DECIMAL(30,3)) FROM heating_time WHERE end_temp < 5000 ) SELECT MAX(elapsed_time) AS total_seconds FROM heating_time;",
        "db_id": "rice_cooker"
    },
    {
        "id": 196,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model', 'thermal conduction efficiency <40%', 'temperature setting difference >5°C'], 'relations': ['model_to_power_rating (rice_cooker_info.model → rice_cooker_info.power_rating)', 'performance_test_data (performance_tests.energy_consumption, performance_tests.time_to_boil)', 'temperature_setting_difference (usage_records.temperature_setting - usage_records.actual_max_temperature)'], 'intent': 'calculate_and_filter_thermal_efficiency', 'reasoning_type': 'physical knowledge reasoning + mathematical logic reasoning', 'numerical_values': [40, 5], 'units': {'efficiency': '% (percentage)', 'temperature': '°C (Celsius)', 'power': 'W (Watts) for power_rating, kWh for energy_consumption, hours for time_to_boil', 'conversion': 'Effective power (W) = (energy_consumption [kWh] / time_to_boil [h]) * 1000; Efficiency (%) = (effective_power / power_rating) * 100'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}], 'rice_cooker.performance_tests': [{'column': 'rice_cooker_id', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '8', '9']}, {'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}, {'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}], 'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}, {'column': 'temperature_setting'}, {'column': 'actual_max_temperature'}]}}\nA physical knowledge question is as follows:\nCalculate the thermal conduction efficiency (effective heating power / rated power) of each rice cooker model in the performance test, return models with efficiency <40% and a temperature setting difference (set temperature - actual temperature) >5°C, sorted in ascending order by efficiency.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rci.model, ROUND(((ur.water_quantity*4186*(pt.final_temperature-pt.initial_temperature))/(pt.time_to_boil*60*rci.power_rating))*100,2) AS efficiency_rate FROM performance_tests pt JOIN rice_cooker_info rci ON pt.rice_cooker_id=rci.id JOIN usage_records ur ON pt.rice_cooker_id=ur.rice_cooker_id WHERE ur.temperature_setting-ur.actual_max_temperature>5 HAVING efficiency_rate<40 ORDER BY efficiency_rate ASC;",
        "db_id": "rice_cooker"
    },
    {
        "id": 197,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker brand', 'average daily energy cost > 2 yuan/day', 'days of use > 30'], 'relations': ['brand_to_rice_cooker (brand → rice_cooker_info.model)', 'rice_cooker_to_usage (rice_cooker_info.id → usage_records.rice_cooker_id)'], 'intent': 'calculate_average_daily_energy_cost_by_brand_with_filters', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2, 30], 'units': {'energy_consumption': 'kWh (implied by column name)', 'electricity_price': 'yuan/kWh (assumed constant for calculation)', 'energy_cost': 'yuan/day', 'days_of_use': 'days'}, 'foreign_keys': [{'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}, {'column': 'brand', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['BrandA', 'BrandB', 'BrandC', 'HighPowerBrand', 'UltraCook']}], 'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}, {'column': 'start_time'}, {'column': 'energy_consumption'}]}}\nA mathematical logic question is as follows:\nCalculate the average daily energy cost (total energy consumption × electricity price / days of use) for each brand of rice cooker, returning brands with a cost > 2 yuan/day and days of use > 30, sorted by cost in descending order and limited to the top 2.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rci.brand, ROUND(SUM(COALESCE(pt.energy_consumption,0)+COALESCE(ur.energy_consumption,0))*0.6/GREATEST(DATEDIFF(MAX(ur.end_time),MIN(ur.start_time)),1),2) AS daily_cost FROM rice_cooker_info rci LEFT JOIN performance_tests pt ON rci.id=pt.rice_cooker_id LEFT JOIN usage_records ur ON rci.id=ur.rice_cooker_id GROUP BY rci.brand HAVING daily_cost>2 AND DATEDIFF(MAX(ur.end_time),MIN(ur.start_time))>30 ORDER BY daily_cost DESC LIMIT 2;",
        "db_id": "rice_cooker"
    },
    {
        "id": 198,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker models', 'warranty period >18 months', 'production date >3 years ago', 'last maintenance record date', 'maintenance type'], 'relations': ['rice_cooker_info.warranty_period_filter (warranty_period > 18 months)', 'rice_cooker_info.production_date_filter (production_date older than 3 years)', 'maintenance_records.last_maintenance (max maintenance_date per rice_cooker_id)', 'rice_cooker_info_to_maintenance_records (rice_cooker_id foreign key relationship)'], 'intent': 'filter_models_by_warranty_and_production_date_and_retrieve_last_maintenance_info', 'reasoning_type': 'mathematical logic reasoning + common sense understanding reasoning', 'numerical_values': [18, 3], 'units': {'warranty_period': 'months (explicit in query)', 'production_age': 'years (converted to date comparison)', 'date_comparison': \"current_date - interval '3 years'\"}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}, {'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'warranty_period', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['12', '24', '18', '36', '1000000']}, {'column': 'production_date', 'type': 'DATE', 'primary_key': False, 'comment': '', 'examples': ['2022-01-15']}], 'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}, {'column': 'maintenance_date'}, {'column': 'maintenance_type'}]}}\nA common sense reasoning question is as follows:\nIdentify models with a warranty period greater than 18 months but a production date older than 3 years, and return the last maintenance record date and maintenance type for these models.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rci.model, (SELECT MAX(maintenance_date) FROM maintenance_records WHERE rice_cooker_id=rci.id) AS last_date, (SELECT maintenance_type FROM maintenance_records WHERE rice_cooker_id=rci.id ORDER BY maintenance_date DESC LIMIT 1) AS last_type FROM rice_cooker_info rci WHERE warranty_period>18 AND TIMESTAMPDIFF(YEAR,production_date,CURDATE())>3 AND EXISTS(SELECT 1 FROM maintenance_records WHERE rice_cooker_id=rci.id);",
        "db_id": "rice_cooker"
    },
    {
        "id": 199,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model RC-3003', 'power rating 900W', 'water volume 10L', 'initial temperature -273°C', 'final temperature 100°C', 'power increase 300%'], 'relations': ['model_to_power (RC-3003 → 900W)', 'temperature_range (ΔT=373°C)', 'power_adjustment (900W × 3 → 2700W)', 'heat_loss_dependency (Q_loss = 0.5×A×(T+273)^4)'], 'intent': 'calculate_heating_time_with_heat_loss', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [-273, 100, 10, 900, 300], 'units': {'temperature': '°C (converted to Kelvin for calculation)', 'volume': 'L (water)', 'power': 'W (adjusted to 2700W)', 'heat_loss': 'Q_loss = 0.5×A×(T+273)^4 (A in m², T in Kelvin)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming model RC-3003 (900W) is used in an absolute zero environment, calculate the time required to heat 10L of water from -273°C to 100°C (power increased to 300%, heat loss formula: Q_loss=0.5×A×(T+273)^4).\nyour response just have a SQL without anything.\n",
        "solution": "SET SESSION cte_max_recursion_depth = 1000000; WITH RECURSIVE heating_sim AS (SELECT -273.0 AS current_temp, CAST(0.0 AS DECIMAL(30,6)) AS elapsed_time UNION ALL SELECT LEAST(current_temp + CASE WHEN current_temp < -173 THEN 10 WHEN current_temp < 0 THEN 1 ELSE 0.1 END, 100), elapsed_time + (10*4186*(CASE WHEN current_temp < -173 THEN 10 WHEN current_temp < 0 THEN 1 ELSE 0.1 END)) / GREATEST(2700 - 0.5*POWER((current_temp + 273),4), 1) FROM heating_sim WHERE current_temp < 100 ) SELECT MAX(elapsed_time) AS total_seconds, MAX(elapsed_time)/3600 AS total_hours FROM heating_sim;",
        "db_id": "rice_cooker"
    },
    {
        "id": 200,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['electric rice cooker', 'rice quantity', 'specific heat capacity of water (4.186 J/g°C)', 'heat of vaporization (2260 kJ/kg)'], 'relations': ['rice_cooker_to_capacity (rice_cooker_info.capacity)', 'rice_quantity_to_water_evaporation (usage_records.rice_quantity → performance_tests.water_evaporation_rate)', 'energy_conversion_rate (energy_consumption → thermal_output)'], 'intent': 'calculate_thermal_efficiency_and_energy_conversion_rate', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [4.186, 2260], 'units': {'specific_heat': 'J/(g·°C)', 'heat_of_vaporization': 'kJ/kg', 'energy_consumption': 'kWh → J (conversion: 1 kWh=3.6×10^6 J)', 'rice_quantity': 'cups → grams (assuming 1 cup rice ≈ 185g)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}, {'column': 'capacity', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['5.0', '3.5', '6.0', '6.5', '4.0']}], 'rice_cooker.performance_tests': [{'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}, {'column': 'initial_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '20.0', '22.0', '24.0', '26.0']}, {'column': 'final_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['100.0', '95.0', '88.0', '85.0', '87.0']}, {'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}, {'column': 'water_evaporation_rate', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['10.0', '12.0', '11.0', '15.0', '16.0']}], 'rice_cooker.usage_records': [{'column': 'rice_quantity'}, {'column': 'energy_consumption'}]}}\nA physical knowledge question is as follows:\nCalculate the thermal efficiency of an electric rice cooker at different rice quantities and derive the energy conversion rate (considering the specific heat capacity of water and the heat of vaporization).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ur.rice_cooker_id, rci.model, ur.rice_quantity, ur.water_quantity, ur.energy_consumption AS E_actual, (ur.rice_quantity * 4.18 * (ur.actual_max_temperature - 25) + ur.water_quantity * 2260) / 3600 AS E_theory, ((ur.rice_quantity * 4.18 * (ur.actual_max_temperature - 25) + ur.water_quantity * 2260) / 3600) / ur.energy_consumption * 100 AS efficiency_percent FROM usage_records ur JOIN rice_cooker_info rci ON ur.rice_cooker_id = rci.id",
        "db_id": "rice_cooker"
    },
    {
        "id": 201,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker brands', 'rice quality score', 'warranty period', 'price', 'average energy consumption', 'quarter'], 'relations': ['brand_to_rice_cookers (rice cooker brands → rice cooker instances)', 'rice_cooker_to_performance_tests (rice cooker → rice_quality_score)', 'rice_cooker_to_usage_records (rice cooker → energy_consumption)', 'rice_cooker_to_specs (rice cooker → warranty_period, price, production_date)', 'production_date_to_quarter (production_date → quarter)'], 'intent': 'calculate_cost_performance_index', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['rice_quality_score', 'warranty_period', 'price', 'energy_consumption'], 'units': {'rice_quality_score': 'unitless (score)', 'warranty_period': 'months (assumed unit)', 'price': 'USD (assumed currency)', 'energy_consumption': 'kWh (assumed unit from energy_consumption column)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'brand', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['BrandA', 'BrandB', 'BrandC', 'HighPowerBrand', 'UltraCook']}, {'column': 'warranty_period', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['12', '24', '18', '36', '1000000']}, {'column': 'price', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['299.99', '399.99', '499.99', '799.99', '699.99']}, {'column': 'production_date', 'type': 'DATE', 'primary_key': False, 'comment': '', 'examples': ['2022-01-15']}], 'rice_cooker.performance_tests': [{'column': 'rice_quality_score', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['9.0', '8.0', '9.5', '7.5', '7.0']}, {'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}], 'rice_cooker.usage_records': [{'column': 'energy_consumption'}]}}\nA mathematical logic question is as follows:\nCalculate the cost-performance index for each brand of electric rice cooker: (rice quality score × warranty period) / (price × average energy consumption), and sort the results by quarter.\nyour response just have a SQL without anything.\n",
        "solution": "SET SESSION cte_max_recursion_depth = 1000000; WITH RECURSIVE heating_sim AS (SELECT -273.0 AS current_temp, CAST(0.0 AS DECIMAL(30,6)) AS elapsed_time UNION ALL SELECT LEAST(current_temp + CASE WHEN current_temp < -173 THEN 10 WHEN current_temp < 0 THEN 1 ELSE 0.1 END, 100), elapsed_time + (10*4186*(CASE WHEN current_temp < -173 THEN 10 WHEN current_temp < 0 THEN 1 ELSE 0.1 END)) / GREATEST(2700 - 0.5*POWER((current_temp + 273),4), 1) FROM heating_sim WHERE current_temp < 100 ) SELECT MAX(elapsed_time) AS total_seconds, MAX(elapsed_time)/3600 AS total_hours FROM heating_sim;",
        "db_id": "rice_cooker"
    },
    {
        "id": 202,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['temperature_setting', 'actual_max_temperature', '±5°C safety threshold'], 'relations': ['temperature_deviation (actual_max_temperature - temperature_setting)', 'regulatory_compliance_check (deviation > 5°C)'], 'intent': 'identify_noncompliant_high_temperature_usage_records', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [5], 'units': {'temperature': '°C (Celsius)', 'deviation': '°C (implied by ±5°C threshold)'}, 'foreign_keys': [{'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.usage_records': [{'column': 'temperature_setting'}, {'column': 'actual_max_temperature'}]}}\nA common sense reasoning question is as follows:\nIdentify high-temperature usage records violating safety regulations (industry standards require the actual temperature not to exceed the set temperature by ±5°C).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ur.id AS usage_id, ur.rice_cooker_id, ur.temperature_setting, ur.actual_max_temperature, ABS(ur.actual_max_temperature - ur.temperature_setting) AS temperature_deviation, CASE WHEN EXISTS (SELECT 1 FROM maintenance_records mr WHERE mr.rice_cooker_id = ur.rice_cooker_id AND mr.replaced_parts LIKE '%Heating%') THEN '加热元件已更换' ELSE '加热元件未更换' END AS heating_element_status FROM usage_records ur WHERE ABS(ur.actual_max_temperature - ur.temperature_setting) > 5",
        "db_id": "rice_cooker"
    },
    {
        "id": 203,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['electric rice cooker', 'Mount Everest summit', 'atmospheric pressure ≈ 33 kPa', 'boiling point reduction', 'Clausius-Clapeyron equation'], 'relations': ['pressure_to_boiling_point (33 kPa → reduced boiling point)', 'boiling_point_to_cooking_time (lower boiling point → extended cooking time)', 'equation_application (Clausius-Clapeyron used to calculate T2)'], 'intent': 'calculate_proportion_of_extended_cooking_time', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [33, 101.3, 100], 'units': {'pressure': 'kPa (kilopascals)', 'temperature': '°C (Celsius) converted to Kelvin (K)', 'latent_heat': 'J/kg (implied by Clausius-Clapeyron equation)', 'gas_constant': 'J/(mol·K) (implied by Clausius-Clapeyron equation)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}], 'rice_cooker.performance_tests': [{'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}, {'column': 'initial_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '20.0', '22.0', '24.0', '26.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the use of an electric rice cooker at the summit of Mount Everest (atmospheric pressure ≈ 33 kPa), calculate the proportion of extended cooking time caused by the boiling point reduction (Clausius-Clapeyron equation: ln(P1/P2) = L/R(1/T2 - 1/T1)).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pt.rice_cooker_id, pt.time_to_boil AS sea_level_time, pt.time_to_boil * (373 / 344) AS mount_everest_time, (pt.time_to_boil * (373 / 344)) / pt.time_to_boil - 1 AS time_increase_ratio, pt.energy_consumption * (373 / 344 - 1) AS energy_loss FROM performance_tests pt",
        "db_id": "rice_cooker"
    },
    {
        "id": 204,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['inner pot material', 'thermal conduction efficiency', 'heat loss rate', \"Fourier's Law\"], 'relations': ['material_to_thermal_conductivity (material → thermal conductivity coefficient)', 'temperature_gradient (ΔT = final_temperature - initial_temperature)', 'heat_loss_rate (Q = -k * A * ΔT / d)'], 'intent': 'analyze_material_impact_on_thermal_efficiency', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['thermal_conductivity_coefficients', 'temperature_difference', 'time_to_boil', 'energy_consumption'], 'units': {'temperature': '°C (Celsius)', 'thermal_conductivity': 'W/(m·K) (watts per meter-kelvin)', 'heat_loss_rate': 'W (watts)', 'time': 'minutes/seconds', 'energy': 'kWh (kilowatt-hours)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'material', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Non-stick', 'Ceramic', 'Stainless Steel', 'Aluminum', 'Exotic Matter']}], 'rice_cooker.performance_tests': [{'column': 'initial_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '20.0', '22.0', '24.0', '26.0']}, {'column': 'final_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['100.0', '95.0', '88.0', '85.0', '87.0']}, {'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}, {'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}]}}\nA physical knowledge question is as follows:\nCalculate the impact of the inner pot material of an electric rice cooker on thermal conduction efficiency and derive the heat loss rate for different materials (using Fourier's Law).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rci.id AS rice_cooker_id, rci.model, rci.material, rci.power_rating, ur.temperature_setting, ur.actual_max_temperature, CASE rci.material WHEN 'Non-stick' THEN 50 WHEN 'Ceramic' THEN 1.5 WHEN 'Stainless Steel' THEN 16 END AS k, (CASE rci.material WHEN 'Non-stick' THEN 50 WHEN 'Ceramic' THEN 1.5 WHEN 'Stainless Steel' THEN 16 END * 0.1 * (ur.temperature_setting - ur.actual_max_temperature)) / 0.002 AS ΔQ, ((CASE rci.material WHEN 'Non-stick' THEN 50 WHEN 'Ceramic' THEN 1.5 WHEN 'Stainless Steel' THEN 16 END * 0.1 * (ur.temperature_setting - ur.actual_max_temperature)) / 0.002) / rci.power_rating * 100 AS heat_loss_rate_percent FROM usage_records ur JOIN rice_cooker_info rci ON ur.rice_cooker_id = rci.id",
        "db_id": "rice_cooker"
    },
    {
        "id": 205,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"rice_cooker_info.model\", \"warranty_period\", \"rice_quality_score\", \"maintenance_cost\", \"usage_count\"],\n  \"relations\": [\n    \"model_to_warranty (rice_cooker_info.model → rice_cooker_info.warranty_period)\",\n    \"model_to_quality (rice_cooker_info.model → performance_tests.rice_quality_score)\",\n    \"model_to_maintenance (rice_cooker_info.model → maintenance_records.maintenance_cost)\",\n    \"model_to_usage (rice_cooker_info.model → usage_records.usage_count)\"\n  ],\n  \"intent\": \"calculate_maintenance_cost_benefit_ratio\",\n  \"reasoning_type\": \"mathematical logic reasoning\",\n  \"numerical_values\": [],\n  \"units\": {\n    \"warranty\": \"years (from rice_cooker_info.warranty_period)\",\n    \"rice_quality_score\": \"unitless (performance_tests.rice_quality_score)\",\n    \"maintenance_cost\": \"currency units (maintenance_records.maintenance_cost)\",\n    \"usage_count\": \"count (number of usage_records per model)\"\n  },\n  \"required_tables\": [\"rice_cooker_info\", \"performance_tests\", \"maintenance_records\", \"usage_records\"],\n  \"required_fields\": [\n    \"rice_cooker_info.model\",\n    \"rice_cooker_info.warranty_period\",\n    \"rice_cooker_info.production_date\",  // For sorting by year\n    \"performance_tests.rice_quality_score\",\n    \"maintenance_records.maintenance_cost\",\n    \"usage_records.id\"  // For counting usage frequency\n  ]\n}\nA mathematical logic question is as follows:\nCalculate the maintenance cost-benefit ratio for each model of rice cooker: (Warranty period × Rice quality score) / (Maintenance cost × Usage count), and sort by year.\nyour response just have a SQL without anything.\n",
        "solution": "WITH MaintenanceAnalysis AS ( SELECT rci.model, YEAR(mr.maintenance_date) AS year, rci.warranty_period, AVG(pt.rice_quality_score) AS avg_quality_score, SUM(mr.maintenance_cost) AS total_maintenance_cost, COUNT(ur.id) AS usage_count FROM maintenance_records mr JOIN rice_cooker_info rci ON mr.rice_cooker_id = rci.id LEFT JOIN usage_records ur ON rci.id = ur.rice_cooker_id LEFT JOIN performance_tests pt ON rci.id = pt.rice_cooker_id GROUP BY rci.model, YEAR(mr.maintenance_date), rci.warranty_period ) SELECT model, year, (warranty_period * avg_quality_score) / (total_maintenance_cost * usage_count) AS cost_benefit_ratio, RANK() OVER(PARTITION BY year ORDER BY (warranty_period * avg_quality_score) / (total_maintenance_cost * usage_count) DESC) AS annual_rank FROM MaintenanceAnalysis;",
        "db_id": "rice_cooker"
    },
    {
        "id": 206,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['energy consumption regulation', 'high-energy-consumption records', 'rice_cooker_usage_records'], 'relations': ['record_to_energy_ratio (energy_consumption / rice_quantity)', 'regulation_threshold (≤ 0.8 kWh/kg)'], 'intent': 'identify_violating_usage_records', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.8], 'units': {'energy_consumption': 'kWh', 'rice_quantity': 'kg (kilograms)', 'regulation_unit': 'kWh/kg (kilowatt-hour per kilogram)'}, 'foreign_keys': [{'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}, {'column': 'energy_consumption'}, {'column': 'rice_quantity'}]}}\nA common sense reasoning question is as follows:\nIdentify high-energy-consumption records that violate usage regulations (industry standard requires energy consumption per kilogram-meter ≤ 0.8 kWh).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ur.id AS usage_id, ur.rice_cooker_id, ur.energy_consumption, ur.rice_quantity, ur.energy_consumption / ur.rice_quantity AS energy_per_kg, pt.rice_quality_score, CASE WHEN pt.rice_quality_score < (SELECT AVG(rice_quality_score) FROM performance_tests) THEN '米饭质量低于平均水平' ELSE '米饭质量正常' END AS rice_quality_status FROM usage_records ur LEFT JOIN performance_tests pt ON ur.rice_cooker_id = pt.rice_cooker_id WHERE ur.energy_consumption / ur.rice_quantity > 0.8",
        "db_id": "rice_cooker"
    },
    {
        "id": 207,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model', 'microgravity environment', 'Maxwell-Boltzmann distribution (v=√(8kT/πm))', 'water molecule mass', 'temperature (T)'], 'relations': ['model_to_specs (rice cooker model → technical specifications)', 'microgravity_to_boiling_effect (microgravity → boiling inefficiency)', 'temperature_to_molecular_velocity (T → v via Maxwell-Boltzmann)'], 'intent': 'calculate_water_molecular_velocity_impact_on_boiling_in_microgravity', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [8, 'k (Boltzmann constant)', 'π', 'm (water molecule mass)', 'T (temperature in Kelvin)'], 'units': {'temperature': 'K (Kelvin, converted from database °C if applicable)', 'velocity': 'm/s (derived from formula)', 'mass': 'kg (water molecule mass ≈ 2.99×10^-26 kg)', 'conversion': '°C → K (by +273.15), molecular velocity calculation'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}], 'rice_cooker.performance_tests': [{'column': 'initial_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '20.0', '22.0', '24.0', '26.0']}, {'column': 'final_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['100.0', '95.0', '88.0', '85.0', '87.0']}, {'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the use of a rice cooker on a space station (microgravity environment), calculate the impact of water molecule motion on the boiling process (Maxwell-Boltzmann distribution v=√(8kT/πm)).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pt.rice_cooker_id, pt.time_to_boil AS earth_time, SQRT((8 * 1.38e-23 * 373) / (PI() * 2.99e-26)) AS v_earth, SQRT((8 * 1.38e-23 * 373) / (PI() * 2.99e-26 * 0.01)) AS v_space, pt.time_to_boil * (SQRT((8 * 1.38e-23 * 373) / (PI() * 2.99e-26)) / SQRT((8 * 1.38e-23 * 373) / (PI() * 2.99e-26 * 0.01))) AS space_time, (SQRT((8 * 1.38e-23 * 373) / (PI() * 2.99e-26)) / SQRT((8 * 1.38e-23 * 373) / (PI() * 2.99e-26 * 0.01)) - 1) * 100 AS time_increase_percent, pt.energy_consumption * (SQRT((8 * 1.38e-23 * 373) / (PI() * 2.99e-26)) / SQRT((8 * 1.38e-23 * 373) / (PI() * 2.99e-26 * 0.01)) - 1) AS energy_loss FROM performance_tests pt",
        "db_id": "rice_cooker"
    },
    {
        "id": 208,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"electric rice cookers\", \"altitudes\", \"boiling point changes\", \"Clausius-Clapeyron equation\"],\n  \"relations\": [\n    \"altitude_to_boiling_point (via Clausius-Clapeyron equation)\",\n    \"boiling_point_to_energy_consumption (thermodynamic relationship)\",\n    \"rice_cooker_power_rating_to_energy_usage (direct specification)\"\n  ],\n  \"intent\": \"calculate_energy_impact_of_boiling_point_changes\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [2257, 8.314, 373.15],  // latent heat of vaporization (kJ/kg), gas constant (J/mol·K), standard boiling point (K)\n  \"units\": {\n    \"pressure\": \"kPa (for Clausius-Clapeyron)\",\n    \"temperature\": \"K (Kelvin)\",\n    \"energy\": \"kWh (for rice cooker consumption)\",\n    \"altitude\": \"meters (external parameter)\"\n  },\n  \"required_tables\": [\"rice_cooker_info\", \"performance_tests\", \"usage_records\"],\n  \"required_fields\": [\n    \"rice_cooker_info.power_rating\", \n    \"rice_cooker_info.voltage_rating\",\n    \"rice_cooker_info.id\",\n    \"performance_tests.energy_consumption\",\n    \"performance_tests.final_temperature\",\n    \"usage_records.actual_max_temperature\",\n    \"usage_records.energy_consumption\"\n  ]\n}\nA physical knowledge question is as follows:\nCalculate the impact of changes in boiling point at different altitudes on energy consumption for electric rice cookers (using the Clausius-Clapeyron equation).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pt.rice_cooker_id, pt.time_to_boil AS sea_level_time, pt.energy_consumption AS sea_level_energy, pt.energy_consumption * (373 / 363 - 1) AS energy_increase, (373 / 363 - 1) * 100 AS efficiency_loss_percent FROM performance_tests pt",
        "db_id": "rice_cooker"
    },
    {
        "id": 209,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice_cooker_brands', 'failure_rate', 'maintenance_cost', 'quarterly_trend'], 'relations': ['brand_to_maintenance_costs (rice_cooker_brands → maintenance_cost)', 'failure_rate_to_maintenance_cost (statistical_correlation)', 'time_to_quarterly_analysis (failure_rate/maintenance_cost → time)'], 'intent': 'calculate_correlation_coefficient, analyze_trend_quarterly', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'maintenance_cost': 'currency (extracted from maintenance_records.maintenance_cost)', 'failure_rate': 'count_per_time_unit (derived from maintenance_records frequency)', 'time': 'quarterly_intervals (Q1-Q4 based on calendar quarters)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'brand', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['BrandA', 'BrandB', 'BrandC', 'HighPowerBrand', 'UltraCook']}], 'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}, {'column': 'maintenance_cost'}, {'column': 'maintenance_date'}]}}\nA mathematical logic question is as follows:\nCalculate the correlation coefficient between the failure rate and maintenance cost of rice cooker brands, and analyze the trend quarterly.\nyour response just have a SQL without anything.\n",
        "solution": "WITH MaintenanceAnalysis AS (SELECT rci.brand, QUARTER(mr.maintenance_date) AS quarter, COUNT(CASE WHEN mr.maintenance_type = 'Repair' THEN 1 END) / COUNT(*) AS failure_rate, SUM(mr.maintenance_cost) / COUNT(*) AS avg_maintenance_cost FROM maintenance_records mr JOIN rice_cooker_info rci ON mr.rice_cooker_id = rci.id GROUP BY rci.brand, QUARTER(mr.maintenance_date)), CorrelationCalculation AS (SELECT brand, quarter, failure_rate, avg_maintenance_cost, AVG(failure_rate) OVER(PARTITION BY brand) AS mean_failure_rate, AVG(avg_maintenance_cost) OVER(PARTITION BY brand) AS mean_avg_maintenance_cost, (failure_rate - AVG(failure_rate) OVER(PARTITION BY brand)) * (avg_maintenance_cost - AVG(avg_maintenance_cost) OVER(PARTITION BY brand)) AS covariance_term, POW(failure_rate - AVG(failure_rate) OVER(PARTITION BY brand), 2) AS variance_failure_rate, POW(avg_maintenance_cost - AVG(avg_maintenance_cost) OVER(PARTITION BY brand), 2) AS variance_avg_maintenance_cost FROM MaintenanceAnalysis) SELECT brand, quarter, failure_rate, avg_maintenance_cost, SUM(covariance_term) OVER(PARTITION BY brand) / (SQRT(SUM(variance_failure_rate) OVER(PARTITION BY brand)) * SQRT(SUM(variance_avg_maintenance_cost) OVER(PARTITION BY brand))) AS correlation_coefficient FROM CorrelationCalculation GROUP BY brand, quarter, failure_rate, avg_maintenance_cost;",
        "db_id": "rice_cooker"
    },
    {
        "id": 210,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water_quantity', 'rice_quantity', 'water-to-rice ratio', 'industry standard (1.2-1.8)'], 'relations': ['usage_record_to_ratio (rice_quantity/water_quantity)', 'ratio_to_standard (comparison between calculated ratio and 1.2-1.8)'], 'intent': 'identify_noncompliant_usage_records', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1.2, 1.8], 'units': {'ratio_unit': 'unitless (ratio)', 'standard_range': '1.2-1.8 (implied by question)'}, 'foreign_keys': [{'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.usage_records': [{'column': 'rice_quantity'}, {'column': 'water_quantity'}, {'column': 'rice_cooker_id'}]}}\nA common sense reasoning question is as follows:\nIdentify records violating the water-to-rice ratio usage standard (industry standard requires the ratio to be between 1.2-1.8)\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ur.id AS usage_id, ur.rice_cooker_id, ur.water_quantity, ur.rice_quantity, ur.water_quantity / ur.rice_quantity AS water_rice_ratio, pt.rice_quality_score, CASE WHEN pt.rice_quality_score < (SELECT AVG(rice_quality_score) FROM performance_tests) THEN '米饭质量低于平均水平' ELSE '米饭质量正常' END AS rice_quality_status FROM usage_records ur LEFT JOIN performance_tests pt ON ur.rice_cooker_id = pt.rice_cooker_id WHERE ur.water_quantity / ur.rice_quantity NOT BETWEEN 1.2 AND 1.8",
        "db_id": "rice_cooker"
    },
    {
        "id": 211,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['electric rice cooker', 'absolute zero environment (0K)', 'quantum tunneling effect', 'probability formula P=exp(-2d√(2mE)/ħ)'], 'relations': ['rice_cooker_to_info (electric rice cooker → rice_cooker_info)', 'environment_to_effect (0K → quantum tunneling effect)'], 'intent': 'calculate_energy_loss_rate_via_quantum_tunneling', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [0], 'units': {'temperature': 'K (Kelvin)', 'probability': 'dimensionless (P)', 'distance': 'meters (d)', 'mass': 'kilograms (m)', 'energy': 'joules (E)', 'reduced_planck_constant': 'J·s (ħ)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}, {'column': 'material', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Non-stick', 'Ceramic', 'Stainless Steel', 'Aluminum', 'Exotic Matter']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the use of an electric rice cooker in an absolute zero environment (0K), calculate the energy loss rate due to the quantum tunneling effect (probability formula P=exp(-2d√(2mE)/ћ)).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pt.rice_cooker_id, pt.energy_consumption, EXP(-2 * 1e-9 * SQRT(2 * 9.11e-31 * 5 * 1.6e-19) / 1.0545718e-34) AS tunneling_probability, pt.energy_consumption * EXP(-2 * 1e-9 * SQRT(2 * 9.11e-31 * 5 * 1.6e-19) / 1.0545718e-34) * 1e3 AS energy_loss FROM performance_tests pt",
        "db_id": "rice_cooker"
    },
    {
        "id": 212,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker', 'altitude', 'boiling point', 'energy consumption', 'Clausius-Clapeyron equation'], 'relations': ['altitude_to_boiling_point (via Clausius-Clapeyron equation)', 'boiling_point_to_energy_consumption', 'rice_cooker_model_to_thermal_specifications'], 'intent': 'calculate_energy_consumption_variation_due_to_altitude_impact_on_boiling_point', 'reasoning_type': 'physical knowledge reasoning (thermodynamics)', 'numerical_values': ['standard atmospheric pressure (101325 Pa)', 'latent heat of vaporization of water (2260 kJ/kg)', 'gas constant for water vapor (461.5 J/kg·K)', 'altitude_values (requires numerical input)', 'base_boiling_temperature (100°C)'], 'units': {'pressure': 'Pa (Pascals)', 'temperature': 'K (Kelvin)', 'altitude': 'm (meters)', 'energy': 'kWh (kilowatt-hours)', 'conversion': 'ΔT = f(altitude) via Clausius-Clapeyron derivation'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.performance_tests': [{'column': 'initial_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '20.0', '22.0', '24.0', '26.0']}, {'column': 'final_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['100.0', '95.0', '88.0', '85.0', '87.0']}, {'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}, {'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}], 'rice_cooker.rice_cooker_info': [{'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}, {'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}]}}\nA physical knowledge question is as follows:\nCalculate the impact of changes in boiling point of rice cookers at different altitudes on energy consumption (requires using the Clausius-Clapeyron equation).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pt.rice_cooker_id, pt.time_to_boil AS sea_level_time, pt.energy_consumption AS sea_level_energy, pt.energy_consumption * (373 / 363 - 1) AS energy_increase, (373 / 363 - 1) * 100 AS efficiency_loss_percent FROM performance_tests pt",
        "db_id": "rice_cooker"
    },
    {
        "id": 213,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker brands', 'failure rates', 'maintenance costs', 'quarterly trend'], 'relations': ['brand_to_failure_rate (brand → failure rate)', 'brand_to_maintenance_cost (brand → maintenance cost)', 'failure_rate_to_maintenance_cost (correlation relationship)'], 'intent': 'calculate_statistical_correlation_and_trend_analysis', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'failure_rate': 'failures per unit time (implied by maintenance frequency)', 'maintenance_cost': 'currency (based on maintenance_records.maintenance_cost)', 'time': 'quarterly intervals (derived from maintenance_records.maintenance_date)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}, {'column': 'brand', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['BrandA', 'BrandB', 'BrandC', 'HighPowerBrand', 'UltraCook']}], 'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}, {'column': 'maintenance_date'}, {'column': 'maintenance_cost'}]}}\nA mathematical logic question is as follows:\nCalculate the correlation coefficient between failure rates and maintenance costs for rice cooker brands, and analyze the trend quarterly.\nyour response just have a SQL without anything.\n",
        "solution": "WITH MaintenanceAnalysis AS (SELECT rci.brand, QUARTER(mr.maintenance_date) AS quarter, COUNT(CASE WHEN mr.maintenance_type = 'Repair' THEN 1 END) / COUNT(*) AS failure_rate, SUM(mr.maintenance_cost) / COUNT(*) AS avg_maintenance_cost FROM maintenance_records mr JOIN rice_cooker_info rci ON mr.rice_cooker_id = rci.id GROUP BY rci.brand, QUARTER(mr.maintenance_date)), CorrelationCalculation AS (SELECT brand, quarter, failure_rate, avg_maintenance_cost, AVG(failure_rate) OVER(PARTITION BY brand) AS mean_failure_rate, AVG(avg_maintenance_cost) OVER(PARTITION BY brand) AS mean_avg_maintenance_cost, (failure_rate - AVG(failure_rate) OVER(PARTITION BY brand)) * (avg_maintenance_cost - AVG(avg_maintenance_cost) OVER(PARTITION BY brand)) AS covariance_term, POW(failure_rate - AVG(failure_rate) OVER(PARTITION BY brand), 2) AS variance_failure_rate, POW(avg_maintenance_cost - AVG(avg_maintenance_cost) OVER(PARTITION BY brand), 2) AS variance_avg_maintenance_cost FROM MaintenanceAnalysis) SELECT brand, quarter, failure_rate, avg_maintenance_cost, SUM(covariance_term) OVER(PARTITION BY brand) / (SQRT(SUM(variance_failure_rate) OVER(PARTITION BY brand)) * SQRT(SUM(variance_avg_maintenance_cost) OVER(PARTITION BY brand))) AS correlation_coefficient FROM CorrelationCalculation GROUP BY brand, quarter, failure_rate, avg_maintenance_cost;",
        "db_id": "rice_cooker"
    },
    {
        "id": 214,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice-to-water ratio', 'industry standards (1.2-1.8)'], 'relations': ['ratio_to_standard (violates if <1.2 or >1.8)'], 'intent': 'identify_invalid_rice_to_water_ratios', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1.2, 1.8], 'units': {'ratio': 'unitless (rice_quantity/water_quantity)', 'standards': '1.2 (minimum), 1.8 (maximum)'}, 'foreign_keys': [{'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.usage_records': [{'column': 'rice_quantity'}, {'column': 'water_quantity'}, {'column': 'rice_cooker_id'}]}}\nA common sense reasoning question is as follows:\nIdentify records of rice-to-water ratio that violate usage standards (industry standards require the rice-to-water ratio to be between 1.2 and 1.8).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ur.id AS usage_id, ur.rice_cooker_id, ur.water_quantity, ur.rice_quantity, ur.water_quantity / ur.rice_quantity AS water_rice_ratio, pt.rice_quality_score, CASE WHEN pt.rice_quality_score < (SELECT AVG(rice_quality_score) FROM performance_tests) THEN '米饭质量低于平均水平' ELSE '米饭质量正常' END AS rice_quality_status FROM usage_records ur LEFT JOIN performance_tests pt ON ur.rice_cooker_id = pt.rice_cooker_id WHERE ur.water_quantity / ur.rice_quantity NOT BETWEEN 1.2 AND 1.8",
        "db_id": "rice_cooker"
    },
    {
        "id": 215,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['electric rice cooker', 'absolute zero temperature environment (0K)', 'quantum tunneling effect', 'energy loss rate'], 'relations': ['rice_cooker_to_environment (operational_conditions)', 'tunneling_effect_to_energy_loss (causal_relationship)', 'probability_formula_to_parameters (P=exp(-2d√(2mE)/ħ))'], 'intent': 'calculate_energy_loss_rate_quantum_mechanics', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [0], 'units': {'temperature': 'K (Kelvin)', 'distance': 'm (meters)', 'mass': 'kg (kilograms)', 'energy': 'J (Joules)', 'planck_constant': 'J·s (Joule-seconds)', 'conversion': 'ħ = Planck constant/(2π), 1K = energy equivalent via Boltzmann constant'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'material', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Non-stick', 'Ceramic', 'Stainless Steel', 'Aluminum', 'Exotic Matter']}, {'column': 'weight', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.8', '4.0', '4.2', '3.9']}, {'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}], 'rice_cooker.performance_tests': [{'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the use of an electric rice cooker in an absolute zero temperature environment (0K), calculate the energy loss rate caused by the quantum tunneling effect (probability formula P=exp(-2d√(2mE)/ħ)).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pt.rice_cooker_id, pt.energy_consumption, EXP(-2 * 1e-9 * SQRT(2 * 9.11e-31 * 5 * 1.6e-19) / 1.0545718e-34) AS tunneling_probability, pt.energy_consumption * EXP(-2 * 1e-9 * SQRT(2 * 9.11e-31 * 5 * 1.6e-19) / 1.0545718e-34) * 1e3 AS energy_loss FROM performance_tests pt",
        "db_id": "rice_cooker"
    },
    {
        "id": 216,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker inner pot material', 'thermal expansion stress', 'safe operating temperature range', 'thermal stress formula'], 'relations': ['material_to_thermal_coefficient (material → α)', 'temperature_change_to_stress (ΔT → σ)', 'material_to_safe_temperature_range (material → T_safe)'], 'intent': 'calculate_thermal_expansion_stress_and_safe_temperature_range', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [\"Young's modulus (E)\", 'thermal expansion coefficient (α)', 'temperature difference (ΔT)', 'material yield strength (σ_yield)'], 'units': {'thermal_expansion_coefficient': '1/°C', 'stress': 'Pa (Pascal)', 'temperature': '°C (Celsius)', 'youngs_modulus': 'Pa (Pascal)', 'conversion': 'σ = E * α * ΔT'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'material', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Non-stick', 'Ceramic', 'Stainless Steel', 'Aluminum', 'Exotic Matter']}], 'rice_cooker.usage_records': [{'column': 'actual_max_temperature'}], 'rice_cooker.performance_tests': [{'column': 'initial_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '20.0', '22.0', '24.0', '26.0']}, {'column': 'final_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['100.0', '95.0', '88.0', '85.0', '87.0']}]}}\nA physical knowledge question is as follows:\nCalculate the thermal expansion stress of the rice cooker inner pot material and derive the safe operating temperature range for different materials (requires the use of thermal stress formulas).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rci.id AS rice_cooker_id, rci.model, rci.material, pt.final_temperature, CASE rci.material WHEN 'Stainless Steel' THEN 17.3e-6 * 200e9 * (pt.final_temperature - 25) WHEN 'Ceramic' THEN 4.5e-6 * 350e9 * (pt.final_temperature - 25) WHEN 'Non-stick' THEN 23e-6 * 0.5e9 * (pt.final_temperature - 25) END AS thermal_stress, CASE rci.material WHEN 'Stainless Steel' THEN 520e6 WHEN 'Ceramic' THEN 40e6 WHEN 'Non-stick' THEN 25e6 END AS tensile_strength, CASE WHEN CASE rci.material WHEN 'Stainless Steel' THEN 17.3e-6 * 200e9 * (pt.final_temperature - 25) WHEN 'Ceramic' THEN 4.5e-6 * 350e9 * (pt.final_temperature - 25) WHEN 'Non-stick' THEN 23e-6 * 0.5e9 * (pt.final_temperature - 25) END < CASE rci.material WHEN 'Stainless Steel' THEN 520e6 WHEN 'Ceramic' THEN 40e6 WHEN 'Non-stick' THEN 25e6 END THEN '安全' ELSE '不安全' END AS safety_status FROM performance_tests pt JOIN rice_cooker_info rci ON pt.rice_cooker_id = rci.id",
        "db_id": "rice_cooker"
    },
    {
        "id": 217,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice_cooker brand', 'rice_cooker model', 'initial price', 'maintenance cost', 'number of uses', 'rice_quality_score'], 'relations': ['rice_cooker_to_maintenance (rice_cooker_info.id → maintenance_records.rice_cooker_id)', 'rice_cooker_to_usage (rice_cooker_info.id → usage_records.rice_cooker_id)', 'rice_cooker_to_performance (rice_cooker_info.id → performance_tests.rice_cooker_id)', 'sum_maintenance_cost (aggregation over maintenance_records.maintenance_cost)', 'count_usage (aggregation over usage_records.id)', 'average_quality_score (aggregation over performance_tests.rice_quality_score)', 'formula_components (Numerator = initial_price + SUM(maintenance_cost), Denominator = SQRT(number_of_uses × average_quality_score))'], 'intent': 'calculate_full_life_cycle_cost_for_rice_cookers_and_sort_by_brand', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.5], 'units': {'initial_price': 'currency (USD from rice_cooker_info.price column)', 'maintenance_cost': 'currency (USD from maintenance_records.maintenance_cost column)', 'number_of_uses': 'count (derived from COUNT(usage_records.id))', 'rice_quality_score': 'unitless (from performance_tests.rice_quality_score column)', 'denominator_exponent': '0.5 (square root)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}, {'column': 'brand', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['BrandA', 'BrandB', 'BrandC', 'HighPowerBrand', 'UltraCook']}, {'column': 'price', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['299.99', '399.99', '499.99', '799.99', '699.99']}], 'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}, {'column': 'maintenance_cost'}], 'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}], 'rice_cooker.performance_tests': [{'column': 'rice_cooker_id', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '8', '9']}, {'column': 'rice_quality_score', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['9.0', '8.0', '9.5', '7.5', '7.0']}]}}\nA mathematical logic question is as follows:\nConstructing a full life-cycle cost model for rice cookers: (Initial price + SUM(Maintenance cost)) / (Number of uses × Average rice quality score)^0.5, sorted by brand.\nyour response just have a SQL without anything.\n",
        "solution": "WITH LifecycleCost AS (SELECT rci.brand, rci.price + SUM(mr.maintenance_cost) AS total_cost, COUNT(ur.id) AS usage_count, AVG(pt.rice_quality_score) AS avg_quality_score FROM rice_cooker_info rci LEFT JOIN maintenance_records mr ON rci.id = mr.rice_cooker_id LEFT JOIN usage_records ur ON rci.id = ur.rice_cooker_id LEFT JOIN performance_tests pt ON rci.id = pt.rice_cooker_id GROUP BY rci.brand, rci.price), NormalizedCost AS (SELECT brand, total_cost / POWER(usage_count * avg_quality_score, 0.5) AS lifecycle_cost, (total_cost / POWER(usage_count * avg_quality_score, 0.5) - MIN(total_cost / POWER(usage_count * avg_quality_score, 0.5)) OVER ()) / (MAX(total_cost / POWER(usage_count * avg_quality_score, 0.5)) OVER () - MIN(total_cost / POWER(usage_count * avg_quality_score, 0.5)) OVER ()) AS normalized_cost FROM LifecycleCost) SELECT brand, lifecycle_cost, normalized_cost, DENSE_RANK() OVER (ORDER BY normalized_cost) AS brand_rank FROM NormalizedCost",
        "db_id": "rice_cooker"
    },
    {
        "id": 218,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['cleaning records', 'rice cooker food contact materials', 'GB 4806.10-2016 standard'], 'relations': ['record_to_material (maintenance_records → rice_cooker_info.material)', 'interval_compliance (maintenance_date Δ ≤3 months)', 'chemical_compliance (acidic_agent_usage ¬ALLOWED)'], 'intent': 'identify_non_compliant_cleaning_records', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [3], 'units': {'interval': 'months (regulatory requirement)', 'date': 'YYYY-MM-DD (maintenance_date format)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.maintenance_records': [{'column': 'maintenance_date'}, {'column': 'maintenance_type'}, {'column': 'maintenance_notes'}, {'column': 'next_maintenance_date'}], 'rice_cooker.rice_cooker_info': [{'column': 'material', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Non-stick', 'Ceramic', 'Stainless Steel', 'Aluminum', 'Exotic Matter']}]}}\nA common sense reasoning question is as follows:\nIdentify cleaning records that violate the safety standards for food contact materials (GB 4806.10-2016 requires a cleaning interval ≤3 months and the non-use of acidic cleaning agents).\nyour response just have a SQL without anything.\n",
        "solution": "WITH CleaningAnalysis AS (SELECT mr.rice_cooker_id, mr.maintenance_date, mr.maintenance_notes, rci.material, DATEDIFF(mr.maintenance_date, LAG(mr.maintenance_date) OVER (PARTITION BY mr.rice_cooker_id ORDER BY mr.maintenance_date)) AS cleaning_interval FROM maintenance_records mr JOIN rice_cooker_info rci ON mr.rice_cooker_id = rci.id) SELECT rice_cooker_id, maintenance_date, maintenance_notes, material, cleaning_interval, CASE WHEN cleaning_interval > 90 THEN '清洁间隔超过3个月' WHEN maintenance_notes LIKE '%acid%' AND material IN ('Stainless Steel', 'Ceramic') THEN '使用酸性清洁剂' ELSE '符合规范' END AS violation_status FROM CleaningAnalysis WHERE cleaning_interval > 90 OR (maintenance_notes LIKE '%acid%' AND material IN ('Stainless Steel', 'Ceramic'))",
        "db_id": "rice_cooker"
    },
    {
        "id": 219,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['superconducting state', 'quantum locking effect', 'Ginzburg-Landau equation', 'temperature oscillation amplitude'], 'relations': ['quantum_locking_effect_to_equation (Ginzburg-Landau equation)', 'equation_to_ΔT (ΔT calculation)'], 'intent': 'calculate_temperature_oscillation_amplitude', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [], 'units': {'equation_components': 'ψ₀ (dimensionless), m (kg), ξ₀ (m), kB (J/K), τ (dimensionless)'}, 'foreign_keys': [], 'primary_keys': [], 'tableinfo': 'This sql query does not need table and columns information as it is about mathematical calculations.'}\nA hypothetical reasoning question is as follows:\nAssume heating the inner chamber in the superconducting state (resistance = 0Ω), calculate the temperature oscillation amplitude caused by quantum locking effect (Ginzburg-Landau equation ΔT=ψ₀²/(2mξ₀²kB√τ)).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pt.rice_cooker_id, pt.final_temperature, (1.05e-34) / (2 * 9.1e-31 * POW(1e-8, 2) * 1.38e-23 * 1e-6) AS ΔT, (1.05e-34) / (2 * 9.1e-31 * POW(1e-8, 2) * 1.38e-23 * 1e-6) / pt.final_temperature AS temperature_oscillation_rate, pt.energy_consumption * ((1.05e-34) / (2 * 9.1e-31 * POW(1e-8, 2) * 1.38e-23 * 1e-6) / pt.final_temperature) AS energy_fluctuation FROM performance_tests pt",
        "db_id": "rice_cooker"
    },
    {
        "id": 220,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model', 'rated power (P_rated)', 'rated voltage (V_rated)', 'actual power (P_actual)', 'actual voltage (V_actual)', 'resistance (R)', 'thermal efficiency variation'], 'relations': ['model_to_specs (rice cooker model → rice_cooker_info.power_rating, rice_cooker_info.voltage_rating)', \"Ohm's Law (V = IR, P = V²/R)\", 'power_deviation (ΔP = P_actual - P_rated)', 'efficiency_variation (thermal efficiency ∝ P_actual/P_rated)'], 'intent': 'calculate_power_deviation_and_thermal_efficiency_variation', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['rice_cooker_info.power_rating', 'rice_cooker_info.voltage_rating', 'usage_records.energy_consumption', 'usage_records.duration', 'performance_tests.initial_temperature', 'performance_tests.final_temperature'], 'units': {'power': 'Watts (W)', 'voltage': 'Volts (V)', 'energy': 'kWh (kilowatt-hour)', 'time': 'minutes/hours', 'temperature': '°C (Celsius)', 'resistance': 'Ohms (Ω)', 'efficiency': 'dimensionless ratio (actual/rated)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}, {'column': 'voltage_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['220.0']}], 'rice_cooker.usage_records': [{'column': 'energy_consumption'}, {'column': 'duration'}], 'rice_cooker.performance_tests': [{'column': 'initial_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '20.0', '22.0', '24.0', '26.0']}, {'column': 'final_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['100.0', '95.0', '88.0', '85.0', '87.0']}, {'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}]}}\nA physical knowledge question is as follows:\nCalculate the actual power deviation of the electric rice cooker under different power supply voltages, and deduce the variation in thermal efficiency (requiring correction of the formula using Ohm's Law).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ur.rice_cooker_id, rci.power_rating, rci.voltage_rating, ur.energy_consumption, ur.duration, 230 AS V_supply, rci.power_rating * (POW(230, 2) / POW(rci.voltage_rating, 2)) AS P_actual, (ur.energy_consumption * 1000 / (rci.power_rating * (POW(230, 2) / POW(rci.voltage_rating, 2)) * ur.duration / 60)) * POW(rci.voltage_rating / 230, 2) AS η_corrected FROM usage_records ur JOIN rice_cooker_info rci ON ur.rice_cooker_id = rci.id",
        "db_id": "rice_cooker"
    },
    {
        "id": 221,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice_cooker', 'maintenance_records', 'performance_tests', 'usage_records', 'rice_cooker_info'], 'relations': ['rice_cooker_to_usage_records (number_of_uses)', 'rice_cooker_to_performance_tests (rice_quality_score)', 'rice_cooker_to_maintenance_records (total_maintenance_cost)', 'time_to_year_mapping (for sorting)'], 'intent': 'construct_quality_degradation_index', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['number_of_uses', 'MAX(rice_quality_score)', 'current_rice_quality_score', 'total_maintenance_cost'], 'units': {'number_of_uses': 'count (dimensionless)', 'rice_quality_score': 'score (dimensionless)', 'maintenance_cost': 'currency (e.g., USD)', 'degradation_index': 'LN(count) * (score_diff) / cost (dimensionless/currency)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}, {'column': 'maintenance_date'}, {'column': 'maintenance_cost'}], 'rice_cooker.performance_tests': [{'column': 'rice_cooker_id', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '8', '9']}, {'column': 'test_date', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['2023-09-01', '2023-09-05', '2023-09-10', '2023-08-01', '2023-08-05']}, {'column': 'rice_quality_score', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['9.0', '8.0', '9.5', '7.5', '7.0']}], 'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}, {'column': 'start_time'}], 'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}]}}\nA mathematical logic question is as follows:\nConstruct a quality degradation index for rice cookers: LN(number of uses) × (MAX(rice_quality_score) - current score) / total maintenance cost, sorted by year.\nyour response just have a SQL without anything.\n",
        "solution": "WITH QualityDecay AS (SELECT rci.model, YEAR(pt.test_date) AS year, pt.rice_quality_score, MAX(pt.rice_quality_score) OVER(PARTITION BY rci.model) - pt.rice_quality_score AS quality_decay, SUM(mr.maintenance_cost) OVER(PARTITION BY rci.model ORDER BY pt.test_date) AS cumulative_maintenance_cost, COUNT(ur.id) OVER(PARTITION BY rci.model) AS usage_count FROM performance_tests pt JOIN rice_cooker_info rci ON pt.rice_cooker_id = rci.id LEFT JOIN usage_records ur ON rci.id = ur.rice_cooker_id LEFT JOIN maintenance_records mr ON rci.id = mr.rice_cooker_id) SELECT model, year, rice_quality_score, LN(usage_count) * quality_decay / cumulative_maintenance_cost AS decay_index, DENSE_RANK() OVER(PARTITION BY year ORDER BY LN(usage_count) * quality_decay / cumulative_maintenance_cost DESC) AS annual_rank FROM QualityDecay",
        "db_id": "rice_cooker"
    },
    {
        "id": 222,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['power supply voltage anomaly', '±10% voltage fluctuation range', 'rice cooker rated voltage'], 'relations': ['rice_cooker_to_rated_voltage (rice_cooker_id → voltage_rating)', 'voltage_anomaly_condition (actual_voltage ∉ [rated_voltage*0.9, rated_voltage*1.1])'], 'intent': 'identify_usage_records_with_voltage_anomalies', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10], 'units': {'voltage': 'V (Volts)', 'fluctuation_range': '±10% of rated voltage'}, 'foreign_keys': [{'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'voltage_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['220.0']}], 'rice_cooker.usage_records': [{'column': 'actual_voltage'}]}}\nA common sense reasoning question is as follows:\nIdentify power supply voltage anomaly usage records (national standard requires voltage fluctuation range of ±10% of rated voltage)\nyour response just have a SQL without anything.\n",
        "solution": "CREATE TEMPORARY TABLE temp_voltage_logs (usage_id INT, supply_voltage DECIMAL(5, 2)); INSERT INTO temp_voltage_logs (usage_id, supply_voltage) SELECT ur.id AS usage_id, 200 + RAND() * 40 AS supply_voltage FROM usage_records ur; WITH VoltageLog AS (SELECT ur.rice_cooker_id, ur.id AS usage_id, vl.supply_voltage, rci.voltage_rating, CASE WHEN vl.supply_voltage < 0.9 * rci.voltage_rating OR vl.supply_voltage > 1.1 * rci.voltage_rating THEN '电压异常' ELSE '电压正常' END AS voltage_status, CASE WHEN EXISTS (SELECT 1 FROM maintenance_records mr WHERE mr.rice_cooker_id = ur.rice_cooker_id AND mr.replaced_parts LIKE '%Power%') THEN '电源模块已更换' ELSE '电源模块未更换' END AS power_module_status FROM usage_records ur JOIN rice_cooker_info rci ON ur.rice_cooker_id = rci.id JOIN temp_voltage_logs vl ON ur.id = vl.usage_id) SELECT rice_cooker_id, usage_id, supply_voltage, voltage_rating, voltage_status, power_module_status FROM VoltageLog WHERE voltage_status = '电压异常';",
        "db_id": "rice_cooker"
    },
    {
        "id": 223,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"electric rice cooker\", \"black hole event horizon\", \"gravitational gradient 10¹⁷ m/s²\", \"spacetime curvature\", \"heating uniformity\", \"Einstein field equations R_μν=8πT_μν\"],\n  \"relations\": [\n    \"rice_cooker_to_specs (rice_cooker → power_rating/voltage_rating)\",\n    \"spacetime_curvature_to_gravity (curvature → gravitational_gradient)\",\n    \"heating_uniformity_to_thermal_parameters (uniformity → temperature_differential)\",\n    \"einstein_equations_to_energy_momentum (R_μν=8πT_μν)\"\n  ],\n  \"intent\": \"calculate_spacetime_curvature_impact_on_heating_uniformity\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [10**17],\n  \"units\": {\n    \"gravitational_gradient\": \"m/s² (10¹⁷ m/s²)\",\n    \"spacetime_curvature\": \"Ricci tensor components (R_μν)\",\n    \"energy_momentum\": \"T_μν (stress-energy tensor)\",\n    \"temperature\": \"K (Kelvin) - potential thermal parameter conversion\"\n  },\n  \"required_tables\": [\"rice_cooker_info\", \"performance_tests\", \"usage_records\"],\n  \"required_fields\": [\n    \"rice_cooker_info.power_rating\",\n    \"rice_cooker_info.voltage_rating\",\n    \"performance_tests.initial_temperature\",\n    \"performance_tests.final_temperature\",\n    \"performance_tests.time_to_boil\",\n    \"performance_tests.energy_consumption\",\n    \"performance_tests.water_evaporation_rate\",\n    \"usage_records.actual_max_temperature\",\n    \"usage_records.energy_consumption\"\n  ]\n}\nA hypothetical reasoning question is as follows:\nAssuming the use of an electric rice cooker at the event horizon of a black hole (gravitational gradient ≈10¹⁷ m/s²), calculate the impact of spacetime curvature on heating uniformity (Einstein field equations R_μν=8πT_μν).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pt.rice_cooker_id, pt.rice_quality_score, pt.energy_consumption, EXP(-POWER(0.2, 2) / (8 * POWER(1, 2)) AS curvature_factor, pt.rice_quality_score * (1 - EXP(-POWER(0.2, 2) / (8 * POWER(1, 2)))) AS quality_distortion, pt.energy_consumption / EXP(-POWER(0.2, 2) / (8 * POWER(1, 2))) AS energy_distortion FROM performance_tests pt",
        "db_id": "rice_cooker"
    },
    {
        "id": 224,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['condensation recovery rate η=60%', 'latent heat of vaporization L=2260 kJ/kg', 'water quantity', 'water evaporation rate%', 'energy-saving benefit ΔE', 'actual energy consumption E_actual'], 'relations': ['condensation_water_recovery → energy_saving (ΔE = water_quantity × water_evaporation_rate% × η × L / 3600)', 'ΔE → energy_consumption_comparison (ΔE vs E_actual)'], 'intent': 'calculate_energy_saving_benefit_and_compare_with_actual_consumption', 'reasoning_type': 'physical knowledge reasoning + mathematical logic reasoning', 'numerical_values': [2260, 60, 3600], 'units': {'latent_heat': 'kJ/kg (kilojoules per kilogram)', 'energy_saving': 'kWh (kilowatt-hours, conversion via division by 3600)', 'water_quantity': 'kg (kilograms)', 'evaporation_rate': '% (percentage of water lost to vaporization)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.usage_records': [{'column': 'water_quantity'}, {'column': 'energy_consumption (E_actual)'}], 'rice_cooker.performance_tests': [{'column': 'water_evaporation_rate (%)'}]}}\nA physical knowledge question is as follows:\nBased on the calculation of the condensation water recovery efficiency in electric rice cookers, derive its impact on the total energy consumption. Given the latent heat of vaporization of water L=2260 kJ/kg, assuming a condensation recovery rate η=60%, calculate the energy-saving benefit ΔE=(water_quantity × water_evaporation_rate% × η × L)/3600 according to the law of energy conservation and the latent heat formula Q=mL+mcΔT, and compare it with the actual energy consumption E_actual=energy_consumption.\nyour response just have a SQL without anything.\n",
        "solution": "CREATE TEMPORARY TABLE temp_voltage_logs (usage_id INT, supply_voltage DECIMAL(5, 2)); INSERT INTO temp_voltage_logs (usage_id, supply_voltage) SELECT ur.id AS usage_id, 200 + RAND() * 40 AS supply_voltage FROM usage_records ur; WITH VoltageLog AS (SELECT ur.rice_cooker_id, ur.id AS usage_id, vl.supply_voltage, rci.voltage_rating, CASE WHEN vl.supply_voltage < 0.9 * rci.voltage_rating OR vl.supply_voltage > 1.1 * rci.voltage_rating THEN '电压异常' ELSE '电压正常' END AS voltage_status, CASE WHEN EXISTS (SELECT 1 FROM maintenance_records mr WHERE mr.rice_cooker_id = ur.rice_cooker_id AND mr.replaced_parts LIKE '%Power%') THEN '电源模块已更换' ELSE '电源模块未更换' END AS power_module_status FROM usage_records ur JOIN rice_cooker_info rci ON ur.rice_cooker_id = rci.id JOIN temp_voltage_logs vl ON ur.id = vl.usage_id) SELECT rice_cooker_id, usage_id, supply_voltage, voltage_rating, voltage_status, power_module_status FROM VoltageLog WHERE voltage_status = '电压异常';",
        "db_id": "rice_cooker"
    },
    {
        "id": 225,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice_quality_score', 'energy efficiency ratio', 'maintenance frequency', 'price index', 'brand'], 'relations': ['metric_to_weight (rice_quality_score→40%, energy efficiency→30%, maintenance→20%, price→10%)', 'standardization_formula (rice_quality_score→(x-MIN)/(MAX-MIN), price→1-(x-MIN)/(MAX-MIN))', 'energy_efficiency_calc (AVG(energy_consumption)/AVG(rice_quantity))', 'maintenance_frequency_calc (COUNT(maintenance)/usage_count)'], 'intent': 'construct_weighted_evaluation_model_for_rice_cookers', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [40, 30, 20, 10], 'units': {'rice_quality_score': 'standardized score (0-1)', 'energy_efficiency': 'kWh/kg (energy_consumption/rice_quantity)', 'maintenance_frequency': 'normalized ratio (maintenance_count/usage_count)', 'price_index': 'dimensionless (1-(price-MIN)/(MAX-MIN))'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}, {'column': 'brand', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['BrandA', 'BrandB', 'BrandC', 'HighPowerBrand', 'UltraCook']}, {'column': 'price', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['299.99', '399.99', '499.99', '799.99', '699.99']}, {'column': 'price (for MIN/MAX)'}], 'rice_cooker.performance_tests': [{'column': 'rice_quality_score', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['9.0', '8.0', '9.5', '7.5', '7.0']}, {'column': 'test_date (for MIN/MAX)'}], 'rice_cooker.usage_records': [{'column': 'energy_consumption'}, {'column': 'rice_quantity'}, {'column': 'id (COUNT usage_count)'}], 'rice_cooker.maintenance_records': [{'column': 'id (COUNT)'}]}}\nA mathematical logic question is as follows:\nConstruct a dynamic weighted comprehensive evaluation model to assess the overall performance of rice cookers. The model's weight distribution is as follows: rice quality score accounts for 40%, energy efficiency ratio for 30%, maintenance frequency for 20%, and price index for 10%. Standardization is required for rice quality score, energy efficiency ratio, maintenance frequency, and price index. The calculation formulas are: standardized score = (rice_quality_score - MIN) / (MAX - MIN), energy efficiency ratio = AVG(energy_consumption) / AVG(rice_quantity), maintenance frequency = COUNT(maintenance) / usage_count, price index = 1 - (price - MIN) / (MAX - MIN). Finally, generate a comprehensive score ranking by brand.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pt.rice_cooker_id, pt.rice_quality_score, pt.energy_consumption, EXP(-POWER(0.2, 2) / (8 * POWER(1, 2))) AS curvature_factor, pt.rice_quality_score * (1 - EXP(-POWER(0.2, 2) / (8 * POWER(1, 2)))) AS quality_distortion, pt.energy_consumption / EXP(-POWER(0.2, 2) / (8 * POWER(1, 2))) AS energy_distortion FROM performance_tests pt;",
        "db_id": "rice_cooker"
    },
    {
        "id": 226,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['temperature rise rate', '0.33℃/s threshold', 'GB14536.1-2008 standard', 'temperature sensor replacements'], 'relations': ['usage_records_to_performance_tests (rice_cooker_id → time_to_boil)', 'temperature_rise_rate_to_threshold (calculated_value > 0.33℃/s)', 'abnormal_records_to_maintenance_logs (cross-reference rice_cooker_id)'], 'intent': 'detect_abnormal_temperature_control_violating_safety_standards', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [0.33], 'units': {'temperature': '℃', 'time': 'seconds', 'temperature_rise_rate': '℃/s', 'standard_requirement': '≤3 seconds/℃ response time'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}, {'column': 'temperature_setting'}, {'column': 'actual_max_temperature'}], 'rice_cooker.performance_tests': [{'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}], 'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}, {'column': 'replaced_parts'}]}}\nA common sense reasoning question is as follows:\nAccording to the national standard GB14536.1-2008, the response time of thermistors for temperature control should be ≤3 seconds/℃. By calculating the temperature rise rate = (actual_max_temperature - temperature_setting) / time_to_boil, filter out records with a temperature rise rate exceeding 0.33℃/s, and cross-check with maintenance logs to identify any records of temperature sensor replacements, thus detecting abnormal entries that violate safety standards.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pt.*, (pt.final_temperature - pt.initial_temperature) / (pt.time_to_boil * 60) AS 温升速率, CASE WHEN EXISTS (SELECT 1 FROM maintenance_records mr WHERE mr.rice_cooker_id = pt.rice_cooker_id AND mr.replaced_parts LIKE '%Thermistor%') THEN '已维护' ELSE '未维护' END AS 维护状态 FROM performance_tests pt JOIN usage_records ur ON pt.rice_cooker_id = ur.rice_cooker_id WHERE (pt.final_temperature - pt.initial_temperature) / (pt.time_to_boil * 60) > 0.33 AND ABS(ur.actual_max_temperature - ur.temperature_setting) > 5;",
        "db_id": "rice_cooker"
    },
    {
        "id": 227,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker', 'Planck temperature (1.4×10³² K)', 'black hole mass M', 'Schwarzschild radius R', 'time dilation coefficient Δt/t', 'quantized energy consumption'], 'relations': ['mass_to_weight_time (M = rice_cooker_weight × heating_time)', 'radius_to_mass (R = 2GM/c²)', 'dilation_to_radius (Δt/t = √(1 - 2GM/(Rc²)))', 'temperature_to_mass (Hawking radiation formula)'], 'intent': 'calculate_quantum_gravitational_effects_and_energy_consumption', 'reasoning_type': 'ideal hypothesis reasoning', 'numerical_values': [1.4e+32, 'rice_cooker_weight', 'heating_time'], 'units': {'temperature': 'K (Kelvin)', 'mass': 'kg (kilograms, derived from rice_cooker_info.weight)', 'radius': 'meters (calculated from R=2GM/c²)', 'time_dilation': 'unitless coefficient (Δt/t ratio)', 'conversion': 'c=3×10⁸ m/s, G=6.674×10⁻¹¹ N·m²/kg²'}, 'foreign_keys': [{'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}, {'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'weight', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['3.5', '2.8', '4.0', '4.2', '3.9']}], 'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}, {'column': 'duration (heating_time)'}]}}\nA hypothetical reasoning question is as follows:\nAssuming a rice cooker is heated at the Planck temperature (1.4×10³² K), calculate the spacetime fluctuations caused by quantum gravitational effects. Based on the Hawking radiation formula T=ħc³/(8πGMk_B), with fictional parameters: black hole mass M = weight of the rice cooker × heating time, Schwarzschild radius R = 2GM/c², derive the time dilation coefficient for cooking Δt/t = √(1 - 2GM/(Rc²)), and calculate the quantized energy consumption.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rci.id AS rice_cooker_id, rci.model, rci.weight, ur.duration AS heating_time, (rci.weight * ur.duration * 60) AS black_hole_mass, (2 * 6.67430e-11 * (rci.weight * ur.duration * 60) / POWER(299792458, 2)) AS schwarzschild_radius, SQRT(1 - (2 * 6.67430e-11 * (rci.weight * ur.duration * 60)) / (POWER(299792458, 2) * (2 * 6.67430e-11 * (rci.weight * ur.duration * 60) / POWER(299792458, 2)))) AS time_dilation_factor, (1.0545718e-34 * POWER(299792458, 3)) / (8 * PI() * 6.67430e-11 * (rci.weight * ur.duration * 60) * 1.380649e-23) AS hawking_temperature, (1.0545718e-34 * POWER(299792458, 3)) / (8 * PI() * 6.67430e-11 * (rci.weight * ur.duration * 60) * 1.380649e-23) * ur.energy_consumption AS quantum_energy_consumption FROM rice_cooker_info rci JOIN usage_records ur ON rci.id = ur.rice_cooker_id WHERE ur.temperature_setting >= 1.4e32;",
        "db_id": "rice_cooker"
    },
    {
        "id": 228,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['electric rice cooker inner pots', 'different materials', 'Biot number (Bi)', 'thermal conduction time constant'], 'relations': ['material_property (material → thermal conductivity k)', 'heat_transfer_coefficient (h)', 'characteristic_length (d)', 'Biot_number_formula (Bi = h*d/k)'], 'intent': 'calculate_transient_thermal_response_and_time_constant', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [None], 'units': {'Biot_number': 'dimensionless', 'h': 'W/m²·K (heat transfer coefficient)', 'd': 'm (characteristic length)', 'k': 'W/m·K (thermal conductivity)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'material', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Non-stick', 'Ceramic', 'Stainless Steel', 'Aluminum', 'Exotic Matter']}, {'column': 'id (rice_cooker_id)'}], 'rice_cooker.performance_tests': [{'column': 'initial_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '20.0', '22.0', '24.0', '26.0']}, {'column': 'final_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['100.0', '95.0', '88.0', '85.0', '87.0']}, {'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}, {'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}]}}\nA physical knowledge question is as follows:\nCalculate the transient thermal response of electric rice cooker inner pots with different materials, and derive the thermal conduction time constant (requiring the use of Biot number formula: Bi = hd/k).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rci.material, AVG(ur.actual_max_temperature - ur.temperature_setting) / AVG(ur.duration) AS 平均温升速率, AVG(rci.capacity * rci.weight) / (AVG(rci.power_rating) * 1000) AS 热传导时间常数 FROM rice_cooker_info rci JOIN usage_records ur ON rci.id = ur.rice_cooker_id GROUP BY rci.material;",
        "db_id": "rice_cooker"
    },
    {
        "id": 229,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker', 'maintenance cost', 'rice cooker price', 'usage frequency', 'rice quality score'], 'relations': ['rice_cooker_to_maintenance_cost (rice_cooker_id → maintenance_records.maintenance_cost)', 'rice_cooker_to_price (rice_cooker_id → rice_cooker_info.price)', 'rice_cooker_to_usage_frequency (rice_cooker_id → usage_records.count)', 'rice_cooker_to_rice_quality_score (rice_cooker_id → performance_tests.rice_quality_score)'], 'intent': 'calculate_health_index_and_forecast_trends', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'maintenance_cost': 'currency (e.g., USD)', 'price': 'currency (e.g., USD)', 'usage_frequency': 'count per quarter (from usage_records)', 'rice_quality_score': 'numerical score (unitless, from performance_tests)', 'coefficient_of_variation': 'unitless (standard deviation/mean of rice_quality_score)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}, {'column': 'maintenance_cost'}], 'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}, {'column': 'price', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['299.99', '399.99', '499.99', '799.99', '699.99']}], 'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}, {'column': 'start_time'}], 'rice_cooker.performance_tests': [{'column': 'rice_cooker_id', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '8', '9']}, {'column': 'rice_quality_score', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['9.0', '8.0', '9.5', '7.5', '7.0']}]}}\nA mathematical logic question is as follows:\nConstructing a rice cooker health index: EXP(-maintenance cost/price)×(1+LN(usage frequency))×coefficient of variation for rice quality score and forecasting trends by quarter.\nyour response just have a SQL without anything.\n",
        "solution": "WITH usage_count AS (SELECT rice_cooker_id, COUNT(*) AS usage_times FROM usage_records GROUP BY rice_cooker_id), maintenance_cost_sum AS (SELECT rice_cooker_id, SUM(maintenance_cost) AS total_maintenance_cost FROM maintenance_records GROUP BY rice_cooker_id), rice_quality_variation AS (SELECT rice_cooker_id, STDDEV(rice_quality_score) / AVG(rice_quality_score) AS rice_quality_cv FROM performance_tests GROUP BY rice_cooker_id) SELECT rci.id AS rice_cooker_id, rci.model, EXP(-mcs.total_maintenance_cost / rci.price) * (1 + LN(uc.usage_times)) * rqv.rice_quality_cv AS health_index, QUARTER(ur.start_time) AS quarter, YEAR(ur.start_time) AS year FROM rice_cooker_info rci JOIN usage_count uc ON rci.id = uc.rice_cooker_id JOIN maintenance_cost_sum mcs ON rci.id = mcs.rice_cooker_id JOIN rice_quality_variation rqv ON rci.id = rqv.rice_cooker_id JOIN usage_records ur ON rci.id = ur.rice_cooker_id GROUP BY rci.id, rci.model, mcs.total_maintenance_cost, rci.price, uc.usage_times, rqv.rice_quality_cv, QUARTER(ur.start_time), YEAR(ur.start_time);",
        "db_id": "rice_cooker"
    },
    {
        "id": 230,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice_cooker_id', 'usage_sessions', 'IEC_60335-2-15_standard (15-minute cooling interval)'], 'relations': ['rice_cooker_to_usage_sessions (rice_cooker_id → usage_records)', 'consecutive_session_timing (gap < 15 minutes)', 'standard_violation (gap < required interval)'], 'intent': 'identify_thermal_cycling_violations', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [15], 'units': {'time_interval': 'minutes', 'conversion': '15-minute cooling interval requirement'}, 'foreign_keys': [{'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}, {'column': 'start_time'}, {'column': 'end_time'}, {'column': 'duration'}]}}\nA common sense reasoning question is as follows:\nIdentify usage patterns that violate thermal cycling test standards (IEC 60335-2-15 requires intervals of ≥15 minutes cooling between continuous rice cooking sessions).\nyour response just have a SQL without anything.\n",
        "solution": "WITH usage_sequence AS (SELECT device_id, start_time, end_time, rice_quantity, (julianday(start_time) - julianday(LAG(end_time) OVER(PARTITION BY device_id ORDER BY start_time))) * 1440 AS cooling_interval FROM usage_logs) SELECT us.*, CASE WHEN EXISTS (SELECT 1 FROM maintenance_logs ml WHERE ml.device_id = us.device_id AND ml.maintenance_type = 'Overheat Repair') THEN 1 ELSE 0 END AS has_overheat_repair FROM usage_sequence us WHERE cooling_interval < 15 AND rice_quantity > 0.5 AND start_time > '2023-01-01';",
        "db_id": "rice_cooker"
    },
    {
        "id": 231,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"quark-gluon plasma state\", \"temperature 2×10^15K\", \"water activity\", \"quantum chromodynamics (QCD)\"],\n  \"relations\": [\"temperature_to_phase_state (2×10^15K → quark-gluon plasma)\", \"QCD_effect_on_water_activity (theoretical interaction)\"],\n  \"intent\": \"calculate_quantum_chromodynamics_effect_on_water_activity\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [2e+15],\n  \"units\": {\n    \"temperature\": \"K (Kelvin)\",\n    \"conversion\": \"2×10^15K exceeds standard temperature scales, requires particle physics framework\"\n  },\n  \"required_tables\": [],\n  \"required_fields\": []\n}\n\nNote: The provided rice_cooker database schema contains no relevant tables/fields related to quantum chromodynamics, quark-gluon plasma, or water activity at particle physics scales. The question falls outside the scope of the available database structure.\nA hypothetical reasoning question is as follows:\nAssuming cooking is performed in the quark-gluon plasma state (temperature 2×10^15K), calculate the effect of quantum chromodynamics on water activity.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rci.model, rci.brand, ur.rice_quantity, ur.water_quantity, pt.water_evaporation_rate, pt.rice_quality_score, pt.energy_consumption FROM rice_cooker_info rci JOIN usage_records ur ON rci.id = ur.rice_cooker_id JOIN performance_tests pt ON rci.id = pt.rice_cooker_id WHERE pt.test_type = '煮饭' AND ur.rice_quantity > 0 AND ur.water_quantity > 0;",
        "db_id": "rice_cooker"
    },
    {
        "id": 232,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model', 'heat preservation phase', 'Stefan-Boltzmann law', 'Newton’s law of cooling', 'radiation heat dissipation', 'convection heat dissipation'], 'relations': ['model_to_material (rice cooker model → material properties)', 'temperature_gradient (initial/final temperature → ΔT)', 'combined_heat_transfer (radiation + convection = total heat loss)'], 'intent': 'calculate_combined_heat_loss_rate_during_heat_preservation_phase', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['initial_temperature', 'final_temperature', 'power_rating', 'voltage_rating', 'water_evaporation_rate', 'energy_consumption'], 'units': {'temperature': '°C (converted to Kelvin for Stefan-Boltzmann)', 'power': 'Watts (from power_rating)', 'energy': 'kWh (from energy_consumption)', 'surface_area': 'm² (implied by material and capacity)', 'heat_transfer_coefficient': 'W/(m²·K) (Newton’s law)', 'emissivity': '(Stefan-Boltzmann coefficient, material-dependent)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'material', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Non-stick', 'Ceramic', 'Stainless Steel', 'Aluminum', 'Exotic Matter']}, {'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}], 'rice_cooker.performance_tests': [{'column': 'initial_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '20.0', '22.0', '24.0', '26.0']}, {'column': 'final_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['100.0', '95.0', '88.0', '85.0', '87.0']}, {'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}], 'rice_cooker.usage_records': [{'column': 'actual_max_temperature'}], 'rice_cooker.maintenance_records': [{'column': 'replaced_parts (insulation condition)'}]}}\nA physical knowledge question is as follows:\nCalculate the rate of heat loss during the rice cooker's heat preservation phase, incorporating both radiation and convection heat dissipation (requires the combined formulation of the Stefan-Boltzmann law and Newton’s law of cooling).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rice_cooker_id, test_date, initial_temperature, final_temperature, energy_consumption, time_to_boil FROM performance_tests WHERE test_type = '保温';",
        "db_id": "rice_cooker"
    },
    {
        "id": 233,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker', 'brand', 'rice_quality_score', 'energy_consumption', 'maintenance_cost'], 'relations': ['rice_cooker_to_brand (rice_cooker_id → brand)', 'rice_cooker_to_quality (rice_cooker_id → rice_quality_score)', 'rice_cooker_to_energy (rice_cooker_id → energy_consumption)', 'rice_cooker_to_maintenance (rice_cooker_id → maintenance_cost)'], 'intent': 'calculate_composite_quality_index_with_monthly_trend', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.5, 0.3, -0.2], 'units': {'rice_quality_score': 'dimensionless_score (1-100 scale)', 'energy_consumption': 'kWh (from performance_tests & usage_records)', 'maintenance_cost': 'currency (e.g., USD)', 'coefficient_of_variation': 'unitless (σ/μ)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}, {'column': 'brand', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['BrandA', 'BrandB', 'BrandC', 'HighPowerBrand', 'UltraCook']}], 'rice_cooker.performance_tests': [{'column': 'rice_quality_score', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['9.0', '8.0', '9.5', '7.5', '7.0']}, {'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}, {'column': 'test_date', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['2023-09-01', '2023-09-05', '2023-09-10', '2023-08-01', '2023-08-05']}], 'rice_cooker.maintenance_records': [{'column': 'maintenance_cost'}, {'column': 'maintenance_date'}]}}\nA mathematical logic question is as follows:\nConstruct a dynamic comprehensive quality index: 0.5 × (Rice Score Z-score) + 0.3 × (1 - Energy Efficiency Coefficient of Variation) - 0.2 × Maintenance Cost Ratio and generate a monthly trend chart by brand.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rc.model, ur.energy_consumption, ROUND(1 - EXP(-(POWER(1e9*1.6e-19,2)*POWER(1e-16,3)*1e-23)/(1.38e-23*2e12)),4) AS maturation_degree, ur.energy_consumption * (1/(1 - EXP(-(POWER(1e9*1.6e-19,2)*POWER(1e-16,3)*1e-23)/(1.38e-23*2e12))) - 1) AS energy_distortion, SQRT(1.38e-23*2e12/(1.05e-34*3e8)) * ur.duration*60 AS quantum_fluctuation FROM rice_cooker_info rc JOIN usage_records ur ON rc.id = ur.rice_cooker_id WHERE ur.duration > 0;",
        "db_id": "rice_cooker"
    },
    {
        "id": 234,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice_cooker_info', 'usage_records', 'IEC 60335 standard', 'nominal capacity', '120% threshold'], 'relations': ['rice_cooker_info.rice_cooker_id → usage_records.rice_cooker_id', 'usage_records.rice_quantity > rice_cooker_info.capacity * 1.2', 'IEC 60335 → overcapacity_regulation (120% rule)'], 'intent': 'identify_overcapacity_usage_records', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [120, 1.2], 'units': {'capacity': 'liters or kilograms (as defined in rice_cooker_info.capacity)', 'threshold': '120% of nominal capacity', 'comparison': 'usage_records.rice_quantity > (rice_cooker_info.capacity * 1.2)'}, 'foreign_keys': [{'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}, {'column': 'capacity', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['5.0', '3.5', '6.0', '6.5', '4.0']}], 'rice_cooker.usage_records': [{'column': 'rice_quantity'}, {'column': 'id'}, {'column': 'rice_cooker_id'}]}}\nA common sense reasoning question is as follows:\nIdentify hazardous records of overcapacity usage (according to IEC 60335, the measured quantity must not exceed 120% of the nominal capacity)\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rc.model, pt.final_temperature, ur.duration, (pt.final_temperature - 25) AS_T, ROUND((0.9 * 5.67e-8 * 0.18 * (POWER(pt.final_temperature + 273, 4) - POWER(298, 4)) * ur.duration) + (12 * 0.18 * (pt.final_temperature - 25) * ur.duration), 2) AS total_heat_loss_J, ROUND(((0.9 * 5.67e-8 * 0.18 * (POWER(pt.final_temperature + 273, 4) - POWER(298, 4)) * ur.duration) + (12 * 0.18 * (pt.final_temperature - 25) * ur.duration)) / 3600, 2) AS heat_loss_kWh, ROUND(((0.9 * 5.67e-8 * 0.18 * (POWER(pt.final_temperature + 273, 4) - POWER(298, 4)) * ur.duration) + (12 * 0.18 * (pt.final_temperature - 25) * ur.duration)) / 3600 / (0.1 * rc.power_rating * ur.duration / 60), 2) AS efficiency_ratio FROM rice_cooker_info rc JOIN performance_tests pt ON rc.id = pt.rice_cooker_id JOIN usage_records ur ON rc.id = ur.rice_cooker_id;",
        "db_id": "rice_cooker"
    },
    {
        "id": 235,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"superfluid helium environment (2K)\", \"quantum vortices\", \"vortex density n=10^16/m^5\", \"thermal conductivity k=κn^6/m\"],\n  \"relations\": [\n    \"vortex_density_to_thermal_conductivity (n → k via formula k=κn^6/m)\",\n    \"quantum_vortex_enhancement_effect (dependent on n's magnitude)\"\n  ],\n  \"intent\": \"calculate_quantum_vortex_enhanced_thermal_conductivity\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [10^16, 6],\n  \"units\": {\n    \"temperature\": \"K (Kelvin)\",\n    \"vortex_density\": \"/m^5 (unusual unit - inverse quintic meters)\",\n    \"thermal_conductivity\": \"k=κn^6/m (unit derivation requires κ and m specification)\",\n    \"conversion\": \"power law scaling (n^6)\"\n  },\n  \"required_tables\": [],\n  \"required_fields\": []\n}\nA hypothetical reasoning question is as follows:\nAssuming cooking in a superfluid helium environment (temperature 2K), calculate the enhancement effect of quantum vortices on thermal conduction (vortex density n=10^16/m^5, thermal conductivity k=κn^6/m).\nyour response just have a SQL without anything.\n",
        "solution": "WITH monthly_data AS (SELECT rc.brand AS manufacturer, DATE_FORMAT(pt.test_date, '%Y-%m') AS month, (pt.rice_quality_score - AVG(pt.rice_quality_score) OVER()) / (STDDEV(pt.rice_quality_score) OVER()) AS z_score, 1 - (STDDEV(ur.energy_consumption / ur.rice_quantity) OVER(PARTITION BY rc.brand) / AVG(ur.energy_consumption / ur.rice_quantity) OVER(PARTITION BY rc.brand)) AS efficiency_variation, SUM(mr.maintenance_cost) OVER(PARTITION BY rc.brand) / rc.price AS maintenance_ratio FROM rice_cooker_info rc LEFT JOIN usage_records ur ON rc.id = ur.rice_cooker_id LEFT JOIN maintenance_records mr ON rc.id = mr.rice_cooker_id JOIN performance_tests pt ON rc.id = pt.rice_cooker_id) SELECT manufacturer, month, ROUND(0.5 * z_score + 0.3 * efficiency_variation - 0.2 * maintenance_ratio, 2) AS quality_index, AVG(0.5 * z_score + 0.3 * efficiency_variation - 0.2 * maintenance_ratio) OVER(ORDER BY month ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS trend FROM monthly_data ORDER BY manufacturer, month;",
        "db_id": "rice_cooker"
    },
    {
        "id": 236,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker inner pot material (stainless steel, ceramic)', 'thermal diffusion time τ', 'thermal diffusivity α', 'boiling time from performance tests', 'thermal conductivity k', 'density ρ', 'specific heat c_p', 'inner pot thickness L'], 'relations': ['material_to_properties (stainless steel/ceramic → k, ρ, c_p)', 'thermal_diffusivity (α = k/(ρc_p))', 'thermal_diffusion_time (τ = L²/(4α))', 'deviation_rate (|τ - boiling_time| / boiling_time)'], 'intent': 'calculate_thermal_inertia_impact_and_deviation_rate', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['L (inner pot thickness)', 'boiling_time', 'k', 'ρ', 'c_p'], 'units': {'thermal_conductivity': 'W/(m·K)', 'density': 'kg/m³', 'specific_heat': 'J/(kg·K)', 'thickness': 'm (meters)', 'time': 's (seconds)', 'thermal_diffusivity': 'm²/s', 'conversion': 'α = k/(ρc_p), τ = L²/(4α)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'material', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Non-stick', 'Ceramic', 'Stainless Steel', 'Aluminum', 'Exotic Matter']}, {'column': 'thickness_L'}, {'column': 'thermal_conductivity_k'}, {'column': 'density_rho'}, {'column': 'specific_heat_cp'}], 'rice_cooker.performance_tests': [{'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}]}}\nA physical knowledge question is as follows:\nCalculate the impact of thermal inertia of different inner pot materials on heating time, and derive the thermal diffusion time (using the thermal diffusivity formula α=k/(ρc_p)). Based on the inner pot material of the rice cooker (stainless steel, ceramic, etc.) and the boiling time in performance tests, compute the thermal diffusion time (τ = L²/(4α)), then compare it with the actual boiling time to derive the time deviation rate.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ul.id AS usage_id, di.model, ul.rice_quantity, di.capacity, ul.rice_quantity / di.capacity AS overload_ratio, CASE WHEN EXISTS (SELECT 1 FROM maintenance_records ml WHERE ml.rice_cooker_id = ul.rice_cooker_id AND ml.maintenance_notes LIKE '%内胆变形%') THEN 1 ELSE 0 END AS has_deformation FROM usage_records ul JOIN rice_cooker_info di ON ul.rice_cooker_id = di.id WHERE ul.rice_quantity > 1.2 * di.capacity",
        "db_id": "rice_cooker"
    },
    {
        "id": 237,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker', 'maintenance records', 'brand', 'initial price', 'maintenance cost', 'discount rate (r=5%)', 'time period (n)'], 'relations': ['rice_cooker_to_maintenance (rice_cooker.id → maintenance_records.rice_cooker_id)', 'rice_cooker_to_brand (rice_cooker_info.brand)', 'maintenance_cost_over_time (Σ(maintenance_cost/(1+r)^n))', 'present_value_addition (PV = Σ(...) + initial_price)'], 'intent': 'calculate_and_rank_present_value_of_life_cycle_costs', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.05], 'units': {'discount_rate': '% (annual rate expressed as 5%)', 'currency': 'USD (assumed for maintenance_cost and price)', 'time': 'years (from maintenance_date relative to initial purchase)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}, {'column': 'brand', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['BrandA', 'BrandB', 'BrandC', 'HighPowerBrand', 'UltraCook']}, {'column': 'price (initial_price)'}], 'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}, {'column': 'maintenance_date'}, {'column': 'maintenance_cost'}]}}\nA mathematical logic question is as follows:\nCalculate the present value of total life cycle maintenance costs for devices: PV = Σ(maintenance_cost/(1+r)^n) + initial_price, where r=5% annual discount rate. Iterate through maintenance records, compute the discount factor for each maintenance event, accumulate the present value costs, and finally generate a ranking of total present value costs by brand.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT di.model, pt.time_to_boil, ul.energy_consumption, ROUND(1 * 1e10 * POWER(1.05e-34, 2) / 6.64e-27, 30) AS k_quantum, ROUND(SQRT((1 * 1e10 * POWER(1.05e-34, 2) / 6.64e-27) / 0.6), 2) AS time_compression_ratio, ROUND(ul.energy_consumption / SQRT((1 * 1e10 * POWER(1.05e-34, 2) / 6.64e-27) / 0.6), 2) AS energy_gain, CASE WHEN ul.energy_consumption < (di.power_rating * pt.time_to_boil / 60 / SQRT((1 * 1e10 * POWER(1.05e-34, 2) / 6.64e-27) / 0.6)) THEN '安全' ELSE '超限' END AS quantum_limit FROM rice_cooker_info di JOIN performance_tests pt ON di.id = pt.rice_cooker_id JOIN usage_records ul ON di.id = ul.rice_cooker_id",
        "db_id": "rice_cooker"
    },
    {
        "id": 238,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['radiation intensity >55dBμV/m', 'boiling time <15 minutes', 'power >1000W', 'radiation intensity >45dBμV/m', 'electromagnetic shielding components replacement'], 'relations': ['rice_cooker_id (linking across tables)', 'condition_1_filter (boiling_time <15 AND radiation_intensity >55)', 'condition_2_filter (power_rating >1000 AND radiation_intensity >45)', 'maintenance_record_check (replaced_parts contains shielding components)'], 'intent': 'identify_usage_patterns_violating_radiation_standards', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [15, 55, 1000, 45], 'units': {'radiation_intensity': 'dBμV/m', 'time': 'minutes', 'power': 'W (Watts)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.performance_tests': [{'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}], 'rice_cooker.rice_cooker_info': [{'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}], 'rice_cooker.maintenance_records': [{'column': 'replaced_parts'}], 'rice_cooker.EMC_test_logs': [{'column': 'radiation_intensity (supplemented_field)'}, {'column': 'rice_cooker_id (supplemented_foreign_key)'}]}}\nA common sense reasoning question is as follows:\nIdentify usage patterns that violate electromagnetic radiation safety standards. According to GB 4824-2019, the radiation intensity in the 30MHz-1GHz frequency band should be ≤50dBμV/m. By JOINing performance_tests.time_to_boil with EMC test logs (supplemented fields), filter for the following conditions: ① boiling time <15 minutes and radiation intensity >55dBμV/m; ② power >1000W and radiation intensity >45dBμV/m. Also check maintenance records to determine if electromagnetic shielding components have been replaced.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT di.model, di.material, pt.time_to_boil AS 实际煮沸时间_min, ROUND(CASE di.material WHEN 'Stainless Steel' THEN (0.02*0.02)/(4*(16/(7900*500))) WHEN 'Ceramic' THEN (0.02*0.02)/(4*(1.5/(2500*800))) END, 2) AS 理论扩散时间_s, ROUND((pt.time_to_boil*60 - CASE di.material WHEN 'Stainless Steel' THEN (0.02*0.02)/(4*(16/(7900*500))) WHEN 'Ceramic' THEN (0.02*0.02)/(4*(1.5/(2500*800))) END) / CASE di.material WHEN 'Stainless Steel' THEN (0.02*0.02)/(4*(16/(7900*500))) WHEN 'Ceramic' THEN (0.02*0.02)/(4*(1.5/(2500*800))) END *100, 1) AS 时间偏差率_percent FROM rice_cooker_info di JOIN performance_tests pt ON di.id = pt.rice_cooker_id WHERE di.material IN ('Stainless Steel','Ceramic')",
        "db_id": "rice_cooker"
    },
    {
        "id": 239,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker', 'curvature propulsion drive', 'Alcubierre metric', 'spacetime distortion energy consumption', 'critical cosmic density ρ_c=9.9×10^6kg/m^6', 'curvature bubble radius R=3m', 'wall thickness σ=1m'], 'relations': ['rice_cooker_to_energy_consumption (performance_tests.energy_consumption)', 'fictional_parameters_to_energy_density (R=3m, σ=1m → W=-(c^6/(8πG))σ^5)', 'energy_density_comparison (W vs ρ_c)'], 'intent': 'verify_spacetime_distortion_energy_exceeds_cosmic_density', 'reasoning_type': 'physical knowledge reasoning + ideal hypothesis reasoning', 'numerical_values': [3, 1, 9900000.0], 'units': {'length': 'meters (m)', 'density': 'kg/m^6 (critical cosmic density unit)', 'energy_conversion': 'W=-(c^6/(8πG))σ^5 (Alcubierre metric formula)', 'comparison': 'W vs ρ_c (unit consistency check)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.performance_tests': [{'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the use of a rice cooker inside a curvature propulsion drive (spatial compression ratio η=10^6), calculate the spacetime distortion energy consumption during cooking (energy density W=-(c^6/(8πG))σ^5 in the Alcubierre metric). Based on fictional parameters (curvature bubble radius R=3m, wall thickness σ=1m), use performance_tests.energy_consumption to verify whether W exceeds the critical cosmic density ρ_c=9.9×10^6kg/m^6.\nyour response just have a SQL without anything.\n",
        "solution": "WITH numbers AS (SELECT (a.n + b.n * 10 + c.n * 100 + d.n * 1000) AS n FROM (SELECT 0 AS n UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a CROSS JOIN (SELECT 0 AS n UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) b CROSS JOIN (SELECT 0 AS n UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) c CROSS JOIN (SELECT 0 AS n UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) d WHERE (a.n + b.n * 10 + c.n * 100 + d.n * 1000) BETWEEN 1 AND 10000), lifetime_simulation AS (SELECT di.id AS device_id, RAND() AS rand_value, EXP(-SUM(0.01 * ul.rice_quantity * (DATEDIFF(ml.maintenance_date, di.production_date)) / 365)) AS survival_probability FROM numbers CROSS JOIN rice_cooker_info di LEFT JOIN maintenance_records ml ON di.id = ml.rice_cooker_id LEFT JOIN usage_records ul ON di.id = ul.rice_cooker_id GROUP BY di.id, numbers.n) SELECT ls.device_id AS id, AVG(CASE WHEN ls.rand_value > ls.survival_probability THEN (DATEDIFF(CURDATE(), di.production_date)) / 365 ELSE 999 END) AS simulated_lifetime FROM lifetime_simulation ls JOIN rice_cooker_info di ON ls.device_id = di.id GROUP BY ls.device_id;",
        "db_id": "rice_cooker"
    },
    {
        "id": 240,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['ceramic material', 'stainless steel material', 'thermal shock risk index', 'critical temperature difference ΔT_c', 'thermal expansion coefficient α', 'elastic modulus E', \"Poisson's ratio ν\", 'fracture toughness K_IC', 'crack size a'], 'relations': ['material_to_properties (ceramic/stainless steel → α, E, K_IC)', 'thermal_stress_formula (σ = αEΔT / (1 - ν))', 'critical_temperature_formula (ΔT_c = K_IC(1 - ν) / (αE√(πa)))'], 'intent': 'calculate_thermal_shock_risk_index_and_safety_threshold', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [4.5e-06, 1.73e-05, 350000000000.0, 200000000000.0, 0.25, 3000000.0, 100000000.0, 0.0001], 'units': {'thermal_expansion_coefficient': '1/°C (per Celsius)', 'elastic_modulus': 'Pa (converted from GPa)', 'fracture_toughness': 'Pa√m (converted from MPa√m)', 'crack_size': 'm (converted from mm)', 'critical_temperature': '°C (Celsius)', 'conversion_formulas': {'GPa_to_Pa': '1 GPa = 1e9 Pa', 'MPa_to_Pa': '1 MPa = 1e6 Pa', 'mm_to_m': '0.1 mm = 0.0001 m'}}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'material', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['Non-stick', 'Ceramic', 'Stainless Steel', 'Aluminum', 'Exotic Matter']}]}}\nA physical knowledge question is as follows:\nCalculate the thermal shock risk index for rice cooker inner pot materials and derive the safety threshold under rapid cooling/heating conditions. Based on the thermal stress formula σ = αEΔT / (1 - ν) and fracture toughness parameters, assuming thermal expansion coefficient α: ceramic 4.5e-6/°C, stainless steel 17.3e-6/°C; elastic modulus E: ceramic 350GPa, stainless steel 200GPa; Poisson's ratio ν = 0.25; fracture toughness K_IC: ceramic 3MPa√m, stainless steel 100MPa√m. Calculate the critical temperature difference ΔT_c = K_IC(1 - ν) / (αE√(πa)) (crack size a = 0.1mm), then derive the risk index and safety conditions.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pt.*, rci.power_rating FROM performance_tests pt JOIN rice_cooker_info rci ON pt.rice_cooker_id = rci.id WHERE (pt.time_to_boil < 15 OR rci.power_rating > 1000) AND EXISTS (SELECT 1 FROM maintenance_records mr WHERE mr.rice_cooker_id = rci.id AND mr.replaced_parts = '电磁屏蔽组件');",
        "db_id": "rice_cooker"
    },
    {
        "id": 241,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice_cooker', 'energy_consumption', 'time_to_boil', 'rice_quality_score'], 'relations': ['rice_cooker_to_performance (rice_cooker_id → performance_tests)'], 'intent': 'construct_energy_efficiency_evaluation_model', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['n (number of observations)', 'p_ij', 'Ej', 'w_j'], 'units': {'energy_consumption': 'kWh', 'time_to_boil': 'minutes', 'rice_quality_score': 'unitless (0-100 scale)', 'entropy': 'dimensionless', 'weight': 'dimensionless'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.performance_tests': [{'column': 'rice_cooker_id', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '8', '9']}, {'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}, {'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}, {'column': 'rice_quality_score', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['9.0', '8.0', '9.5', '7.5', '7.0']}]}}\nA mathematical logic question is as follows:\nConstruct a comprehensive energy efficiency evaluation model based on the entropy weight method. Calculate the standardized value of each indicator as p_ij = (x_ij - min) / (max - min), the information entropy Ej = -Σ(p_ij * ln(p_ij)) / ln(n), the weight w_j = (1 - Ej) / Σ(1 - Ej), and the comprehensive score = Σ(w_j * p_ij). The indicators include energy consumption, boiling time, and rice quality score.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rci.model, ur.energy_consumption, ROUND(ABS( (POWER(3e8,4)/(8*PI()*6.67e-11)) * POWER(1/3,2) ) / 9.9e-27, 2) AS 能量密度比, CASE WHEN (ur.energy_consumption*3.6e6 / (0.005*0.18)) < ABS( (POWER(3e8,4)/(8*PI()*6.67e-11)) * POWER(1/3,2) ) THEN '满足曲率条件' ELSE '能量不足' END AS 验证结果 FROM rice_cooker_info rci JOIN usage_records ur ON rci.id = ur.rice_cooker_id JOIN performance_tests pt ON rci.id = pt.rice_cooker_id;",
        "db_id": "rice_cooker"
    },
    {
        "id": 242,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['thermal fuse reset specifications', 'cooling period ≥30 minutes', 'temperature settings >85°C', 'maintenance_records', 'usage_records'], 'relations': ['maintenance_to_cooler (rice_cooker_id)', 'time_interval_between_reset_and_usage', 'temperature_setting_link'], 'intent': 'identify_operational_specification_violations', 'reasoning_type': 'physical knowledge reasoning + common sense understanding reasoning', 'numerical_values': [30, 85], 'units': {'cooling_period': 'minutes', 'temperature': '°C (Celsius)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}, {'column': 'maintenance_date'}, {'column': 'maintenance_type'}], 'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}, {'column': 'start_time'}, {'column': 'temperature_setting'}]}}\nA common sense reasoning question is as follows:\nIdentify operational records that violate the reset specifications for thermal fuses. According to GB14536.1 requirements, a cooling period of ≥30 minutes is necessary after manual reset. Verify risks by calculating the cooling intervals between adjacent maintenance records, in conjunction with temperature settings >85°C.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rci.id, rci.material, pt.final_temperature, ur.rice_quantity, CASE WHEN rci.material = 'Ceramic' THEN (3e6 * (1 - 0.25)) / (4.5e-6 * 350e9 * SQRT(3.1415926 * 0.0001)) WHEN rci.material = 'Stainless Steel' THEN (100e6 * (1 - 0.25)) / (17.3e-6 * 200e9 * SQRT(3.1415926 * 0.0001)) ELSE NULL END AS_t_c, (pt.final_temperature - 25) / CASE WHEN rci.material = 'Ceramic' THEN (3e6 * (1 - 0.25)) / (4.5e-6 * 350e9 * SQRT(3.1415926 * 0.0001)) WHEN rci.material = 'Stainless Steel' THEN (100e6 * (1 - 0.25)) / (17.3e-6 * 200e9 * SQRT(3.1415926 * 0.0001)) ELSE NULL END AS risk_index, CASE WHEN (pt.final_temperature - 25) / CASE WHEN rci.material = 'Ceramic' THEN (3e6 * (1 - 0.25)) / (4.5e-6 * 350e9 * SQRT(3.1415926 * 0.0001)) WHEN rci.material = 'Stainless Steel' THEN (100e6 * (1 - 0.25)) / (17.3e-6 * 200e9 * SQRT(3.1415926 * 0.0001)) ELSE NULL END < 1 THEN '安全' ELSE '危险' END AS safety_condition FROM rice_cooker_info rci JOIN performance_tests pt ON rci.id = pt.rice_cooker_id JOIN usage_records ur ON rci.id = ur.rice_cooker_id;",
        "db_id": "rice_cooker"
    },
    {
        "id": 243,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"Dirac materials\", \"quantum Hall effect\", \"thermal conductivity\", \"Lorentz number\", \"Wiedemann-Franz law\"],\n  \"relations\": [\"modulation_effect (quantum_Hall_effect → thermal_conductivity)\", \"Lorentz_number_formula (L = (k_B * 10^5 / e * 10^5) * (π * 10^5 / 3) * (μB)^2)\", \"thermal_conductivity_formula (k = LTσ)\"],\n  \"intent\": \"calculate_modulation_effect_of_quantum_hall_effect_on_thermal_conductivity_and_verify_wiedemann_franz_law\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [],\n  \"units\": {},\n  \"required_tables\": [],\n  \"required_fields\": []\n}\n\nThe provided database (rice_cooker_info, performance_tests, etc.) is entirely unrelated to the physics question about Dirac materials, quantum Hall effects, and thermal conductivity. None of the tables/fields can address:\n- Quantum material properties\n- Lorentz number calculations\n- Thermal/electrical conductivity relationships\n- Wiedemann-Franz law verification\n\nThis query requires a materials science/physics database with specialized experimental data not present in the rice cooker maintenance/usage records.\nA hypothetical reasoning question is as follows:\nAssuming heating in Dirac materials, calculate the modulation effect of the quantum Hall effect on thermal conductivity. Based on the Lorentz number L = (k_B * 10^5 / e * 10^5) * (π * 10^5 / 3) * (μB)^2, derive the thermal conductivity k = LTσ, and verify whether it violates the Wiedemann-Franz law.\nyour response just have a SQL without anything.\n",
        "solution": "WITH standardized_data AS (SELECT rci.brand AS manufacturer, (pt.energy_consumption - MIN(pt.energy_consumption) OVER()) / (MAX(pt.energy_consumption) OVER() - MIN(pt.energy_consumption) OVER()) AS p_energy, (pt.time_to_boil - MIN(pt.time_to_boil) OVER()) / (MAX(pt.time_to_boil) OVER() - MIN(pt.time_to_boil) OVER()) AS p_time, (pt.rice_quality_score - MIN(pt.rice_quality_score) OVER()) / (MAX(pt.rice_quality_score) OVER() - MIN(pt.rice_quality_score) OVER()) AS p_score FROM rice_cooker_info rci JOIN performance_tests pt ON rci.id = pt.rice_cooker_id), entropy_calculation AS (SELECT manufacturer, -SUM(p_energy * LN(p_energy + 1e-9)) / LN(COUNT(*)) AS e_energy, -SUM(p_time * LN(p_time + 1e-9)) / LN(COUNT(*)) AS e_time, -SUM(p_score * LN(p_score + 1e-9)) / LN(COUNT(*)) AS e_score FROM standardized_data GROUP BY manufacturer), weights AS (SELECT manufacturer, (1 - e_energy) / SUM(1 - e_energy + 1 - e_time + 1 - e_score) OVER() AS w_energy, (1 - e_time) / SUM(1 - e_energy + 1 - e_time + 1 - e_score) OVER() AS w_time, (1 - e_score) / SUM(1 - e_energy + 1 - e_time + 1 - e_score) OVER() AS w_score FROM entropy_calculation) SELECT sd.manufacturer, SUM(w.w_energy * (1 - sd.p_energy) + w.w_time * sd.p_time + w.w_score * sd.p_score) AS comprehensive_score FROM standardized_data sd JOIN weights w ON sd.manufacturer = w.manufacturer GROUP BY sd.manufacturer;",
        "db_id": "rice_cooker"
    },
    {
        "id": 244,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\n    \"inner pot coating\",\n    \"Paris formula (da/dN = C(ΔK)^m)\",\n    \"stress intensity factor (ΔK)\",\n    \"stress (Δσ)\",\n    \"temperature difference (ΔT)\",\n    \"Paris constants (C = 1e-11, m = 3)\",\n    \"initial crack length (a_0 = 0.1mm)\",\n    \"critical crack length (a_c = 1mm)\"\n  ],\n  \"relations\": [\n    \"Paris_formula_relation (da/dN → C, ΔK, m)\",\n    \"ΔK_to_stress (ΔK → Δσ, a)\",\n    \"Δσ_to_material_properties (Δσ → α, E, ν, ΔT)\",\n    \"ΔT_to_thermal_data (ΔT → operational temperature data)\"\n  ],\n  \"intent\": \"calculate_thermal_fatigue_life_via_Paris_law\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [1e-11, 3, 0.1, 1],\n  \"units\": {\n    \"temperature\": \"°C (Celsius)\",\n    \"crack_length\": \"mm (millimeters)\",\n    \"stress_intensity_factor\": \"Pa√m (Pascal-square root meter)\",\n    \"stress\": \"Pa (Pascals)\",\n    \"Paris_coefficients\": \"C (m/(cycle·(Pa√m)^m)), m (dimensionless)\"\n  },\n  \"required_tables\": [\n    \"rice_cooker_info\",\n    \"performance_tests\",\n    \"usage_records\"\n  ],\n  \"required_fields\": [\n    \"rice_cooker_info.material\", // for material properties (α, E, ν)\n    \"performance_tests.initial_temperature\",\n    \"performance_tests.final_temperature\",\n    \"usage_records.temperature_setting\",\n    \"usage_records.actual_max_temperature\"\n  ]\n}\nA physical knowledge question is as follows:\nEvaluate the thermal fatigue life of the inner pot coating of a rice cooker and derive the crack growth rate under cyclic thermal stress. Based on the Paris formula da/dN = C(ΔK)^m, assuming the stress intensity factor ΔK = 1.12Δσ√(πa) and Δσ = αEΔT/(1-ν), with Paris constants C = 1e-11 and m = 3, calculate the crack propagation life N_f = ∫(da/(C(ΔK)^m)) from a_0 = 0.1mm to a_c = 1mm.\nyour response just have a SQL without anything.\n",
        "solution": "WITH maintenance_intervals AS (SELECT rice_cooker_id, maintenance_date, LAG(maintenance_date) OVER (PARTITION BY rice_cooker_id ORDER BY maintenance_date) AS prev_date, maintenance_type FROM maintenance_records) SELECT mi.rice_cooker_id, mi.maintenance_date, mi.prev_date, TIMESTAMPDIFF(MINUTE, mi.prev_date, mi.maintenance_date) AS cooling_interval, CASE WHEN mi.maintenance_type = '热熔断复位' AND TIMESTAMPDIFF(MINUTE, mi.prev_date, mi.maintenance_date) < 30 AND EXISTS (SELECT 1 FROM usage_records ul WHERE ul.rice_cooker_id = mi.rice_cooker_id AND ul.temperature_setting > 85) THEN '违规' ELSE '合规' END AS violation_status FROM maintenance_intervals mi;",
        "db_id": "rice_cooker"
    },
    {
        "id": 245,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Markov chain', 'state space {normal, warning, failure}', 'transition probability matrix P_ij', 'steady-state distribution π_j', 'failure risk ranking', 'rice cooker brand'], 'relations': ['state_transition (normal → warning/failure)', 'brand_to_rice_cooker (1:N)', 'time_sequential_events (date-based ordering)'], 'intent': 'build_markov_model_and_rank_brands_by_failure_risk', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['n_ij (transition counts)', 'n_i (total transitions from state i)', 'π_j (steady-state probability)'], 'units': {'probability': 'unitless (0-1 scale)', 'time': 'date/time format for state transition sequencing'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}, {'column': 'brand', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['BrandA', 'BrandB', 'BrandC', 'HighPowerBrand', 'UltraCook']}], 'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}, {'column': 'maintenance_date'}, {'column': 'maintenance_type'}], 'rice_cooker.performance_tests': [{'column': 'test_date', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['2023-09-01', '2023-09-05', '2023-09-10', '2023-08-01', '2023-08-05']}, {'column': 'rice_quality_score', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['9.0', '8.0', '9.5', '7.5', '7.0']}], 'rice_cooker.usage_records': [{'column': 'start_time'}, {'column': 'end_time'}, {'column': 'energy_consumption'}]}}\nA mathematical logic question is as follows:\nConstruct a Markov chain-based device state transition model. Define the state space {normal, warning, failure}, calculate the transition probability matrix P_ij = n_ij / n_i, predict the steady-state distribution π_j = Σ(π_i * P_ij), and output the failure risk ranking for each brand.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rci.id, rci.power_rating, rci.voltage_rating, pt.final_temperature, (1.38e-23 * 1.38e-23 / (1.6e-19 * 1.6e-19)) * (3.1415926 * 3.1415926 / 3) * POWER(1e7 * 0.0001 * 10, 2) AS L, (rci.power_rating / POWER(rci.voltage_rating, 2)) AS sigma, (1.38e-23 * 1.38e-23 / (1.6e-19 * 1.6e-19)) * (3.1415926 * 3.1415926 / 3) * POWER(1e7 * 0.0001 * 10, 2) * (rci.power_rating / POWER(rci.voltage_rating, 2)) * (pt.final_temperature + 273) AS k_quantum, CASE WHEN (1.38e-23 * 1.38e-23 / (1.6e-19 * 1.6e-19)) * (3.1415926 * 3.1415926 / 3) * POWER(1e7 * 0.0001 * 10, 2) * (rci.power_rating / POWER(rci.voltage_rating, 2)) * (pt.final_temperature + 273) > 5000 THEN '异常' ELSE '正常' END AS thermal_conductivity_anomaly FROM rice_cooker_info rci JOIN performance_tests pt ON rci.id = pt.rice_cooker_id;",
        "db_id": "rice_cooker"
    },
    {
        "id": 246,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n```json\n{\n  \"entities\": [\"calibration_records table\", \"JJF 1101-2019\", \"12 months calibration cycle\", \"±2°C error margin\", \"rice_cooker_info\", \"performance_tests\", \"temperature_setting\"],\n  \"relations\": [\n    \"calibration_records.rice_cooker_id → rice_cooker_info.rice_cooker_id\",\n    \"calibration_records.last_calibration_date → performance_tests.test_date\",\n    \"temperature_setting.deviation_validation → performance_tests.final_temperature\",\n    \"maintenance_records.rice_cooker_id → rice_cooker_info.rice_cooker_id\"\n  ],\n  \"intent\": \"identify_thermostat_calibration_violations\",\n  \"reasoning_type\": \"physical knowledge reasoning + mathematical logic reasoning\",\n  \"numerical_values\": [12, 2],\n  \"units\": {\n    \"time\": \"months\",\n    \"temperature\": \"°C (Celsius)\",\n    \"error_threshold\": \"±2°C\"\n  },\n  \"required_tables\": [\n    \"calibration_records\",\n    \"performance_tests\",\n    \"usage_records\",\n    \"rice_cooker_info\"\n  ],\n  \"required_fields\": [\n    \"calibration_records.rice_cooker_id\",\n    \"calibration_records.last_calibration_date\",\n    \"calibration_records.calibration_due_date\",\n    \"calibration_records.temperature_error\",\n    \"performance_tests.test_date\",\n    \"performance_tests.final_temperature\",\n    \"usage_records.temperature_setting\",\n    \"usage_records.actual_max_temperature\",\n    \"rice_cooker_info.production_date\"\n  ]\n}\n```\nA common sense reasoning question is as follows:\nIdentify records that violate the thermostat calibration cycle. According to JJF 1101-2019 requirements, calibration must be performed every 12 months with an error ≤ ±2°C. By creating a `calibration_records` table (with supplemental fields), JOIN `performance_tests` to verify overdue calibration or excessive errors, combined with `temperature_setting` deviation validation.\nyour response just have a SQL without anything.\n",
        "solution": "WITH calibration_records AS (SELECT 1 AS rice_cooker_id, '2023-01-15' AS calibration_date, 1.5 AS calibration_error UNION ALL SELECT 2, '2022-12-20', 2.5 UNION ALL SELECT 3, '2023-03-10', 0.8) SELECT pt.id, pt.test_date, cr.calibration_date, ABS(cr.calibration_error) AS calibration_error, ABS(pt.final_temperature - pt.initial_temperature) AS temperature_deviation, CASE WHEN DATEDIFF(pt.test_date, cr.calibration_date) > 365 THEN '校准超期' WHEN ABS(cr.calibration_error) > 2 THEN '误差超标' WHEN ABS(pt.final_temperature - pt.initial_temperature) > 5 THEN '温度偏差' ELSE '正常' END AS violation_status FROM performance_tests pt JOIN calibration_records cr ON pt.rice_cooker_id = cr.rice_cooker_id;",
        "db_id": "rice_cooker"
    },
    {
        "id": 247,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Casimir effect field', 'plate separation (d) = 1nm', 'effective area (A) = 0.01m^5', 'time (t) = 1h', 'performance_tests.energy_consumption'], 'relations': ['Casimir_pressure_formula (P = π * 10⁵ * 10⁴ * c/(240 * d⁶))', 'energy_contribution_calculation (PAt = pressure * area * time)', 'comparison (PAt > E_cooking)'], 'intent': 'calculate_vacuum_zero_point_energy_contribution_and_compare_with_cooking_energy', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1, 0.01, 1], 'units': {'plate_separation': 'nm (nanometers)', 'effective_area': 'm⁵ (fictional unit, inconsistent with standard physics)', 'time': 'h (hours)', 'energy_consumption': 'kWh (from database)', 'pressure': 'Pa (Pascals, derived from formula)', 'power': 'W (watts, for intermediate calculations)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.performance_tests': [{'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}]}}\nA hypothetical reasoning question is as follows:\nAssuming cooking in a Casimir effect field (plate separation d = 1nm), calculate the contribution of vacuum zero-point energy to heat conduction. Based on the Casimir pressure P = π * 10^5 * 10^4 * c/(240 * d^6), with fictional parameters: effective area A = 0.01m^5, time t = 1h, use performance_tests.energy_consumption to verify whether PAt > E_cooking is satisfied.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pt.id, pt.energy_consumption, (9.87 * 1.05e-34 * 3e8) / (240 * POWER(1e-9, 4)) AS P, (9.87 * 1.05e-34 * 3e8) / (240 * POWER(1e-9, 4)) * 0.01 * 3600 AS energy_gain, CASE WHEN (9.87 * 1.05e-34 * 3e8) / (240 * POWER(1e-9, 4)) * 0.01 * 3600 > pt.energy_consumption * 3.6e6 THEN '满足' ELSE '不满足' END AS quantum_condition FROM performance_tests pt;",
        "db_id": "rice_cooker"
    },
    {
        "id": 248,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\n    \"electric rice cooker model\",\n    \"lunar gravity (1/6 Earth gravity)\",\n    \"boiling point of water on Moon (70°C)\",\n    \"heat convection on Moon (1/3 Earth value)\",\n    \"heat transfer equation Q=mcΔT+mL\"\n  ],\n  \"relations\": [\n    \"gravity_difference (Δg = 1/6g)\",\n    \"boiling_point_decrease (ΔT_boil = 70°C vs 100°C)\",\n    \"convection_efficiency (1/3 of Earth)\",\n    \"equation_to_time_relationship (Q ∝ t)\"\n  ],\n  \"intent\": \"calculate_cooking_time_difference_on_moon\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [70, 1/6, 1/3],\n  \"units\": {\n    \"temperature\": \"°C (Celsius)\",\n    \"time\": \"minutes (implied by context)\",\n    \"heat_transfer\": \"Joules (Q=mcΔT+mL)\",\n    \"gravity\": \"m/s² (Earth gravity = 9.81, Moon = 1.63)\"\n  },\n  \"required_tables\": [\"rice_cooker_info\", \"performance_tests\"],\n  \"required_fields\": [\n    \"rice_cooker_info.power_rating\",\n    \"performance_tests.time_to_boil\",\n    \"performance_tests.initial_temperature\",\n    \"performance_tests.final_temperature\",\n    \"performance_tests.energy_consumption\"\n  ]\n}\nA physical knowledge question is as follows:\nIf an electric rice cooker is used on the lunar surface, where gravity is only 1/6 of that on Earth, calculate the change in cooking time. Assuming the boiling point of water decreases to 70° C and heat convection weakens to 1/3 of that on Earth, derive the relationship between the new boiling time on the moon (t_moon) and the time on Earth (t_earth) (the heat transfer equation Q=mcΔT+mL must be used).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pt.time_to_boil AS t_earth, (pt.time_to_boil * (75 / (1/3 * 240)) * ((2260 / (75 * 1)) + 1) / ((2260 / (1/3 * 240 * 1)) + 1)) AS t_moon FROM performance_tests pt JOIN rice_cooker_info ri ON pt.rice_cooker_id = ri.id WHERE pt.test_type = 'Boiling';",
        "db_id": "rice_cooker"
    },
    {
        "id": 249,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Weibull distribution', 'shape parameter β=2.5', 'scale parameter η=8 years', 'time t=5 years'], 'relations': ['Weibull_CDF (β=2.5, η=8 → probability_of_failure)', 'Weibull_median (β=2.5, η=8 → median_lifespan)'], 'intent': 'calculate_failure_probability_and_median_lifespan', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2.5, 8, 5], 'units': {'shape_parameter': 'dimensionless', 'scale_parameter': 'years', 'time': 'years', 'failure_probability': 'unitless (0-1)', 'median_lifespan': 'years'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'brand', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['BrandA', 'BrandB', 'BrandC', 'HighPowerBrand', 'UltraCook']}]}}\nA mathematical logic question is as follows:\nIf the lifespan of a rice cooker follows a Weibull distribution with shape parameter β=2.5 and scale parameter η=8 years, calculate the probability of failure within 5 years and predict the median lifespan for each brand.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ri.brand, 1 - EXP(-POWER(5 / 8, 2.5)) AS failure_probability_5_years, 8 * POWER(LN(2), 1 / 2.5) AS median_lifetime FROM rice_cooker_info ri GROUP BY ri.brand;",
        "db_id": "rice_cooker"
    },
    {
        "id": 250,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['undercooked rice issue', 'rice-to-water ratio', 'heating uniformity', 'temperature control accuracy', 'rice cooker model'], 'relations': ['rice_to_water_ratio → usage_records (rice_quantity/water_quantity)', 'heating_uniformity → performance_tests (temperature distribution analysis)', 'temperature_control_accuracy → performance_tests (initial_temperature/final_temperature comparison)', 'maintenance_history → maintenance_records (heating element calibration issues)'], 'intent': 'troubleshoot_undercooked_rice_issue', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [1.5, 2.0, 100, 95], 'units': {'rice_quantity': 'cups (standard measuring cup)', 'water_quantity': 'cups (standard measuring cup)', 'temperature': '°C (Celsius)', 'evaporation_rate': 'g/min (grams per minute)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.usage_records': [{'column': 'rice_quantity'}, {'column': 'water_quantity'}, {'column': 'actual_max_temperature'}], 'rice_cooker.performance_tests': [{'column': 'rice_quality_score', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['9.0', '8.0', '9.5', '7.5', '7.0']}, {'column': 'water_evaporation_rate', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['10.0', '12.0', '11.0', '15.0', '16.0']}], 'rice_cooker.maintenance_records': [{'column': 'replaced_parts'}], 'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}]}}\nA common sense reasoning question is as follows:\nA user reported frequently encountering undercooked rice when cooking. Analyze potential causes and provide troubleshooting steps, considering factors such as the rice-to-water ratio, heating uniformity, and temperature control accuracy.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ur.rice_cooker_id, CASE WHEN ur.rice_quantity / ur.water_quantity NOT BETWEEN 0.56 AND 0.83 THEN '米水比异常' WHEN (SELECT STDDEV(pt.final_temperature) FROM performance_tests pt WHERE pt.rice_cooker_id = ur.rice_cooker_id) > 5 THEN '加热不均' WHEN ABS(AVG(ur.actual_max_temperature) - AVG(ur.temperature_setting)) > 5 THEN '温控偏差' WHEN EXISTS (SELECT 1 FROM maintenance_records mr WHERE mr.rice_cooker_id = ur.rice_cooker_id AND mr.replaced_parts LIKE '%内胆涂层%') THEN '涂层脱落' ELSE '其他原因' END AS possible_cause FROM usage_records ur GROUP BY ur.rice_cooker_id, ur.rice_quantity, ur.water_quantity;",
        "db_id": "rice_cooker"
    },
    {
        "id": 251,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['quantum cooking device', '1nm potential barrier', 'electron energy E=5eV', 'barrier height V=10eV'], 'relations': ['electron_energy_to_barrier_height (E/V ratio = 0.5)', 'barrier_width (1nm) → tunneling_probability relationship'], 'intent': 'calculate_tunneling_probability_and_efficiency_improvement', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [5, 10, 1], 'units': {'energy': 'eV (electron volts)', 'barrier_width': 'nm (nanometers)', 'conversion': '1 eV = 1.602×10^-19 J, 1 nm = 10^-9 m (for quantum calculations)'}, 'foreign_keys': [], 'primary_keys': [], 'tableinfo': 'This sql query does not need table and columns information as it is about mathematical calculations.'}\nA hypothetical reasoning question is as follows:\nAssuming the rice cooker is modified into a quantum cooking device that utilizes the quantum tunneling effect for heating, calculate the tunneling probability under a 1nm potential barrier. Given the electron energy E=5eV and the barrier height V=10eV, derive the improvement multiple in heating efficiency.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT EXP(-2 * 1e-9 * SQRT(2 * 9.11e-31 * 5 * 1.6e-19) / 1.05e-34) AS tunneling_probability, 1 / EXP(-2 * 1e-9 * SQRT(2 * 9.11e-31 * 5 * 1.6e-19) / 1.05e-34) AS efficiency_increase FROM rice_cooker_info;",
        "db_id": "rice_cooker"
    },
    {
        "id": 252,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker', 'high-altitude region (3000 meters)', 'boiling point 90°C', 'reduced atmospheric pressure', 'thermal energy utilization efficiency', 'heat loss rate', 'Clausius-Clapeyron equation'], 'relations': ['altitude_to_boiling_point (3000m → 90°C boiling point)', 'pressure_to_boiling_point (atmospheric pressure reduction → lower boiling point)', 'energy_utilization_relation (boiling point → efficiency)', 'heat_loss_relation (altitude ∝ heat loss rate)', 'clausius_clapeyron_application (pressure-temperature relationship for phase change)'], 'intent': 'calculate_thermal_energy_efficiency_correction_at_altitude', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [3000, 90], 'units': {'altitude': 'meters (m)', 'temperature': '°C (Celsius)', 'pressure': 'kPa (kilopascals, implied by Clausius-Clapeyron)', 'energy': 'Joules (J) or kWh (implied by energy_consumption fields)', 'conversion': 'ΔT = 10°C (standard boiling point 100°C → altitude-adjusted 90°C)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.performance_tests': [{'column': 'initial_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '20.0', '22.0', '24.0', '26.0']}, {'column': 'final_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['100.0', '95.0', '88.0', '85.0', '87.0']}, {'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}, {'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}], 'rice_cooker.rice_cooker_info': [{'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}, {'column': 'voltage_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['220.0']}, {'column': 'capacity', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['5.0', '3.5', '6.0', '6.5', '4.0']}]}}\nA physical knowledge question is as follows:\nUsing a rice cooker in a high-altitude region (3000 meters above sea level), the boiling point decreases to 90°C due to reduced atmospheric pressure. Calculate the change in thermal energy utilization efficiency. Assuming the heat loss rate is proportional to altitude, derive the corrected energy consumption formula (requires the Clausius-Clapeyron equation).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pt.water_evaporation_rate, ur.energy_consumption, (ur.energy_consumption * ri.power_rating * (2260e3/461.5)*(1/363 - 1/373)/ri.power_rating) / (ur.water_quantity * 4.18 * 65 + pt.water_evaporation_rate * 2260) AS efficiency_correction FROM performance_tests pt JOIN usage_records ur ON pt.rice_cooker_id = ur.rice_cooker_id JOIN rice_cooker_info ri ON ur.rice_cooker_id = ri.id WHERE pt.test_type = 'Boiling';",
        "db_id": "rice_cooker"
    },
    {
        "id": 253,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Frequent Quick Cooking', 'Scheduled Appointments', 'Heat Retention Dependence', 'usage frequency', 'single cooking volume', 'heat retention duration'], 'relations': ['feature_to_category_mapping (usage_frequency → Frequent Quick Cooking)', 'feature_to_category_mapping (single_cooking_volume → Scheduled Appointments)', 'feature_to_category_mapping (heat_retention_duration → Heat Retention Dependence)'], 'intent': 'build_clustering_analysis_model', 'reasoning_type': 'mathematical logic reasoning + common sense understanding reasoning', 'numerical_values': [3], 'units': {'usage_frequency': 'counts of usage_records per rice_cooker_id', 'single_cooking_volume': 'rice_quantity (unit unspecified in schema, possibly grams/cups)', 'heat_retention_duration': 'duration (unit unspecified in schema, likely minutes)', 'clustering_k_value': 3}, 'foreign_keys': [{'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}, {'column': 'start_time'}, {'column': 'rice_quantity'}, {'column': 'duration'}]}}\nA mathematical logic question is as follows:\nBuilding a Clustering Analysis Model Based on User Behavior: Use K-means to classify users into three categories—\"Frequent Quick Cooking,\" \"Scheduled Appointments,\" and \"Heat Retention Dependence\"—based on features such as usage frequency, single cooking volume, and heat retention duration.\nyour response just have a SQL without anything.\n",
        "solution": "WITH user_features AS (SELECT rice_cooker_id, COUNT(*) AS usage_frequency, AVG(rice_quantity) AS avg_rice_quantity, AVG(duration) AS avg_duration FROM usage_records GROUP BY rice_cooker_id) SELECT rice_cooker_id, usage_frequency, avg_rice_quantity, avg_duration, CASE WHEN usage_frequency > 10 AND avg_duration < 30 THEN '频繁快煮' WHEN usage_frequency BETWEEN 5 AND 10 AND avg_rice_quantity > 1 THEN '定时预约' WHEN avg_duration > 60 THEN '保温依赖' ELSE '其他' END AS user_category FROM user_features;",
        "db_id": "rice_cooker"
    },
    {
        "id": 254,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['operational_errors', 'decision_tree_diagnostic_process', 'rice_cooker_usage'], 'relations': ['error_to_diagnostic_step', 'user_action_to_device_performance', 'maintenance_causes_to_usage_errors'], 'intent': 'establish_decision_tree_diagnostic_process', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [7], 'units': {'error_count': 'unitless (count of errors)', 'diagnostic_steps': 'unitless (number of decision nodes)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.usage_records': [{'column': 'water_quantity'}, {'column': 'rice_quantity'}, {'column': 'duration'}, {'column': 'temperature_setting'}], 'rice_cooker.performance_tests': [{'column': 'rice_quality_score', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['9.0', '8.0', '9.5', '7.5', '7.0']}, {'column': 'water_evaporation_rate', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['10.0', '12.0', '11.0', '15.0', '16.0']}], 'rice_cooker.maintenance_records': [{'column': 'maintenance_type'}, {'column': 'replaced_parts'}]}}\nA common sense reasoning question is as follows:\nAnalyze the seven common operational errors made by novice users (such as not drying the inner pot after washing rice, water level exceeding the MAX line, etc.), and establish a decision tree diagnostic process.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ur.rice_cooker_id, CASE WHEN ur.water_quantity / ri.capacity > 1.2 THEN '水位异常' WHEN ur.rice_type NOT IN ('White Rice', 'Brown Rice') THEN '米种不适配' WHEN HOUR(ur.start_time) BETWEEN 18 AND 20 THEN '高峰时段使用' ELSE '其他' END AS misoperation_type FROM usage_records ur JOIN rice_cooker_info ri ON ur.rice_cooker_id = ri.id;",
        "db_id": "rice_cooker"
    },
    {
        "id": 255,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['quantum teleportation technology', 'thermal energy', '1kg of rice', 'entangled quantum bits (n)', 'decoherence time τ=1μs'], 'relations': ['efficiency_formula (η=1-(1-e^(-t/τ))^n)', 'energy_requirement (energy required to cook rice → efficiency → n)', 'decoherence_impact (τ=1μs → qubit stability constraint)'], 'intent': 'calculate_required_entangled_qubits_for_thermal_energy_transmission', 'reasoning_type': 'ideal_hypothesis_reasoning + mathematical_logic_reasoning', 'numerical_values': [1, 1e-06], 'units': {'mass': 'kg (rice quantity)', 'time': 'μs (decoherence time τ)', 'efficiency': 'unitless (η)', 'qubit_count': 'unitless (n)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}, {'column': 'voltage_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['220.0']}], 'rice_cooker.performance_tests': [{'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}, {'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}], 'rice_cooker.usage_records': [{'column': 'energy_consumption'}, {'column': 'duration'}]}}\nA hypothetical reasoning question is as follows:\nAssuming the use of quantum teleportation technology to transmit thermal energy, calculate the number of entangled quantum bits required to cook 1kg of rice. The energy transmission efficiency is set as η=1-(1-e^(-t/τ))^n, with a decoherence time τ=1μs.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT LN(1 - (2.8e6 / (1e-25 * 0.9))) / LN(1 - EXP(-1/1e-6)) AS required_qubits FROM rice_cooker_info WHERE id IS NOT NULL;",
        "db_id": "rice_cooker"
    },
    {
        "id": 256,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['electric rice cooker', 'polar environment (-40°C)', 'preheating phase', 'Stefan-Boltzmann law'], 'relations': ['thermal_energy_relationship (heat loss rate ∝ ΔT³)', 'Stefan-Boltzmann_law (P = σA(T_env^4 - T_pot^4))', 'rice_cooker_to_specs (rice_cooker → rice_cooker_info)'], 'intent': 'calculate_additional_energy_consumption_during_preheating_with_thermal_correction', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [-40], 'units': {'temperature': '°C (converted to Kelvin for Stefan-Boltzmann)', 'energy': 'kWh (from performance_tests.energy_consumption)', 'power': 'Watts (from rice_cooker_info.power_rating)', 'thermal_coefficient': 'ΔT³ (heat loss proportionality)'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}], 'rice_cooker.performance_tests': [{'column': 'initial_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '20.0', '22.0', '24.0', '26.0']}, {'column': 'final_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['100.0', '95.0', '88.0', '85.0', '87.0']}, {'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}, {'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}]}}\nA physical knowledge question is as follows:\nWhen an electric rice cooker is started in a polar environment (-40°C), calculate the additional energy consumption during the pot preheating phase. Assume the heat loss rate is proportional to the cube of the temperature difference, and derive the preheating time correction factor (requiring the use of the Stefan-Boltzmann law).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ri.power_rating, pt.initial_temperature, (0.9*5.67e-8*0.15*(POW(373,4)-POW(233,4)))*((25*3.5*4180)/(ri.power_rating - (0.9*5.67e-8*0.15*(POW(373,4)-POW(233,4))))) AS extra_energy FROM rice_cooker_info ri JOIN performance_tests pt ON ri.id = pt.rice_cooker_id WHERE pt.test_type = 'Boiling';",
        "db_id": "rice_cooker"
    },
    {
        "id": 257,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['frequency_of_use', 'temperature_control_deviation', 'maintenance_interval', 'fault_risk_level'], 'relations': ['frequency_of_use → usage_records (count of usage instances per rice cooker)', 'temperature_control_deviation → usage_records (difference between temperature_setting and actual_max_temperature)', 'maintenance_interval → maintenance_records (time between consecutive maintenance_dates)', 'fault_risk_level → fuzzy_logic_output (derived from input variables)'], 'intent': 'build_fuzzy_logic_fault_prediction_system', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [3, 5, 7, 14], 'units': {'frequency_of_use': 'uses/day (derived from start_time intervals)', 'temperature_control_deviation': '°C (temperature_setting vs actual_max_temperature)', 'maintenance_interval': 'days (calculated from maintenance_date differences)', 'fuzzy_membership_thresholds': 'custom ranges for Low/Medium/High (e.g., 0-3 days, 3-7 days, 7+ days)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}, {'column': 'maintenance_date'}], 'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}, {'column': 'temperature_setting'}, {'column': 'actual_max_temperature'}, {'column': 'start_time'}]}}\nA mathematical logic question is as follows:\nBuild a fault prediction system based on fuzzy logic: Define input variables \"frequency of use,\" \"temperature control deviation,\" and \"maintenance interval,\" with the output being \"fault risk level,\" and design membership functions and inference rules.\nyour response just have a SQL without anything.\n",
        "solution": "WITH fuzzy_data AS ( SELECT ur.rice_cooker_id, COUNT(*)/30.0 AS usage_freq, AVG(ABS(ur.actual_max_temperature - ur.temperature_setting)) AS temp_deviation, DATEDIFF(MAX(mr.maintenance_date), MIN(mr.maintenance_date))/30.0 AS maintenance_interval FROM usage_records ur LEFT JOIN maintenance_records mr ON ur.rice_cooker_id = mr.rice_cooker_id GROUP BY ur.rice_cooker_id ) SELECT rice_cooker_id, CASE WHEN usage_freq > 0.8 AND temp_deviation > 5 THEN '高风险' WHEN usage_freq BETWEEN 0.5 AND 0.8 OR maintenance_interval > 6 THEN '中风险' ELSE '低风险' END AS risk_level FROM fuzzy_data;",
        "db_id": "rice_cooker"
    },
    {
        "id": 258,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker', 'rice-to-water ratio', 'rice cooker capacity', 'heating power'], 'relations': ['rice_cooker_to_capacity (rice_cooker_id → capacity)', 'rice_cooker_to_power (rice_cooker_id → power_rating)', 'usage_to_ingredients (rice_cooker_id → rice_quantity/water_quantity)'], 'intent': 'diagnose_boiling_over_causes', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['capacity (liters/cups)', 'power_rating (watts)', 'rice_quantity (grams/cups)', 'water_quantity (ml/cups)'], 'units': {'capacity': 'liters/cups (rice_cooker_info.capacity)', 'heating_power': 'watts (rice_cooker_info.power_rating)', 'quantity': 'grams/cups (usage_records.rice_quantity), ml/cups (usage_records.water_quantity)', 'ratio': 'rice-to-water ratio (grams/ml or cups/cups)'}, 'foreign_keys': [{'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'capacity', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['5.0', '3.5', '6.0', '6.5', '4.0']}, {'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}], 'rice_cooker.usage_records': [{'column': 'rice_quantity'}, {'column': 'water_quantity'}]}}\nA common sense reasoning question is as follows:\nAnalyze the common causes of the \"boiling over\" phenomenon in rice cookers when cooking rice, and establish a simple diagnostic model. Consider fundamental factors such as the rice-to-water ratio, rice cooker capacity, and heating power.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ur.rice_cooker_id, CASE WHEN ur.rice_quantity / ur.water_quantity NOT BETWEEN 0.56 AND 0.83 THEN '米水比异常(合理范围1:1.2-1:1.8)' WHEN (ur.rice_quantity + ur.water_quantity) > ri.capacity THEN '总量超容(超过电饭煲容量)' WHEN ri.power_rating > 1000 THEN '功率过高(>1000W)' ELSE '其他原因' END AS overflow_reason FROM usage_records ur JOIN rice_cooker_info ri ON ur.rice_cooker_id = ri.id;",
        "db_id": "rice_cooker"
    },
    {
        "id": 259,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"nanorobots\", \"rice grain\", \"heat field distribution\", \"temperature gradient 5℃/mm\", \"quantum optimization algorithm\"],\n  \"relations\": [\"nanorobots_to_heat_control (nanorobots → real-time heating regulation)\", \"grain_heat_distribution (rice grain → temperature gradient constraint at center)\"],\n  \"intent\": \"calculate_optimal_heat_distribution_and_quantum_iterations\",\n  \"reasoning_type\": \"physical knowledge reasoning + mathematical logic reasoning\",\n  \"numerical_values\": [5],\n  \"units\": {\n    \"temperature_gradient\": \"℃/mm (Celsius per millimeter)\",\n    \"iteration_count\": \"unitless (algorithm iterations)\"\n  },\n  \"required_tables\": [\"hypothetical_quantum_parameters\", \"grain_thermal_properties\", \"nanorobot_specs\"],\n  \"required_fields\": [\n    \"hypothetical_quantum_parameters.convergence_threshold\",\n    \"grain_thermal_properties.thermal_conductivity\",\n    \"nanorobot_specs.precision_control_range\"\n  ]\n}\n\nNote: The actual database schema lacks required tables and fields for quantum algorithms, nanorobot specifications, and grain thermal properties. The provided rice_cooker tables (maintenance_records, performance_tests, rice_cooker_info, usage_records) cannot address the hypothetical physics/engineering scenario described.\nA hypothetical reasoning question is as follows:\nAssuming the use of nanorobots to regulate rice grain heating in real-time, calculate the optimal heat field distribution. The objective function is set as a temperature gradient ≤5℃/mm at the grain center, and derive the quantum optimization algorithm iteration count.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT POWER(5e-3,2)/(4*0.6) AS characteristic_length, CEIL((pt.final_temperature - pt.initial_temperature)/5 * SQRT(ur.energy_consumption)) AS iterations FROM performance_tests pt JOIN usage_records ur ON pt.rice_cooker_id = ur.rice_cooker_id WHERE pt.test_type = 'Boiling';",
        "db_id": "rice_cooker"
    },
    {
        "id": 260,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model RC-2002', '5 liters of water', 'initial temperature 25°C', 'final temperature 100°C'], 'relations': ['model_to_power_rating (RC-2002 → power_rating)', 'temperature_difference (ΔT=75°C)', 'water_volume_to_mass (5 liters → 5 kg, assuming water density of 1 kg/L)'], 'intent': 'calculate_heating_time', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [25, 100, 5], 'units': {'temperature': '°C (Celsius)', 'volume': 'liters', 'mass': 'kg (derived from volume via water density)', 'power': 'watts (from rice_cooker_info.power_rating)', 'time': 'seconds (calculated result, potentially converted to minutes/hours)', 'energy': 'joules (intermediate calculation: J = W·s)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}]}}\nA physical knowledge question is as follows:\nCalculate the theoretical time required for a rice cooker with the model 'RC-2002' to heat 5 liters of water from 25°C to 100°C during the rice cooking process (assuming all heat is used to warm the water and thermal losses are ignored).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (5 * 4200 * 75) / (power_rating) / 60 AS theoretical_time_minutes FROM rice_cooker_info WHERE model = 'RC-2002';",
        "db_id": "rice_cooker"
    },
    {
        "id": 261,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['BrandY', '2023', 'rice cooker models'], 'relations': ['brand_to_models (BrandY → rice_cooker_info.model)', 'model_to_energy_consumption (rice_cooker_info.model → usage_records.energy_consumption)', 'time_filter (2023 → usage_records.start_time)'], 'intent': 'calculate_total_energy_consumption_and_rank_models', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2023, 5], 'units': {'energy_consumption': 'kWh (inferred from usage_records.energy_consumption)', 'usage_count': 'unitless count of usage records'}, 'foreign_keys': [{'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}, {'column': 'brand', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['BrandA', 'BrandB', 'BrandC', 'HighPowerBrand', 'UltraCook']}, {'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}], 'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}, {'column': 'energy_consumption'}, {'column': 'start_time'}]}}\nA mathematical logic question is as follows:\nCalculate the total energy consumption of all rice cookers with the brand 'BrandY' in 2023, and identify the top 5 models with the highest energy consumption along with their corresponding usage counts.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rci.model, SUM(ur.energy_consumption) AS total_energy, COUNT(*) AS usage_count FROM rice_cooker_info rci JOIN usage_records ur ON rci.id = ur.rice_cooker_id WHERE rci.brand = 'BrandY' AND YEAR(ur.start_time) = 2023 GROUP BY rci.model ORDER BY total_energy DESC LIMIT 5;",
        "db_id": "rice_cooker"
    },
    {
        "id": 262,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker capacity', 'rated power', 'rice cooker models'], 'relations': ['capacity_condition (>4 liters)', 'power_condition (<800 watts)'], 'intent': 'filter_rice_cookers_by_specifications', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [4, 800], 'units': {'capacity': 'liters', 'power': 'watts'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'brand', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['BrandA', 'BrandB', 'BrandC', 'HighPowerBrand', 'UltraCook']}, {'column': 'capacity', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['5.0', '3.5', '6.0', '6.5', '4.0']}, {'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}, {'column': 'price', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['299.99', '399.99', '499.99', '799.99', '699.99']}]}}\nA common sense reasoning question is as follows:\nFind the models of rice cookers with a capacity greater than 4 liters and a rated power less than 800 watts, and list their brands and prices.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT model, brand, price FROM rice_cooker_info WHERE capacity > 4 AND power_rating < 800;",
        "db_id": "rice_cooker"
    },
    {
        "id": 263,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker with power rating 5000 watts', '20 liters of water', 'initial temperature 10°C', 'final temperature 120°C', 'time duration 30 seconds'], 'relations': ['rice_cooker_to_power_rating (5000 watts)', 'water_volume_to_temperature_change (20L, ΔT=110°C)', 'time_to_energy_consumption (30 seconds)', 'phase_change_implication (liquid to vapor at 100°C)'], 'intent': 'calculate_energy_consumption_and_evaluate_feasibility', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [5000, 20, 10, 120, 30], 'units': {'power': 'watts (W)', 'volume': 'liters (L) converted to kg (1L≈1kg for water)', 'temperature': '°C (Celsius), requiring phase change energy', 'time': 'seconds (s)', 'energy': 'joules (J) or kilowatt-hours (kWh) via calculation'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}], 'rice_cooker.performance_tests': [{'column': 'initial_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '20.0', '22.0', '24.0', '26.0']}, {'column': 'final_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['100.0', '95.0', '88.0', '85.0', '87.0']}, {'column': 'time_to_boil', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['15.0', '20.0', '18.0', '22.0', '21.0']}, {'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}]}}\nA hypothetical reasoning question is as follows:\nAssuming an electric rice cooker has a rated power of 5000 watts (far exceeding the normal value), calculate the energy consumption required to heat 20 liters of water from 10°C to 120°C (above boiling point) in 30 seconds, and discuss the feasibility of this assumption.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 5000 * (30 / 3600) AS energy_consumption_kwh;",
        "db_id": "rice_cooker"
    },
    {
        "id": 264,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker model RC-3003', '1.5 liters of water', '1.2 kg rice', '25°C to 100°C', 'specific heat capacity of rice 1.8 kJ/(kg·°C)'], 'relations': ['model_to_specs (RC-3003 → rice_cooker_info)', 'temperature_difference (ΔT=75°C)', 'rice_thermal_mass (1.2 kg × 1.8 kJ/(kg·°C))', 'water_thermal_mass (1.5 kg × 4.186 kJ/(kg·°C))'], 'intent': 'calculate_thermal_efficiency', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1.5, 1.2, 25, 100, 1.8], 'units': {'mass': 'kg (water: 1.5L → 1.5kg conversion assumed)', 'temperature': '°C (Celsius)', 'specific_heat': 'kJ/(kg·°C)', 'energy_conversion': '1 kWh = 3600 kJ'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}, {'column': 'id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '6', '7']}], 'rice_cooker.performance_tests': [{'column': 'rice_cooker_id', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '8', '9']}, {'column': 'initial_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '20.0', '22.0', '24.0', '26.0']}, {'column': 'final_temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['100.0', '95.0', '88.0', '85.0', '87.0']}, {'column': 'energy_consumption', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['0.8', '0.7', '0.9', '0.6', '0.5']}]}}\nA physical knowledge question is as follows:\nCalculate the thermal efficiency (actual energy consumption/theoretical energy consumption) of a rice cooker with model number 'RC-3003' heating 1.5 liters of water and 1.2 kilograms of rice from 25°C to 100°C under standard atmospheric pressure, given that the specific heat capacity of rice is 1.8 kJ/(kg·°C).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pt.energy_consumption / ((1.5 * 4.18 + 1.2 * 1.8) * 75) AS thermal_efficiency FROM performance_tests pt JOIN rice_cooker_info rci ON pt.rice_cooker_id = rci.id WHERE rci.model = 'RC-3003' AND pt.final_temperature = 100 LIMIT 1;",
        "db_id": "rice_cooker"
    },
    {
        "id": 265,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice quality ratings', 'brand', 'coefficient of variation', 'unstable models'], 'relations': ['rice_quality_to_brand (performance_tests.rice_quality_score → rice_cooker_info.brand)', 'coefficient_filter (CV > 0.25)'], 'intent': 'calculate_statistical_stability_of_rice_quality_by_brand', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.25], 'units': {'coefficient_of_variation': 'dimensionless (standard deviation/mean)', 'rice_quality_score': 'implied by database schema'}, 'foreign_keys': [{'fk_table': 'performance_tests', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'performance_tests', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'brand', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['BrandA', 'BrandB', 'BrandC', 'HighPowerBrand', 'UltraCook']}, {'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}], 'rice_cooker.performance_tests': [{'column': 'rice_quality_score', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['9.0', '8.0', '9.5', '7.5', '7.0']}]}}\nA mathematical logic question is as follows:\nCalculate the coefficient of variation (standard deviation/mean) of rice quality ratings for each brand of rice cooker, and filter out the unstable models with a coefficient of variation greater than 0.25.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rci.brand, rci.model, STDDEV(pt.rice_quality_score)/AVG(pt.rice_quality_score) AS cv FROM performance_tests pt JOIN rice_cooker_info rci ON pt.rice_cooker_id = rci.id GROUP BY rci.brand, rci.model HAVING cv > 0.25;",
        "db_id": "rice_cooker"
    },
    {
        "id": 266,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['rice cooker models', 'usage count >10', 'cleaning maintenance', 'past two years'], 'relations': ['rice_cooker_id_to_usage (rice_cooker_id → usage_records)', 'rice_cooker_id_to_maintenance (rice_cooker_id → maintenance_records)', 'rice_cooker_id_to_model (rice_cooker_id → rice_cooker_info.model)', 'time_range_filter (usage_records.start_time within 2 years)'], 'intent': 'identify_models_high_usage_no_cleaning', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10], 'units': {'time': 'years (2 years period)', 'count': 'frequency (usage count threshold)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}, {'fk_table': 'usage_records', 'fk_column': 'rice_cooker_id', 'ref_table': 'rice_cooker_info', 'ref_column': 'rice_cooker_id'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'id'}, {'pk_table': 'rice_cooker_info', 'pk_column': 'id'}, {'pk_table': 'usage_records', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.usage_records': [{'column': 'rice_cooker_id'}, {'column': 'start_time'}], 'rice_cooker.maintenance_records': [{'column': 'rice_cooker_id'}, {'column': 'maintenance_type'}], 'rice_cooker.rice_cooker_info': [{'column': 'model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['RC-1001', 'RC-2002', 'RC-3003', 'RC-High1', 'RC-High2']}]}}\nA common sense reasoning question is as follows:\nIdentify the models of rice cookers that have been used more than 10 times in the past two years but have never undergone cleaning maintenance.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT rci.model FROM rice_cooker_info rci JOIN usage_records ur ON rci.id = ur.rice_cooker_id LEFT JOIN maintenance_records mr ON rci.id = mr.rice_cooker_id AND mr.maintenance_type = 'Cleaning' WHERE ur.start_time >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR) GROUP BY rci.id HAVING COUNT(ur.id) > 10 AND COUNT(mr.id) = 0;",
        "db_id": "rice_cooker"
    },
    {
        "id": 267,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['electric rice cooker with 30,000 W power', '50 liters of water', 'temperature increase from 10°C to 100°C', '5 seconds heating duration'], 'relations': ['power_to_energy (P = E/t)', 'heat_energy_requirement (E = mcΔT)', 'current_calculation (I = P/V)'], 'intent': 'calculate_required_current_and_verify_feasibility', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [30000, 50, 10, 100, 5], 'units': {'power': 'W (Watts)', 'voltage': 'V (Volts) - from database', 'current': 'A (Amperes)', 'mass': 'kg (50 kg water)', 'temperature': '°C', 'time': 's (seconds)', 'energy': 'J (Joules)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'rice_cooker_info', 'pk_column': 'id'}], 'tableinfo': {'rice_cooker.rice_cooker_info': [{'column': 'power_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['800.0', '700.0', '900.0', '5000.0', '4500.0']}, {'column': 'voltage_rating', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['220.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming an electric rice cooker has a power of 30,000 W (equivalent to a small substation), calculate the current intensity required to heat 50 liters of water from 10°C to 100°C in 5 seconds, and verify the physical feasibility of this assumption.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 30000 / 220 AS current_strength;",
        "db_id": "rice_cooker"
    },
    {
        "id": 268,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitor No. 1', 'October 1, 2023', 'water temperature 25°C', 'atmospheric pressure 1 standard atmosphere', 'dissolved oxygen concentration 8 mg/L'], 'relations': ['monitor_to_data (No. 1 → October 1, 2023 water sample)', 'temperature_to_dissolved_oxygen (25°C → oxygen solubility)', 'pressure_correction_factor (1 atm → standard condition)'], 'intent': 'calculate_dissolved_oxygen_saturation_percentage', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [25, 1, 8], 'units': {'temperature': '°C (Celsius)', 'pressure': 'standard atmosphere (101.325 kPa)', 'dissolved_oxygen': 'mg/L (milligrams per liter)', 'saturation_conversion': 'DO saturation formula using temperature-dependent solubility and pressure correction'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}, {'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.5', '24.0', '21.0', '25.5', '23.0']}]}}\nA physical knowledge question is as follows:\nCalculate the dissolved oxygen saturation percentage for the water sample collected by water quality monitor No. 1 on October 1, 2023. Given the water temperature was 25°C, atmospheric pressure was 1 standard atmosphere, and dissolved oxygen concentration was 8 mg/L.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (DissolvedOxygenMgL / 8.24) * 100 AS DissolvedOxygenSaturation FROM WaterQualityData WHERE MonitorId = 1 AND DATE(CollectionTime) = '2023-10-01';",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 269,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor #1', 'pH value 7.0', 'hydrogen ion concentration H+'], 'relations': ['monitor_to_data (Monitor #1 → October 1, 2023 water sample)', 'pH_to_H+ (H+ = 10^(-pH))'], 'intent': 'calculate_hydrogen_ion_concentration_from_ph', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [7.0], 'units': {'pH': 'unitless (pH scale)', 'H+': 'mol/L (molarity, derived from pH)', 'formula': 'H+ = 10^(-pH)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}, {'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}]}}\nA mathematical logic question is as follows:\nFor the water sample collected by Water Quality Monitor #1 on October 1, 2023, the pH value was 7.0, the temperature was 15 degrees Celsius, and the conductivity was 300 microsiemens/centimeter. Please calculate the hydrogen ion concentration H+ of this water sample.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT PHValue, TemperatureCelsius, ConductivityUsCm, POWER(10, -PHValue) AS H_Concentration FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime = '2023-10-01 00:00:00' AND PHValue = 7.0 AND TemperatureCelsius = 15 AND ConductivityUsCm = 300;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 270,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water quality monitoring device No. 1', 'pH value 4.5', 'dissolved oxygen 2 mg/L', 'turbidity 50 NTU', 'fish survival standards'], 'relations': ['monitor_to_data (Water quality monitoring device No. 1 → WaterQualityData)', 'parameter_to_threshold (pH → WaterQualityWarningRule.pH_threshold)', 'parameter_to_threshold (dissolved oxygen → WaterQualityWarningRule.dissolved_oxygen_threshold)', 'parameter_to_threshold (turbidity → WaterQualityWarningRule.turbidity_threshold)'], 'intent': 'assess_water_quality_suitability_for_fish', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [4.5, 2, 50], 'units': {'pH': 'unitless', 'dissolved_oxygen': 'mg/L (milligrams per liter)', 'turbidity': 'NTU (nephelometric turbidity units)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}, {'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}, {'column': 'TurbidityNTU', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.3', '10.5', '3.2', '15.0', '8.0']}], 'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'WaterSourceType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['River', 'Lake', 'Groundwater']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}]}}\nA common sense reasoning question is as follows:\nWater quality monitoring device No. 1 installed in a river recorded a pH value of 4.5, dissolved oxygen of 2 mg/L, and turbidity of 50 NTU. Please determine whether the river's water quality is suitable for fish survival and explain the reasons.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN PHValue < 6.5 OR PHValue > 9.0 THEN '不适合鱼类生存' WHEN DissolvedOxygenMgL < 5 THEN '不适合鱼类生存' WHEN TurbidityNTU > 25 THEN '不适合鱼类生存' ELSE '适合鱼类生存' END AS WaterQualityStatus FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime = (SELECT MAX(CollectionTime) FROM WaterQualityData WHERE MonitorId = 1);",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 271,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\n    \"water quality monitor No. 1\",\n    \"water sample collected on 2023-10-01\",\n    \"pH value 15\",\n    \"dissolved oxygen 1000 mg/L\",\n    \"turbidity 10000 NTU\"\n  ],\n  \"relations\": [\n    \"monitor_to_data (monitor No.1 → WaterQualityData records)\",\n    \"sample_composition (pH/DO/turbidity → water sample chemical properties)\",\n    \"iap_to_saturation (IAP calculation → saturation determination)\"\n  ],\n  \"intent\": \"calculate_ion_activity_product_and_saturation\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [15, 1000, 10000],\n  \"units\": {\n    \"pH\": \"unitless (scale 0-14)\",\n    \"dissolved_oxygen\": \"mg/L\",\n    \"turbidity\": \"NTU\",\n    \"iap\": \"(mol/L)^n (requires ion concentration data)\",\n    \"saturation_threshold\": \"IAP/Ksp ratio ≥1\"\n  },\n  \"required_tables\": [\"WaterQualityData\"],\n  \"required_fields\": [\n    \"WaterQualityData.PHValue\",\n    \"WaterQualityData.DissolvedOxygenMgL\",\n    \"WaterQualityData.TurbidityNTU\"\n  ]\n}\n\n**Key Observations:**\n1. **Data Inconsistency**: pH=15 exceeds standard 0-14 scale (possible data entry error)\n2. **Missing Requirements**: IAP calculation requires specific ion concentrations (Ca²⁺, CO₃²⁻, etc.) not present in current schema\n3. **Schema Limitation**: WaterQualityData table lacks fields for:\n   - Major ion concentrations (e.g., Ca²⁺, Mg²⁺, HCO₃⁻, SO₄²⁻)\n   - Temperature (critical for ion activity coefficients)\n   - Ionic strength parameters\n4. **Saturation Determination**: Requires comparison of IAP with solubility product (Ksp), which isn't calculable with available data\n\n**Recommendation**: \nThe question cannot be fully answered with current database schema. Additional data fields or tables containing ion concentration measurements would be required to perform the IAP calculation and saturation analysis.\nA hypothetical reasoning question is as follows:\nAssume that water sample collected by water quality monitor No. 1 on October 1, 2023 has a pH value of 15, dissolved oxygen of 1000 mg/L, and turbidity of 10000 NTU. Please calculate the ion activity product (IAP) of this water sample and determine whether it has reached saturation status.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT WQD.Id, WQD.CollectionTime, WQD.PHValue, WQD.DissolvedOxygenMgL, WQD.TurbidityNTU, WQD.ConductivityUsCm, POWER(10, -WQD.PHValue) AS H_ion_concentration, POWER(10, -(14 - WQD.PHValue)) AS OH_ion_concentration, (POWER(10, -WQD.PHValue) * POWER(10, -(14 - WQD.PHValue)) * WQD.ConductivityUsCm) AS IAP FROM WaterQualityData WQD WHERE WQD.MonitorId = 1 AND WQD.CollectionTime = '2023-10-01' AND WQD.PHValue = 15 AND WQD.DissolvedOxygenMgL = 1000 AND WQD.TurbidityNTU = 10000;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 272,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'October 1, 2023', 'temperature 20°C', 'conductivity 400 µS/cm', 'Total Dissolved Solids (TDS)'], 'relations': ['monitor_to_data (MonitorId → WaterQualityData)', 'conductivity_to_tds (empirical correlation TDS ≈ k × Conductivity)'], 'intent': 'estimate_tds_from_conductivity', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [20, 400], 'units': {'temperature': '°C (Celsius)', 'conductivity': 'µS/cm (microsiemens per centimeter)', 'tds': 'mg/L (milligrams per liter)', 'conversion': 'TDS (mg/L) ≈ 0.64 × Conductivity (µS/cm) for natural waters'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}, {'column': 'ConductivityUsCm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['450.0', '500.0', '400.0', '600.0', '480.0']}, {'column': 'TotalDissolvedSolidsMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['300.0', '350.0', '280.0', '400.0', '320.0']}]}}\nA physical knowledge question is as follows:\nThe water sample collected by Water Quality Monitor No. 1 on October 1, 2023 had a temperature of 20 degrees Celsius and a conductivity of 400 microsiemens per centimeter. Please estimate the total dissolved solids (TDS) concentration of this water sample.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ConductivityUsCm * 0.64 AS EstimatedTDS FROM WaterQualityData WHERE MonitorId = 1 AND DATE(CollectionTime) = '2023-10-01';",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 273,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'October 1, 2023', 'pH value of 6.8'], 'relations': ['MonitorId_to_PHSample (Monitor No. 1 → PHValue=6.8)', 'CollectionTime_to_PHValue (2023-10-01 → PHValue=6.8)'], 'intent': 'calculate_H_plus_concentration', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [6.8], 'units': {'pH': 'unitless (pH scale)', 'H+ concentration': 'mol/L (moles per liter)', 'conversion_formula': '[H+] = 10^(-pH) mol/L'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}, {'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}]}}\nA mathematical logic question is as follows:\nOn October 1, 2023, water sample collected by Water Quality Monitor No. 1 had a pH value of 6.8. Please calculate the hydrogen ion concentration H+ of this water sample.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT PHValue, POWER(10, -PHValue) AS H_Concentration FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime = '2023-10-01 00:00:00' AND PHValue = 6.8;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 274,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water quality monitor No. 1', 'pH value 5.5', 'dissolved oxygen 4 mg/L', 'fish survival suitability'], 'relations': ['monitor_to_data (Monitor No. 1 → WaterQualityData record)', 'parameter_to_rule (pH/DissolvedOxygen → WaterQualityWarningRule thresholds)', 'value_comparison (5.5 vs fish survival pH criteria, 4 mg/L vs fish survival DO criteria)'], 'intent': 'assess_water_suitability_for_fish_survival', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [5.5, 4], 'units': {'pH': 'unitless (pH scale)', 'dissolved_oxygen': 'mg/L (milligrams per liter)', 'threshold_comparison': 'Comparing against typical fish survival thresholds (pH 6.5-8.5, DO >5 mg/L)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningTriggerRecord', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}, {'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}], 'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'WaterSourceType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['River', 'Lake', 'Groundwater']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}], 'WaterQualityMonitor.WaterQualityWarningTriggerRecord': [{'column': 'TriggerValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.75', '3.8', '55.0', '5.8', '12.5']}, {'column': 'TriggerUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}]}}\nA common sense reasoning question is as follows:\nWater quality monitor No. 1 detected a pH value of 5.5 and dissolved oxygen of 4 mg/L in a water sample. Please determine whether this water sample is suitable for fish survival and explain the reason.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN PHValue < 6.5 OR PHValue > 9.0 THEN '不适合鱼类生存' WHEN DissolvedOxygenMgL < 5 THEN '不适合鱼类生存' ELSE '适合鱼类生存' END AS WaterQualityStatus FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime = (SELECT MAX(CollectionTime) FROM WaterQualityData WHERE MonitorId = 1);",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 275,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'October 1, 2023', 'pH value 0', 'dissolved oxygen 2000 mg/L', 'turbidity 50,000 NTU'], 'relations': ['monitor_to_data (MonitorId → WaterQualityData)', 'parameter_to_threshold (PHValue,DissolvedOxygenMgL,TurbidityNTU → WaterQualityWarningRule.ThresholdValue)'], 'intent': 'evaluate_water_quality_compliance', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [0, 2000, 50000], 'units': {'pH': 'unitless scale 0-14', 'dissolved_oxygen': 'mg/L (milligrams per liter)', 'turbidity': 'NTU (Nephelometric Turbidity Units)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}, {'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}, {'column': 'TurbidityNTU', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.3', '10.5', '3.2', '15.0', '8.0']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the water sample collected by Water Quality Monitor No. 1 on October 1, 2023, has a pH value of 0, dissolved oxygen of 2000 mg/L, and turbidity of 50,000 NTU. Please determine whether this water sample complies with conventional water quality standards and explain the reason.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT WQD.Id, WQD.CollectionTime, WQD.PHValue, WQD.DissolvedOxygenMgL, WQD.TurbidityNTU, CASE WHEN WQD.PHValue = 0 OR WQD.DissolvedOxygenMgL = 2000 OR WQD.TurbidityNTU = 50000 THEN '不符合常规水质标准' ELSE '符合常规水质标准' END AS WaterQualityStatus FROM WaterQualityData WQD WHERE WQD.MonitorId = 1 AND WQD.CollectionTime = '2023-10-01';",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 276,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'October 1, 2023', '18 degrees Celsius (temperature)', '600 microsiemens per centimeter (conductivity)', '0.7 (TDS to conductivity ratio)'], 'relations': ['monitor_to_data (Monitor No. 1 → WaterQualityData)', 'conductivity_to_TDS (600 µS/cm × 0.7 → TDS)'], 'intent': 'calculate_total_dissolved_solids_concentration', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [600, 0.7], 'units': {'conductivity': 'µS/cm (microsiemens per centimeter)', 'TDS': 'mg/L (milligrams per liter)', 'conversion': 'TDS = Conductivity × Ratio (unitless)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}, {'column': 'ConductivityUsCm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['450.0', '500.0', '400.0', '600.0', '480.0']}]}}\nA physical knowledge question is as follows:\nIn water samples collected by Water Quality Monitor No. 1 on October 1, 2023, the temperature was 18 degrees Celsius and the conductivity was 600 microsiemens per centimeter. Given that the ratio coefficient of Total Dissolved Solids (TDS) to conductivity for this water sample is 0.7, please calculate the TDS concentration of the water sample.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ConductivityUsCm * 0.7 AS TDSConcentration FROM WaterQualityData WHERE MonitorId = 1 AND DATE(CollectionTime) = '2023-10-01';",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 277,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Detector No. 1', 'pH 6.2', 'temperature 20°C', 'conductivity 450 µS/cm', 'Na+ (1 mg/L, z=+1)', 'Cl- (1.5 mg/L, z=-1)', 'ionic strength formula'], 'relations': ['detector_to_sample (Water Quality Detector No. 1 → water sample on 2023-10-01)', 'parameter_to_ion (Na+/Cl- concentrations → ionic strength calculation)', 'formula_application (ionic strength formula → Σ(ci * zi²) calculation)'], 'intent': 'calculate_ionic_strength_and_evaluate', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [6.2, 20, 450, 1, 1.5, 1, -1], 'units': {'concentration': 'mg/L (Na+/Cl-)', 'charge': 'unitless (z=+1/z=-1)', 'ionic_strength': 'mol/L (assumed unit for ionic strength)', 'conductivity': 'µS/cm (microsiemens per centimeter)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}, {'column': 'ConductivityUsCm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['450.0', '500.0', '400.0', '600.0', '480.0']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA mathematical logic question is as follows:\nThe water sample collected by Water Quality Detector No. 1 on October 1, 2023, showed a pH of 6.2, a temperature of 20°C, and a conductivity of 450 µS/cm. Calculate the ionic strength (I) of this water sample and determine whether it belongs to a high ionic strength water body. The known ionic strength formula is I = 0.5 * Σ(ci * zi^2), where ci is the ion concentration and zi is the ion charge number. Assume the main ions are Na+ (1 mg/L, z=+1) and Cl- (1.5 mg/L, z=-1).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT PHValue, TemperatureCelsius, ConductivityUsCm, 0.5 * ((1 * POWER(1, 2)) + (1.5 * POWER(-1, 2))) AS IonStrength, CASE WHEN 0.5 * ((1 * POWER(1, 2)) + (1.5 * POWER(-1, 2))) > 0.1 THEN '高离子强度' ELSE '非高离子强度' END AS IonStrengthCategory FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime = '2023-10-01 00:00:00' AND PHValue = 6.2 AND TemperatureCelsius = 20 AND ConductivityUsCm = 450;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 278,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n```json\n{\n  \"entities\": [\"Water Quality Monitor No. 1\", \"pH value 3.8\", \"dissolved oxygen 1.5 mg/L\", \"turbidity 80 NTU\", \"drinking water source\"],\n  \"relations\": [\n    \"monitor_to_data (Monitor No.1 → WaterQualityData records)\",\n    \"parameter_to_standard (pH/DissolvedOxygen/Turbidity → WaterQualityWarningRule thresholds)\",\n    \"water_source_type (Monitor No.1 → WaterSourceType in WaterQualityMonitor)\"\n  ],\n  \"intent\": \"determine_water_suitability_for_drinking\",\n  \"reasoning_type\": \"common_sense_understanding_reasoning\",\n  \"numerical_values\": [3.8, 1.5, 80],\n  \"units\": {\n    \"pH\": \"unitless\",\n    \"dissolved_oxygen\": \"mg/L (milligrams per liter)\",\n    \"turbidity\": \"NTU (nephelometric turbidity units)\",\n    \"standards\": \"WHO/USEPA drinking water thresholds (implied by WaterQualityWarningRule)\"\n  },\n  \"required_tables\": [\n    \"WaterQualityData\",\n    \"WaterQualityMonitor\",\n    \"WaterQualityWarningRule\"\n  ],\n  \"required_fields\": [\n    \"WaterQualityData.PHValue\",\n    \"WaterQualityData.DissolvedOxygenMgL\",\n    \"WaterQualityData.TurbidityNTU\",\n    \"WaterQualityMonitor.WaterSourceType\",\n    \"WaterQualityWarningRule.ParameterType\",\n    \"WaterQualityWarningRule.ThresholdValue\",\n    \"WaterQualityWarningRule.ThresholdUnit\",\n    \"WaterQualityWarningRule.ConditionOperator\"\n  ]\n}\n```\nA common sense reasoning question is as follows:\nWater Quality Monitor No. 1 detected a water sample with a pH value of 3.8, dissolved oxygen of 1.5 mg/L, and turbidity of 80 NTU. Please determine whether this water sample is suitable as a drinking water source and explain the reason.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN PHValue < 6.5 OR PHValue > 8.5 THEN '不适合作为饮用水源' WHEN DissolvedOxygenMgL < 5 THEN '不适合作为饮用水源' WHEN TurbidityNTU > 5 THEN '不适合作为饮用水源' ELSE '适合作为饮用水源' END AS DrinkingWaterStatus FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime = (SELECT MAX(CollectionTime) FROM WaterQualityData WHERE MonitorId = 1);",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 279,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['pH -5', 'dissolved oxygen 50,000 mg/L', 'turbidity 1,000,000 NTU', 'temperature 200°C', 'conductivity 1,000,000 μS/cm'], 'relations': ['parameter_to_value (pH → -5)', 'parameter_to_value (dissolved_oxygen → 50,000 mg/L)', 'parameter_to_value (turbidity → 1,000,000 NTU)', 'parameter_to_value (temperature → 200°C)', 'parameter_to_value (conductivity → 1,000,000 μS/cm)'], 'intent': 'analyze_physical_chemical_characteristics_and_natural_plausibility', 'reasoning_type': 'physical knowledge reasoning + common sense understanding reasoning', 'numerical_values': [-5, 50000, 1000000, 200, 1000000], 'units': {'pH': 'unitless', 'dissolved_oxygen': 'mg/L', 'turbidity': 'NTU', 'temperature': '°C', 'conductivity': 'μS/cm'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}, {'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}, {'column': 'TurbidityNTU', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.3', '10.5', '3.2', '15.0', '8.0']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.5', '24.0', '21.0', '25.5', '23.0']}, {'column': 'ConductivityUsCm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['450.0', '500.0', '400.0', '600.0', '480.0']}], 'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'WaterSourceType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['River', 'Lake', 'Groundwater']}]}}\nA hypothetical reasoning question is as follows:\nAssuming that in the water sample collected by Water Quality Monitor No. 1 on October 1, 2023, the pH value is -5, dissolved oxygen is 50,000 mg/L, turbidity is 1,000,000 NTU, temperature is 200°C, and conductivity is 1,000,000 μS/cm. Please analyze the physical and chemical characteristics of this water sample and determine whether it is likely to exist in nature. If impossible, state the reasons; if possible, describe the potential environmental conditions for its existence.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT WQD.Id, WQD.CollectionTime, WQD.PHValue, WQD.DissolvedOxygenMgL, WQD.TurbidityNTU, WQD.TemperatureCelsius, WQD.ConductivityUsCm, CASE WHEN WQD.PHValue = -5 OR WQD.DissolvedOxygenMgL = 50000 OR WQD.TurbidityNTU = 1000000 OR WQD.TemperatureCelsius = 200 OR WQD.ConductivityUsCm = 1000000 THEN '不可能存在于自然界中' ELSE '可能存在于自然界中' END AS NaturalPossibility FROM WaterQualityData WQD WHERE WQD.MonitorId = 1 AND WQD.CollectionTime = '2023-10-01';",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 280,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water sample', 'Carbonate Alkalinity', 'Total Alkalinity', 'CO3^2- (100 mg/L)', 'HCO3^- (200 mg/L)'], 'relations': ['CO3^2-_to_Carbonate_Alkalinity (Alk_CO3 = 100*2=200 mg/L)', 'HCO3^-_to_Bicarbonate_Alkalinity (Alk_HCO3=200 mg/L)', 'Total_Alkalinity=Carbonate_Alkalinity + Bicarbonate_Alkalinity (400 mg/L)'], 'intent': 'calculate_carbonate_and_total_alkalinity', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100, 200, 2, 1], 'units': {'concentration': 'mg/L', 'alkalinity': 'mg/L (as CaCO3, implied by context)'}, 'foreign_keys': [], 'primary_keys': [], 'tableinfo': 'This sql query does not need table and columns information as it is about mathematical calculations.'}\nA physical knowledge question is as follows:\nThe water sample collected by Water Quality Detector No. 1 on October 1, 2023, had a temperature of 50°C, a conductivity of 5000 µS/cm, and a pH of 9.5. It is known that the sample contains high concentrations of carbonate (CO3^2-) and bicarbonate (HCO3^-). Please calculate the Carbonate Alkalinity and Total Alkalinity of the water sample. The formula for Carbonate Alkalinity is Alk_CO3 = CO3^2- * 2, the formula for Bicarbonate Alkalinity is Alk_HCO3 = HCO3^-, and the Total Alkalinity is the sum of the two. Assume CO3^2- = 100 mg/L and HCO3^- = 200 mg/L.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (100 * 2) AS Alk_CO3, 200 AS Alk_HCO3, (100 * 2 + 200) AS Total_Alkalinity FROM WaterQualityData WHERE MonitorId = 1 AND DATE(CollectionTime) = '2023-10-01';",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 281,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'pH value 8.0', 'temperature 30°C', 'conductivity 800 μS/cm', 'Na+ (50 mg/L, z=+1)', 'K+ (20 mg/L, z=+1)', 'Ca2+ (100 mg/L, z=+2)', 'Mg2+ (50 mg/L, z=+2)', 'Cl- (150 mg/L, z=-1)', 'SO4^2- (200 mg/L, z=-2)'], 'relations': ['monitor_to_sample (Monitor No.1 → sample data)', 'ion_concentration_to_charge (ions → z values)', 'physical_property_measurement (pH, temperature, conductivity measurements)'], 'intent': 'calculate_ionic_strength_and_classify', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [8.0, 30, 800, 50, 20, 100, 50, 150, 200, 1, 1, 2, 2, -1, -2], 'units': {'concentration': 'mg/L (ion mass concentration → needs conversion to mol/L)', 'charge': 'dimensionless (zi)', 'ionic_strength': 'mol/L (calculated unit)', 'conversion_factors': {'Na': 'molar mass = 22.99 g/mol', 'K': '39.10 g/mol', 'Ca': '40.08 g/mol', 'Mg': '24.31 g/mol', 'Cl': '35.45 g/mol', 'SO4': '96.06 g/mol'}}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Yangtze River, Wuhan', 'West Lake, Hangzhou', 'Yellow River, Lanzhou', 'Groundwater Station, Beijing', 'Taihu Lake, Wuxi']}], 'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}, {'column': 'ConductivityUsCm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['450.0', '500.0', '400.0', '600.0', '480.0']}]}}\nA mathematical logic question is as follows:\nSample collected by Water Quality Monitor No. 1 on October 1, 2023 showed a pH value of 8.0, temperature of 30°C, and conductivity of 800 μS/cm. The water sample is known to contain multiple ions, including Na+ (50 mg/L, z=+1), K+ (20 mg/L, z=+1), Ca2+ (100 mg/L, z=+2), Mg2+ (50 mg/L, z=+2), Cl- (150 mg/L, z=-1), and SO4^2- (200 mg/L, z=-2). Please calculate the ionic strength (I) of this water sample and determine whether it belongs to high ionic strength water. The ionic strength formula is given as I = 0.5 * Σ(ci * zi^2), where ci is the ion concentration (mol/L) and zi is the ion charge number.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT PHValue, TemperatureCelsius, ConductivityUsCm, 0.5 * ((50 * POWER(1, 2)) + (20 * POWER(1, 2)) + (100 * POWER(2, 2)) + (50 * POWER(2, 2)) + (150 * POWER(-1, 2)) + (200 * POWER(-2, 2))) AS IonStrength, CASE WHEN 0.5 * ((50 * POWER(1, 2)) + (20 * POWER(1, 2)) + (100 * POWER(2, 2)) + (50 * POWER(2, 2)) + (150 * POWER(-1, 2)) + (200 * POWER(-2, 2))) > 0.1 THEN '高离子强度' ELSE '非高离子强度' END AS IonStrengthCategory FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime = '2023-10-01 00:00:00' AND PHValue = 8.0 AND TemperatureCelsius = 30 AND ConductivityUsCm = 800;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 282,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'pH value 2.5', 'dissolved oxygen 0.5 mg/L', 'turbidity 500 NTU', 'temperature 80°C', 'industrial cooling water standards'], 'relations': ['monitor_to_data (Monitor No. 1 → pH, dissolved oxygen, turbidity, temperature)', 'parameter_to_threshold (pH → industrial cooling water standards)', 'parameter_to_threshold (dissolved oxygen → industrial cooling water standards)', 'parameter_to_threshold (turbidity → industrial cooling water standards)', 'parameter_to_threshold (temperature → industrial cooling water standards)'], 'intent': 'evaluate_water_suitability_for_cooling', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [2.5, 0.5, 500, 80], 'units': {'pH': 'unitless', 'dissolved oxygen': 'mg/L (milligrams per liter)', 'turbidity': 'NTU (nephelometric turbidity units)', 'temperature': '°C (Celsius)', 'threshold_comparisons': 'pH threshold, turbidity threshold, temperature threshold'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}, {'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}, {'column': 'TurbidityNTU', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.3', '10.5', '3.2', '15.0', '8.0']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.5', '24.0', '21.0', '25.5', '23.0']}], 'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'IsActive', 'type': 'TINYINT', 'primary_key': False, 'comment': '', 'examples': ['1']}]}}\nA common sense reasoning question is as follows:\nWater Quality Monitor No. 1 detected that a water sample has a pH value of 2.5, dissolved oxygen of 0.5 mg/L, turbidity of 500 NTU, and a temperature of 80°C. Please determine whether this water sample is suitable for use as industrial cooling water and explain the reasons.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN PHValue < 6.0 OR PHValue > 9.0 THEN '不适合作为工业冷却水' WHEN DissolvedOxygenMgL < 4 THEN '不适合作为工业冷却水' WHEN TurbidityNTU > 20 THEN '不适合作为工业冷却水' WHEN TemperatureCelsius > 40 THEN '不适合作为工业冷却水' ELSE '适合作为工业冷却水' END AS CoolingWaterStatus FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime = (SELECT MAX(CollectionTime) FROM WaterQualityData WHERE MonitorId = 1);",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 283,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'October 1, 2023', 'pH value of -10', 'dissolved oxygen of 100,000 milligrams per liter', 'turbidity of 10,000,000 NTU', 'temperature of 500 degrees Celsius', 'electrical conductivity of 10,000,000 microsiemens per centimeter'], 'relations': ['monitor_to_data (Water Quality Monitor No. 1 → WaterQualityData record)', 'parameter_to_extreme_value (pH -10, DO 100,000 mg/L, etc.)', 'value_to_natural_limits (comparison with physical/chemical boundaries)', 'temperature_to_phase_change (500°C → water phase instability)'], 'intent': 'environmental_plausibility_analysis', 'reasoning_type': 'physical knowledge reasoning + mathematical logic reasoning', 'numerical_values': [-10, 100000, 10000000, 500, 10000000], 'units': {'pH': 'unitless (extremely acidic)', 'dissolved_oxygen': 'mg/L (orders of magnitude above natural saturation)', 'turbidity': 'NTU (extremely high turbidity)', 'temperature': '°C (far exceeding liquid water stability)', 'conductivity': 'µS/cm (extremely high ionic concentration)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}, {'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}, {'column': 'TurbidityNTU', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.3', '10.5', '3.2', '15.0', '8.0']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.5', '24.0', '21.0', '25.5', '23.0']}, {'column': 'ConductivityUsCm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['450.0', '500.0', '400.0', '600.0', '480.0']}], 'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'WaterSourceType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['River', 'Lake', 'Groundwater']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}]}}\nA hypothetical reasoning question is as follows:\nAssuming that Water Quality Monitor No. 1 collected a water sample on October 1, 2023, with a pH value of -10, dissolved oxygen of 100,000 milligrams per liter, turbidity of 10,000,000 NTU, a temperature of 500 degrees Celsius, and electrical conductivity of 10,000,000 microsiemens per centimeter. Please analyze the physical and chemical characteristics of this water sample and determine whether it could exist in nature. If not, explain the reasons why; if possible, describe the environmental conditions under which it might occur.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT WQD.Id, WQD.CollectionTime, WQD.PHValue, WQD.DissolvedOxygenMgL, WQD.TurbidityNTU, WQD.TemperatureCelsius, WQD.ConductivityUsCm, CASE WHEN WQD.PHValue = -10 OR WQD.DissolvedOxygenMgL = 100000 OR WQD.TurbidityNTU = 10000000 OR WQD.TemperatureCelsius = 500 OR WQD.ConductivityUsCm = 10000000 THEN '不可能存在于自然界中' ELSE '可能存在于自然界中' END AS NaturalPossibility FROM WaterQualityData WQD WHERE WQD.MonitorId = 1 AND WQD.CollectionTime = '2023-10-01';",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 284,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitor number 1', 'dissolved oxygen concentration 8 mg/L', 'water temperature 25°C'], 'relations': ['monitor_to_data (number 1 → recorded oxygen/temperature)', \"temperature_to_solubility (Henry's Law relationship)\"], 'intent': 'determine_saturation_state_of_dissolved_oxygen', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [8, 25], 'units': {'dissolved_oxygen': 'mg/L (milligrams per liter)', 'temperature': '°C (Celsius)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.5', '24.0', '21.0', '25.5', '23.0']}], 'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}]}}\nA physical knowledge question is as follows:\nIf the dissolved oxygen concentration recorded by water quality monitor number 1 is 8 mg/L and the water temperature is 25 degrees Celsius, does the dissolved oxygen concentration in the water reach a saturated state according to Henry's Law?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN DissolvedOxygenMgL >= 8.24 THEN '已达到饱和状态' ELSE '未达到饱和状态' END AS SaturationStatus FROM WaterQualityData WHERE MonitorId = 1 AND TemperatureCelsius = 25 AND DissolvedOxygenMgL = 8;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 285,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'pH value', 'average pH 7.2', 'standard deviation 0.3', '95% confidence interval'], 'relations': ['monitor_to_data (Monitor No. 1 → WaterQualityData.PHValue)', 'statistical_calculation (mean ± z*(σ/√n))'], 'intent': 'calculate_confidence_interval_for_pH_data', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [7.2, 0.3, 288, 1.96], 'units': {'pH': 'pH units', 'confidence_interval': 'pH units', 'z_score': 'z = 1.96 for 95% confidence'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}], 'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}]}}\nA mathematical logic question is as follows:\nIf Water Quality Monitor No. 1 records pH values every 5 minutes over a 24-hour period, it will have recorded 288 data points in total. The average pH value is 7.2, with a standard deviation of 0.3. What is the 95% confidence interval for these data points?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(PHValue) - (1.96 * (STDDEV(PHValue) / SQRT(COUNT(PHValue)))) AS LowerBound, AVG(PHValue) + (1.96 * (STDDEV(PHValue) / SQRT(COUNT(PHValue)))) AS UpperBound FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 286,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water quality monitor No. 1', 'turbidity 50 NTU', 'direct drinking suitability'], 'relations': ['monitor_to_data (Water quality monitor No. 1 → WaterQualityData.TurbidityNTU=50 NTU)', 'turbidity_to_standard (50 NTU vs WHO/EPA drinking water standards)'], 'intent': 'assess_drinking_water_suitability', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [50], 'units': {'turbidity': 'NTU (Nephelometric Turbidity Units)', 'standard_threshold': 'WHO standard: <1 NTU (typically acceptable), >5 NTU generally unacceptable'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'TurbidityNTU', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.3', '10.5', '3.2', '15.0', '8.0']}], 'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'WaterSourceType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['River', 'Lake', 'Groundwater']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA common sense reasoning question is as follows:\nIf the turbidity recorded by the No. 1 water quality monitor is 50 NTU, then based on common knowledge, is this water quality suitable for direct drinking?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN TurbidityNTU < 5 THEN '适合直接饮用' ELSE '不适合直接饮用' END AS DrinkingSuitability FROM WaterQualityData WHERE MonitorId = 1 AND TurbidityNTU = 50;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 287,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitoring device 1', 'pH value 15', 'normal range 6.5-8.5', 'duration 24 hours', 'data interval 5 minutes', 'warning threshold pH > 8.5'], 'relations': ['monitor_to_data (device 1 → WaterQualityData)', 'threshold_condition (pH > 8.5)', 'time_interval (5-minute recordings)', 'persistence_duration (24-hour period)'], 'intent': 'calculate_alarm_triggers_count', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [15, 24, 5, 8.5], 'units': {'duration': 'hours', 'interval': 'minutes', 'conversion': '24 hours = 1440 minutes; 1440/5 = 288 intervals'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}, {'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA hypothetical reasoning question is as follows:\nSuppose the pH value recorded by water quality monitoring device 1 is 15, which is far beyond the normal range (6.5-8.5). If this value persists for 24 hours, how many times will the system trigger an alarm according to the water quality warning rules? Assume the warning rule threshold is pH > 8.5, and data is recorded every 5 minutes.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE MonitorId = 1 AND PHValue > 8.5 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 288,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitor No. 1', 'conductivity 2000 microsiemens per centimeter', 'water temperature 30 degrees Celsius', 'conversion factor 0.67'], 'relations': ['conductivity_to_tds (2000 µS/cm × 0.67)', 'monitor_to_data (monitor No. 1 → water quality data)'], 'intent': 'calculate_approximate_tds_from_conductivity', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [2000, 0.67, 30], 'units': {'conductivity': 'µS/cm (microsiemens per centimeter)', 'tds': 'mg/L (milligrams per liter, equivalent to ppm)', 'temperature': '°C (Celsius)', 'conversion_factor': 'unitless (0.67 mg/L per µS/cm)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'ConductivityUsCm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['450.0', '500.0', '400.0', '600.0', '480.0']}, {'column': 'TotalDissolvedSolidsMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['300.0', '350.0', '280.0', '400.0', '320.0']}]}}\nA physical knowledge question is as follows:\nIf the conductivity recorded by water quality monitor No. 1 is 2000 microsiemens per centimeter and the water temperature is 30 degrees Celsius, calculate the approximate concentration of total dissolved solids (TDS) in the water based on the relationship between conductivity and ion concentration. Assume the conversion factor between conductivity and TDS is 0.67.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ConductivityUsCm * 0.67 AS EstimatedTDSMgL FROM WaterQualityData WHERE MonitorId = 1 AND TemperatureCelsius = 30 AND ConductivityUsCm = 2000;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 289,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water quality monitor No. 1', 'dissolved oxygen concentration', 'normal distribution', 'average 6.5 mg/L', 'standard deviation 1.2 mg/L', 'threshold 4 mg/L', '7 days'], 'relations': ['monitor_to_data (Monitor No.1 → WaterQualityData.dissolved_oxygen)', 'statistical_distribution (normal distribution → z-score calculation)', 'threshold_comparison (4 mg/L < μ=6.5 mg/L)'], 'intent': 'calculate_percentage_below_threshold', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [6.5, 1.2, 4, 7, 1440], 'units': {'concentration': 'mg/L', 'time': 'days → minutes (1440 data points/day)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}]}}\nA mathematical logic question is as follows:\nWater quality monitor No. 1 recorded dissolved oxygen concentration data continuously for 7 days, with 1440 data points per day (one reading per minute). It is known that the overall average dissolved oxygen concentration is 6.5 mg/L, and the overall standard deviation is 1.2 mg/L. What percentage of the total data points in these 7 days had a dissolved oxygen concentration below 4 mg/L? (Assume the data follows a normal distribution.)\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (COUNT(CASE WHEN DissolvedOxygenMgL < 4 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageBelowThreshold FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 7 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 290,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No.1', 'ammonia nitrogen concentration 2.5 mg/L', 'nitrate nitrogen concentration 10 mg/L'], 'relations': ['monitor_to_data (Water Quality Monitor No.1 → WaterQualityData)', 'total_nitrogen_concentration (sum = 12.5 mg/L)'], 'intent': 'check_total_nitrogen_exceeds_drinking_water_standards', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [2.5, 10], 'units': {'concentration': 'mg/L (milligrams per liter)', 'threshold_comparison': 'sum = 12.5 mg/L (ammonia + nitrate)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'AmmoniaNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['0.15', '0.2', '0.1', '0.3', '0.18']}, {'column': 'NitrateNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1.2', '1.5', '1.0', '2.0', '1.3']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}]}}\nA common sense reasoning question is as follows:\nThe ammonia nitrogen concentration recorded by Water Quality Monitor No.1 was 2.5 mg/L, and the nitrate nitrogen concentration was 10 mg/L. Does the total concentration of ammonia nitrogen and nitrate nitrogen exceed the safe drinking water limits according to water quality standards? Please reason based on drinking water standards.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN AmmoniaNitrogenMgL > 0.5 OR NitrateNitrogenMgL > 50 THEN '超过安全限值' ELSE '未超过安全限值' END AS SafetyStatus FROM WaterQualityData WHERE MonitorId = 1 AND AmmoniaNitrogenMgL = 2.5 AND NitrateNitrogenMgL = 10;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 291,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'Turbidity 1000 NTU', 'Normal Turbidity Range 0-5 NTU', 'Turbidity Threshold 10 NTU', '24 hours', '1 second recording interval'], 'relations': ['monitor_to_data (Monitor No.1 → WaterQualityData)', 'turbidity_to_threshold (1000 NTU > 10 NTU)', 'time_interval_to_total (1 second × 86400 = 24 hours)'], 'intent': 'calculate_warning_trigger_count_over_time', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000, 10, 24, 1], 'units': {'turbidity': 'NTU (Nephelometric Turbidity Units)', 'time': 'seconds and hours', 'conversion': '24 hours = 86400 seconds, 1 warning/second'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningTriggerRecord', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}, {'column': 'TurbidityNTU', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.3', '10.5', '3.2', '15.0', '8.0']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}], 'WaterQualityMonitor.WaterQualityWarningTriggerRecord': [{'column': 'TriggerTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the turbidity recorded by Water Quality Monitor No. 1 is 1000 NTU, which is 200 times the normal value (the normal range is 0-5 NTU). If the turbidity threshold of the water quality warning system is 10 NTU, and data is recorded every second, how many times will the system trigger a warning in 24 hours? Assume the warning rule is turbidity > 10 NTU.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE MonitorId = 1 AND TurbidityNTU > 10 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 292,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitor 1', 'temperature 50°C', 'dissolved oxygen 2 mg/L'], 'relations': ['monitor_to_data (monitor 1 → WaterQualityData records)', 'temperature_to_saturated_oxygen (Weiss formula application)', 'oxygen_deficit (saturated_concentration - 2 mg/L)'], 'intent': 'calculate_oxygen_deficit_using_weiss_formula', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [50, 2], 'units': {'temperature': '°C (Celsius)', 'dissolved_oxygen': 'mg/L (milligrams per liter)', 'oxygen_deficit': 'mg/L (milligrams per liter)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.5', '24.0', '21.0', '25.5', '23.0']}, {'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}]}}\nA physical knowledge question is as follows:\nAssuming that the number 1 water quality monitor records a temperature of 50 degrees Celsius and a dissolved oxygen concentration of 2 mg/L. Given that the relationship between the saturated dissolved oxygen concentration of water and temperature follows the Weiss formula, calculate the current oxygen deficit of the water body (i.e., the difference between the saturated dissolved oxygen concentration and the actual dissolved oxygen concentration).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (EXP(7.7117 - 1.31403 * LN(TemperatureCelsius + 45.93)) - DissolvedOxygenMgL) AS OxygenDeficit FROM WaterQualityData WHERE MonitorId = 1 AND TemperatureCelsius = 50 AND DissolvedOxygenMgL = 2;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 293,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['pH values', 'No. 1 water quality monitor', '30-day period', '95% confidence interval'], 'relations': ['monitor_to_data (WaterQualityMonitor.Id → WaterQualityData.MonitorId)', 'statistical_distribution (normal distribution assumption)', 'time_range (30-day period → 43,200 data points)', 'value_range (6.0 to 8.0 pH)'], 'intent': 'statistical_analysis_of_water_quality_data', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [6.0, 7.0, 8.0, 0.5, 95], 'units': {'pH': 'unitless (pH scale)', 'confidence_interval': '% (percentage confidence)', 'standard_deviation': 'unitless (pH scale)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}]}}\nA mathematical logic question is as follows:\nThe No. 1 water quality monitor recorded pH values every minute over a continuous 30-day period, resulting in a total of 43,200 data points. Given that the overall mean pH value is 7.0 with a population standard deviation of 0.5, and assuming the pH data follows a normal distribution, calculate the percentage of data points where the pH value falls between 6.0 and 8.0. Furthermore, compute the 95% confidence interval for these data points.\nyour response just have a SQL without anything.\n",
        "solution": "WITH FilteredData AS (SELECT PHValue FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 30 DAY) AND NOW() AND PHValue BETWEEN 6.0 AND 8.0) SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 30 DAY) AND NOW())) AS PercentageInRange, AVG(PHValue) - (1.96 * (STDDEV(PHValue) / SQRT(COUNT(PHValue)))) AS LowerBound, AVG(PHValue) + (1.96 * (STDDEV(PHValue) / SQRT(COUNT(PHValue)))) AS UpperBound FROM FilteredData;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 294,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor #1', 'Total Dissolved Solids (TDS) 2000 mg/L', 'Electrical Conductivity 3000 microsiemens/cm', 'Conversion Factor 0.5-0.8'], 'relations': ['monitor_to_data (#1 → TDS/electrical conductivity readings)', 'TDS_to_conductivity (conversion factor range 0.5-0.8)'], 'intent': 'validate_TDS_reasonableness_via_conductivity', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [2000, 3000, 0.5, 0.8], 'units': {'TDS': 'mg/L', 'electrical_conductivity': 'microsiemens/cm (µS/cm)', 'conversion_factor': 'unitless ratio (mg/L per µS/cm)', 'validation': '2000 mg/L falls within [1500, 2400] mg/L (3000 µS/cm × [0.5, 0.8])'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'TotalDissolvedSolidsMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['300.0', '350.0', '280.0', '400.0', '320.0']}, {'column': 'ConductivityUsCm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['450.0', '500.0', '400.0', '600.0', '480.0']}], 'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Yangtze River, Wuhan', 'West Lake, Hangzhou', 'Yellow River, Lanzhou', 'Groundwater Station, Beijing', 'Taihu Lake, Wuxi']}]}}\nA common sense reasoning question is as follows:\nThe total dissolved solids (TDS) concentration recorded by Water Quality Monitor #1 is 2000 mg/L, and the electrical conductivity is 3000 microsiemens/cm. Given that the typical conversion factor between TDS and electrical conductivity ranges from 0.5 to 0.8, please infer whether the current TDS concentration of the water body is reasonable and explain the possible reasons.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN TotalDissolvedSolidsMgL BETWEEN ConductivityUsCm * 0.5 AND ConductivityUsCm * 0.8 THEN '合理' ELSE '不合理' END AS TDSReasonability FROM WaterQualityData WHERE MonitorId = 1 AND TotalDissolvedSolidsMgL = 2000 AND ConductivityUsCm = 3000;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 295,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor #1', 'pH value -3', 'pH threshold 6.5', 'pH threshold 8.5', '24 hours', '1 millisecond interval'], 'relations': ['monitor_to_data (Monitor #1 → WaterQualityData)', 'pH_out_of_range (-3 < 6.5 or -3 > 8.5)', 'data_collection_interval (1 millisecond)'], 'intent': 'calculate_warning_triggers_in_time_frame', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [-3, 6.5, 8.5, 24, 1], 'units': {'pH': 'unitless (pH scale)', 'time': '24 hours → 86,400,000 milliseconds (conversion formula: 24 * 60 * 60 * 1000)', 'interval': '1 millisecond (data collection frequency)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the pH value recorded by Water Quality Monitor #1 is -3, which is an extreme outlier (normal range is 6.5-8.5). If the pH threshold for the water quality warning system is pH < 6.5 or pH > 8.5, and data is recorded every millisecond, how many times will the system trigger warnings in 24 hours? The warning rule is pH < 6.5 or pH > 8.5.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE MonitorId = 1 AND (PHValue < 6.5 OR PHValue > 8.5) AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 296,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'temperature 80°C', 'dissolved oxygen concentration 1 mg/L', 'Benson-Krause modification formula'], 'relations': ['monitor_to_data (Monitor No. 1 → WaterQualityData)', 'temperature_to_saturation_DO (80°C → saturation oxygen concentration via Benson-Krause)', 'oxygen_deficit (saturation_DO - actual_DO)'], 'intent': 'calculate_oxygen_deficit_and_analyze_ecosystem_impacts', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [80, 1], 'units': {'temperature': '°C (Celsius)', 'dissolved_oxygen': 'mg/L (milligrams per liter)', 'deficit_unit': 'mg/L', 'formula_reference': 'Benson-Krause modification formula for oxygen solubility'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.5', '24.0', '21.0', '25.5', '23.0']}, {'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}]}}\nA physical knowledge question is as follows:\nAssume that the temperature recorded by Water Quality Monitor No. 1 is 80 degrees Celsius, with a dissolved oxygen concentration of 1 mg/L. Given that the relationship between the saturation concentration of dissolved oxygen in water and temperature follows the Benson-Krause modification formula, calculate the current oxygen deficit of the water body (i.e., the difference between the saturation dissolved oxygen concentration and the actual dissolved oxygen concentration), and analyze the potential impacts of such extreme high temperatures on the aquatic ecosystem.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (14.652 - 0.41022 * TemperatureCelsius + 0.007991 * POWER(TemperatureCelsius, 2) - 0.000077774 * POWER(TemperatureCelsius, 3)) - DissolvedOxygenMgL AS OxygenDeficit FROM WaterQualityData WHERE MonitorId = 1 AND TemperatureCelsius = 80 AND DissolvedOxygenMgL = 1;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 297,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'turbidity data', 'log-normal distribution', '50 NTU threshold', '99% confidence interval'], 'relations': ['monitor_to_data (MonitorId → WaterQualityData)', 'distribution_model (log-normal distribution parameters)', 'threshold_condition (TurbidityNTU > 50 NTU)'], 'intent': 'calculate_percentage_of_anomalous_turbidity_values_and_confidence_interval', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10, 5, 50, 99], 'units': {'turbidity': 'NTU (Nephelometric Turbidity Units)', 'confidence_level': '% (percentage)', 'distribution_parameters': 'mean=10 NTU, std_dev=5 NTU'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'TurbidityNTU', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.3', '10.5', '3.2', '15.0', '8.0']}], 'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Status', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['Running', 'Maintenance', 'Stopped']}]}}\nA mathematical logic question is as follows:\nWater Quality Monitor No. 1 recorded turbidity data every minute for 365 consecutive days, totaling 525,600 data points. The overall mean turbidity is known to be 10 NTU, with an overall standard deviation of 5 NTU. Assuming the turbidity data follows a log-normal distribution, calculate the percentage of data points where the turbidity value exceeds 50 NTU relative to the total data points, and further determine the 99% confidence interval for these anomalous data points.\nyour response just have a SQL without anything.\n",
        "solution": "WITH LogTransformedData AS (SELECT LN(TurbidityNTU) AS LogTurbidity FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 365 DAY) AND NOW()), FilteredData AS (SELECT TurbidityNTU FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 365 DAY) AND NOW() AND TurbidityNTU > 50) SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 365 DAY) AND NOW())) AS PercentageAboveThreshold, EXP(AVG(LogTurbidity) - (2.576 * (STDDEV(LogTurbidity) / SQRT(COUNT(LogTurbidity))))) AS LowerBound, EXP(AVG(LogTurbidity) + (2.576 * (STDDEV(LogTurbidity) / SQRT(COUNT(LogTurbidity))))) AS UpperBound FROM LogTransformedData;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 298,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'ammonia nitrogen 10 mg/L', 'nitrate nitrogen 100 mg/L'], 'relations': ['monitor_to_data (Monitor No.1 → WaterQualityData)', 'combined_concentration (Σ = 110 mg/L)', 'threshold_comparison (Σ vs. safety limit)'], 'intent': 'evaluate_water_quality_compliance_with_drinking_standards', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [10, 100], 'units': {'concentration': 'mg/L (milligrams per liter)', 'threshold_type': 'combined_nitrogen_limit (implied by context)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'AmmoniaNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['0.15', '0.2', '0.1', '0.3', '0.18']}, {'column': 'NitrateNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1.2', '1.5', '1.0', '2.0', '1.3']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA common sense reasoning question is as follows:\nThe ammonia nitrogen concentration recorded by Water Quality Monitor No. 1 was 10 mg/L, and the nitrate nitrogen concentration was 100 mg/L. According to water quality standards, does the combined concentration of ammonia nitrogen and nitrate nitrogen exceed the safety limit for drinking water? Please analyze this by referencing drinking water standards and the self-purification capacity of water bodies, and also discuss the potential sources of pollution at this contamination level.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN AmmoniaNitrogenMgL > 0.5 OR NitrateNitrogenMgL > 50 THEN '超过安全限值' ELSE '未超过安全限值' END AS SafetyStatus, '潜在污染来源可能包括农业 runoff、工业废水或生活污水。' AS PotentialSources FROM WaterQualityData WHERE MonitorId = 1 AND AmmoniaNitrogenMgL = 10 AND NitrateNitrogenMgL = 100;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 299,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitor No. 1', 'conductivity 1,000,000 μS/cm', 'normal range 50-1000 μS/cm', 'conductivity threshold 1000 μS/cm', '24 hours', 'microsecond interval'], 'relations': ['monitor_to_conductivity (monitor No. 1 → recorded → conductivity 1,000,000 μS/cm)', 'threshold_comparison (conductivity 1,000,000 μS/cm > threshold 1000 μS/cm)', 'time_interval_conversion (microseconds → 24 hours)'], 'intent': 'calculate_warning_trigger_frequency', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000000, 1000, 24, 1], 'units': {'conductivity': 'μS/cm (microsiemens per centimeter)', 'time': 'microseconds and hours', 'conversion': '1 hour = 3.6e+9 microseconds'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'WaterQualityMonitor.WaterQualityData': [{'column': 'ConductivityUsCm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['450.0', '500.0', '400.0', '600.0', '480.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA hypothetical reasoning question is as follows:\nAssuming that the conductivity recorded by water quality monitor No. 1 is 1,000,000 microsiemens per centimeter, which is 10,000 times the normal value (normal range is 50-1000 μS/cm). If the conductivity threshold of the water quality warning system is 1000 μS/cm and data is recorded every microsecond, how many times will the system trigger warnings in 24 hours? The warning rule is set as conductivity > 1000 μS/cm.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE MonitorId = 1 AND ConductivityUsCm > 1000 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 300,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitor No.1', 'temperature 35°C', 'actual dissolved oxygen 4 mg/L'], 'relations': ['monitor_to_data (No.1 → TemperatureCelsius/DissolvedOxygenMgL)', 'temperature_to_saturated_DO (via Weiss formula)', 'oxygen_deficit (saturated_DO - 4 mg/L)'], 'intent': 'calculate_oxygen_deficit_and_analyze_biological_impact', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [35, 4], 'units': {'temperature': '°C (Celsius)', 'dissolved_oxygen': 'mg/L (milligrams per liter)', 'conversion': 'Weiss formula for saturated DO calculation at 35°C'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.5', '24.0', '21.0', '25.5', '23.0']}, {'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}]}}\nA physical knowledge question is as follows:\nThe temperature recorded by water quality monitor No.1 is 35 degrees Celsius, with a dissolved oxygen concentration of 4 mg/L. Given that the relationship between the saturated dissolved oxygen concentration and temperature follows the Weiss formula, please calculate the current oxygen deficit of the water body (i.e., the difference between the saturated dissolved oxygen concentration and the actual dissolved oxygen concentration), and analyze the impact of this oxygen deficit on aquatic organisms.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (EXP(7.7117 - 1.31403 * LN(TemperatureCelsius + 45.93)) - DissolvedOxygenMgL) AS OxygenDeficit FROM WaterQualityData WHERE MonitorId = 1 AND TemperatureCelsius = 35 AND DissolvedOxygenMgL = 4;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 301,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['WaterQualityMonitor No. 1', 'pH data points (168 total)', 'mean pH 7.5', 'standard deviation 0.4', 'target range [7.0, 8.0]'], 'relations': ['monitor_to_data (WaterQualityMonitor.Id → WaterQualityData.MonitorId)', 'statistical_parameters_to_calculation (mean ± std_dev → range probability)'], 'intent': 'calculate_percentage_in_range_and_confidence_interval', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [7.0, 8.0, 7.5, 0.4, 90], 'units': {'pH': 'dimensionless unit', 'percentage': '% (probability)', 'confidence_interval': '% (90% confidence level)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}]}}\nA mathematical logic question is as follows:\nThe water quality monitor No. 1 recorded hourly pH data over 7 consecutive days, totaling 168 data points. The known overall mean pH value is 7.5, with an overall standard deviation of 0.4. Assuming the pH data follows a normal distribution, calculate the percentage of data points with pH values between 7.0 and 8.0 relative to the total data points, and further determine the 90% confidence interval for these data points.\nyour response just have a SQL without anything.\n",
        "solution": "WITH FilteredData AS (SELECT PHValue FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 7 DAY) AND NOW() AND PHValue BETWEEN 7.0 AND 8.0) SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 7 DAY) AND NOW())) AS PercentageInRange, AVG(PHValue) - (1.645 * (STDDEV(PHValue) / SQRT(COUNT(PHValue)))) AS LowerBound, AVG(PHValue) + (1.645 * (STDDEV(PHValue) / SQRT(COUNT(PHValue)))) AS UpperBound FROM FilteredData;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 302,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Total Dissolved Solids concentration 1500 mg/L', 'conductivity 2000 microsiemens/cm', 'conversion factor 0.5-0.8', 'Water Quality Monitor No. 1'], 'relations': ['tds_to_conductivity_conversion (conductivity × conversion factor → expected TDS range 1000-1600 mg/L)', 'monitor_data_association (Monitor No.1 → recorded measurements)'], 'intent': 'assess_reasonableness_of_tds_value', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1500, 2000, 0.5, 0.8], 'units': {'tds': 'mg/L (milligrams per liter)', 'conductivity': 'µS/cm (microsiemens per centimeter)', 'conversion_factor': 'unitless (mg/L per µS/cm)', 'expected_tds_range': '1000-1600 mg/L (calculated using 2000 µS/cm × 0.5/0.8)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'TotalDissolvedSolidsMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['300.0', '350.0', '280.0', '400.0', '320.0']}, {'column': 'ConductivityUsCm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['450.0', '500.0', '400.0', '600.0', '480.0']}], 'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'MonitorModel', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['WQM-100', 'WQM-200', 'WQM-150', 'WQM-300', 'WQM-250']}]}}\nA common sense reasoning question is as follows:\nThe total dissolved solids (TDS) concentration recorded by Water Quality Monitor No. 1 is 1500 mg/L, with a conductivity of 2000 microsiemens/cm. Given that the conversion factor between TDS and conductivity typically ranges from 0.5 to 0.8, please assess whether the current TDS concentration in the water body is reasonable and explain the possible reasons.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN TotalDissolvedSolidsMgL BETWEEN ConductivityUsCm * 0.5 AND ConductivityUsCm * 0.8 THEN '合理' ELSE '不合理' END AS TDSReasonability, CASE WHEN TotalDissolvedSolidsMgL NOT BETWEEN ConductivityUsCm * 0.5 AND ConductivityUsCm * 0.8 THEN '可能原因：水体中存在异常离子或测量误差。' ELSE '无异常' END AS ReasonExplanation FROM WaterQualityData WHERE MonitorId = 1 AND TotalDissolvedSolidsMgL = 1500 AND ConductivityUsCm = 2000;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 303,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['monitoring device #1', 'pH value 10.5', 'normal range 6.5-8.5', '24 hours', '1 minute interval'], 'relations': ['device_to_data (monitoring device #1 → WaterQualityData)', 'pH_to_threshold (pH 10.5 > 8.5 threshold)'], 'intent': 'calculate_number_of_warnings_in_24_hours', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10.5, 6.5, 8.5, 24, 1], 'units': {'pH': 'unitless (pH scale)', 'time_interval': 'minutes', 'duration': 'hours', 'conversion': '24 hours × 60 minutes/hour = 1440 minutes'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}, {'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the pH value recorded by monitoring device #1 is 10.5, which is a high outlier (normal range is 6.5-8.5). If the pH threshold for the water quality warning system is set to pH < 6.5 or pH > 8.5, and data is recorded every minute, how many warnings would the system trigger in 24 hours? The warning rule is pH < 6.5 or pH > 8.5.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE MonitorId = 1 AND (PHValue < 6.5 OR PHValue > 8.5) AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 304,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'Temperature 20°C', 'Dissolved Oxygen 6 mg/L'], 'relations': ['monitor_to_data (Monitor No.1 → WaterQualityData)', 'oxygen_deficit (Saturated_O2 - Actual_O2)'], 'intent': 'calculate_oxygen_deficit_using_weiss_formula', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [20, 6], 'units': {'temperature': '°C (Celsius)', 'dissolved_oxygen': 'mg/L (milligrams per liter)', 'oxygen_deficit': 'mg/L (milligrams per liter)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.5', '24.0', '21.0', '25.5', '23.0']}, {'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}]}}\nA physical knowledge question is as follows:\nTemperature recorded by Water Quality Monitor No. 1 is 20 degrees Celsius, with a dissolved oxygen concentration of 6 mg/L. Given that the relationship between water's saturated dissolved oxygen concentration and temperature follows the Weiss formula, please calculate the oxygen deficit of the current water body (i.e., the difference between the saturated dissolved oxygen concentration and the actual dissolved oxygen concentration).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (EXP(7.7117 - 1.31403 * LN(TemperatureCelsius + 45.93)) - DissolvedOxygenMgL) AS OxygenDeficit FROM WaterQualityData WHERE MonitorId = 1 AND TemperatureCelsius = 20 AND DissolvedOxygenMgL = 6;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 305,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['turbidity data', 'average turbidity 15 NTU', 'standard deviation 5 NTU', 'threshold turbidity 20 NTU', '72 data points'], 'relations': ['z_score = (20 - 15) / 5 = 1.0', 'normal_distribution_to_percentage (z-score → 15.87% probability above threshold)'], 'intent': 'calculate_percentage_of_turbidity_values_exceeding_threshold', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [15, 5, 20, 72], 'units': {'turbidity': 'NTU (Nephelometric Turbidity Units)', 'data_points': 'count', 'percentage': '% (relative proportion)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'TurbidityNTU', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.3', '10.5', '3.2', '15.0', '8.0']}]}}\nA mathematical logic question is as follows:\nThe No. 1 water quality monitor recorded turbidity data at hourly intervals over a continuous 3-day period, totaling 72 data points. The overall average turbidity is known to be 15 NTU, with a standard deviation of 5 NTU. Assuming the turbidity data follows a normal distribution, calculate the percentage of data points where the turbidity value exceeds 20 NTU relative to the total number of data points.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (COUNT(CASE WHEN TurbidityNTU > 20 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageAboveThreshold FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 3 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 306,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['No. 1 water quality monitor', 'turbidity data', 'threshold 20 NTU'], 'relations': ['monitor_to_data (MonitorId=1 → WaterQualityData)', 'statistical_inference (mean=15 NTU, std_dev=5 NTU → Z-score analysis)'], 'intent': 'calculate_percentage_of_turbidity_exceedance', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [15, 5, 20, 72], 'units': {'turbidity': 'NTU (Nephelometric Turbidity Units)', 'percentage': '% (calculated from Z-score distribution)', 'time': '72 data points over 3 days (hourly intervals)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'TurbidityNTU', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.3', '10.5', '3.2', '15.0', '8.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}]}}\nA common sense reasoning question is as follows:\nThe No. 1 water quality monitor recorded hourly turbidity data for 3 consecutive days, totaling 72 data points. The overall average turbidity is known to be 15 NTU, with an overall standard deviation of 5 NTU. Assuming the turbidity data follows a normal distribution, calculate the percentage of data points where the turbidity value exceeds 20 NTU.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ROUND((COUNT(CASE WHEN TurbidityNTU > 20 THEN 1 END) * 100.0 / COUNT(*)), 2) AS PercentageAboveThreshold FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 3 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 307,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['No.1 water quality monitor', 'pH value 9.5', 'pH threshold 8.5', '24-hour period', '10-minute interval'], 'relations': ['monitor_to_data (MonitorId → WaterQualityData.PHValue)', 'threshold_comparison (pH 9.5 > pH threshold 8.5)', 'time_interval_to_warning_count (10-minute intervals in 24 hours)'], 'intent': 'calculate_warning_triggers', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [9.5, 8.5, 24, 10, 144], 'units': {'pH': 'unitless (pH scale)', 'time': '10 minutes, 24 hours', 'calculation': '24 hours × 60 minutes/hour ÷ 10 minutes = 144 triggers'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}, {'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'IsActive', 'type': 'TINYINT', 'primary_key': False, 'comment': '', 'examples': ['1']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the pH value recorded by the No.1 water quality monitor is 9.5, which is a high outlier (normal range is 6.5-8.5). If the water quality warning system has a pH threshold of pH < 6.5 or pH > 8.5, and data is recorded every 10 minutes, how many times will the system trigger a warning within 24 hours? Assuming the warning rule is pH < 6.5 or pH > 8.5.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE MonitorId = 1 AND (PHValue < 6.5 OR PHValue > 8.5) AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 308,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water temperature 10°C', 'actual dissolved oxygen 9 mg/L', 'saturated dissolved oxygen (calculated via Weiss formula)'], 'relations': ['temperature_to_saturated_oxygen (10°C → saturated O₂ calculation)', 'oxygen_deficit (saturated O₂ - 9 mg/L)'], 'intent': 'calculate_oxygen_deficit_using_weiss_formula', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [10, 9], 'units': {'temperature': '°C (Celsius)', 'dissolved_oxygen': 'mg/L (milligrams per liter)', 'oxygen_deficit': 'mg/L (milligrams per liter)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.5', '24.0', '21.0', '25.5', '23.0']}, {'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}]}}\nA physical knowledge question is as follows:\n1 The water quality monitor recorded a temperature of 10 degrees Celsius and a dissolved oxygen concentration of 9 mg/L. Given that the relationship between the saturated dissolved oxygen concentration and temperature follows the Weiss formula, please calculate the oxygen deficit (i.e., the difference between the saturated dissolved oxygen concentration and the actual dissolved oxygen concentration) of the current water body.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (EXP(7.7117 - 1.31403 * LN(TemperatureCelsius + 45.93)) - DissolvedOxygenMgL) AS OxygenDeficit FROM WaterQualityData WHERE MonitorId = 1 AND TemperatureCelsius = 10 AND DissolvedOxygenMgL = 9;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 309,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['WaterQualityMonitor No.1', 'pH value', 'average pH 7.0', 'population standard deviation 0.2', 'pH range 6.8-7.2', '24 data points'], 'relations': ['monitor_to_data (WaterQualityMonitor.No.1 → WaterQualityData.PHValue)', 'statistical_parameters (mean 7.0, std 0.2)', 'range_definition (6.8-7.2)', 'total_data_points (24)'], 'intent': 'calculate_percentage_of_pH_in_range', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [7.0, 0.2, 6.8, 7.2, 24], 'units': {'pH': 'unitless (pH scale)', 'standard_deviation': 'pH units', 'data_points': 'count (unitless)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Yangtze River, Wuhan', 'West Lake, Hangzhou', 'Yellow River, Lanzhou', 'Groundwater Station, Beijing', 'Taihu Lake, Wuxi']}], 'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}]}}\nA mathematical logic question is as follows:\nWater quality monitor No. 1 recorded hourly pH data over a continuous 1-day period, totaling 24 data points. The overall average pH value is known to be 7.0, with a population standard deviation of 0.2. Assuming the pH data follows a normal distribution, calculate the percentage of data points where the pH value falls between 6.8 and 7.2, relative to the total number of data points.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (COUNT(CASE WHEN PHValue BETWEEN 6.8 AND 7.2 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageInRange FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 310,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'ammonia nitrogen concentration 0.3 mg/L', 'nitrate nitrogen concentration 10 mg/L'], 'relations': ['monitor_to_data (Monitor No. 1 → WaterQualityData)', 'sum_of_concentrations (total = 10.3 mg/L)'], 'intent': 'check_total_nitrogen_concentration_against_safety_limit', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [0.3, 10], 'units': {'concentration': 'mg/L (milligrams per liter)', 'total_concentration': '10.3 mg/L (calculated sum)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'AmmoniaNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['0.15', '0.2', '0.1', '0.3', '0.18']}, {'column': 'NitrateNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1.2', '1.5', '1.0', '2.0', '1.3']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}]}}\nA common sense reasoning question is as follows:\nThe ammonia nitrogen concentration recorded by Water Quality Monitor No. 1 is 0.3 mg/L, and the nitrate nitrogen concentration is 10 mg/L. Does the total concentration of ammonia nitrogen and nitrate nitrogen exceed the safety limit for drinking water according to water quality standards? Please reason based on drinking water standards.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN AmmoniaNitrogenMgL > 0.5 OR NitrateNitrogenMgL > 50 THEN '超过安全限值' ELSE '未超过安全限值' END AS SafetyStatus FROM WaterQualityData WHERE MonitorId = 1 AND AmmoniaNitrogenMgL = 0.3 AND NitrateNitrogenMgL = 10;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 311,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'pH value 8.2', 'normal range 6.5-8.5', 'pH threshold <6.5 or >8.5', '24 hours', 'hourly data recording'], 'relations': ['monitor_to_data (Monitor No.1 → WaterQualityData.PHValue)', 'threshold_comparison (8.2 vs 8.5)', 'time_interval (24 hours / 1 hour = 24 intervals)'], 'intent': 'calculate_warning_count_based_on_threshold', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [6.5, 8.5, 8.2, 24], 'units': {'pH': 'pH unit (dimensionless)', 'time': 'hours', 'threshold_comparison': 'boolean (true/false for warning trigger)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}, {'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the pH value recorded by the No. 1 water quality monitor is 8.2, which is a slightly high abnormal value (normal range is 6.5-8.5). If the pH threshold for the water quality warning system is pH < 6.5 or pH > 8.5, and data is recorded every hour, how many warnings will the system trigger in 24 hours? The warning rule is set as pH < 6.5 or pH > 8.5.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE MonitorId = 1 AND (PHValue < 6.5 OR PHValue > 8.5) AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 312,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitor No. 1', 'pH value 6.5', 'temperature 25°C', 'hydrogen ion concentration (H+)'], 'relations': ['monitor_to_data (monitor No.1 → WaterQualityData.PHValue)', 'pH_to_H+ (H+ = 10⁻⁶˙⁵ mol/L)', 'pH_range_analysis (6.5 < 7 → acidic)'], 'intent': 'calculate_hydrogen_ion_concentration_and_acid_base_analysis', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [6.5, 25], 'units': {'pH': 'unitless', 'H+ concentration': 'mol/L (calculated via [H+] = 10^-pH)', 'temperature': '°C (used for potential ion activity correction)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'MonitorModel', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['WQM-100', 'WQM-200', 'WQM-150', 'WQM-300', 'WQM-250']}], 'WaterQualityMonitor.WaterQualityData': [{'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.5', '24.0', '21.0', '25.5', '23.0']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA physical knowledge question is as follows:\nIf the pH value recorded by water quality monitor No. 1 is 6.5 and the temperature is 25 degrees Celsius, calculate the hydrogen ion concentration (H+) of the water body at this time and analyze its impact on the acidity and alkalinity of the water.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT POWER(10, -PHValue) AS HydrogenIonConcentration FROM WaterQualityData WHERE MonitorId = 1 AND TemperatureCelsius = 25 AND PHValue = 6.5;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 313,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['No. 1 water quality monitor', 'pH values between 6.5 and 7.5', '7-day period (168 data points)', 'mean pH 7.0', 'standard deviation 0.5'], 'relations': ['monitor_to_data (MonitorId → WaterQualityData)', 'pH_value_range (6.5–7.5)', 'distribution_parameters (mean=7.0, std=0.5)'], 'intent': 'calculate_percentage_of_pH_in_range', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [6.5, 7.5, 7.0, 0.5, 168], 'units': {'pH': 'unitless (pH scale)', 'standard_deviation': 'pH units', 'time_period': '7 days', 'data_points': '168 (count)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}]}}\nA mathematical logic question is as follows:\nThe No. 1 water quality monitor recorded hourly pH values over a continuous 7-day period, totaling 168 data points. The overall mean of the pH values is known to be 7.0, with an overall standard deviation of 0.5. Assuming the pH data follows a normal distribution, calculate the percentage of data points where the pH values fall between 6.5 and 7.5, relative to the total number of data points.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (COUNT(CASE WHEN PHValue BETWEEN 6.5 AND 7.5 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageInRange FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 7 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 314,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'pH value 8.5', 'drinking water standards'], 'relations': ['monitor_to_pH (Monitor No.1 → pH 8.5)', 'pH_to_standard (pH 8.5 → comparison with thresholds)'], 'intent': 'assess_water_suitability_for_consumption', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [8.5], 'units': {'pH': 'unitless (pH scale)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}], 'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'IsActive', 'type': 'TINYINT', 'primary_key': False, 'comment': '', 'examples': ['1']}]}}\nA common sense reasoning question is as follows:\nThe pH value recorded by Water Quality Monitor No. 1 is 8.5. According to drinking water standards, is this water quality suitable for direct consumption? Please provide reasoning based on drinking water standards.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN PHValue BETWEEN 6.5 AND 8.5 THEN '适合直接饮用，但接近碱性边缘，长期饮用需谨慎' ELSE '不适合直接饮用' END AS DrinkingSuitability FROM WaterQualityData WHERE MonitorId = 1 AND PHValue = 8.5;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 315,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitor No. 1', 'pH value 15', 'pH threshold < 6.5', 'pH threshold > 8.5', '24 hours'], 'relations': ['monitor_to_data_records (monitor No. 1 → WaterQualityData)', 'pH_to_threshold_comparision (15 > 8.5)', 'time_to_frequency (data recorded every second over 24 hours)'], 'intent': 'calculate_alert_trigger_frequency_in_24_hours', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [15, 6.5, 8.5, 24], 'units': {'pH': 'unitless (pH scale)', 'time': 'hours → seconds conversion (24 hours = 86400 seconds)', 'frequency': 'data recorded every second'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the pH value recorded by water quality monitor No. 1 is 15, which is an extreme outlier (normal range is 6.5-8.5). If the water quality early warning system has a pH threshold of pH < 6.5 or pH > 8.5, and data is recorded every second, how many times will the system trigger alerts in 24 hours? The alert rule is pH < 6.5 or pH > 8.5.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE MonitorId = 1 AND (PHValue < 6.5 OR PHValue > 8.5) AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 316,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitor No. 1', 'dissolved oxygen concentration 8 mg/L', 'water temperature 20°C'], 'relations': ['monitor_to_data (No. 1 → WaterQualityData)', \"temperature_to_henry_constant (20°C → Henry's Law coefficient)\", 'oxygen_deficit (saturated_DO - 8 mg/L)'], 'intent': 'calculate_saturated_dissolved_oxygen_and_deficit', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [8, 20], 'units': {'dissolved_oxygen': 'mg/L (milligrams per liter)', 'temperature': '°C (Celsius)', 'henry_constant': 'typically in mol/(L·atm) or mg/(L·kPa) (unit conversion required)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.5', '24.0', '21.0', '25.5', '23.0']}], 'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Yangtze River, Wuhan', 'West Lake, Hangzhou', 'Yellow River, Lanzhou', 'Groundwater Station, Beijing', 'Taihu Lake, Wuxi']}]}}\nA physical knowledge question is as follows:\nIf the dissolved oxygen concentration recorded by the No. 1 water quality monitor is 8 mg/L and the water temperature is 20 degrees Celsius, please calculate the saturated dissolved oxygen concentration of the water body at this time based on Henry's law, and analyze the oxygen deficit of the current water body (i.e., the difference between the saturated dissolved oxygen concentration and the actual dissolved oxygen concentration).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (14.652 - 0.41022 * TemperatureCelsius + 0.007991 * POWER(TemperatureCelsius, 2) - 0.000077774 * POWER(TemperatureCelsius, 3)) AS SaturatedOxygen, (14.652 - 0.41022 * TemperatureCelsius + 0.007991 * POWER(TemperatureCelsius, 2) - 0.000077774 * POWER(TemperatureCelsius, 3)) - DissolvedOxygenMgL AS OxygenDeficit FROM WaterQualityData WHERE MonitorId = 1 AND TemperatureCelsius = 20 AND DissolvedOxygenMgL = 8;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 317,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'dissolved oxygen concentration data', 'overall average dissolved oxygen concentration 6.5 mg/L', 'overall standard deviation 1.0 mg/L', 'threshold of 5 mg/L'], 'relations': ['monitor_to_data (Monitor No. 1 → dissolved oxygen concentration data)', 'statistical_analysis (mean, standard deviation, threshold → normal distribution calculation)'], 'intent': 'calculate_percentage_of_data_points_below_threshold', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [6.5, 1.0, 5], 'units': {'concentration': 'mg/L (milligrams per liter)', 'calculation': 'z-score = (5 - 6.5)/1.0 = -1.5 (standard normal distribution)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}]}}\nA mathematical logic question is as follows:\nWater quality monitor No. 1 recorded hourly dissolved oxygen concentration data for 30 consecutive days, totaling 720 data points. The overall average dissolved oxygen concentration is known to be 6.5 mg/L, with an overall standard deviation of 1.0 mg/L. Assuming the dissolved oxygen concentration data follow a normal distribution, please calculate the percentage of data points where the dissolved oxygen concentration is below 5 mg/L relative to the total number of data points.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (COUNT(CASE WHEN DissolvedOxygenMgL < 5 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageBelowThreshold FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 30 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 318,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No.1', 'Dissolved Oxygen Concentration 4 mg/L', 'Fish Survival Requirements'], 'relations': ['monitor_to_data (Monitor No.1 → DissolvedOxygenMgL=4 mg/L)', 'oxygen_to_standard (4 mg/L → fish survival threshold)'], 'intent': 'assess_water_suitability_for_fish_survival', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [4], 'units': {'dissolved_oxygen': 'mg/L (milligrams per liter)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}]}}\nA common sense reasoning question is as follows:\nThe dissolved oxygen concentration recorded by Water Quality Monitor No.1 is 4 mg/L. According to water quality standards, is this water suitable for fish survival? Please reason based on the dissolved oxygen requirements for fish survival.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN DissolvedOxygenMgL > 5 THEN '适合鱼类生存' ELSE '不适合鱼类生存，溶解氧浓度接近临界值' END AS FishSurvivalSuitability FROM WaterQualityData WHERE MonitorId = 1 AND DissolvedOxygenMgL = 4;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 319,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitor No. 1', 'dissolved oxygen concentration 0.1 mg/L', 'threshold dissolved oxygen < 5 mg/L', '24 hours'], 'relations': ['monitor_to_data (monitor No.1 → WaterQualityData records)', 'threshold_condition (dissolved oxygen < 5 mg/L)', 'time_duration (24 hours → 86400 seconds)'], 'intent': 'calculate_alert_trigger_count', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.1, 5, 24], 'units': {'dissolved_oxygen': 'mg/L', 'time': 'seconds (1 per second → 86400 total in 24h)', 'conversion': '24 hours = 86400 seconds'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the dissolved oxygen concentration recorded by water quality monitor No. 1 is 0.1 mg/L, which is an extreme outlier (the normal range being 5-10 mg/L). If the threshold for dissolved oxygen concentration in the water quality early warning system is set at dissolved oxygen < 5 mg/L, and data is recorded once per second, how many times would the system trigger an alert within 24 hours? The alert rule is set as dissolved oxygen < 5 mg/L.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE MonitorId = 1 AND DissolvedOxygenMgL < 5 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 320,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'turbidity 50 NTU', 'conversion factor 2.5', 'suspended particle concentration'], 'relations': ['monitor_to_data (Water Quality Monitor No. 1 → WaterQualityData)', 'turbidity_to_concentration (50 NTU × 2.5 = 125 mg/L)'], 'intent': 'calculate_suspended_particle_concentration', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50, 2.5], 'units': {'turbidity': 'NTU (Nephelometric Turbidity Units)', 'suspended_particle_concentration': 'mg/L (calculated unit)', 'conversion': '1 NTU = 2.5 mg/L suspended particles'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'TurbidityNTU', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.3', '10.5', '3.2', '15.0', '8.0']}]}}\nA physical knowledge question is as follows:\nIf the turbidity recorded by Water Quality Monitor No. 1 is 50 NTU and the water temperature is 15 degrees Celsius, please estimate the approximate concentration of suspended particles in the water based on the relationship between turbidity and suspended particle concentration. Assume the conversion factor between turbidity and suspended particle concentration is 2.5.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT TurbidityNTU * 2.5 AS SuspendedSolidsConcentration FROM WaterQualityData WHERE MonitorId = 1 AND TemperatureCelsius = 15 AND TurbidityNTU = 50;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 321,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water quality monitor No. 1', 'turbidity data', 'average turbidity 20 NTU', 'standard deviation 10 NTU', 'threshold 40 NTU', 'total data points 168'], 'relations': ['monitor_to_data (Water quality monitor No. 1 → TurbidityNTU)', 'threshold_comparison (40 NTU vs. normal distribution parameters)'], 'intent': 'calculate_percentage_above_threshold', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20, 10, 40, 168], 'units': {'turbidity': 'NTU (Nephelometric Turbidity Units)', 'threshold': 'NTU'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'TurbidityNTU', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.3', '10.5', '3.2', '15.0', '8.0']}]}}\nA mathematical logic question is as follows:\nThe No. 1 water quality monitor recorded hourly turbidity data for 7 consecutive days, totaling 168 data points. It is known that the overall average turbidity is 20 NTU, and the overall standard deviation is 10 NTU. Assuming the turbidity data follows a normal distribution, please calculate the percentage of data points where the turbidity value exceeds 40 NTU out of the total data points.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (COUNT(CASE WHEN TurbidityNTU > 40 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageAboveThreshold FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 7 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 322,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'turbidity 100 NTU', 'drinking water standards'], 'relations': ['monitor_to_turbidity_data (Monitor No. 1 → WaterQualityData.TurbidityNTU)', 'turbidity_to_standard (100 NTU → ThresholdValue in WaterQualityWarningRule)'], 'intent': 'assess_water_quality_compliance', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [100], 'units': {'turbidity': 'NTU (Nephelometric Turbidity Units)', 'threshold_unit': 'NTU (implied by database schema)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'TurbidityNTU', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.3', '10.5', '3.2', '15.0', '8.0']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}]}}\nA common sense reasoning question is as follows:\nThe turbidity recorded by Water Quality Monitor No. 1 is 100 NTU. According to drinking water standards, is this water quality suitable for direct consumption? Please reason based on the drinking water standards.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN TurbidityNTU < 5 THEN '适合直接饮用' ELSE '不适合直接饮用' END AS DrinkingSuitability FROM WaterQualityData WHERE MonitorId = 1 AND TurbidityNTU = 100;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 323,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitoring instrument No. 1', 'turbidity 10,000 NTU', 'turbidity threshold 10 NTU', '24 hours'], 'relations': ['instrument_to_data (MonitorId → WaterQualityData)', 'threshold_condition (TurbidityNTU > 10 NTU)', 'time_duration (24 hours → 86400 seconds)'], 'intent': 'calculate_number_of_warnings_triggered', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10000, 10, 24], 'units': {'turbidity': 'NTU (Nephelometric Turbidity Units)', 'time': 'seconds (24 hours = 86400 seconds)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}, {'column': 'TurbidityNTU', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.3', '10.5', '3.2', '15.0', '8.0']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the turbidity recorded by water quality monitoring instrument No. 1 is 10,000 NTU, which is an extreme outlier (normal range is 0-5 NTU). If the turbidity threshold of the water quality warning system is > 10 NTU, and data is recorded every second, how many warnings will the system trigger in 24 hours? Assume the warning rule is turbidity > 10 NTU.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE MonitorId = 1 AND TurbidityNTU > 10 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 324,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', '1 liter of water', 'initial temperature 20°C', 'final temperature 30°C', 'specific heat capacity 4.18 J/g·°C', 'density of water 1 g/mL'], 'relations': ['monitor_to_temperature (Monitor No. 1 → 30°C)', 'volume_to_mass_conversion (1 liter → 1000g via density)', 'heat_calculation (Q = mass × specific heat × ΔT)'], 'intent': 'calculate_heat_required_for_water_heating', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [30, 20, 1, 4.18, 1], 'units': {'temperature': '°C', 'volume': 'liter (convert to milliliters: 1000 mL)', 'mass': 'grams (1 g/mL × 1000 mL = 1000g)', 'specific_heat': 'J/g·°C', 'energy': 'Joules (J)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.5', '24.0', '21.0', '25.5', '23.0']}]}}\nA physical knowledge question is as follows:\nIf the temperature recorded by Water Quality Monitor No. 1 is 30 degrees Celsius, calculate the heat required to heat 1 liter of water from 20 degrees Celsius to 30 degrees Celsius based on the specific heat capacity of water. The known specific heat capacity of water is 4.18 J/g·°C, and the density of water is 1 g/mL.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1000 * 4.18 * (30 - 20) AS HeatRequired FROM WaterQualityData WHERE MonitorId = 1 AND TemperatureCelsius = 30;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 325,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitoring instrument No. 1', 'temperature data', 'normal distribution', 'mean temperature 25°C', 'standard deviation 5°C', 'threshold temperature 35°C', '120 data points'], 'relations': ['instrument_to_data (monitoring instrument → temperature data)', 'distribution_parameters (mean 25°C, standard deviation 5°C → normal distribution)', 'threshold_comparison (temperature > 35°C)'], 'intent': 'calculate_percentage_of_temperature_data_above_threshold', 'reasoning_type': 'mathematical logic reasoning (normal distribution Z-score calculation)', 'numerical_values': [25, 5, 35, 120], 'units': {'temperature': '°C (Celsius)', 'percentage': 'relative proportion (unitless)', 'standard_deviation': '°C (Celsius)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.5', '24.0', '21.0', '25.5', '23.0']}]}}\nA mathematical logic question is as follows:\nThe water quality monitoring instrument No. 1 recorded hourly temperature data over 5 consecutive days, totaling 120 data points. The known overall average temperature is 25 degrees Celsius, with an overall standard deviation of 5 degrees Celsius. Assuming the temperature data follows a normal distribution, calculate the percentage of data points where the temperature exceeds 35 degrees Celsius relative to the total number of data points.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (COUNT(CASE WHEN TemperatureCelsius > 35 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageAboveThreshold FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 5 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 326,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitor No. 1', 'temperature 35°C', 'fish survival standards'], 'relations': ['monitor_to_data (monitor No.1 → WaterQualityData.TemperatureCelsius)', 'temperature_to_threshold (35°C vs fish survival requirements)'], 'intent': 'assess_suitability_for_fish_survival', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [35], 'units': {'temperature': '°C (Celsius)', 'threshold_unit': '°C (from WaterQualityWarningRule.ThresholdUnit)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.5', '24.0', '21.0', '25.5', '23.0']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA common sense reasoning question is as follows:\nThe temperature recorded by water quality monitor No. 1 is 35 degrees Celsius. According to the water temperature standards for fish survival, is this temperature suitable for fish? Please reason based on the water temperature requirements for fish survival.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN TemperatureCelsius BETWEEN 15 AND 30 THEN '适合鱼类生存' ELSE '不适合鱼类生存，水温过高' END AS FishSurvivalSuitability FROM WaterQualityData WHERE MonitorId = 1 AND TemperatureCelsius = 35;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 327,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitor No. 1', 'temperature 100°C', 'temperature threshold 40°C', '24 hours'], 'relations': ['monitor_to_data (monitor No. 1 → WaterQualityData records)', 'threshold_condition (temperature > 40°C)', 'time_period (24 hours → 86400 seconds)'], 'intent': 'calculate_warning_trigger_count', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100, 40, 24], 'units': {'temperature': '°C (Celsius)', 'time': 'hours → seconds (1 hour = 3600 seconds)', 'conversion': '24 hours × 3600 seconds/hour = 86400 seconds'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}, {'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.5', '24.0', '21.0', '25.5', '23.0']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA hypothetical reasoning question is as follows:\nAssume that the temperature recorded by water quality monitor No. 1 is 100 degrees Celsius, which is an extreme outlier (normal range is 0-40 degrees Celsius). If the temperature threshold for the water quality warning system is temperature > 40 degrees Celsius, and data is recorded once per second, how many times will the system trigger warnings within 24 hours? The warning rule assumes temperature > 40 degrees Celsius.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE MonitorId = 1 AND TemperatureCelsius > 40 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 328,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitor No. 1', 'conductivity 500 microsiemens per centimeter', 'temperature 25 degrees Celsius', 'conversion factor 0.67'], 'relations': ['monitor_to_conductivity (monitor No. 1 → conductivity measurement)', 'conductivity_to_TDS (TDS = conductivity × 0.67)'], 'intent': 'calculate_TotalDissolvedSolids_from_conductivity', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [500, 0.67], 'units': {'conductivity': 'microsiemens per centimeter (µS/cm)', 'TDS': 'mg/L (equivalent to ppm)', 'conversion': 'TDS = Conductivity × 0.67 (mg/L per µS/cm)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'ConductivityUsCm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['450.0', '500.0', '400.0', '600.0', '480.0']}]}}\nA physical knowledge question is as follows:\nIf the conductivity recorded by water quality monitor No. 1 is 500 microsiemens per centimeter and the temperature is 25 degrees Celsius, please estimate the approximate concentration of Total Dissolved Solids (TDS) in the water based on the relationship between conductivity and ion concentration. Assume the conversion factor from conductivity to TDS is 0.67.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ConductivityUsCm * 0.67 AS EstimatedTDSMgL FROM WaterQualityData WHERE MonitorId = 1 AND TemperatureCelsius = 25 AND ConductivityUsCm = 500;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 329,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitor No. 1', 'conductivity data points (168 total)', 'mean conductivity 400 μS/cm', 'standard deviation 100 μS/cm', 'threshold conductivity 600 μS/cm'], 'relations': ['monitor_to_conductivity_data (monitor No. 1 → WaterQualityData table)', 'normal_distribution_parameters (mean=400 μS/cm, std=100 μS/cm)', 'threshold_comparison (600 μS/cm vs. normal distribution)'], 'intent': 'calculate_percentage_of_conductivity_exceeding_threshold', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [400, 100, 600, 168], 'units': {'conductivity': 'μS/cm (microsiemens per centimeter)', 'statistical_distribution': 'normal distribution', 'calculation': 'z-score = (600-400)/100 = 2 → cumulative probability P(Z>2) ≈ 2.28%'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'ConductivityUsCm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['450.0', '500.0', '400.0', '600.0', '480.0']}]}}\nA mathematical logic question is as follows:\nThe No. 1 water quality monitor recorded hourly conductivity data over 7 consecutive days, totaling 168 data points. The overall mean conductivity is known to be 400 μS/cm, with a standard deviation of 100 μS/cm. Assuming the conductivity data follows a normal distribution, calculate the percentage of data points where the conductivity value exceeds 600 μS/cm out of the total data points.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (COUNT(CASE WHEN ConductivityUsCm > 600 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageAboveThreshold FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 7 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 330,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'conductivity 1000 μS/cm', 'drinking water standards'], 'relations': ['monitor_to_data (Monitor No. 1 → WaterQualityData.ConductivityUsCm)', 'conductivity_to_standard (1000 μS/cm vs. standard threshold)'], 'intent': 'determine_water_suitability_for_consumption', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [1000, 'standard_threshold_value_from_database'], 'units': {'conductivity': 'μS/cm (matches database column ConductivityUsCm)', 'standard_threshold': 'μS/cm (from WaterQualityWarningRule.ThresholdUnit)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'ConductivityUsCm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['450.0', '500.0', '400.0', '600.0', '480.0']}, {'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'MonitorModel', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['WQM-100', 'WQM-200', 'WQM-150', 'WQM-300', 'WQM-250']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA common sense reasoning question is as follows:\nThe conductivity recorded by Water Quality Monitor No. 1 is 1000 μS/cm. According to drinking water standards, is this water quality suitable for direct consumption? Please reason based on drinking water standards.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN ConductivityUsCm BETWEEN 500 AND 1500 THEN '适合直接饮用，但需进一步检测溶解固体含量' ELSE '不适合直接饮用' END AS DrinkingSuitability FROM WaterQualityData WHERE MonitorId = 1 AND ConductivityUsCm = 1000;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 331,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitor #1', 'conductivity 1,000,000 μS/cm', 'conductivity threshold >1000 μS/cm', '24 hours'], 'relations': ['monitor_to_data (monitor #1 → WaterQualityData table)', 'threshold_exceeded (1,000,000 μS/cm > 1000 μS/cm)', 'time_to_data_points (24 hours × 1 data/s = 86,400 data points)'], 'intent': 'calculate_warning_triggers_in_24_hours', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000000, 1000, 24, 1], 'units': {'conductivity': 'μS/cm', 'time': 'hours → seconds (86,400 seconds)', 'data_frequency': '1 data/s', 'warnings': 'count (unitless)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'ConductivityUsCm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['450.0', '500.0', '400.0', '600.0', '480.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the conductivity recorded by water quality monitor #1 is 1,000,000 μS/cm, which is an extreme outlier (normal range is 50-1000 μS/cm). If the conductivity threshold for the water quality warning system is conductivity > 1000 μS/cm, and data is recorded once per second, how many warnings will the system trigger within 24 hours? The warning rule is assumed to be conductivity > 1000 μS/cm.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE MonitorId = 1 AND ConductivityUsCm > 1000 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 332,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitor No. 1', 'TDS concentration 500 mg/L', 'conductivity 750 microsiemens per centimeter', 'conversion factor 0.67'], 'relations': ['monitor_to_data (monitor No. 1 → WaterQualityData records)', 'TDS_to_conductivity (TDS = conductivity × conversion factor)'], 'intent': 'verify_reasonableness_of_TDS_value_based_on_conductivity', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [500, 750, 0.67], 'units': {'TDS': 'mg/L (milligrams per liter)', 'conductivity': 'µS/cm (microsiemens per centimeter)', 'conversion_factor': 'unitless (ratio)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'TotalDissolvedSolidsMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['300.0', '350.0', '280.0', '400.0', '320.0']}, {'column': 'ConductivityUsCm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['450.0', '500.0', '400.0', '600.0', '480.0']}]}}\nA physical knowledge question is as follows:\nIf the total dissolved solids (TDS) concentration recorded by water quality monitor No. 1 is 500 mg/L and the conductivity is 750 microsiemens per centimeter, please verify whether the current TDS concentration of the water is reasonable based on the relationship between TDS and conductivity. Assume the conversion factor between TDS and conductivity is 0.67.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN TotalDissolvedSolidsMgL = ConductivityUsCm * 0.67 THEN '合理' ELSE '不合理' END AS TDSValidation FROM WaterQualityData WHERE MonitorId = 1 AND TotalDissolvedSolidsMgL = 500 AND ConductivityUsCm = 750;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 333,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitor #1', 'total dissolved solids (TDS) 600 mg/L', 'mean TDS 400 mg/L', 'standard deviation 100 mg/L', '30-day period'], 'relations': ['monitor_to_data (monitor #1 → WaterQualityData)', 'statistical_distribution (normal distribution)', 'z_score (Z = (600-400)/100 = 2)'], 'intent': 'calculate_percentage_of_data_points_exceeding_threshold', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [400, 100, 600, 30], 'units': {'tds_concentration': 'mg/L', 'standard_deviation': 'mg/L', 'percentage': '% (unitless)', 'z_score': 'standard deviations (unitless)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'TotalDissolvedSolidsMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['300.0', '350.0', '280.0', '400.0', '320.0']}]}}\nA mathematical logic question is as follows:\nWater quality monitor #1 recorded daily total dissolved solids (TDS) concentration data over a continuous 30-day period, resulting in 30 data points. The overall mean TDS concentration is known to be 400 mg/L, with an overall standard deviation of 100 mg/L. Assuming the TDS concentration data follows a normal distribution, calculate the percentage of data points where the TDS concentration exceeds 600 mg/L relative to the total number of data points.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (COUNT(CASE WHEN TotalDissolvedSolidsMgL > 600 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageAboveThreshold FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 30 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 334,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitor No. 1', 'TDS concentration 1200 mg/L', 'drinking water standards'], 'relations': ['monitor_to_data (Monitor.Id → WaterQualityData.MonitorId)', 'tds_value_to_standard (1200 mg/L → regulatory_threshold)'], 'intent': 'assess_water_quality_compliance_for_consumption', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [1200], 'units': {'tds': 'mg/L (milligrams per liter)', 'threshold_unit': 'mg/L (from WaterQualityWarningRule.ThresholdUnit)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'TotalDissolvedSolidsMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['300.0', '350.0', '280.0', '400.0', '320.0']}], 'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Yangtze River, Wuhan', 'West Lake, Hangzhou', 'Yellow River, Lanzhou', 'Groundwater Station, Beijing', 'Taihu Lake, Wuxi']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}]}}\nA common sense reasoning question is as follows:\nThe total dissolved solids (TDS) concentration recorded by water quality monitor No. 1 is 1200 mg/L. According to drinking water standards, is this water quality suitable for direct consumption? Please provide reasoning based on drinking water standards.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN TotalDissolvedSolidsMgL BETWEEN 500 AND 1000 THEN '适合直接饮用' ELSE '不适合直接饮用，TDS浓度超出标准' END AS DrinkingSuitability FROM WaterQualityData WHERE MonitorId = 1 AND TotalDissolvedSolidsMgL = 1200;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 335,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Total Dissolved Solids (TDS) concentration 1,000,000 mg/L', 'TDS threshold 1000 mg/L', 'Water Quality Monitor #1', '24-hour period'], 'relations': ['monitor_to_tds_data (Monitor #1 → WaterQualityData.TotalDissolvedSolidsMgL)', 'threshold_condition (TDS > 1000 mg/L)', 'time_interval (data recorded every second)', 'daily_warning_count (24 hours × 3600 seconds/hour = 86,400 warnings)'], 'intent': 'calculate_daily_warning_count_based_on_measurement_frequency', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000000, 1000, 24], 'units': {'tds_concentration': 'mg/L (milligrams per liter)', 'threshold': 'mg/L (milligrams per liter)', 'time': 'hours and seconds (1 day = 86,400 seconds)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}, {'column': 'TotalDissolvedSolidsMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['300.0', '350.0', '280.0', '400.0', '320.0']}], 'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the total dissolved solids (TDS) concentration recorded by Water Quality Monitor #1 is 1,000,000 milligrams per liter, which is an extreme outlier (normal range is 0-1000 mg/L). If the TDS concentration threshold for the water quality warning system is TDS > 1000 mg/L, and data is recorded every second, how many warnings will the system trigger within 24 hours? The warning rule is set as TDS > 1000 mg/L.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE MonitorId = 1 AND TotalDissolvedSolidsMgL > 1000 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 336,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'Ammonia Nitrogen concentration 2 mg/L', 'Nitrate Nitrogen concentration 10 mg/L'], 'relations': ['monitor_to_data (Monitor No.1 → Ammonia Nitrogen)', 'monitor_to_data (Monitor No.1 → Nitrate Nitrogen)', 'ammonia_to_total_nitrogen (NH4+ → TN)', 'nitrate_to_total_nitrogen (NO3- → TN)'], 'intent': 'calculate_total_nitrogen_concentration', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2, 10], 'units': {'concentration': 'mg/L (milligrams per liter)', 'conversion': 'Total Nitrogen = Ammonia Nitrogen + Nitrate Nitrogen'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'AmmoniaNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['0.15', '0.2', '0.1', '0.3', '0.18']}, {'column': 'NitrateNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1.2', '1.5', '1.0', '2.0', '1.3']}]}}\nA physical knowledge question is as follows:\nIf the ammonia nitrogen concentration recorded by Water Quality Monitor No. 1 is 2 mg/L and the nitrate nitrogen concentration is 10 mg/L, please calculate the total nitrogen concentration in the water based on the chemical properties of ammonia nitrogen and nitrate nitrogen.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AmmoniaNitrogenMgL + NitrateNitrogenMgL AS TotalNitrogen FROM WaterQualityData WHERE MonitorId = 1 AND AmmoniaNitrogenMgL = 2 AND NitrateNitrogenMgL = 10;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 337,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['WaterQualityMonitor No. 1', 'ammonia nitrogen concentration (μ=1.5 mg/L, σ=0.5 mg/L)', 'nitrate nitrogen concentration (μ=8 mg/L, σ=2 mg/L)'], 'relations': ['monitor_to_data (WaterQualityMonitor No.1 → WaterQualityData)', 'normal_distribution (ammonia + nitrate → combined distribution)', 'threshold_comparison (total_N > 12 mg/L)'], 'intent': 'calculate_probability_of_exceeding_total_nitrogen_threshold', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1.5, 0.5, 8, 2, 12], 'units': {'concentration': 'mg/L', 'threshold': '12 mg/L (sum of ammonia + nitrate)', 'standard_deviation': 'mg/L (for normal distribution parameters)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'AmmoniaNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['0.15', '0.2', '0.1', '0.3', '0.18']}, {'column': 'NitrateNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1.2', '1.5', '1.0', '2.0', '1.3']}]}}\nA mathematical logic question is as follows:\nWater quality monitor No. 1 recorded daily ammonia nitrogen and nitrate nitrogen concentration data over 7 consecutive days, totaling 14 data points (one of each per day). The overall average ammonia nitrogen concentration is known to be 1.5 mg/L with an overall standard deviation of 0.5 mg/L, while the overall average nitrate nitrogen concentration is 8 mg/L with an overall standard deviation of 2 mg/L. Assuming both ammonia nitrogen and nitrate nitrogen concentration data follow a normal distribution, calculate the percentage of data points where the total nitrogen concentration exceeds 12 mg/L out of the total data points.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (COUNT(CASE WHEN (AmmoniaNitrogenMgL + NitrateNitrogenMgL) > 12 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageAboveThreshold FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 7 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 338,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'Ammonia nitrogen 0.8 mg/L', 'Nitrate nitrogen 20 mg/L', 'drinking water standards'], 'relations': ['monitor_to_data (Monitor No.1 → WaterQualityData)', 'parameter_to_standard (Ammonia/Nitrate → DrinkingWaterThreshold)'], 'intent': 'assess_water_suitability_for_consumption', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [0.8, 20], 'units': {'concentration': 'mg/L (milligrams per liter)', 'threshold': 'mg/L (implied by warning rule schema)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'AmmoniaNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['0.15', '0.2', '0.1', '0.3', '0.18']}, {'column': 'NitrateNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1.2', '1.5', '1.0', '2.0', '1.3']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}]}}\nA common sense reasoning question is as follows:\nWater Quality Monitor No. 1 recorded an ammonia nitrogen concentration of 0.8 mg/L and a nitrate nitrogen concentration of 20 mg/L. According to drinking water standards, is this water quality suitable for direct consumption? Please reason based on drinking water standards.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN AmmoniaNitrogenMgL > 0.5 OR NitrateNitrogenMgL > 50 THEN '超过安全限值' ELSE '未超过安全限值' END AS SafetyStatus FROM WaterQualityData WHERE MonitorId = 1 AND AmmoniaNitrogenMgL = 0.8 AND NitrateNitrogenMgL = 20;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 339,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Water Quality Monitor No. 1', 'ammonia nitrogen concentration 1000 mg/L', 'nitrate nitrogen concentration 5000 mg/L', 'ammonia nitrogen threshold >0.5 mg/L', 'nitrate nitrogen threshold >50 mg/L', '24 hours'], 'relations': ['monitor_to_data (Monitor No. 1 → WaterQualityData)', 'ammonia_exceeds_threshold (1000 mg/L > 0.5 mg/L)', 'nitrate_exceeds_threshold (5000 mg/L > 50 mg/L)', 'time_period_to_seconds (24h = 86400s)'], 'intent': 'calculate_number_of_warnings_triggered', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.5, 50, 24, 1000, 5000], 'units': {'concentration': 'mg/L (milligrams per liter)', 'threshold': 'mg/L (milligrams per liter)', 'time': 'seconds (24 hours = 86400 seconds)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'AmmoniaNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['0.15', '0.2', '0.1', '0.3', '0.18']}, {'column': 'NitrateNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1.2', '1.5', '1.0', '2.0', '1.3']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming that Water Quality Monitor No. 1 recorded an ammonia nitrogen concentration of 1000 mg/L and a nitrate nitrogen concentration of 5000 mg/L, which are extreme outliers (normal ranges are ammonia nitrogen < 0.5 mg/L and nitrate nitrogen < 50 mg/L). If the water quality warning system has an ammonia nitrogen threshold of > 0.5 mg/L and a nitrate nitrogen threshold of > 50 mg/L, and data is recorded every second, then in 24 hours, how many warnings will the system trigger? The warning rule is defined as ammonia nitrogen > 0.5 mg/L or nitrate nitrogen > 50 mg/L.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE MonitorId = 1 AND (AmmoniaNitrogenMgL > 0.5 OR NitrateNitrogenMgL > 50) AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 340,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality monitor No.1', 'pH value 6.5', 'ammonia nitrogen concentration 1.5 mg/L', 'nitrate nitrogen concentration 10 mg/L'], 'relations': ['monitor_to_data (monitor No.1 → WaterQualityData records)', 'pH_influence_on_NH3-N (pH 6.5 → ammonium ion NH4+ dominance)', 'pH_influence_on_NO3-N (pH 6.5 → nitrate stability)'], 'intent': 'chemical_equilibrium_analysis_of_nitrogen_forms', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [6.5, 1.5, 10], 'units': {'pH': 'dimensionless (pH scale)', 'concentration': 'mg/L (milligrams per liter)', 'chemical_species': 'NH4+ (ammonium), NO3- (nitrate)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}, {'column': 'AmmoniaNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['0.15', '0.2', '0.1', '0.3', '0.18']}, {'column': 'NitrateNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1.2', '1.5', '1.0', '2.0', '1.3']}], 'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'WaterSourceType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['River', 'Lake', 'Groundwater']}]}}\nA physical knowledge question is as follows:\nIf the water quality monitor No. 1 records a pH value of 6.5, an ammonia nitrogen concentration of 1.5 mg/L, and a nitrate nitrogen concentration of 10 mg/L, analyze the existing forms of ammonia nitrogen and nitrate nitrogen in the water body and their impact on water quality based on the influence of pH value on the chemical equilibrium of ammonia nitrogen and nitrate nitrogen.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN PHValue < 7 THEN '氨氮主要以NH4+形式存在' ELSE '氨氮主要以NH3形式存在' END AS AmmoniaForm, CASE WHEN NitrateNitrogenMgL > 5 THEN '硝酸盐氮浓度较高，可能对水体生态系统造成负面影响' ELSE '硝酸盐氮浓度正常' END AS NitrateImpact FROM WaterQualityData WHERE MonitorId = 1 AND PHValue = 6.5 AND AmmoniaNitrogenMgL = 1.5 AND NitrateNitrogenMgL = 10;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 341,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['WaterQualityMonitor No.1', 'pH value 6.5', 'ammonia nitrogen 1.5 mg/L', 'nitrate nitrogen 10 mg/L'], 'relations': ['monitor_to_data (WaterQualityMonitor No.1 → WaterQualityData)', 'parameter_to_threshold (pH → 6.5)', 'parameter_to_threshold (ammonia nitrogen → 1.5 mg/L)', 'parameter_to_threshold (nitrate nitrogen → 10 mg/L)', 'statistical_relationship (normal distribution)'], 'intent': 'calculate_probability_of_multiple_normal_distribution_conditions', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [6.5, 1.5, 10, 0.5, 0.3, 2, 7.0, 1.0, 8], 'units': {'pH': 'pH (unitless)', 'ammonia_nitrogen': 'mg/L', 'nitrate_nitrogen': 'mg/L', 'conversion': 'Z-score to probability conversion using standard normal distribution'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}, {'column': 'AmmoniaNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['0.15', '0.2', '0.1', '0.3', '0.18']}, {'column': 'NitrateNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1.2', '1.5', '1.0', '2.0', '1.3']}]}}\nA mathematical logic question is as follows:\nWater quality monitor No. 1 recorded daily pH values, ammonia nitrogen concentrations, and nitrate nitrogen concentrations over 7 consecutive days, totaling 21 data points (one for each parameter per day). The overall mean pH value is 7.0 with a population standard deviation of 0.5; the overall mean ammonia nitrogen concentration is 1.0 mg/L with a population standard deviation of 0.3 mg/L; and the overall mean nitrate nitrogen concentration is 8 mg/L with a population standard deviation of 2 mg/L. Assuming the pH values, ammonia nitrogen concentrations, and nitrate nitrogen concentrations all follow a normal distribution, calculate the percentage of data points where the pH value is below 6.5, the ammonia nitrogen concentration exceeds 1.5 mg/L, and the nitrate nitrogen concentration exceeds 10 mg/L out of the total data points.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (COUNT(CASE WHEN PHValue < 6.5 AND AmmoniaNitrogenMgL > 1.5 AND NitrateNitrogenMgL > 10 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageConditionMet FROM WaterQualityData WHERE MonitorId = 1 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 7 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 342,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['WaterQualityMonitor No. 1', 'pH value 8.5', 'ammonia nitrogen 0.8 mg/L', 'nitrate nitrogen 20 mg/L', 'drinking water standards'], 'relations': ['monitor_to_data (Monitor No. 1 → WaterQualityData records)', 'parameter_to_standard (pH, ammonia nitrogen, nitrate nitrogen → WaterQualityWarningRule thresholds)'], 'intent': 'assess_water_suitability_for_drinking', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [8.5, 0.8, 20], 'units': {'pH': 'unitless (pH scale)', 'ammonia_nitrogen': 'mg/L (milligrams per liter)', 'nitrate_nitrogen': 'mg/L (milligrams per liter)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}, {'column': 'AmmoniaNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['0.15', '0.2', '0.1', '0.3', '0.18']}, {'column': 'NitrateNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['1.2', '1.5', '1.0', '2.0', '1.3']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA common sense reasoning question is as follows:\nWater quality monitor No. 1 recorded a pH value of 8.5, ammonia nitrogen concentration of 0.8 mg/L, and nitrate nitrogen concentration of 20 mg/L. According to drinking water standards, is this water suitable for direct consumption? Please reason based on drinking water standards.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN PHValue BETWEEN 6.5 AND 8.5 AND AmmoniaNitrogenMgL <= 0.5 AND NitrateNitrogenMgL <= 50 THEN '适合直接饮用' ELSE '不适合直接饮用，需进一步检测' END AS DrinkingSuitability FROM WaterQualityData WHERE MonitorId = 1 AND PHValue = 8.5 AND AmmoniaNitrogenMgL = 0.8 AND NitrateNitrogenMgL = 20;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 343,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\n    \"water quality monitor No.1\",\n    \"pH value 15\",\n    \"ammonia nitrogen concentration 1000 mg/L\",\n    \"nitrate nitrogen concentration 5000 mg/L\",\n    \"warning thresholds: pH < 6.5 or > 8.5, ammonia nitrogen > 0.5 mg/L, nitrate nitrogen > 50 mg/L\",\n    \"24-hour period\",\n    \"data collection frequency: 1 Hz (once per second)\"\n  ],\n  \"relations\": [\n    \"monitor_to_data (MonitorId 1 → WaterQualityData records)\",\n    \"parameter_to_threshold (pH, ammonia, nitrate → corresponding warning thresholds)\",\n    \"violation_logic (OR-based condition triggers warnings)\",\n    \"time_interval_conversion (24 hours → 86,400 seconds)\"\n  ],\n  \"intent\": \"calculate_total_warnings_in_24_hours\",\n  \"reasoning_type\": \"mathematical logic reasoning\",\n  \"numerical_values\": [\n    15,  // pH\n    1000,  // ammonia nitrogen concentration\n    5000,  // nitrate nitrogen concentration\n    6.5, 0.5, 50,  // thresholds\n    24,  // hours\n    86400  // seconds per day\n  ],\n  \"units\": {\n    \"threshold_units\": [\"unitless (pH)\", \"mg/L (ammonia, nitrate)\"],\n    \"time_conversion\": \"24 hours × 3600 seconds/hour = 86400 seconds\",\n    \"calculation\": \"3 violations per second (pH > 8.5, ammonia > 0.5 mg/L, nitrate > 50 mg/L)\"\n  },\n  \"required_tables\": [\n    \"WaterQualityData\",\n    \"WaterQualityWarningRule\"\n  ],\n  \"required_fields\": [\n    \"WaterQualityData.MonitorId\",\n    \"WaterQualityData.PHValue\",\n    \"WaterQualityData.AmmoniaNitrogenMgL\",\n    \"WaterQualityData.NitrateNitrogenMgL\",\n    \"WaterQualityWarningRule.ParameterType\",\n    \"WaterQualityWarningRule.ThresholdValue\",\n    \"WaterQualityWarningRule.ConditionOperator\"\n  ]\n}\nA hypothetical reasoning question is as follows:\nAssume that water quality monitor No. 1 records a pH value of 15, an ammonia nitrogen concentration of 1000 mg/L, and a nitrate nitrogen concentration of 5000 mg/L, which are extreme outliers (normal ranges are pH 6.5-8.5, ammonia nitrogen < 0.5 mg/L, nitrate nitrogen < 50 mg/L). If the water quality warning system has thresholds of pH < 6.5 or pH > 8.5 for pH, ammonia nitrogen > 0.5 mg/L for ammonia nitrogen, and nitrate nitrogen > 50 mg/L for nitrate nitrogen, and records data once per second, how many warnings will the system trigger in 24 hours? Assume the warning rule is pH < 6.5 or pH > 8.5 or ammonia nitrogen > 0.5 mg/L or nitrate nitrogen > 50 mg/L.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE MonitorId = 1 AND (PHValue < 6.5 OR PHValue > 8.5 OR AmmoniaNitrogenMgL > 0.5 OR NitrateNitrogenMgL > 50) AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 344,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['pH parameter', 'threshold 8.5', \"conditional operator '>'\", 'hydrogen ion concentration', 'water quality impact'], 'relations': ['rule_to_threshold (WaterQualityWarningRule.ParameterType → ThresholdValue)', 'pH_to_hydrogen_concentration (pH = -log[H+])', 'exceedance_condition (PHValue > 8.5)', 'water_quality_impact (alkalinity → aquatic ecosystem effects)'], 'intent': 'analyze_hydrogen_ion_concentration_change_and_water_quality_impact', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [8.5], 'units': {'pH': 'pH unit (dimensionless)', 'hydrogen_concentration': 'mol/L (moles per liter)', 'conversion': '[H+] = 10^(-pH), Δ[H+] = 10^(-8.5) → 3.16×10⁻⁹ mol/L'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}], 'WaterQualityMonitor.WaterQualityData': [{'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}]}}\nA physical knowledge question is as follows:\nIf there is a rule in the water quality warning rules table with the parameter type as pH, a threshold of 8.5, and the conditional operator as '>', please analyze the change in hydrogen ion concentration in the water body and its impact on water quality when the pH value in the water quality monitoring data exceeds 8.5, based on the physical significance of the pH value.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT POWER(10, -PHValue) AS HydrogenIonConcentration, CASE WHEN PHValue > 8.5 THEN '水体呈强碱性，可能影响水生生物生存和水质安全' ELSE '水体pH值正常' END AS WaterQualityImpact FROM WaterQualityData WHERE PHValue > 8.5;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 345,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['WaterQualityWarningRule', 'SeverityLevel', 'mean severity 5.5', 'standard deviation 2.87', 'threshold severity 8'], 'relations': ['severity_distribution_parameters (mean=5.5, std=2.87)', 'threshold_comparator (8 > mean)', 'normal_distribution_assumption'], 'intent': 'calculate_percentage_of_rules_above_severity_threshold', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5.5, 2.87, 8], 'units': {'severity_level': '1-10 scale (discrete values)', 'calculation_unit': 'Z-score (standard normal distribution)', 'percentage': 'percentile from Z-table'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['8', '7', '9', '6']}]}}\nA mathematical logic question is as follows:\nIn the water quality warning rule table, there are 10 rules, with the severity level (SeverityLevel) of each rule ranging from 1 to 10. The overall mean severity is known to be 5.5, with an overall standard deviation of 2.87. Assuming the severity data follows a normal distribution, calculate the percentage of rules with severity levels exceeding 8 out of the total number of rules.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (COUNT(CASE WHEN SeverityLevel > 8 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageAboveThreshold FROM WaterQualityWarningRule;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 346,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['dissolved oxygen', 'threshold 5 mg/L', \"condition operator '<'\"], 'relations': ['parameter_to_threshold (dissolved_oxygen → 5 mg/L)', \"threshold_to_condition (5 mg/L → '<')\"], 'intent': 'explain_rationale_for_water_quality_warning_rule', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [5], 'units': {'threshold_unit': 'mg/L (milligrams per liter)', 'parameter_type': 'dissolved oxygen concentration'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'RuleDescription', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['Triggered when pH exceeds 8.5. Indicates potential alkalinity issues.', 'Triggered when dissolved oxygen drops below 4 mg/L. Indicates poor water quality.', 'Triggered when turbidity exceeds 50 NTU. Indicates potential contamination.', 'Triggered when pH drops below 6.0. Indicates potential acidity issues.', 'Triggered when nitrate levels exceed 10 mg/L. Indicates potential pollution.']}]}}\nA common sense reasoning question is as follows:\nIn the water quality early warning rules table, there is a rule with the parameter type as dissolved oxygen, a threshold of 5 mg/L, and the condition operator as '<'. According to water quality standards, what is the rationale for setting this rule? Please reason based on the impact of dissolved oxygen on aquatic organisms.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RuleName, ParameterType, ThresholdValue, ConditionOperator, RuleDescription FROM WaterQualityWarningRule WHERE ParameterType = '溶解氧' AND ThresholdValue = 5 AND ConditionOperator = '<';",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 347,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['WaterQualityWarningRule with turbidity > 1000 NTU', 'WaterQualityData with TurbidityNTU=1000 NTU', '24-hour monitoring duration', 'Data collection interval of 1 second'], 'relations': [\"rule_to_condition (ParameterType=TurbidityNTU → ConditionOperator=')\", 'data_to_threshold_comparison (TurbidityNTU=ThresholdValue=1000 NTU)', 'time_interval_to_alert_count (frequency=1 second → total_records=86400)'], 'intent': 'calculate_alerts_triggered_for_boundary_value', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000, 24, 1], 'units': {'threshold': 'NTU (Nephelometric Turbidity Units)', 'time': 'hours and seconds (24 hours = 86400 seconds)', 'conversion': '1 hour = 3600 seconds'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}], 'WaterQualityMonitor.WaterQualityData': [{'column': 'MonitorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}, {'column': 'TurbidityNTU', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.3', '10.5', '3.2', '15.0', '8.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming there is a rule in the water quality alert rules table with a parameter type of turbidity, a threshold of 1000 NTU, and a condition operator of '>', which represents an extreme outlier (the normal range is 0-5 NTU). If water quality monitoring records data every second, and the turbidity value remains at 1000 NTU for 24 hours, how many alerts will the system trigger? Assume the alert rule is turbidity > 1000 NTU.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE TurbidityNTU > 1000 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 348,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['conductivity', 'threshold 1000 µS/cm', 'ion concentration', 'water quality'], 'relations': ['parameter_type_to_threshold (conductivity → 1000 µS/cm)', 'conductivity_to_ion_concentration (direct correlation)', 'exceeding_threshold_to_water_quality_impact (conductivity > 1000 µS/cm → ion concentration ↑ → water quality degradation)'], 'intent': 'analyze_ion_concentration_impact_on_water_quality', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1000], 'units': {'conductivity': 'µS/cm (microsiemens per centimeter)', 'ion_concentration': 'mg/L (milligrams per liter, inferred via TotalDissolvedSolidsMgL)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityMonitor', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}], 'WaterQualityMonitor.WaterQualityData': [{'column': 'ConductivityUsCm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['450.0', '500.0', '400.0', '600.0', '480.0']}, {'column': 'TotalDissolvedSolidsMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['300.0', '350.0', '280.0', '400.0', '320.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}], 'WaterQualityMonitor.WaterQualityMonitor': [{'column': 'InstallationLocation', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Yangtze River, Wuhan', 'West Lake, Hangzhou', 'Yellow River, Lanzhou', 'Groundwater Station, Beijing', 'Taihu Lake, Wuxi']}]}}\nA physical knowledge question is as follows:\nIf there is a rule in the water quality early warning rule table where the parameter type is conductivity, the threshold is 1000 microsiemens per centimeter, and the condition operator is '>', analyze the changes in ion concentration in the water body and its impact on water quality when the conductivity in the water quality monitoring data exceeds 1000 microsiemens per centimeter, based on the physical meaning of conductivity.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN ConductivityUsCm > 1000 THEN '电导率过高，表明水体中离子浓度较高，可能影响水质和生态系统' ELSE '电导率正常' END AS ConductivityImpact FROM WaterQualityData WHERE ConductivityUsCm > 1000;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 349,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['trigger records', 'severity level 8', 'average severity 7.71', 'standard deviation 1.11'], 'relations': ['severity_distribution (normal distribution assumption)', 'z_score_calculation (threshold vs average/SD)', 'exceedance_percentage (severity > 8)'], 'intent': 'calculate_percentage_of_severity_exceedance_using_normal_distribution', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [7.71, 1.11, 8], 'units': {'severity_level': 'unitless (SeverityLevel field)', 'standard_deviation': 'unitless (same unit as severity)', 'z_score': 'standard_normal'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityWarningTriggerRecord', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningTriggerRecord': [{'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['8', '7', '9', '6', '5']}]}}\nA mathematical logic question is as follows:\nIn the water quality warning rules table, there are 7 trigger records, with severity levels (SeverityLevel) of 8, 7, 9, 7, 8, 9, and 6 for each record respectively. The overall average severity is known to be 7.71, with an overall standard deviation of 1.11. Assuming the severity data follows a normal distribution, calculate the percentage of trigger records with severity levels exceeding 8 out of the total number of trigger records.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (COUNT(CASE WHEN SeverityLevel > 8 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageAboveThreshold FROM WaterQualityWarningTriggerRecord;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 350,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['ammonia nitrogen', 'trigger value 0.60 mg/L', 'severity level 9', 'water quality standards', 'aquatic organisms'], 'relations': ['trigger_record_to_rule (WaterQualityWarningTriggerRecord → WaterQualityWarningRule)', 'parameter_to_standard (ammonia nitrogen → water quality standards)', 'severity_impact (severity level 9 → ecological risk for aquatic organisms)'], 'intent': 'analyze_scientific_basis_of_ammonia_nitrogen_threshold', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [0.6, 9], 'units': {'concentration': 'mg/L (milligrams per liter)', 'severity': 'unitless scale (1-10)', 'ecotoxicity': 'LC50/NOEC thresholds (mg/L) for aquatic species'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningTriggerRecord', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningTriggerRecord': [{'column': 'ParameterType'}, {'column': 'TriggerValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.75', '3.8', '55.0', '5.8', '12.5']}, {'column': 'TriggerUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['8', '7', '9', '6', '5']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['8', '7', '9', '6']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA common sense reasoning question is as follows:\nThere is a triggered record in the water quality early warning rule table with the parameter type being ammonia nitrogen, a trigger value of 0.60 mg/L, and a severity level of 9. Based on water quality standards, what is the rationale behind this triggered record? Please analyze it by considering the impact of ammonia nitrogen on aquatic organisms.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT TriggerValue, SeverityLevel, ActionTaken, TriggerDescription FROM WaterQualityWarningTriggerRecord WHERE TriggerValue = 0.60 AND SeverityLevel = 9;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 351,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['turbidity parameter', 'trigger value 1000 NTU', '24-hour period', 'alert rule turbidity > 1000 NTU'], 'relations': ['parameter_to_threshold (turbidity → 1000 NTU)', 'time_interval_to_frequency (24 hours → 86,400 seconds)'], 'intent': 'calculate_alerts_triggered_by_turbidity', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000, 24], 'units': {'turbidity': 'NTU (Nephelometric Turbidity Units)', 'time': 'seconds (derived from 24-hour interval)', 'alerts': 'count (unitless)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningTriggerRecord', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'TurbidityNTU', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.3', '10.5', '3.2', '15.0', '8.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}], 'WaterQualityMonitor.WaterQualityWarningTriggerRecord': [{'column': 'TriggerValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.75', '3.8', '55.0', '5.8', '12.5']}, {'column': 'TriggerTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}]}}\nA hypothetical reasoning question is as follows:\nAssuming there is a triggered record in the water quality alert rules table, the parameter type is turbidity, the trigger value is 1000 NTU, and the severity is 10, which is an extreme outlier (normal range is 0-5 NTU). If water quality monitoring data is recorded every second, and the turbidity value remains at 1000 NTU consistently over 24 hours, how many alerts will the system trigger? Assume the alert rule is for turbidity > 1000 NTU.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE TurbidityNTU > 1000 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 352,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['pH parameter', 'threshold value 8.5', 'carbonate buffer system', 'water quality stability'], 'relations': ['pH_threshold_relation (pH → threshold value 8.5)', 'buffer_system_impact (carbonate buffer system → water quality stability)'], 'intent': 'analyze_chemical_impact_of_pH_exceeding_threshold', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [8.5], 'units': {'pH': 'unitless (pH scale)', 'threshold_comparison': \"ConditionOperator '>' applied to pH value\"}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}], 'WaterQualityMonitor.WaterQualityData': [{'column': 'PHValue', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['7.2', '6.8', '7.5', '6.9', '7.1']}]}}\nA physical knowledge question is as follows:\nIf there is a rule in the water quality early warning rules table where the parameter type is pH, the threshold is 8.5, and the conditional operator is '>', please analyze the changes in the carbonate buffer system in the water body and its impact on water quality stability when the pH value in the water quality monitoring data exceeds 8.5, based on the physical meaning of pH and the concept of buffer capacity.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN PHValue > 8.5 THEN '碳酸盐缓冲系统可能失效，导致水体pH值波动加剧，影响水质稳定性' ELSE '碳酸盐缓冲系统正常，水质稳定' END AS BufferSystemImpact FROM WaterQualityData WHERE PHValue > 8.5;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 353,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality warning rules table', 'severity level 8', 'normal distribution', 'mean severity 5.5', 'standard deviation 2.87', '95% confidence interval'], 'relations': ['severity_statistical_analysis (SeverityLevel → mean/standard deviation)', 'threshold_comparison (SeverityLevel > 8)', 'confidence_interval_calculation (z-score method)'], 'intent': 'calculate_percent_exceeding_threshold_and_confidence_interval', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100, 5.5, 2.87, 8, 95], 'units': {'severity_level': 'unitless (1-10)', 'percentage': '% (calculated from counts)', 'confidence_interval': '% (probability coverage)', 'standard_deviation': 'unitless', 'z_score': 'standard normal distribution value'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['8', '7', '9', '6']}]}}\nA mathematical logic question is as follows:\nThere are 100 rules in the water quality warning rules table, each with a severity level (SeverityLevel) ranging from 1 to 10. The overall average severity is known to be 5.5, with an overall standard deviation of 2.87. Assuming the severity data follows a normal distribution, calculate the percentage of rules with a severity level exceeding 8 out of the total number of rules, and further compute the 95% confidence interval for these rules.\nyour response just have a SQL without anything.\n",
        "solution": "WITH FilteredData AS (SELECT SeverityLevel FROM WaterQualityWarningRule WHERE SeverityLevel > 8) SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM WaterQualityWarningRule)) AS PercentageAboveThreshold, AVG(SeverityLevel) - (1.96 * (STDDEV(SeverityLevel) / SQRT(COUNT(SeverityLevel)))) AS LowerBound, AVG(SeverityLevel) + (1.96 * (STDDEV(SeverityLevel) / SQRT(COUNT(SeverityLevel)))) AS UpperBound FROM FilteredData;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 354,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['dissolved oxygen', 'threshold 5 mg/L', 'aquatic organisms', 'self-purification capacity'], 'relations': ['dissolved_oxygen_to_ecological_impact (dissolved oxygen → aquatic organism health)', 'dissolved_oxygen_to_self_purification (dissolved oxygen → water body purification capacity)', 'threshold_to_rule (5 mg/L → WaterQualityWarningRule parameter)'], 'intent': 'understand_rationale_dissolved_oxygen_rule', 'reasoning_type': 'common sense understanding reasoning + physical knowledge reasoning', 'numerical_values': [5], 'units': {'threshold': 'mg/L (milligrams per liter)', 'conversion': 'dissolved oxygen critical value for aquatic life survival'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'RuleDescription', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['Triggered when pH exceeds 8.5. Indicates potential alkalinity issues.', 'Triggered when dissolved oxygen drops below 4 mg/L. Indicates poor water quality.', 'Triggered when turbidity exceeds 50 NTU. Indicates potential contamination.', 'Triggered when pH drops below 6.0. Indicates potential acidity issues.', 'Triggered when nitrate levels exceed 10 mg/L. Indicates potential pollution.']}], 'WaterQualityMonitor.WaterQualityData': [{'column': 'DissolvedOxygenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '7.8', '9.0', '6.5', '8.0']}]}}\nA common sense reasoning question is as follows:\nIn the water quality early warning rules table, there is a rule with the parameter type as dissolved oxygen, a threshold of 5 mg/L, and the condition operator as '<'. Based on water quality standards and ecological principles, what is the rationale behind the setting of this rule? Please analyze by considering the impact of dissolved oxygen on aquatic organisms and the self-purification capacity of water bodies.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RuleName, ParameterType, ThresholdValue, ConditionOperator, RuleDescription FROM WaterQualityWarningRule WHERE ParameterType = '溶解氧' AND ThresholdValue = 5 AND ConditionOperator = '<';",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 355,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['turbidity', '1000 NTU', '24 hours', 'millisecond', 'turbidity > 1000 NTU warning rule'], 'relations': ['turbidity_to_threshold (turbidity value = threshold value)', 'time_unit_conversion (hours → milliseconds)', 'warning_rule_condition (turbidity > 1000 NTU)'], 'intent': 'calculate_warning_trigger_frequency', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000, 24, 1], 'units': {'threshold': 'NTU (Nephelometric Turbidity Units)', 'time_conversion': '1 hour = 3,600,000 milliseconds (24 hours = 86,400,000 milliseconds)', 'interval': '1 millisecond'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'TurbidityNTU', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.3', '10.5', '3.2', '15.0', '8.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}]}}\nA hypothetical reasoning question is as follows:\nAssuming there is a rule in the water quality warning rules table with a parameter type of turbidity, a threshold of 1000 NTU, and a condition operator of '>', which represents an extreme outlier (the normal range is 0-5 NTU). If water quality monitoring data is recorded every millisecond and the turbidity value remains at 1000 NTU for 24 hours, how many times will the system trigger a warning? Assume the warning rule is set as turbidity > 1000 NTU.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE TurbidityNTU > 1000 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 356,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['conductivity threshold rule', 'conductivity value 1000 µS/cm', 'ion concentration', 'water quality impact'], 'relations': ['rule_parameter_type (conductivity threshold rule → conductivity)', \"threshold_condition (conductivity threshold rule → 'conductivity > 1000 µS/cm')\", 'conductivity_ion_correlation (conductivity → ion concentration)', 'water_quality_impact (ion concentration → water quality degradation)'], 'intent': 'analyze_ion_concentration_impact_on_water_quality', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1000], 'units': {'conductivity': 'µS/cm (microsiemens per centimeter)', 'ion_concentration': 'mg/L (milligrams per liter) or mmol/L (millimoles per liter)', 'conversion': 'conductivity (µS/cm) ≈ 0.64 × TDS (mg/L) (approximate empirical correlation)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}], 'WaterQualityMonitor.WaterQualityData': [{'column': 'ConductivityUsCm', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['450.0', '500.0', '400.0', '600.0', '480.0']}, {'column': 'TotalDissolvedSolidsMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['300.0', '350.0', '280.0', '400.0', '320.0']}]}}\nA physical knowledge question is as follows:\nIf there is a rule in the water quality early warning rules table where the parameter type is conductivity, the threshold is 1000 microsiemens per centimeter, and the condition operator is '>', analyze the changes in ion concentration in the water body and its impact on water quality when the conductivity in water quality monitoring data exceeds 1000 microsiemens per centimeter, based on the physical meaning of conductivity.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN ConductivityUsCm > 1000 THEN '电导率过高，表明水体中离子浓度较高，可能影响水质的化学平衡和生态系统的健康' ELSE '电导率正常' END AS ConductivityImpact FROM WaterQualityData WHERE ConductivityUsCm > 1000;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 357,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['WaterQualityWarningRule table', 'severity level range 4-7', 'normal distribution (mean=5.5, std_dev=2.87)'], 'relations': ['rule_to_severity (WaterQualityWarningRule → SeverityLevel)', 'distribution_parameters (mean=5.5, std_dev=2.87)', 'range_boundaries (4,7)'], 'intent': 'calculate_percentage_of_severity_in_range', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [4, 5.5, 7, 2.87], 'units': {'severity_level': 'unitless (scale 1-10)', 'distribution_parameters': 'mean (5.5), standard deviation (2.87)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['8', '7', '9', '6']}]}}\nA mathematical logic question is as follows:\nThere are 10 rules in the water quality warning rules table, with the severity level (SeverityLevel) of each rule ranging from 1 to 10. The overall average severity is known to be 5.5, with an overall standard deviation of 2.87. Assuming the severity data follows a normal distribution, calculate the percentage of rules with severity levels between 4 and 7 out of the total number of rules.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (COUNT(CASE WHEN SeverityLevel BETWEEN 4 AND 7 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageInRange FROM WaterQualityWarningRule;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 358,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['ammonia nitrogen', 'threshold 0.5 mg/L', \"condition operator '>'\"], 'relations': ['parameter_to_threshold (ammonia nitrogen → 0.5 mg/L)', \"threshold_to_condition (0.5 mg/L → '>')\"], 'intent': 'explain_rationale_for_water_quality_rule', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [0.5], 'units': {'threshold': 'mg/L (milligrams per liter)', 'impact': 'toxicity to aquatic organisms (implied by environmental standards)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'RuleDescription', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['Triggered when pH exceeds 8.5. Indicates potential alkalinity issues.', 'Triggered when dissolved oxygen drops below 4 mg/L. Indicates poor water quality.', 'Triggered when turbidity exceeds 50 NTU. Indicates potential contamination.', 'Triggered when pH drops below 6.0. Indicates potential acidity issues.', 'Triggered when nitrate levels exceed 10 mg/L. Indicates potential pollution.']}]}}\nA common sense reasoning question is as follows:\nIn the water quality warning rules table, there is a rule with the parameter type as ammonia nitrogen, a threshold of 0.5 mg/L, and the condition operator as '>'. According to water quality standards, what is the rationale for setting this rule? Please reason based on the impact of ammonia nitrogen on aquatic organisms.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT RuleName, ParameterType, ThresholdValue, ConditionOperator, RuleDescription FROM WaterQualityWarningRule WHERE ParameterType = '氨氮' AND ThresholdValue = 0.5 AND ConditionOperator = '>';",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 359,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['WaterQualityMonitor', 'WaterQualityWarningRule', 'WaterQualityData', 'TemperatureCelsius', '40 degrees Celsius', '24 hours'], 'relations': ['monitor_to_data (WaterQualityMonitor.Id → WaterQualityData.MonitorId)', 'rule_to_trigger (WaterQualityWarningRule.Id → WaterQualityWarningTriggerRecord.RuleId)', 'threshold_comparison (TemperatureCelsius = ThresholdValue 40°C)'], 'intent': 'calculate_triggered_alarms_for_static_temperature', 'reasoning_type': 'mathematical_logic_reasoning', 'numerical_values': [40, 24], 'units': {'temperature': '°C (Celsius)', 'time': 'hours → seconds (24*3600=86400 seconds)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningTriggerRecord', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'TemperatureCelsius', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['22.5', '24.0', '21.0', '25.5', '23.0']}, {'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}], 'WaterQualityMonitor.WaterQualityWarningTriggerRecord': [{'column': 'TriggerTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}]}}\nA hypothetical reasoning question is as follows:\nAssuming there is a rule in the water quality alarm rules table where the parameter type is temperature, the threshold is 40 degrees Celsius, the conditional operator is '>', and this is an extreme outlier (normal range is 0-30 degrees Celsius). If the water quality monitoring data is recorded every second and the temperature value remains at 40 degrees Celsius for 24 hours, how many alarms will the system trigger? The alarm rule is set as temperature > 40 degrees Celsius.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE TemperatureCelsius > 40 AND CollectionTime BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW();",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 360,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality warning trigger record', 'trigger value 8.75 pH'], 'relations': ['trigger_record_to_ph_value (record → TriggerValue)', 'ph_to_hydrogen_ion (pH → H+ concentration)'], 'intent': 'calculate_hydrogen_ion_concentration_and_analyze_acidity_alkalinity', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [8.75], 'units': {'ph_value': 'pH unit', 'hydrogen_ion_concentration': 'mol/L (derived from pH formula)', 'conversion': 'H+ concentration = 10^(-pH) mol/L'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityWarningTriggerRecord', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningTriggerRecord': [{'column': 'TriggerValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.75', '3.8', '55.0', '5.8', '12.5']}, {'column': 'TriggerUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}]}}\nA physical knowledge question is as follows:\nIf there is a record in the water quality warning trigger log with a trigger value of 8.75 pH, please calculate the hydrogen ion concentration (H+) in the water based on the physical meaning of the pH value, and analyze its impact on the water's acidity or alkalinity.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT POWER(10, -TriggerValue) AS HydrogenIonConcentration, CASE WHEN TriggerValue > 7 THEN '水体呈碱性，可能影响水生生物生存和水质安全' ELSE '水体pH值正常' END AS WaterQualityImpact FROM WaterQualityWarningTriggerRecord WHERE TriggerValue = 8.75 AND TriggerUnit = 'pH';",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 361,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['WaterQualityWarningTriggerRecord', 'SeverityLevel', 'normal distribution', 'threshold value 8'], 'relations': ['trigger_record_to_severity (WaterQualityWarningTriggerRecord → SeverityLevel)', 'severity_to_distribution (SeverityLevel → normal distribution parameters)'], 'intent': 'calculate_percentage_above_threshold', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [8, 7.71, 1.11], 'units': {'severity': 'unitless (SeverityLevel scale)', 'distribution': 'mean=7.71, standard_deviation=1.11', 'percentage': '% (calculated via Z-score method)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityWarningTriggerRecord', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningTriggerRecord': [{'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['8', '7', '9', '6', '5']}]}}\nA mathematical logic question is as follows:\nThere are 7 records in the water quality early warning trigger log, with severity levels (SeverityLevel) of 8, 7, 9, 7, 8, 9, and 6 for each record, respectively. The overall average severity is known to be 7.71, with a standard deviation of 1.11. Assuming the severity data follows a normal distribution, calculate the percentage of trigger records with severity exceeding 8 out of the total number of trigger records.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (COUNT(CASE WHEN SeverityLevel > 8 THEN 1 END) * 100.0 / COUNT(*)) AS PercentageAboveThreshold FROM WaterQualityWarningTriggerRecord;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 362,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['dissolved oxygen 3.80 mg/L', 'severity level 7', 'water quality standards'], 'relations': ['trigger_to_rule (RuleId → WaterQualityWarningRule)', 'threshold_comparison (3.80 mg/L vs. ThresholdValue)', 'severity_mapping (severity 7 → RuleSeverity)'], 'intent': 'determine_justification_for_trigger_record', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [3.8, 7], 'units': {'dissolved_oxygen': 'mg/L', 'severity': 'level 7 (scale interpretation required)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningTriggerRecord', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningTriggerRecord': [{'column': 'TriggerValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.75', '3.8', '55.0', '5.8', '12.5']}, {'column': 'TriggerUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['8', '7', '9', '6', '5']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['8', '7', '9', '6']}, {'column': 'RuleDescription', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['Triggered when pH exceeds 8.5. Indicates potential alkalinity issues.', 'Triggered when dissolved oxygen drops below 4 mg/L. Indicates poor water quality.', 'Triggered when turbidity exceeds 50 NTU. Indicates potential contamination.', 'Triggered when pH drops below 6.0. Indicates potential acidity issues.', 'Triggered when nitrate levels exceed 10 mg/L. Indicates potential pollution.']}]}}\nA common sense reasoning question is as follows:\nThere is a record in the water quality early warning trigger log with a triggered value of 3.80 mg/L for dissolved oxygen and a severity level of 7. According to water quality standards, what is the justification for such a trigger record? Please reason based on the impact of dissolved oxygen on aquatic organisms.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT TriggerValue, SeverityLevel, ActionTaken, TriggerDescription FROM WaterQualityWarningTriggerRecord WHERE TriggerValue = 3.80 AND SeverityLevel = 7;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 363,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['turbidity threshold 1000 NTU', 'severity level 10', '24 hours', 'data collection frequency every millisecond'], 'relations': ['threshold_comparison (turbidity > 1000 NTU)', 'duration_measurement (24 hours × millisecond interval)', 'data_volume (24 hours → 86,400,000 records)'], 'intent': 'calculate_warning_trigger_frequency_under_threshold', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000, 10, 24], 'units': {'turbidity': 'NTU (Nephelometric Turbidity Units)', 'time': 'hours → milliseconds (86,400,000 ms in 24 hours)', 'threshold_comparison': \"ConditionOperator: '>'\"}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningTriggerRecord', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}], 'WaterQualityMonitor.WaterQualityWarningTriggerRecord': [{'column': 'TriggerTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}], 'WaterQualityMonitor.WaterQualityData': [{'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}, {'column': 'TurbidityNTU', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.3', '10.5', '3.2', '15.0', '8.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming there is a record in the water quality warning trigger log with a trigger value of 1000 NTU for turbidity and a severity level of 10, which is an extreme outlier (the normal range is 0-5 NTU). If water quality monitoring data is recorded every millisecond and the turbidity value remains at 1000 NTU for 24 hours, how many warning triggers will the system generate? The warning rule is set as turbidity > 1000 NTU.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE MonitorId = (SELECT Id FROM WaterQualityMonitor WHERE MonitorModel = 'YourMonitorModel') AND TurbidityNTU > 1000 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-01-02 00:00:00';",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 364,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality early warning trigger record', 'pH value 7.5', 'hydrogen ion concentration (H+)'], 'relations': ['trigger_record_to_ph_value (record → 7.5 pH)', 'ph_to_h_concentration (pH 7.5 → [H+] = 10⁻⁷˙⁵ mol/L)'], 'intent': 'calculate_hydrogen_ion_concentration_from_ph', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [7.5], 'units': {'ph': 'unitless (pH scale)', 'hydrogen_ion_concentration': 'mol/L (molarity)', 'conversion_formula': '[H+] = 10^(-pH) → 10^(-7.5) ≈ 3.16×10⁻⁸ mol/L'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityWarningTriggerRecord', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningTriggerRecord': [{'column': 'TriggerValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.75', '3.8', '55.0', '5.8', '12.5']}, {'column': 'TriggerUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}]}}\nA physical knowledge question is as follows:\nIf there is a record in the water quality early warning trigger log with a triggered value of 7.5 pH, please calculate the hydrogen ion concentration (H+) in the water at this time based on the physical meaning of the pH value.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT POWER(10, -TriggerValue) AS HydrogenIonConcentration FROM WaterQualityWarningTriggerRecord WHERE TriggerValue = 7.5 AND TriggerUnit = 'pH';",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 365,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water quality early warning trigger log', 'severity levels 8,7,9,7,8,9,6'], 'relations': ['record_to_severity (7 records → severity levels)', 'average_severity (calculated value)'], 'intent': 'calculate_average_severity_level', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [8, 7, 9, 7, 8, 9, 6], 'units': {'severity': 'unitless (integer scale implied by SeverityLevel field)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityWarningTriggerRecord', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningTriggerRecord': [{'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['8', '7', '9', '6', '5']}]}}\nA mathematical logic question is as follows:\nThere are 7 records in the water quality early warning trigger log, with severity levels (SeverityLevel) of 8, 7, 9, 7, 8, 9, and 6 for each record respectively. Please calculate the average severity level of these records.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(SeverityLevel) AS AverageSeverity FROM WaterQualityWarningTriggerRecord;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 366,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['ammonia nitrogen trigger value 0.60 mg/L', 'severity level 9', 'water quality standards', 'aquatic organisms'], 'relations': ['trigger_value_to_parameter (0.60 mg/L → ammonia nitrogen)', 'severity_level_to_rule (level 9 → warning rule criteria)', 'ammonia_to_aquatic_impact (toxicity relationship)', 'trigger_record_to_standard (rationale linkage)'], 'intent': 'analyze_trigger_rationale_by_water_quality_standards', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [0.6, 9], 'units': {'ammonia_concentration': 'mg/L (milligrams per liter)', 'severity': 'level (unitless scale 1-10)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningTriggerRecord', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ParameterType', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'Dissolved Oxygen', 'Turbidity', 'Nitrate', 'Ammonia']}, {'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ThresholdUnit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['pH', 'mg/L', 'NTU']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['8', '7', '9', '6']}, {'column': 'RuleDescription', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['Triggered when pH exceeds 8.5. Indicates potential alkalinity issues.', 'Triggered when dissolved oxygen drops below 4 mg/L. Indicates poor water quality.', 'Triggered when turbidity exceeds 50 NTU. Indicates potential contamination.', 'Triggered when pH drops below 6.0. Indicates potential acidity issues.', 'Triggered when nitrate levels exceed 10 mg/L. Indicates potential pollution.']}], 'WaterQualityMonitor.WaterQualityWarningTriggerRecord': [{'column': 'TriggerValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.75', '3.8', '55.0', '5.8', '12.5']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['8', '7', '9', '6', '5']}], 'WaterQualityMonitor.WaterQualityData': [{'column': 'AmmoniaNitrogenMgL', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['0.15', '0.2', '0.1', '0.3', '0.18']}]}}\nA common sense reasoning question is as follows:\nThere is a record in the water quality early warning trigger log with a trigger value of ammonia nitrogen at 0.60 mg/L and a severity level of 9. According to water quality standards, what is the rationale behind this trigger record? Please analyze by considering the impact of ammonia nitrogen on aquatic organisms.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT TriggerValue, SeverityLevel, ActionTaken, TriggerDescription FROM WaterQualityWarningTriggerRecord WHERE TriggerValue = 0.60 AND SeverityLevel = 9;",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 367,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['turbidity value 50 NTU', 'normal range 0-5 NTU', 'severity level 8', '24 hours', '1-minute interval'], 'relations': ['turbidity_to_threshold (50 NTU > 5 NTU)', 'time_interval_to_trigger_count (24 hours × 60 minutes = 1440 triggers)'], 'intent': 'calculate_warning_trigger_frequency_over_time', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50, 5, 24, 1], 'units': {'turbidity': 'NTU (Nephelometric Turbidity Units)', 'time': 'hours → minutes (24 → 1440)', 'interval': '1 minute'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'WaterQualityData', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningRule', 'pk_column': 'Id'}, {'pk_table': 'WaterQualityWarningTriggerRecord', 'pk_column': 'Id'}], 'tableinfo': {'WaterQualityMonitor.WaterQualityData': [{'column': 'CollectionTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00', '2023-10-01 09:00:00', '2023-10-01 10:00:00', '2023-10-01 11:00:00', '2023-10-01 12:00:00']}, {'column': 'TurbidityNTU', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['5.3', '10.5', '3.2', '15.0', '8.0']}], 'WaterQualityMonitor.WaterQualityWarningRule': [{'column': 'ThresholdValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.5', '4.0', '50.0', '6.0', '10.0']}, {'column': 'ConditionOperator', 'type': 'VARCHAR(10)', 'primary_key': False, 'comment': '', 'examples': ['>', '<']}], 'WaterQualityMonitor.WaterQualityWarningTriggerRecord': [{'column': 'TriggerTime', 'type': 'VARCHAR(20)', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 14:30:00', '2023-09-25 08:15:00', '2023-08-15 12:45:00', '2023-07-10 16:20:00', '2023-06-05 09:00:00']}, {'column': 'TriggerValue', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['8.75', '3.8', '55.0', '5.8', '12.5']}, {'column': 'SeverityLevel', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['8', '7', '9', '6', '5']}]}}\nA hypothetical reasoning question is as follows:\nAssuming there is a record in the water quality early warning trigger log with a triggered value of 50 NTU for turbidity and a severity level of 8, which is a relatively high outlier (normal range is 0-5 NTU). If water quality monitoring data is recorded every minute, and the turbidity value remains at 50 NTU for 24 hours, how many times will the system trigger an early warning? The warning rule is set for turbidity > 5 NTU.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT(*) AS WarningCount FROM WaterQualityData WHERE MonitorId = (SELECT Id FROM WaterQualityMonitor WHERE MonitorModel = 'YourMonitorModel') AND TurbidityNTU > 5 AND CollectionTime BETWEEN '2023-01-01 00:00:00' AND '2023-01-02 00:00:00';",
        "db_id": "WaterQualityMonitor"
    },
    {
        "id": 368,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water pump', 'warranty period 24 months', 'purchase date January 1, 2022', 'malfunction date June 1, 2023'], 'relations': ['pump_to_purchase_date (pump → Purchase_Date)', 'warranty_duration (24 months)', 'malfunction_date (June 1, 2023)'], 'intent': 'calculate_warranty_expiration_and_coverage', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [24, 2022, 2023, 1, 6], 'units': {'time': 'months, years, days (date arithmetic)', 'warranty': '24 months → expiration date conversion'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'Pump_ID', 'ref_table': 'pump_specifications', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'Record_ID'}, {'pk_table': 'pumps', 'pk_column': 'Pump_ID'}], 'tableinfo': {'waterPump.pumps': [{'column': 'Purchase_Date', 'type': 'DATE', 'primary_key': False, 'comment': '购买日期', 'examples': ['2023-01-15']}, {'column': 'Warranty_Period', 'type': 'INTEGER', 'primary_key': False, 'comment': '保修期（月）', 'examples': ['12', '24', '18', '6', '36']}], 'waterPump.maintenance_records': [{'column': 'Maintenance_Date', 'type': 'DATE', 'primary_key': False, 'comment': '维护日期', 'examples': ['2023-12-15']}]}}\nA common sense reasoning question is as follows:\nIf a water pump has a warranty period of 24 months and the purchase date is January 1, 2022, what is the warranty expiration date? If this water pump malfunctions on June 1, 2023, is it still covered under warranty?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Efficiency FROM pump_specifications WHERE Flow_Rate = 100 AND Head = 50 AND Power = 10;",
        "db_id": "waterPump"
    },
    {
        "id": 369,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['pump', 'flow_rate', 'head', 'power'], 'relations': ['pump_to_specifications', 'efficiency_formula (η = (ρgHQ)/(P×1000)×100%)'], 'intent': 'calculate_pump_efficiency', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1000, 1000, 10000], 'units': {'flow_rate': 'm³/h (converted to m³/s by dividing by 3600)', 'head': 'meters', 'power': 'kW (converted to watts by multiplying by 1000)', 'efficiency': '% (calculated via formula)'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Flow_Rate', 'type': 'DOUBLE', 'primary_key': False, 'comment': '流量（立方米/小时）', 'examples': ['50.0', '55.0', '60.0', '65.0', '70.0']}, {'column': 'Head', 'type': 'DOUBLE', 'primary_key': False, 'comment': '扬程（米）', 'examples': ['30.0', '32.0', '35.0', '38.0', '40.0']}, {'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}, {'column': 'Efficiency', 'type': 'DOUBLE', 'primary_key': False, 'comment': '效率（百分比）', 'examples': ['85.0', '86.0', '88.0', '89.0', '90.0']}]}}\nA hypothetical reasoning question is as follows:\nIf a pump has a flow rate of 1000 cubic meters per hour, a head of 1000 meters, and a power of 10,000 kilowatts, what is its efficiency?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Power, (Power * 10 * 30 * 0.5) AS Monthly_Cost FROM pump_specifications WHERE Voltage = 220 AND Current = 5;",
        "db_id": "waterPump"
    },
    {
        "id": 370,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['pump_specifications', 'flow rate 1000 m³/h', 'head 1000 m', 'power 10000 kW'], 'relations': ['pump_specifications_to_pumps (Spec_ID → Pump_ID)', 'spec_parameters (flow_rate, head, power)'], 'intent': 'retrieve_existing_power_specification', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [1000, 1000, 10000], 'units': {'flow_rate': 'm³/h (cubic meters per hour)', 'head': 'm (meters)', 'power': 'kW (kilowatts)'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}]}}\nA hypothetical reasoning question is as follows:\nIf a pump has a flow rate of 1000 cubic meters per hour, a head of 1000 meters, and a power of 10,000 kilowatts, calculate the pump's power?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Pump_ID, Purchase_date, Warranty_Period, DATE_ADD(Purchase_date, INTERVAL Warranty_Period MONTH) AS Warranty_End_Date, CASE WHEN '2023-06-01' <= DATE_ADD(Purchase_date, INTERVAL Warranty_Period MONTH) THEN 'Yes' ELSE 'No' END AS Is_Under_Warranty FROM pumps WHERE Purchase_date = '2022-01-01' AND Warranty_Period = 24;",
        "db_id": "waterPump"
    },
    {
        "id": 371,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['pump', 'flow rate 1000 m³/h', 'head 1000 meters', 'power 10,000 kW', '30 days'], 'relations': ['pump_to_specifications (pump → pump_specifications)', 'time_conversion (30 days → 720 hours)', 'energy_consumption (power × usage hours)', 'cost_calculation (energy × electricity_rate)'], 'intent': 'calculate_electricity_cost_for_pump_operation', 'reasoning_type': 'mathematical_logic_reasoning', 'numerical_values': [1000, 1000, 10000, 30], 'units': {'flow_rate': 'm³/h (cubic meters per hour)', 'head': 'meters', 'power': 'kW (kilowatts)', 'time': 'days (converted to hours)', 'conversion': '1 day = 24 hours → 30 days = 720 hours', 'energy': 'kWh (kilowatt-hours = kW × hours)'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}, {'fk_table': 'usage_records', 'fk_column': 'pump_ID', 'ref_table': 'pumps', 'ref_column': 'pump_ID'}, {'fk_table': 'usage_records', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}, {'pk_table': 'pumps', 'pk_column': 'Pump_ID'}, {'pk_table': 'usage_records', 'pk_column': 'Ssage_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}], 'waterPump.usage_records': [{'column': 'Usage_Hours', 'type': 'DOUBLE', 'primary_key': False, 'comment': '使用时长（小时）', 'examples': ['4.0', '8.0', '8760.0', '2000.0', '4000.0']}], 'waterPump.pumps': [{'column': 'Pump_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '主键，水泵的唯一标识', 'examples': ['1', '2', '3', '4', '5']}]}}\nA hypothetical reasoning question is as follows:\nIf a pump has a flow rate of 1000 cubic meters per hour, a head of 1000 meters, and a power of 10,000 kilowatts, calculate the electricity cost for one month (30 days)?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (Flow_Rate * Head * 9.81) / (Power * 3600) * 100 AS Efficiency FROM pump_specifications WHERE Flow_Rate = 1000 AND Head = 1000 AND Power = 10000;",
        "db_id": "waterPump"
    },
    {
        "id": 372,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['pump_specifications', 'Flow_Rate 100 m³/h', 'Head 50 m', 'Power 10 kW'], 'relations': ['pump_to_specs (Pump_ID → pump_specifications)', 'spec_parameters (Flow_Rate, Head, Power, Efficiency)'], 'intent': 'calculate_pump_efficiency', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [100, 50, 10], 'units': {'flow_rate': 'm³/h (cubic meters per hour)', 'head': 'm (meters)', 'power': 'kW (kilowatts)', 'efficiency': '% (percentage)'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Flow_Rate', 'type': 'DOUBLE', 'primary_key': False, 'comment': '流量（立方米/小时）', 'examples': ['50.0', '55.0', '60.0', '65.0', '70.0']}, {'column': 'Head', 'type': 'DOUBLE', 'primary_key': False, 'comment': '扬程（米）', 'examples': ['30.0', '32.0', '35.0', '38.0', '40.0']}, {'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}, {'column': 'Efficiency', 'type': 'DOUBLE', 'primary_key': False, 'comment': '效率（百分比）', 'examples': ['85.0', '86.0', '88.0', '89.0', '90.0']}]}}\nA physical knowledge question is as follows:\nIf a water pump has a flow rate of 100 cubic meters per hour, a head of 50 meters, and a power of 10 kilowatts, what is its efficiency?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Voltage * Current / 1000 AS Power FROM pump_specifications WHERE Voltage = 1000000 AND Current = 10000;",
        "db_id": "waterPump"
    },
    {
        "id": 373,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water pump with Flow_Rate=150m³/h', 'Head=60m', 'Power=15kW', 'Voltage=220V', 'Current=30A'], 'relations': ['pump_to_specs (Pump_ID → pump_specifications)', 'specs_to_usage (Pump_ID → usage_records)'], 'intent': 'calculate_total_energy_consumption', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [150, 60, 15, 220, 30], 'units': {'flow_rate': 'm³/h (cubic meters per hour)', 'head': 'm (meters)', 'power': 'kW (kilowatts)', 'voltage': 'V (volts)', 'current': 'A (amperes)', 'energy': 'kWh (kilowatt-hours) [derived from power × time]'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}, {'fk_table': 'usage_records', 'fk_column': 'pump_ID', 'ref_table': 'pumps', 'ref_column': 'pump_ID'}, {'fk_table': 'usage_records', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}, {'pk_table': 'usage_records', 'pk_column': 'Ssage_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}, {'column': 'Pump_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '关联的水泵ID', 'examples': ['1', '2', '3', '4', '5']}], 'waterPump.usage_records': [{'column': 'Usage_Hours', 'type': 'DOUBLE', 'primary_key': False, 'comment': '使用时长（小时）', 'examples': ['4.0', '8.0', '8760.0', '2000.0', '4000.0']}, {'column': 'pump_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '关联的水泵ID', 'examples': ['1', '2', '3', '4', '5']}]}}\nA mathematical logic question is as follows:\nIf a water pump has a flow rate of 150 cubic meters per hour, a head of 60 meters, a power of 15 kilowatts, a voltage of 220 volts, and a current of 30 amperes, what is its total energy consumption?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Power * 100 * 30 * 0.5 AS Monthly_Electricity_Cost FROM pump_specifications WHERE Voltage = 1000000 AND Current = 10000;",
        "db_id": "waterPump"
    },
    {
        "id": 374,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water pump', 'January 15, 2023', '24 months'], 'relations': ['purchase_date_to_warranty (January 15, 2023 + 24 months)'], 'intent': 'calculate_warranty_expiration_date', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [24], 'units': {'warranty_period': 'months', 'date': 'YYYY-MM-DD'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'pumps', 'pk_column': 'Pump_ID'}], 'tableinfo': {'waterPump.pumps': [{'column': 'Purchase_Date', 'type': 'DATE', 'primary_key': False, 'comment': '购买日期', 'examples': ['2023-01-15']}, {'column': 'Warranty_Period', 'type': 'INTEGER', 'primary_key': False, 'comment': '保修期（月）', 'examples': ['12', '24', '18', '6', '36']}]}}\nA common sense reasoning question is as follows:\nIf a water pump has a warranty period of 24 months and the purchase date is January 15, 2023, what is the warranty expiration date?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Efficiency FROM pump_specifications WHERE Flow_Rate = 100 AND Head = 50 AND Power = 10;",
        "db_id": "waterPump"
    },
    {
        "id": 375,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water pump with specifications: flow rate 1,000,000 m³/h, head 10,000 m, power 1,000,000 kW', 'water density 1,000 kg/m³', 'gravitational acceleration 9.81 m/s²'], 'relations': ['pump_to_specs (flow_rate_head_power)'], 'intent': 'calculate_pump_efficiency', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1000000, 10000, 1000000, 9.81, 1000], 'units': {'flow_rate': 'm³/h → converted to m³/s for calculation (277.78 m³/s)', 'head': 'meters', 'power': 'kW → converted to watts (1,000,000,000 W)', 'density': 'kg/m³', 'gravity': 'm/s²', 'efficiency': 'dimensionless (η = (ρgQH)/P)'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Flow_Rate', 'type': 'DOUBLE', 'primary_key': False, 'comment': '流量（立方米/小时）', 'examples': ['50.0', '55.0', '60.0', '65.0', '70.0']}, {'column': 'Head', 'type': 'DOUBLE', 'primary_key': False, 'comment': '扬程（米）', 'examples': ['30.0', '32.0', '35.0', '38.0', '40.0']}, {'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}]}}\nA hypothetical reasoning question is as follows:\nIf a water pump has a flow rate of 1,000,000 cubic meters per hour, a head of 10,000 meters, and a power of 1,000,000 kilowatts, what is its efficiency? Assume the gravitational acceleration is 9.81 m/s² and the density of water is 1,000 kg/m³.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Power * Usage_Hours AS Total_Energy_Consumption FROM pump_specifications JOIN usage_records ON pump_specifications.Pump_ID = usage_records.pump_ID WHERE Flow_Rate = 150 AND Head = 60 AND Power = 15 AND Voltage = 220 AND Current = 30;",
        "db_id": "waterPump"
    },
    {
        "id": 376,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['specific pump model', 'flow rate 50 cubic meters/hour', 'head 30 meters'], 'relations': ['model_to_specifications (specific pump model → pump_specifications)', 'operating_conditions (flow rate & head)'], 'intent': 'calculate_power_requirement_at_given_conditions', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [50, 30], 'units': {'flow_rate': 'cubic meters per hour (m³/h)', 'head': 'meters (m)', 'power': 'kW (calculated via (Flow * Head * Density * Gravity) / Efficiency)', 'density': '1000 kg/m³ (assumed for water)', 'gravity': '9.81 m/s²', 'efficiency': 'percentage (from pump_specifications)'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}, {'pk_table': 'pumps', 'pk_column': 'Pump_ID'}], 'tableinfo': {'waterPump.pumps': [{'column': 'Model_Number', 'type': 'VARCHAR(50) COLLATE \"utf8mb3_general_ci\"', 'primary_key': False, 'comment': '水泵型号', 'examples': ['P-1001', 'P-1002', 'P-1003', 'P-1004', 'P-1005']}], 'waterPump.pump_specifications': [{'column': 'Flow_Rate', 'type': 'DOUBLE', 'primary_key': False, 'comment': '流量（立方米/小时）', 'examples': ['50.0', '55.0', '60.0', '65.0', '70.0']}, {'column': 'Head', 'type': 'DOUBLE', 'primary_key': False, 'comment': '扬程（米）', 'examples': ['30.0', '32.0', '35.0', '38.0', '40.0']}, {'column': 'Efficiency', 'type': 'DOUBLE', 'primary_key': False, 'comment': '效率（百分比）', 'examples': ['85.0', '86.0', '88.0', '89.0', '90.0']}, {'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}]}}\nA physical knowledge question is as follows:\nCalculate the power requirement of a specific pump model at given flow rate and head. Assume the flow rate is 50 cubic meters per hour and the head is 30 meters.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT DATE_ADD(Purchase_date, INTERVAL Warranty_Period MONTH) AS Warranty_End_Date FROM pumps WHERE Purchase_date = '2023-01-15' AND Warranty_Period = 24;",
        "db_id": "waterPump"
    },
    {
        "id": 377,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water pump', '5 kilowatts', '8 hours per day', '0.8 yuan per kilowatt-hour', 'one year'], 'relations': ['pump_to_power (pump → 5 kW)', 'operating_hours (8 hours/day)', 'electricity_pricing (0.8 yuan/kWh)', 'time_period (1 year)'], 'intent': 'calculate_annual_energy_consumption_cost', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5, 8, 0.8, 365], 'units': {'power': 'kilowatts (kW)', 'time': 'hours/day → hours/year (8*365)', 'energy': 'kWh (kW*hours)', 'cost': 'yuan/kWh', 'conversion': 'ΔCost = 5 kW * 8 hours/day * 365 days/year * 0.8 yuan/kWh'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}, {'fk_table': 'usage_records', 'fk_column': 'pump_ID', 'ref_table': 'pumps', 'ref_column': 'pump_ID'}, {'fk_table': 'usage_records', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}, {'pk_table': 'usage_records', 'pk_column': 'Ssage_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}], 'waterPump.usage_records': [{'column': 'Usage_Hours', 'type': 'DOUBLE', 'primary_key': False, 'comment': '使用时长（小时）', 'examples': ['4.0', '8.0', '8760.0', '2000.0', '4000.0']}]}}\nA mathematical logic question is as follows:\nCalculate the total energy consumption of a water pump over one year, assuming the pump operates for 8 hours per day, has a power of 5 kilowatts, and the electricity price is 0.8 yuan per kilowatt-hour.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (Flow_Rate * Head * 9.81 * 1000) / (Power * 3600 * 1000) * 100 AS Efficiency FROM pump_specifications WHERE Flow_Rate = 1000000 AND Head = 10000 AND Power = 1000000;",
        "db_id": "waterPump"
    },
    {
        "id": 378,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water pump', 'usage duration', 'warranty period'], 'relations': ['pump_to_usage (Pump_ID → usage_records.Usage_Hours)', 'pump_to_warranty (Pump_ID → pumps.Warranty_Period)'], 'intent': 'determine_maintenance_necessity', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': ['usage_records.Usage_Hours', 'pumps.Warranty_Period'], 'units': {'time': 'months/years (for warranty)', 'usage': 'hours (total operational time)'}, 'foreign_keys': [{'fk_table': 'usage_records', 'fk_column': 'pump_ID', 'ref_table': 'pumps', 'ref_column': 'pump_ID'}, {'fk_table': 'usage_records', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'pumps', 'pk_column': 'Pump_ID'}, {'pk_table': 'usage_records', 'pk_column': 'Ssage_ID'}], 'tableinfo': {'waterPump.pumps': [{'column': 'Pump_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '主键，水泵的唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Warranty_Period', 'type': 'INTEGER', 'primary_key': False, 'comment': '保修期（月）', 'examples': ['12', '24', '18', '6', '36']}, {'column': 'Purchase_Date', 'type': 'DATE', 'primary_key': False, 'comment': '购买日期', 'examples': ['2023-01-15']}], 'waterPump.usage_records': [{'column': 'Usage_Hours', 'type': 'DOUBLE', 'primary_key': False, 'comment': '使用时长（小时）', 'examples': ['4.0', '8.0', '8760.0', '2000.0', '4000.0']}]}}\nA common sense reasoning question is as follows:\nDetermine whether a certain water pump requires maintenance based on its usage duration and warranty period.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Power FROM pump_specifications WHERE Flow_Rate = 50 AND Head = 30;",
        "db_id": "waterPump"
    },
    {
        "id": 379,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['flow rate 10,000 cubic meters per hour', 'head 1,000 meters', 'efficiency 200%'], 'relations': ['pump_to_specifications (parameters → power requirement formula)', 'hydraulic_power_formula (Flow_Rate × Head ÷ Efficiency)'], 'intent': 'calculate_power_requirement', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [10000, 1000, 200], 'units': {'flow_rate': 'cubic meters per hour (m³/h)', 'head': 'meters (m)', 'efficiency': '% (percent)', 'power': 'kilowatts (kW, derived from formula: (ρ × g × Q × H) / (η × 3600))', 'conversion': '1 kW = 1000 W; gravitational acceleration (g) = 9.81 m/s²; water density (ρ) = 1000 kg/m³'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Flow_Rate', 'type': 'DOUBLE', 'primary_key': False, 'comment': '流量（立方米/小时）', 'examples': ['50.0', '55.0', '60.0', '65.0', '70.0']}, {'column': 'Head', 'type': 'DOUBLE', 'primary_key': False, 'comment': '扬程（米）', 'examples': ['30.0', '32.0', '35.0', '38.0', '40.0']}, {'column': 'Efficiency', 'type': 'DOUBLE', 'primary_key': False, 'comment': '效率（百分比）', 'examples': ['85.0', '86.0', '88.0', '89.0', '90.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the flow rate of a certain water pump is 10,000 cubic meters per hour, the head is 1,000 meters, and the efficiency is 200%, calculate its power requirement.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 5 * 8 * 365 AS total_energy_consumption_kWh, 5 * 8 * 365 * 0.8 AS total_cost_RMB;",
        "db_id": "waterPump"
    },
    {
        "id": 380,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water pump', 'current status', 'usage duration', 'warranty status', 'last maintenance time'], 'relations': ['pump_to_status (Pump_ID → Status)', 'pump_to_usage (Pump_ID → Usage_Hours)', 'pump_to_warranty (Pump_ID → Purchase_Date, Warranty_Period)', 'pump_to_maintenance (Pump_ID → Maintenance_Date)'], 'intent': 'determine_maintenance_necessity', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000, 6], 'units': {'usage_duration': 'hours', 'maintenance_interval': 'months', 'threshold_usage': '1000 hours', 'threshold_time': '6 months'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'Pump_ID', 'ref_table': 'pump_specifications', 'ref_column': 'Pump_ID'}, {'fk_table': 'usage_records', 'fk_column': 'pump_ID', 'ref_table': 'pumps', 'ref_column': 'pump_ID'}, {'fk_table': 'usage_records', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'Record_ID'}, {'pk_table': 'pumps', 'pk_column': 'Pump_ID'}, {'pk_table': 'usage_records', 'pk_column': 'Ssage_ID'}], 'tableinfo': {'waterPump.pumps': [{'column': 'Pump_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '主键，水泵的唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Status', 'type': 'ENUM', 'primary_key': False, 'comment': '水泵状态', 'examples': ['active', 'inactive', 'under_maintenance']}, {'column': 'Purchase_Date', 'type': 'DATE', 'primary_key': False, 'comment': '购买日期', 'examples': ['2023-01-15']}, {'column': 'Warranty_Period', 'type': 'INTEGER', 'primary_key': False, 'comment': '保修期（月）', 'examples': ['12', '24', '18', '6', '36']}], 'waterPump.usage_records': [{'column': 'Usage_Hours', 'type': 'DOUBLE', 'primary_key': False, 'comment': '使用时长（小时）', 'examples': ['4.0', '8.0', '8760.0', '2000.0', '4000.0']}], 'waterPump.maintenance_records': [{'column': 'Maintenance_Date', 'type': 'DATE', 'primary_key': False, 'comment': '维护日期', 'examples': ['2023-12-15']}]}}\nA common sense reasoning question is as follows:\nDetermine whether the water pump requires maintenance. The following factors need to be considered:  \n1. The current status of the water pump;  \n2. Whether the usage duration of the pump has exceeded the recommended maintenance interval (assumed to be 1000 hours);  \n3. Whether the water pump is under warranty;  \n4. Whether the time since the last maintenance exceeds the recommended maintenance interval (assumed to be 6 months).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.Pump_ID, p.Model_Number, p.Manufacturer, p.Purchase_date, p.Warranty_Period, p.Location, p.Status, SUM(u.Usage_Hours) AS Total_Usage_Hours, (p.Warranty_Period * 30 * 24) AS Warranty_Hours FROM pumps p JOIN usage_records u ON p.Pump_ID = u.Pump_ID WHERE p.Status = 'active' GROUP BY p.Pump_ID HAVING Total_Usage_Hours >= Warranty_Hours;",
        "db_id": "waterPump"
    },
    {
        "id": 381,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['flow rate 10,000 m³/h', 'head 1,000 m'], 'relations': ['flow_rate_to_power (direct correlation)', 'head_to_power (direct correlation)'], 'intent': 'calculate_required_pump_power', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [10000, 1000], 'units': {'flow_rate': 'm³/h (cubic meters per hour)', 'head': 'm (meters)', 'power': 'kW (kilowatts, implied by formula)', 'conversion': 'Power = (Flow Rate × Head × Density × Gravity) / Efficiency'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Flow_Rate', 'type': 'DOUBLE', 'primary_key': False, 'comment': '流量（立方米/小时）', 'examples': ['50.0', '55.0', '60.0', '65.0', '70.0']}, {'column': 'Head', 'type': 'DOUBLE', 'primary_key': False, 'comment': '扬程（米）', 'examples': ['30.0', '32.0', '35.0', '38.0', '40.0']}, {'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}, {'column': 'Efficiency', 'type': 'DOUBLE', 'primary_key': False, 'comment': '效率（百分比）', 'examples': ['85.0', '86.0', '88.0', '89.0', '90.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the pump's flow rate increases to 10,000 cubic meters per hour and the head increases to 1,000 meters, calculate the required power.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (Flow_Rate * Head * 9.81) / (Efficiency / 100) AS Power_Required FROM pump_specifications WHERE Flow_Rate = 10000 AND Head = 1000 AND Efficiency = 200;",
        "db_id": "waterPump"
    },
    {
        "id": 382,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['pump_flow_rate', 'pump_head'], 'relations': ['flow_rate_to_head (Q → H)', 'hydraulic_power_formula (P = Q * H * ρ * g / η)'], 'intent': 'calculate_hydraulic_power', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [], 'units': {'flow_rate': 'm³/s (assumed standard unit)', 'head': 'meters (m)', 'power': 'kW (calculated using ρ=1000 kg/m³, g=9.81 m/s²)', 'efficiency': 'η (from pump_specifications.Efficiency)'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Flow_Rate', 'type': 'DOUBLE', 'primary_key': False, 'comment': '流量（立方米/小时）', 'examples': ['50.0', '55.0', '60.0', '65.0', '70.0']}, {'column': 'Head', 'type': 'DOUBLE', 'primary_key': False, 'comment': '扬程（米）', 'examples': ['30.0', '32.0', '35.0', '38.0', '40.0']}, {'column': 'Efficiency', 'type': 'DOUBLE', 'primary_key': False, 'comment': '效率（百分比）', 'examples': ['85.0', '86.0', '88.0', '89.0', '90.0']}]}}\nA physical knowledge question is as follows:\nCalculate the hydraulic power of a pump at a given flow rate and head.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.Pump_ID, p.Model_Number, p.Status, SUM(u.Usage_Hours) AS Total_Usage_Hours, MAX(m.Maintenance_Date) AS Last_Maintenance_Date, DATE_ADD(p.Purchase_date, INTERVAL p.Warranty_Period MONTH) AS Warranty_End_Date FROM pumps p LEFT JOIN usage_records u ON p.Pump_ID = u.pump_ID LEFT JOIN maintenance_records m ON p.Pump_ID = m.pump_ID WHERE p.Status = 'active' GROUP BY p.Pump_ID, p.Model_Number, p.Status, p.Purchase_date, p.Warranty_Period HAVING (Total_Usage_Hours > 1000 OR Last_Maintenance_Date IS NULL OR DATEDIFF(CURDATE(), Last_Maintenance_Date) > 180) AND CURDATE() < Warranty_End_Date;",
        "db_id": "waterPump"
    },
    {
        "id": 383,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water pump', 'Power', 'Efficiency'], 'relations': ['pump_to_specifications (water pump → pump_specifications)', 'power_and_efficiency_to_output (Power × Efficiency → Actual Output Power)'], 'intent': 'calculate_actual_output_power', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['Power', 'Efficiency'], 'units': {'Power': 'W (Watts) or kW (kilowatts)', 'Efficiency': '% (percentage) → converted to decimal', 'conversion': 'Efficiency percentage divided by 100 for formula'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}, {'column': 'Efficiency', 'type': 'DOUBLE', 'primary_key': False, 'comment': '效率（百分比）', 'examples': ['85.0', '86.0', '88.0', '89.0', '90.0']}]}}\nA mathematical logic question is as follows:\nCalculate the actual output power of a water pump under given power and efficiency conditions.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (10000 * 1000 * 9.81) / (3600 * Efficiency) AS Required_Power FROM pump_specifications WHERE Flow_Rate = 10000 AND Head = 1000;",
        "db_id": "waterPump"
    },
    {
        "id": 384,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water pump', 'flow rate 10,000 m³/h', 'head 1,000 m'], 'relations': ['pump_to_specifications (water pump → pump_specifications)', 'flow_rate_to_head (10,000 m³/h → 1,000 m head)'], 'intent': 'calculate_theoretical_power_and_feasibility_discussion', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [10000, 1000], 'units': {'flow_rate': 'cubic meters per hour (m³/h) → converted to m³/s (2.7778 m³/s)', 'head': 'meters (m)', 'power': 'watts (W) or kilowatts (kW) (calculated using P = ρgQH)', 'conversion_formula': 'P = ρ * g * Q * H / 1000 (kW), where ρ=1000 kg/m³, g=9.81 m/s²'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}, {'pk_table': 'pumps', 'pk_column': 'Pump_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Flow_Rate', 'type': 'DOUBLE', 'primary_key': False, 'comment': '流量（立方米/小时）', 'examples': ['50.0', '55.0', '60.0', '65.0', '70.0']}, {'column': 'Head', 'type': 'DOUBLE', 'primary_key': False, 'comment': '扬程（米）', 'examples': ['30.0', '32.0', '35.0', '38.0', '40.0']}, {'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}, {'column': 'Efficiency', 'type': 'DOUBLE', 'primary_key': False, 'comment': '效率（百分比）', 'examples': ['85.0', '86.0', '88.0', '89.0', '90.0']}], 'waterPump.pumps': [{'column': 'Status', 'type': 'ENUM', 'primary_key': False, 'comment': '水泵状态', 'examples': ['active', 'inactive', 'under_maintenance']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the water pump has a flow rate of 10,000 cubic meters per hour and a head of 1,000 meters, calculate its required theoretical power and discuss the feasibility under such extreme conditions.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pumps.Pump_ID, Model_Number, Manufacturer, (Flow_Rate * Head * 9.81 * 1000) / 3600 AS Hydraulic_Power FROM pump_specifications JOIN pumps ON pump_specifications.Pump_ID = pumps.Pump_ID;",
        "db_id": "waterPump"
    },
    {
        "id": 385,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water pump', 'flow rate 100 m³/h', 'head 50 m', 'power 10 kW'], 'relations': ['specifies (water pump → pump_specifications)', 'efficiency_calculation (flow_rate × head ÷ power)'], 'intent': 'calculate_pump_efficiency', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [100, 50, 10], 'units': {'flow_rate': 'm³/h (cubic meters per hour)', 'head': 'm (meters)', 'power': 'kW (kilowatts)', 'efficiency': '% (percentage)', 'conversion': 'Efficiency = (ρ × g × Q × H) / (3600 × P) × 100% (where ρ=1000 kg/m³, g=9.81 m/s²)'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Flow_Rate', 'type': 'DOUBLE', 'primary_key': False, 'comment': '流量（立方米/小时）', 'examples': ['50.0', '55.0', '60.0', '65.0', '70.0']}, {'column': 'Head', 'type': 'DOUBLE', 'primary_key': False, 'comment': '扬程（米）', 'examples': ['30.0', '32.0', '35.0', '38.0', '40.0']}, {'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}, {'column': 'Efficiency', 'type': 'DOUBLE', 'primary_key': False, 'comment': '效率（百分比）', 'examples': ['85.0', '86.0', '88.0', '89.0', '90.0']}]}}\nA physical knowledge question is as follows:\nIf a water pump has a flow rate of 100 cubic meters per hour, a head of 50 meters, and a power of 10 kilowatts, what is its efficiency?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Pump_ID, Power * (Efficiency / 100) AS Actual_Output_Power FROM pump_specifications;",
        "db_id": "waterPump"
    },
    {
        "id": 386,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water pump', 'flow rate 200 m³/h', 'head 80 m', 'efficiency 85%'], 'relations': ['specifies (pump → pump_specifications)', 'power_formula (Power = (Flow_Rate * Head * Density * Gravity)/(Efficiency * 1000))'], 'intent': 'calculate_power_requirement', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [200, 80, 85], 'units': {'flow_rate': 'm³/h (cubic meters per hour)', 'head': 'm (meters)', 'efficiency': '% (percentage, converted to 0.85 decimal)', 'power': 'kW (kilowatts, calculated result)', 'density': 'kg/m³ (water density 1000 kg/m³ assumed)', 'gravity': 'm/s² (9.81 m/s² standard gravity)'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Flow_Rate', 'type': 'DOUBLE', 'primary_key': False, 'comment': '流量（立方米/小时）', 'examples': ['50.0', '55.0', '60.0', '65.0', '70.0']}, {'column': 'Head', 'type': 'DOUBLE', 'primary_key': False, 'comment': '扬程（米）', 'examples': ['30.0', '32.0', '35.0', '38.0', '40.0']}, {'column': 'Efficiency', 'type': 'DOUBLE', 'primary_key': False, 'comment': '效率（百分比）', 'examples': ['85.0', '86.0', '88.0', '89.0', '90.0']}]}}\nA mathematical logic question is as follows:\nIf a water pump has a flow rate of 200 cubic meters per hour, a head of 80 meters, and an efficiency of 85%, what is its power?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.Pump_ID, p.Model_Number, p.Manufacturer, (ps.Flow_Rate * ps.Head * 9.81 / 3600) / (ps.Efficiency / 100) AS Theoretical_Power FROM pump_specifications ps JOIN pumps p ON ps.Pump_ID = p.Pump_ID WHERE ps.Flow_Rate = 10000 AND ps.Head = 1000;",
        "db_id": "waterPump"
    },
    {
        "id": 387,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water pump', 'power 15 kilowatts'], 'relations': ['pump_to_power (pump → power consumption)', 'power_to_energy (15 kW × 1 hour = 15 kWh)'], 'intent': 'calculate_electricity_consumption_per_hour', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [15], 'units': {'power': 'kW (kilowatts)', 'energy': 'kWh (kilowatt-hour)', 'conversion': '15 kW × 1 hour = 15 kWh'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}]}}\nA common sense reasoning question is as follows:\nIf a water pump has a flow rate of 150 cubic meters per hour, a head of 60 meters, and a power of 15 kilowatts, how much electricity does it consume per hour?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Efficiency FROM pump_specifications WHERE Flow_Rate = 100 AND Head = 50 AND Power = 10;",
        "db_id": "waterPump"
    },
    {
        "id": 388,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['pump', 'flow rate 10,000 m³/h', 'head 1,000 m', 'power 10,000 kW', 'gravitational acceleration 100 m/s²'], 'relations': ['pump_to_specifications (pump → pump_specifications)', 'efficiency_formula (η = (ρ * g * H * Q) / P_input)'], 'intent': 'calculate_pump_efficiency', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [10000, 1000, 10000, 100], 'units': {'flow_rate': 'm³/h (cubic meters per hour)', 'head': 'm (meters)', 'power': 'kW (kilowatts)', 'gravitational_acceleration': 'm/s² (meters per second squared)', 'efficiency': '% (percentage)', 'conversion': 'Q (m³/s) = 10000/3600, P_water = ρ * g * H * Q (ρ=1000 kg/m³)'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Flow_Rate', 'type': 'DOUBLE', 'primary_key': False, 'comment': '流量（立方米/小时）', 'examples': ['50.0', '55.0', '60.0', '65.0', '70.0']}, {'column': 'Head', 'type': 'DOUBLE', 'primary_key': False, 'comment': '扬程（米）', 'examples': ['30.0', '32.0', '35.0', '38.0', '40.0']}, {'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}, {'column': 'Efficiency', 'type': 'DOUBLE', 'primary_key': False, 'comment': '效率（百分比）', 'examples': ['85.0', '86.0', '88.0', '89.0', '90.0']}]}}\nA hypothetical reasoning question is as follows:\nIf a pump has a flow rate of 10,000 cubic meters per hour, a head of 1,000 meters, and a power of 10,000 kilowatts, what is its efficiency? Assume the gravitational acceleration is 100 m/s².\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (Flow_Rate * Head * 9.81 * (Efficiency / 100)) / 3600 AS Power_kW FROM pump_specifications WHERE Flow_Rate = 200 AND Head = 80 AND Efficiency = 85;",
        "db_id": "waterPump"
    },
    {
        "id": 389,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n```json\n{\n  \"entities\": [\"water pump\", \"voltage 220 volts\", \"current 10 amps\"],\n  \"relations\": [\"voltage_and_current_to_power (V=220V, I=10A → P=V×I)\", \"pump_to_specifications (water pump → pump_specifications)\"],\n  \"intent\": \"calculate_power_of_water_pump\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [220, 10],\n  \"units\": {\n    \"voltage\": \"volts (V)\",\n    \"current\": \"amps (A)\",\n    \"power\": \"watts (W) (calculated as V × A)\"\n  },\n  \"required_tables\": [\"pump_specifications\"],\n  \"required_fields\": [\n    \"pump_specifications.Voltage\",\n    \"pump_specifications.Current\",\n    \"pump_specifications.Power\"\n  ]\n}\n```\nA physical knowledge question is as follows:\nIf a water pump has a voltage of 220 volts and a current of 10 amps, what is its power?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Power * 1 AS Electricity_Consumption FROM pump_specifications WHERE Flow_Rate = 150 AND Head = 60 AND Power = 15;",
        "db_id": "waterPump"
    },
    {
        "id": 390,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['pump', 'flow rate 100 m³/h', 'head 50 m', 'power 5 kW'], 'relations': ['pump_to_specifications (pump → pump_specifications)', 'specifications_to_efficiency (flow_rate, head, power → efficiency)'], 'intent': 'calculate_pump_efficiency', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100, 50, 5], 'units': {'flow_rate': 'm³/h (cubic meters per hour)', 'head': 'm (meters)', 'power': 'kW (kilowatts)', 'efficiency': 'dimensionless (calculated as percentage)'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Flow_Rate', 'type': 'DOUBLE', 'primary_key': False, 'comment': '流量（立方米/小时）', 'examples': ['50.0', '55.0', '60.0', '65.0', '70.0']}, {'column': 'Head', 'type': 'DOUBLE', 'primary_key': False, 'comment': '扬程（米）', 'examples': ['30.0', '32.0', '35.0', '38.0', '40.0']}, {'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}, {'column': 'Efficiency', 'type': 'DOUBLE', 'primary_key': False, 'comment': '效率（百分比）', 'examples': ['85.0', '86.0', '88.0', '89.0', '90.0']}]}}\nA mathematical logic question is as follows:\nIf a pump has a flow rate of 100 cubic meters per hour, a head of 50 meters, and a power of 5 kilowatts, what is its efficiency?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (Flow_Rate * Head * 100) / (Power * 3600) * 100 AS Efficiency FROM pump_specifications WHERE Flow_Rate = 10000 AND Head = 1000 AND Power = 10000;",
        "db_id": "waterPump"
    },
    {
        "id": 391,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water pump', 'voltage 1,000,000 volts', 'current 5,000 amperes'], 'relations': ['voltage_and_current_to_power (P = V × I)'], 'intent': 'calculate_power', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000000, 5000], 'units': {'voltage': 'volts (V)', 'current': 'amperes (A)', 'power': 'watts (W), calculated as volts × amperes'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Voltage', 'type': 'DOUBLE', 'primary_key': False, 'comment': '电压（伏特）', 'examples': ['220.0', '380.0', '1000000.0', '500000.0', '10000.0']}, {'column': 'Current', 'type': 'DOUBLE', 'primary_key': False, 'comment': '电流（安培）', 'examples': ['25.0', '27.0', '20.0', '22.0', '30.0']}, {'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}]}}\nA hypothetical reasoning question is as follows:\nIf a water pump has a voltage of 1,000,000 volts and a current of 5,000 amperes, what is its power? Assume this water pump can withstand such high voltage and current, and disregard practical implementation limitations.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Power FROM pump_specifications WHERE Voltage = 220 AND Current = 10;",
        "db_id": "waterPump"
    },
    {
        "id": 392,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water pump', 'current 10 amperes', 'voltage 220 volts', 'power factor 0.8'], 'relations': ['power_calculation (P = V × I × Power Factor)'], 'intent': 'calculate_actual_power', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [10, 220, 0.8], 'units': {'current': 'A (amperes)', 'voltage': 'V (volts)', 'power_factor': 'unitless', 'power': 'W (watts)'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}, {'column': 'Voltage', 'type': 'DOUBLE', 'primary_key': False, 'comment': '电压（伏特）', 'examples': ['220.0', '380.0', '1000000.0', '500000.0', '10000.0']}, {'column': 'Current', 'type': 'DOUBLE', 'primary_key': False, 'comment': '电流（安培）', 'examples': ['25.0', '27.0', '20.0', '22.0', '30.0']}]}}\nA physical knowledge question is as follows:\nIf a water pump has a current of 10 amperes, a voltage of 220 volts, and a power factor of 0.8, what is its actual power?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Efficiency FROM pump_specifications WHERE Flow_Rate = 100 AND Head = 50 AND Power = 5;",
        "db_id": "waterPump"
    },
    {
        "id": 393,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water pump', 'flow rate 100 m³/h', 'head 50 m', 'efficiency 80%'], 'relations': ['flow_rate_to_power (direct proportionality)', 'head_to_power (direct proportionality)', 'efficiency_to_power (inverse proportionality)'], 'intent': 'calculate_theoretical_power_requirement', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [100, 50, 80], 'units': {'flow_rate': 'm³/h (cubic meters per hour)', 'head': 'm (meters)', 'efficiency': '% (percentage converted to decimal)', 'power': 'kW (kilowatts) via formula: (ρ * g * Q * H) / (η * 1000)', 'conversion': 'Q = 100 m³/h → 0.02778 m³/s (unit conversion)'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Flow_Rate', 'type': 'DOUBLE', 'primary_key': False, 'comment': '流量（立方米/小时）', 'examples': ['50.0', '55.0', '60.0', '65.0', '70.0']}, {'column': 'Head', 'type': 'DOUBLE', 'primary_key': False, 'comment': '扬程（米）', 'examples': ['30.0', '32.0', '35.0', '38.0', '40.0']}, {'column': 'Efficiency', 'type': 'DOUBLE', 'primary_key': False, 'comment': '效率（百分比）', 'examples': ['85.0', '86.0', '88.0', '89.0', '90.0']}, {'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}]}}\nA mathematical logic question is as follows:\nIf a water pump has a flow rate of 100 cubic meters per hour, a head of 50 meters, and an efficiency of 80%, what is its theoretical power requirement?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (1000000 * 5000) / 1000 AS Power_kW;",
        "db_id": "waterPump"
    },
    {
        "id": 394,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': [\"pump's normal current value\", 'sudden current increase to twice normal'], 'relations': ['current_increase (2x normal)', 'pump_to_specifications (Pump_ID → current rating)'], 'intent': 'diagnose_pump_current_increase', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [2], 'units': {'current': 'A (amps)'}, 'foreign_keys': [{'fk_table': 'maintenance_records', 'fk_column': 'Pump_ID', 'ref_table': 'pump_specifications', 'ref_column': 'Pump_ID'}, {'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'maintenance_records', 'pk_column': 'Record_ID'}, {'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Current', 'type': 'DOUBLE', 'primary_key': False, 'comment': '电流（安培）', 'examples': ['25.0', '27.0', '20.0', '22.0', '30.0']}, {'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}, {'column': 'Voltage', 'type': 'DOUBLE', 'primary_key': False, 'comment': '电压（伏特）', 'examples': ['220.0', '380.0', '1000000.0', '500000.0', '10000.0']}], 'waterPump.maintenance_records': [{'column': 'Maintenance_Type', 'type': 'VARCHAR(100) COLLATE \"utf8mb3_general_ci\"', 'primary_key': False, 'comment': '维护类型（如：清洁、更换零件等）', 'examples': ['Emergency', 'Routine', '紧急维修', '紧急检修', '预防性维护']}, {'column': 'Description', 'type': 'TEXT COLLATE \"utf8mb3_general_ci\"', 'primary_key': False, 'comment': '维护描述', 'examples': ['High current issue', 'Regular check', '处理高电流问题', '异常电流处理', '高电流问题']}]}}\nA common sense reasoning question is as follows:\nPossible reasons if a pump's current suddenly increases to twice its normal value.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (Voltage * Current * 0.8) / 1000 AS Actual_Power FROM pump_specifications WHERE Current = 10 AND Voltage = 220;",
        "db_id": "waterPump"
    },
    {
        "id": 395,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': [\"pump's current 1000 amperes\", 'voltage 10,000 volts', 'power factor 1'], 'relations': ['electrical_parameters_to_power (V, I, PF → P)', 'power_formula (P = V × I × PF)'], 'intent': 'calculate_actual_power', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000, 10000, 1], 'units': {'current': 'amperes (A)', 'voltage': 'volts (V)', 'power_factor': 'unitless', 'power': 'watts (W) (calculated as 10,000,000 W or 10 MW)'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Current', 'type': 'DOUBLE', 'primary_key': False, 'comment': '电流（安培）', 'examples': ['25.0', '27.0', '20.0', '22.0', '30.0']}, {'column': 'Voltage', 'type': 'DOUBLE', 'primary_key': False, 'comment': '电压（伏特）', 'examples': ['220.0', '380.0', '1000000.0', '500000.0', '10000.0']}, {'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}]}}\nA hypothetical reasoning question is as follows:\nIf a pump's current reaches 1000 amperes, the voltage is 10,000 volts, and the power factor is 1, what is its actual power? Assume the pump's cooling system can handle this extreme condition.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (Flow_Rate * Head * 9.81) / (Efficiency / 100) AS Theoretical_Power FROM pump_specifications WHERE Flow_Rate = 100 AND Head = 50 AND Efficiency = 80;",
        "db_id": "waterPump"
    },
    {
        "id": 396,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\nthere is nothing I can give you about this question.\nA physical knowledge question is as follows:\nIf a water pump has an efficiency of 85%, a flow rate of 100 cubic meters per hour, and a head of 50 meters, what is its output power?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.Pump_ID, p.Model_Number, p.Location, ps.Current, ps.Voltage, ps.Power, mr.Maintenance_Type, mr.Description, ur.Usage_Hours, ur.Notes FROM pumps p JOIN pump_specifications ps ON p.Pump_ID = ps.Pump_ID LEFT JOIN maintenance_records mr ON p.Pump_ID = mr.pump_ID LEFT JOIN usage_records ur ON p.Pump_ID = ur.pump_ID WHERE ps.Current >= (SELECT 2 * AVG(Current) FROM pump_specifications WHERE Pump_ID = p.Pump_ID) AND p.Status = 'active';",
        "db_id": "waterPump"
    },
    {
        "id": 397,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water pump', 'power 10 kilowatts', 'voltage 220 volts', 'current 50 amperes'], 'relations': ['power_input_to_pump (220V × 50A = 11kW)', 'efficiency_ratio (output_power / input_power = 10kW / 11kW)'], 'intent': 'calculate_actual_efficiency_of_water_pump', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10, 220, 50], 'units': {'power': 'kilowatts (kW)', 'voltage': 'volts (V)', 'current': 'amperes (A)', 'efficiency': 'percentage (%)'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}, {'column': 'Voltage', 'type': 'DOUBLE', 'primary_key': False, 'comment': '电压（伏特）', 'examples': ['220.0', '380.0', '1000000.0', '500000.0', '10000.0']}, {'column': 'Current', 'type': 'DOUBLE', 'primary_key': False, 'comment': '电流（安培）', 'examples': ['25.0', '27.0', '20.0', '22.0', '30.0']}, {'column': 'Efficiency', 'type': 'DOUBLE', 'primary_key': False, 'comment': '效率（百分比）', 'examples': ['85.0', '86.0', '88.0', '89.0', '90.0']}]}}\nA mathematical logic question is as follows:\nIf a water pump has a power of 10 kilowatts, a voltage of 220 volts, and a current of 50 amperes, what is its actual efficiency?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (1000 * 10000 * 1) / 1000 AS Actual_Power;",
        "db_id": "waterPump"
    },
    {
        "id": 398,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water pump', 'efficiency 200%', 'flow rate 1000 m³/h', 'head 1000 m'], 'relations': ['pump_to_specifications', 'flow_rate_to_head', 'efficiency_to_output_power'], 'intent': 'calculate_output_power_of_pump', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [200, 1000, 1000], 'units': {'flow_rate': 'm³/h (cubic meters per hour)', 'head': 'm (meters)', 'efficiency': '% (percentage)', 'power': 'kW (kilowatts, implied by standard formula)', 'conversion': 'flow_rate: 1000 m³/h → 0.2778 m³/s (unit conversion for calculation)'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Flow_Rate', 'type': 'DOUBLE', 'primary_key': False, 'comment': '流量（立方米/小时）', 'examples': ['50.0', '55.0', '60.0', '65.0', '70.0']}, {'column': 'Head', 'type': 'DOUBLE', 'primary_key': False, 'comment': '扬程（米）', 'examples': ['30.0', '32.0', '35.0', '38.0', '40.0']}, {'column': 'Efficiency', 'type': 'DOUBLE', 'primary_key': False, 'comment': '效率（百分比）', 'examples': ['85.0', '86.0', '88.0', '89.0', '90.0']}]}}\nA hypothetical reasoning question is as follows:\nIf a water pump has an efficiency of 200%, a flow rate of 1000 cubic meters per hour, and a head of 1000 meters, what is its output power?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (Flow_Rate * Head * 9.81 * Efficiency / 100) / 3600 AS Output_Power_kW FROM pump_specifications WHERE Flow_Rate = 100 AND Head = 50 AND Efficiency = 85;",
        "db_id": "waterPump"
    },
    {
        "id": 399,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['water pump', 'flow rate 100 m³/h', 'head 50 m', 'power 10 kW'], 'relations': ['pump_to_specs (Pump_ID → pump_specifications)', 'efficiency_formula (η = (ρ * g * Q * H)/P)'], 'intent': 'calculate_pump_efficiency', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [100, 50, 10], 'units': {'flow_rate': 'm³/h (cubic meters per hour)', 'head': 'm (meters)', 'power': 'kW (kilowatts)', 'efficiency': '% (calculated as unitless ratio × 100)'}, 'foreign_keys': [{'fk_table': 'pump_specifications', 'fk_column': 'Pump_ID', 'ref_table': 'pumps', 'ref_column': 'Pump_ID'}], 'primary_keys': [{'pk_table': 'pump_specifications', 'pk_column': 'Spec_ID'}], 'tableinfo': {'waterPump.pump_specifications': [{'column': 'Flow_Rate', 'type': 'DOUBLE', 'primary_key': False, 'comment': '流量（立方米/小时）', 'examples': ['50.0', '55.0', '60.0', '65.0', '70.0']}, {'column': 'Head', 'type': 'DOUBLE', 'primary_key': False, 'comment': '扬程（米）', 'examples': ['30.0', '32.0', '35.0', '38.0', '40.0']}, {'column': 'Power', 'type': 'DOUBLE', 'primary_key': False, 'comment': '功率（千瓦）', 'examples': ['5.0', '6.0', '7.0', '8.0', '9.0']}, {'column': 'Efficiency', 'type': 'DOUBLE', 'primary_key': False, 'comment': '效率（百分比）', 'examples': ['85.0', '86.0', '88.0', '89.0', '90.0']}]}}\nA physical knowledge question is as follows:\nIf a water pump has a flow rate of 100 cubic meters per hour, a head of 50 meters, and a power of 10 kilowatts, what is its efficiency?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Efficiency FROM pump_specifications WHERE Power = 10 AND Voltage = 220 AND Current = 50;",
        "db_id": "waterPump"
    }
]