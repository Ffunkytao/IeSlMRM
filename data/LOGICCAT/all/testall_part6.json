[
    {
        "id": 0,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['all devices', 'purchase date', 'average service life'], 'relations': ['purchase_date_adjustment (original_date → advanced_by_1_year)', 'service_life_calculation (adjusted_purchase_date → current_date)'], 'intent': 'recalculate_average_service_life_after_purchase_date_adjustment', 'reasoning_type': 'ideal hypothesis reasoning', 'numerical_values': [1], 'units': {'time_adjustment': 'year', 'service_life_unit': 'years (implied by date arithmetic)', 'conversion': '1 year = 365 days (date difference calculation)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'purchaseDate'}, {'column': 'deviceId'}]}}\nA hypothetical reasoning question is as follows:\nAssuming the purchase date of all devices is advanced by 1 year, recalculate the average service life.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(JULIANDAY('now') - JULIANDAY(purchaseDate, '-1 year')) AS avg_lifespan FROM Devices;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 1,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['data quality distribution (high, medium, low)', 'sensor types'], 'relations': ['device_type_to_data_quality (sensor types → data quality distribution)'], 'intent': 'statistics_on_data_quality_distribution_per_sensor_type', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': [{'fk_table': 'EnergyConsumption', 'fk_column': 'deviceId', 'ref_table': 'EnergyDevices', 'ref_column': 'deviceId'}, {'fk_table': 'EnergyDevices', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}], 'primary_keys': [{'pk_table': 'EnergyConsumption', 'pk_column': 'consumptionId'}, {'pk_table': 'EnergyDevices', 'pk_column': 'deviceId'}], 'tableinfo': {'EnergyManagementDB.EnergyDevices': [{'column': 'deviceType', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['太阳能', '风能', '化石燃料']}], 'EnergyManagementDB.EnergyConsumption': [{'column': 'dataQuality'}]}}\nA mathematical logic question is as follows:\nStatistics on the data quality distribution (high, medium, low) for each type of sensor.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM MaintenanceRecords WHERE maintenanceDate < (SELECT installationDate FROM EnergyDevices WHERE EnergyDevices.deviceId = MaintenanceRecords.deviceId);",
        "db_id": "EnergyManagementDB"
    },
    {
        "id": 2,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['humidity sensor data', 'abnormal records'], 'relations': ['data_stored_in (humidity sensor data → ExperimentData.measurementValue)', 'threshold_violation (measurementValue > 100% OR measurementValue < 0%)'], 'intent': 'identify_abnormal_records', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [0, 100], 'units': {'humidity': '% (percentage)', 'thresholds': 'Lower bound: 0%, Upper bound: 100%'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'dataId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2002', '2', '3', '4']}, {'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}, {'column': 'timestamp', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-02 10:30:00']}]}}\nA common sense reasoning question is as follows:\nIdentify abnormal records where humidity sensor data exceeds 100% or falls below 0%.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM ExperimentData WHERE deviceId IN (SELECT deviceId FROM Devices WHERE deviceType = '湿度传感器') AND (measurementValue > 100 OR measurementValue < 0);",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 3,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\nthere is nothing I can give you about this question.\nA hypothetical reasoning question is as follows:\nAssuming a 50% increase in the carbon emission coefficient, calculate the total annual carbon emissions.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT s.sensorType, sd.dataQuality, COUNT(sd.dataId) AS data_count FROM SensorData sd JOIN Sensors s ON sd.sensorId = s.sensorId GROUP BY s.sensorType, sd.dataQuality;",
        "db_id": "SmartHomeDB"
    },
    {
        "id": 4,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['goods', 'shipping cost', 'weight', 'distance'], 'relations': ['cost_calculation_formula (shipping cost = weight × distance × 0.5 yuan/kg-km)', 'goods_to_weight (via Products.weight)', 'order_to_goods (via OrderDetails)'], 'intent': 'calculate_total_shipping_cost_using_formula', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.5], 'units': {'weight': 'kilogram (kg)', 'distance': 'kilometer (km)', 'cost': 'yuan (¥)', 'rate': '0.5 yuan per kilogram-kilometer'}, 'foreign_keys': [{'fk_table': 'Products', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}, {'fk_table': 'OrderDetails', 'fk_column': 'orderId', 'ref_table': 'Orders', 'ref_column': 'orderId'}, {'fk_table': 'OrderDetails', 'fk_column': 'productId', 'ref_table': 'Products', 'ref_column': 'productId'}, {'fk_table': 'Orders', 'fk_column': 'userId', 'ref_table': 'Users', 'ref_column': 'userId'}, {'fk_table': 'Shipping', 'fk_column': 'orderId', 'ref_table': 'Orders', 'ref_column': 'orderId'}], 'primary_keys': [{'pk_table': 'OrderDetails', 'pk_column': 'detailId'}, {'pk_table': 'Orders', 'pk_column': 'orderId'}, {'pk_table': 'Products', 'pk_column': 'productId'}, {'pk_table': 'Shipping', 'pk_column': 'shippingId'}], 'tableinfo': {'ECommerce.Products': [{'column': 'weight'}, {'column': 'productId'}], 'ECommerce.OrderDetails': [{'column': 'quantity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1']}, {'column': 'productId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3']}, {'column': 'orderId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3']}], 'ECommerce.Shipping': [{'column': 'orderId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '7', '1001']}], 'ECommerce.Orders': [{'column': 'orderId'}]}}\nA physical knowledge question is as follows:\nCalculate the total shipping cost for the goods (assuming the shipping cost is weight × distance × 0.5 yuan per kilogram-kilometer).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM(weight * distance * 0.5) AS total_shipping_cost FROM Products;",
        "db_id": "ECommerce"
    },
    {
        "id": 5,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Users', 'Orders', 'total order amount'], 'relations': ['user_to_orders (Users.userId → Orders.userId)'], 'intent': 'calculate_total_order_amount_per_user', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'currency': 'implied by database schema (amount fields)'}, 'foreign_keys': [{'fk_table': 'Orders', 'fk_column': 'userId', 'ref_table': 'Users', 'ref_column': 'userId'}], 'primary_keys': [{'pk_table': 'Orders', 'pk_column': 'orderId'}, {'pk_table': 'Users', 'pk_column': 'userId'}], 'tableinfo': {'ECommerce.Users': [{'column': 'userId'}, {'column': 'userName'}], 'ECommerce.Orders': [{'column': 'totalAmount'}]}}\nA mathematical logic question is as follows:\nCount the total order amount for each user and sort in descending order by amount.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT userId, SUM(totalAmount) AS total_spent FROM Orders GROUP BY userId ORDER BY total_spent DESC;",
        "db_id": "ECommerce"
    },
    {
        "id": 6,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['orders', 'order amount'], 'relations': ['order_has_amount (orders → finalAmount)'], 'intent': 'filter_orders_by_non_positive_final_amount', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [0], 'units': {}, 'foreign_keys': [{'fk_table': 'Orders', 'fk_column': 'userId', 'ref_table': 'Users', 'ref_column': 'userId'}], 'primary_keys': [{'pk_table': 'Orders', 'pk_column': 'orderId'}], 'tableinfo': {'ECommerce.Orders': [{'column': 'orderId'}, {'column': 'userId'}, {'column': 'orderDate'}, {'column': 'totalAmount'}, {'column': 'shippingAddress'}, {'column': 'paymentMethod'}, {'column': 'orderStatus'}, {'column': 'shippingFee'}, {'column': 'tax'}, {'column': 'discount'}, {'column': 'finalAmount'}, {'column': 'maintenanceDate'}, {'column': 'nextMaintenanceDate'}]}}\nA common sense reasoning question is as follows:\nFind records where the order amount is negative or zero.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM(p.weight * s.shippingFee * 0.5) AS total_shipping_cost FROM Products p JOIN Shipping s ON p.productId = s.orderId;",
        "db_id": "ECommerce"
    },
    {
        "id": 7,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['freight rates', 'total freight cost'], 'relations': ['rate_to_cost (freight rates → total freight cost via 20% increase)', 'database_mapping (freight rates → Shipping.shippingFee)'], 'intent': 'calculate_total_freight_cost_after_increase', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20], 'units': {'percentage': '%', 'currency': 'monetary unit (implicit from shippingFee)'}, 'foreign_keys': [{'fk_table': 'Shipping', 'fk_column': 'orderId', 'ref_table': 'Orders', 'ref_column': 'orderId'}], 'primary_keys': [{'pk_table': 'Shipping', 'pk_column': 'shippingId'}], 'tableinfo': {'ECommerce.Shipping': [{'column': 'shippingFee', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['10.0', '15.0', '5.0', '20.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a 20% increase in freight rates, calculate the total freight cost.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM(weight * distance * 0.6) AS total_shipping_cost FROM Products;",
        "db_id": "ECommerce"
    },
    {
        "id": 8,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['equipment', 'maintenance interval'], 'relations': ['device_maintenance_relationship (equipment → maintenance records via deviceId)', 'interval_calculation_relation (computed from consecutive maintenance dates)'], 'intent': 'calculate_average_maintenance_interval_in_days', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [], 'units': {'interval_unit': 'days', 'calculation': 'DATEDIFF(day, previous_maintenance_date, next_maintenance_date)'}, 'foreign_keys': [{'fk_table': 'MaintenanceRecords', 'fk_column': 'deviceId', 'ref_table': 'EnergyDevices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'MaintenanceRecords', 'pk_column': 'maintenanceId'}], 'tableinfo': {'EnergyManagementDB.MaintenanceRecords': [{'column': 'deviceId'}, {'column': 'maintenanceDate'}, {'column': 'nextMaintenanceDate'}]}}\nA physical knowledge question is as follows:\nCalculate the average maintenance interval of the equipment (unit: days).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(JULIANDAY(nextMaintenanceDate) - JULIANDAY(lastMaintenanceDate)) AS avg_maintenance_interval FROM MaintenanceRecords;",
        "db_id": "EnergyManagementDB"
    },
    {
        "id": 9,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\nthere is nothing I can give you about this question.\nA mathematical logic question is as follows:\nCount the number of devices for each location, and sort them in descending order by quantity.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT category AS product_category, COUNT(productId) AS product_count FROM Products GROUP BY category ORDER BY product_count DESC;",
        "db_id": "ECommerce"
    },
    {
        "id": 10,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['maintenance records', 'maintenance date', 'next scheduled maintenance date'], 'relations': ['date_contradiction (maintenanceDate > nextMaintenanceDate)', 'record_validity (contradictory chronological order)'], 'intent': 'identify_contradictory_maintenance_records', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'date_comparison': 'chronological order (no unit conversion needed)', 'temporal_units': 'date (YYYY-MM-DD format implied by database)'}, 'foreign_keys': [{'fk_table': 'MaintenanceRecords', 'fk_column': 'deviceId', 'ref_table': 'EnergyDevices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'MaintenanceRecords', 'pk_column': 'maintenanceId'}], 'tableinfo': {'EnergyManagementDB.MaintenanceRecords': [{'column': 'maintenanceId'}, {'column': 'deviceId'}, {'column': 'maintenanceDate'}, {'column': 'nextMaintenanceDate'}]}}\nA common sense reasoning question is as follows:\nIdentify the contradictory data in maintenance records where the maintenance date is later than the next scheduled maintenance date.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM MaintenanceRecords WHERE maintenanceDate > nextMaintenanceDate;",
        "db_id": "EnergyManagementDB"
    },
    {
        "id": 11,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['maintenance interval', 'all devices'], 'relations': ['device_to_maintenance (Devices.deviceId → MaintenanceRecords.deviceId)'], 'intent': 'recalculate_average_maintenance_interval_after_reduction', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50], 'units': {'reduction_percentage': '%', 'time_interval': 'days (implied by date differences)'}, 'foreign_keys': [{'fk_table': 'MaintenanceRecords', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'MaintenanceRecords', 'pk_column': 'maintenanceId'}], 'tableinfo': {'PhysicsLabDB.MaintenanceRecords': [{'column': 'deviceId'}, {'column': 'maintenanceDate'}]}}\nA hypothetical reasoning question is as follows:\nAssuming the maintenance interval for all devices is reduced by 50%, recalculate the average maintenance interval.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT labId, COUNT(deviceId) AS device_count FROM Devices GROUP BY labId ORDER BY device_count DESC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 12,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['failure rate', 'each type of device', 'number of failures', 'days of use'], 'relations': ['device_to_maintenance (EnergyDevices.deviceId → MaintenanceRecords.deviceId)', 'device_type_grouping (group by EnergyDevices.deviceType)'], 'intent': 'calculate_and_rank_device_failure_rates', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'failure_rate': 'failures per day (dimensionless ratio)', 'time': 'days (derived from installationDate to current date)'}, 'foreign_keys': [{'fk_table': 'MaintenanceRecords', 'fk_column': 'deviceId', 'ref_table': 'EnergyDevices', 'ref_column': 'deviceId'}, {'fk_table': 'EnergyDevices', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}], 'primary_keys': [{'pk_table': 'EnergyDevices', 'pk_column': 'deviceId'}, {'pk_table': 'MaintenanceRecords', 'pk_column': 'maintenanceId'}], 'tableinfo': {'EnergyManagementDB.EnergyDevices': [{'column': 'deviceId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '6', '10', '11', '20']}, {'column': 'deviceType', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['太阳能', '风能', '化石燃料']}, {'column': 'installationDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-01-15 10:00:00']}], 'EnergyManagementDB.MaintenanceRecords': [{'column': 'maintenanceId'}]}}\nA mathematical logic question is as follows:\nCount the failure rate (number of failures/days of use) for each type of device and sort them in descending order by failure rate.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT deviceType, COUNT(maintenanceId) / (JULIANDAY('now') - JULIANDAY(installationDate)) AS failure_rate FROM MaintenanceRecords GROUP BY deviceType ORDER BY failure_rate DESC;",
        "db_id": "EnergyManagementDB"
    },
    {
        "id": 13,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['device', 'installation date'], 'relations': ['device_has_installation_date'], 'intent': 'filter_devices_with_future_installation_dates', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'date': 'date format (e.g., YYYY-MM-DD)', 'comparison': 'future relative to current date'}, 'foreign_keys': [{'fk_table': 'EnergyDevices', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}], 'primary_keys': [{'pk_table': 'EnergyDevices', 'pk_column': 'deviceId'}], 'tableinfo': {'EnergyManagementDB.EnergyDevices': [{'column': 'deviceId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '6', '10', '11', '20']}, {'column': 'installationDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-01-15 10:00:00']}]}}\nA common sense reasoning question is as follows:\nIdentify records where the device installation date is in the future.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM EnergyDevices WHERE installationDate > NOW();",
        "db_id": "EnergyManagementDB"
    },
    {
        "id": 14,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['all devices', 'power increase', 'total annual electricity cost'], 'relations': ['power_increase_effect (40% increase → impacts energy consumption)', 'consumption_to_cost (energy consumption → electricity cost)'], 'intent': 'calculate_total_annual_cost_after_power_increase', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [40], 'units': {'power': 'base unit from powerRating (assumed kW)', 'energy': 'kWh (implied by energyConsumed)', 'percentage': '% (40% power increase)', 'cost_conversion': 'Requires electricity rate ($/kWh), not provided in schema'}, 'foreign_keys': [{'fk_table': 'EnergyConsumption', 'fk_column': 'deviceId', 'ref_table': 'EnergyDevices', 'ref_column': 'deviceId'}, {'fk_table': 'EnergyDevices', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}], 'primary_keys': [{'pk_table': 'EnergyConsumption', 'pk_column': 'consumptionId'}, {'pk_table': 'EnergyDevices', 'pk_column': 'deviceId'}], 'tableinfo': {'EnergyManagementDB.EnergyConsumption': [{'column': 'energyConsumed'}, {'column': 'timestamp'}], 'EnergyManagementDB.EnergyDevices': [{'column': 'powerRating', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['100.0', '500.0', '1000.0', '1000000.0', '600.0']}, {'column': 'deviceId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '6', '10', '11', '20']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the power of all devices increases by 40%, calculate the total annual electricity cost.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT e.deviceType, COUNT(m.maintenanceId) / AVG(DATEDIFF(NOW(), e.installationDate)) AS failure_rate FROM MaintenanceRecords m JOIN EnergyDevices e ON m.deviceId = e.deviceId GROUP BY e.deviceType ORDER BY failure_rate DESC;",
        "db_id": "EnergyManagementDB"
    },
    {
        "id": 15,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['products', 'weight'], 'relations': ['product_to_weight (Devices → weightKg)'], 'intent': 'calculate_average_weight', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'weight': 'kilograms (kg)', 'conversion': 'not applicable (data already in target unit)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'weightKg'}]}}\nA physical knowledge question is as follows:\nCalculate the average weight of the products (unit: kilograms).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(measurementValue) AS avg_weight FROM ExperimentData WHERE unit = 'kg';",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 16,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['product category', 'total sales'], 'relations': ['product_to_category (Products.productId → Products.category)', 'orderdetails_to_products (OrderDetails.productId → Products.productId)'], 'intent': 'aggregate_and_sort_sales_by_category', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'sales': 'monetary unit (implied by OrderDetails.totalPrice)'}, 'foreign_keys': [{'fk_table': 'Products', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}, {'fk_table': 'OrderDetails', 'fk_column': 'orderId', 'ref_table': 'Orders', 'ref_column': 'orderId'}, {'fk_table': 'OrderDetails', 'fk_column': 'productId', 'ref_table': 'Products', 'ref_column': 'productId'}], 'primary_keys': [{'pk_table': 'OrderDetails', 'pk_column': 'detailId'}, {'pk_table': 'Products', 'pk_column': 'productId'}], 'tableinfo': {'ECommerce.Products': [{'column': 'category'}, {'column': 'productId'}], 'ECommerce.OrderDetails': [{'column': 'totalPrice', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['999.99', '1499.99', '299.99']}, {'column': 'productId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3']}]}}\nA mathematical logic question is as follows:\nCount the total sales for each product category and sort them in descending order by sales.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT category, SUM(totalPrice) AS total_sales FROM Orders GROUP BY category ORDER BY total_sales DESC;",
        "db_id": "ECommerce"
    },
    {
        "id": 17,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['product inventory'], 'relations': [], 'intent': 'retrieve_products_with_low_inventory', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [0], 'units': {'inventory': 'items (unitless count)'}, 'foreign_keys': [{'fk_table': 'Products', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}], 'primary_keys': [{'pk_table': 'Products', 'pk_column': 'productId'}], 'tableinfo': {'ECommerce.Products': [{'column': 'productId'}, {'column': 'productName'}, {'column': 'description'}, {'column': 'price'}, {'column': 'stock'}, {'column': 'category'}, {'column': 'weight'}, {'column': 'volume'}, {'column': 'manufacturerId'}, {'column': 'creationDate'}, {'column': 'status'}]}}\nA common sense reasoning question is as follows:\nFind records where the product inventory is negative or zero.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM Products WHERE stock <= 0;",
        "db_id": "ECommerce"
    },
    {
        "id": 18,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['products', 'transportation weight'], 'relations': ['weight_reduction (30% decrease)', 'product_to_transportation (Products → OrderDetails → Shipping)'], 'intent': 'calculate_total_transportation_weight_after_reduction', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [30], 'units': {'reduction_percentage': '% (percentage)', 'weight': 'unit from Products.weight (exact unit unspecified in schema)'}, 'foreign_keys': [{'fk_table': 'Products', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}, {'fk_table': 'OrderDetails', 'fk_column': 'orderId', 'ref_table': 'Orders', 'ref_column': 'orderId'}, {'fk_table': 'OrderDetails', 'fk_column': 'productId', 'ref_table': 'Products', 'ref_column': 'productId'}, {'fk_table': 'Shipping', 'fk_column': 'orderId', 'ref_table': 'Orders', 'ref_column': 'orderId'}], 'primary_keys': [{'pk_table': 'OrderDetails', 'pk_column': 'detailId'}, {'pk_table': 'Products', 'pk_column': 'productId'}, {'pk_table': 'Shipping', 'pk_column': 'shippingId'}], 'tableinfo': {'ECommerce.Products': [{'column': 'weight'}], 'ECommerce.OrderDetails': [{'column': 'quantity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1']}, {'column': 'productId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3']}], 'ECommerce.Shipping': [{'column': 'shippingId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'orderId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '7', '1001']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the weight of all products decreases by 30%, calculate the total transportation weight.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.category, SUM(od.quantity * p.weight) AS total_weight FROM OrderDetails od JOIN Products p ON od.productId = p.productId GROUP BY p.category ORDER BY total_weight DESC;",
        "db_id": "ECommerce"
    },
    {
        "id": 19,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['devices', 'warranty period'], 'relations': ['device_remaining_warranty (deviceId → warrantyEndDate)'], 'intent': 'calculate_average_remaining_warranty_days', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'time': 'days (explicitly requested)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'warrantyEndDate'}, {'column': 'purchaseDate'}]}}\nA physical knowledge question is as follows:\nCalculate the average remaining warranty days for the devices (in days).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(JULIANDAY(warrantyExpiryDate) - JULIANDAY('now')) AS avg_warranty_remaining FROM Devices;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 20,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturer', 'maintenance cost'], 'relations': ['manufacturer_owns_devices (Manufacturers → EnergyDevices)', 'device_has_maintenance (EnergyDevices → MaintenanceRecords)'], 'intent': 'calculate_average_maintenance_cost_per_manufacturer', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'cost': 'currency unit (implied by database schema, not explicitly specified)'}, 'foreign_keys': [{'fk_table': 'MaintenanceRecords', 'fk_column': 'deviceId', 'ref_table': 'EnergyDevices', 'ref_column': 'deviceId'}, {'fk_table': 'EnergyDevices', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}], 'primary_keys': [{'pk_table': 'EnergyDevices', 'pk_column': 'deviceId'}, {'pk_table': 'MaintenanceRecords', 'pk_column': 'maintenanceId'}, {'pk_table': 'Manufacturers', 'pk_column': 'manufacturerId'}], 'tableinfo': {'EnergyManagementDB.Manufacturers': [{'column': 'manufacturerName'}], 'EnergyManagementDB.MaintenanceRecords': [{'column': 'cost'}, {'column': 'deviceId'}], 'EnergyManagementDB.EnergyDevices': [{'column': 'manufacturerId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '10', '20']}]}}\nA mathematical logic question is as follows:\nStatistics on the average maintenance cost of equipment for each manufacturer, sorted in descending order by cost.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT manufacturerId, AVG(cost) AS avg_maintenance_cost FROM MaintenanceRecords GROUP BY manufacturerId ORDER BY avg_maintenance_cost DESC;",
        "db_id": "EnergyManagementDB"
    },
    {
        "id": 21,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['device', \"status 'Running'\", 'maintenance date'], 'relations': [\"status_condition (device.status = 'Running')\", 'absence_of_record (maintenance date not recorded)'], 'intent': 'find_devices_running_without_maintenance_record', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'deviceId'}, {'column': 'status'}, {'column': 'lastMaintenanceDate'}]}}\nA common sense reasoning question is as follows:\nFind records where the device status is 'Running' but no maintenance date is recorded.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM Devices WHERE status = '运行中' AND calibrationDate IS NULL;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 22,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['devices', 'warranty period', 'remaining warranty days', 'extension of one year'], 'relations': ['device_to_warranty (device has an associated warranty period)', 'warranty_extension (original warranty period + 1 year)'], 'intent': 'calculate_average_remaining_warranty_days_after_extension', 'reasoning_type': 'ideal hypothesis reasoning', 'numerical_values': [1], 'units': {'time_extension': '1 year (365 days assumed)', 'result_unit': 'days'}, 'foreign_keys': [{'fk_table': 'EnergyDevices', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}], 'primary_keys': [{'pk_table': 'EnergyDevices', 'pk_column': 'deviceId'}], 'tableinfo': {'EnergyManagementDB.EnergyDevices': [{'column': 'deviceId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '6', '10', '11', '20']}, {'column': 'installationDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-01-15 10:00:00']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the warranty period for all devices is extended by one year, recalculate the average remaining warranty days.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT maintenanceId, AVG(cost) AS avg_maintenance_cost FROM MaintenanceRecords GROUP BY maintenanceId ORDER BY avg_maintenance_cost DESC;",
        "db_id": "EnergyManagementDB"
    },
    {
        "id": 23,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['sensor type', 'data collection frequency'], 'relations': ['type_to_frequency (sensorType → dataCollectionFrequency)'], 'intent': 'calculate_and_rank_sensor_frequencies', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'frequency': 'times/day (explicitly requested unit)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': [{'pk_table': 'Sensors', 'pk_column': 'sensorId'}], 'tableinfo': {'PhysicsLabDB.Sensors': [{'column': 'sensorType'}, {'column': 'dataCollectionFrequency'}]}}\nA mathematical logic question is as follows:\nCounting the data collection frequency (in units of times/day) for each type of sensor, and sorting them in descending order by frequency.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM Devices WHERE status = '运行中' AND lastMaintenanceDate IS NULL;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 24,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['temperature sensor data', 'abnormal records', '50°C upper threshold', '-20°C lower threshold'], 'relations': ['threshold_exceedance (temperature > 50°C)', 'threshold_underrun (temperature < -20°C)', 'sensor_to_reading (Sensors.sensorId → TemperatureReadings.sensorId)'], 'intent': 'identify_abnormal_temperature_records', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [50, -20], 'units': {'temperature': '°C (Celsius)', 'threshold_unit': '°C (explicit in query)'}, 'foreign_keys': [{'fk_table': 'TemperatureReadings', 'fk_column': 'sensorId', 'ref_table': 'Sensors', 'ref_column': 'sensorId'}], 'primary_keys': [{'pk_table': 'TemperatureReadings', 'pk_column': 'recordId'}], 'tableinfo': {'PhysicsLabDB.TemperatureReadings': [{'column': 'recordId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2001', '2002']}, {'column': 'sensorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['101']}, {'column': 'recordedAt', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2025-06-17 23:44:59']}, {'column': 'temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['65.0', '-25.0']}]}}\nA common sense reasoning question is as follows:\nIdentify abnormal records where the temperature sensor data exceeds 50°C or falls below -20°C.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM TemperatureReadings WHERE temperature > 50 OR temperature < -20;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 25,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\nthere is nothing I can give you about this question.\nA hypothetical reasoning question is as follows:\nAssuming the carbon emission factor increases by 50%, calculate the total annual carbon emissions.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT sensorId, COUNT(dataId) AS data_frequency FROM SensorData GROUP BY sensorId ORDER BY data_frequency DESC;",
        "db_id": "SmartHomeDB"
    },
    {
        "id": 26,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['goods', 'shipping cost', 'weight', 'distance'], 'relations': ['goods_to_weight (Products.productId → Products.weight)', 'goods_to_quantity (OrderDetails.productId → OrderDetails.quantity)', 'shipping_cost_calculation (formula: weight × distance × 0.5)'], 'intent': 'calculate_total_shipping_cost_using_formula', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.5], 'units': {'weight': 'kg (kilogram)', 'distance': 'km (kilometer)', 'cost': 'yuan', 'conversion': 'shipping_cost = total_weight_kg × distance_km × 0.5 yuan'}, 'foreign_keys': [{'fk_table': 'Products', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}, {'fk_table': 'OrderDetails', 'fk_column': 'orderId', 'ref_table': 'Orders', 'ref_column': 'orderId'}, {'fk_table': 'OrderDetails', 'fk_column': 'productId', 'ref_table': 'Products', 'ref_column': 'productId'}], 'primary_keys': [{'pk_table': 'OrderDetails', 'pk_column': 'detailId'}, {'pk_table': 'Products', 'pk_column': 'productId'}], 'tableinfo': {'ECommerce.Products': [{'column': 'weight'}], 'ECommerce.OrderDetails': [{'column': 'quantity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1']}]}}\nA physical knowledge question is as follows:\nCalculate the total shipping cost for the goods (assuming the shipping cost is weight × distance × 0.5 yuan per kilogram-kilometer).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM(weight * distance * 0.5) AS total_shipping_cost FROM Products;",
        "db_id": "ECommerce"
    },
    {
        "id": 27,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['user', 'total order amount'], 'relations': ['user_to_orders (Users.userId → Orders.userId)', 'aggregation (sum of Orders.finalAmount per user)'], 'intent': 'calculate_total_order_amount_per_user_and_sort_descending', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': [{'fk_table': 'Orders', 'fk_column': 'userId', 'ref_table': 'Users', 'ref_column': 'userId'}], 'primary_keys': [{'pk_table': 'Orders', 'pk_column': 'orderId'}, {'pk_table': 'Users', 'pk_column': 'userId'}], 'tableinfo': {'ECommerce.Users': [{'column': 'userId'}], 'ECommerce.Orders': [{'column': 'finalAmount'}]}}\nA mathematical logic question is as follows:\nCalculate the total order amount for each user and sort them in descending order by amount.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT userId, SUM(totalAmount) AS total_spent FROM Orders GROUP BY userId ORDER BY total_spent DESC;",
        "db_id": "ECommerce"
    },
    {
        "id": 28,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': [\"order status 'Completed'\", 'payment not successful'], 'relations': ['order_to_payment (Orders.orderId → Payments.orderId)'], 'intent': 'identify_completed_orders_with_failed_payments', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': [{'fk_table': 'Orders', 'fk_column': 'userId', 'ref_table': 'Users', 'ref_column': 'userId'}, {'fk_table': 'Payments', 'fk_column': 'orderId', 'ref_table': 'Orders', 'ref_column': 'orderId'}], 'primary_keys': [{'pk_table': 'Orders', 'pk_column': 'orderId'}, {'pk_table': 'Payments', 'pk_column': 'paymentId'}], 'tableinfo': {'ECommerce.Orders': [{'column': 'orderId'}, {'column': 'orderStatus'}], 'ECommerce.Payments': [{'column': 'orderId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '6']}, {'column': 'paymentStatus', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['成功', '失败']}]}}\nA common sense reasoning question is as follows:\nFind records where the order status is 'Completed' but the payment was not successful.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM(weight * price * 0.5) AS total_shipping_cost FROM Products;",
        "db_id": "ECommerce"
    },
    {
        "id": 29,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['freight rates', 'total freight cost'], 'relations': ['percentage_increase (freight rates → 20% higher)', 'aggregation (sum of shipping fees)'], 'intent': 'calculate_total_freight_cost_after_increase', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20], 'units': {'percentage': '%', 'currency': 'implied by shippingFee field (not explicitly stated)', 'conversion': 'new_fee = shippingFee * 1.2'}, 'foreign_keys': [{'fk_table': 'Shipping', 'fk_column': 'orderId', 'ref_table': 'Orders', 'ref_column': 'orderId'}], 'primary_keys': [{'pk_table': 'Shipping', 'pk_column': 'shippingId'}], 'tableinfo': {'ECommerce.Shipping': [{'column': 'shippingFee', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['10.0', '15.0', '5.0', '20.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a 20% increase in freight rates, calculate the total freight cost.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM(weight * distance * 0.6) AS total_shipping_cost FROM Products;",
        "db_id": "ECommerce"
    },
    {
        "id": 30,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['maintenance interval', 'devices'], 'relations': ['date_difference (nextMaintenanceDate - maintenanceDate)'], 'intent': 'calculate_average_maintenance_interval', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'interval_unit': 'days', 'conversion': 'Date difference calculation (days)'}, 'foreign_keys': [{'fk_table': 'Orders', 'fk_column': 'userId', 'ref_table': 'Users', 'ref_column': 'userId'}], 'primary_keys': [{'pk_table': 'Orders', 'pk_column': 'orderId'}], 'tableinfo': {'ECommerce.Orders': [{'column': 'maintenanceDate'}, {'column': 'nextMaintenanceDate'}]}}\nA physical knowledge question is as follows:\nCalculate the average maintenance interval for devices (unit: days).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(DATEDIFF(paymentDate, orderDate)) AS avg_payment_interval FROM Payments JOIN Orders ON Payments.orderId = Orders.orderId;",
        "db_id": "ECommerce"
    },
    {
        "id": 31,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Products', 'location'], 'relations': ['Products belong to Manufacturers via manufacturerId', 'Manufacturers have location attributes (city, country)'], 'intent': 'count_devices_per_location_and_sort_descending', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': [{'fk_table': 'Products', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}], 'primary_keys': [{'pk_table': 'Manufacturers', 'pk_column': 'manufacturerId'}, {'pk_table': 'Products', 'pk_column': 'productId'}], 'tableinfo': {'ECommerce.Manufacturers': [{'column': 'city'}, {'column': 'country'}, {'column': 'manufacturerId'}], 'ECommerce.COUNT(Products': [{'column': 'productId) AS device_count'}], 'ECommerce.Products': [{'column': 'manufacturerId'}]}}\nA mathematical logic question is as follows:\nCount the number of devices per location and sort them in descending order by quantity.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT address, COUNT(*) AS device_count FROM Manufacturers GROUP BY address ORDER BY device_count DESC;",
        "db_id": "ECommerce"
    },
    {
        "id": 32,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['maintenance records', 'maintenance date', 'next scheduled maintenance date'], 'relations': ['date_contradiction (maintenanceDate > nextMaintenanceDate)'], 'intent': 'identify_logically_inconsistent_maintenance_entries', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'dates': 'date format (no unit conversion required)'}, 'foreign_keys': [{'fk_table': 'MaintenanceRecords', 'fk_column': 'deviceId', 'ref_table': 'EnergyDevices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'MaintenanceRecords', 'pk_column': 'maintenanceId'}], 'tableinfo': {'EnergyManagementDB.MaintenanceRecords': [{'column': 'maintenanceId'}, {'column': 'deviceId'}, {'column': 'maintenanceDate'}, {'column': 'nextMaintenanceDate'}]}}\nA common sense reasoning question is as follows:\nFind contradictory data in maintenance records where the maintenance date is later than the next scheduled maintenance date.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM MaintenanceRecords WHERE DATEDIFF(nextMaintenanceDate, maintenanceDate) < 0;",
        "db_id": "EnergyManagementDB"
    },
    {
        "id": 33,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['maintenance interval', 'all devices'], 'relations': ['device_maintenance_relation (Devices ↔ MaintenanceRecords)', 'interval_reduction (50% reduction applied to current intervals)'], 'intent': 'recalculate_average_maintenance_interval_after_reduction', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50], 'units': {'reduction_factor': '50% (equivalent to multiplier 0.5)', 'interval_unit': 'days (implied by date differences in maintenance records)'}, 'foreign_keys': [{'fk_table': 'MaintenanceRecords', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'MaintenanceRecords', 'pk_column': 'maintenanceId'}], 'tableinfo': {'PhysicsLabDB.MaintenanceRecords': [{'column': 'deviceId'}, {'column': 'maintenanceDate'}]}}\nA hypothetical reasoning question is as follows:\nAssuming the maintenance interval for all devices is reduced by 50%, recalculate the average maintenance interval.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT locationId, COUNT(deviceId) AS device_count FROM Devices GROUP BY locationId ORDER BY device_count DESC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 34,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['device type', 'failure rate', 'number of failures', 'days in use'], 'relations': ['device_to_maintenance (EnergyDevices.deviceId → MaintenanceRecords.deviceId)', 'type_grouping (EnergyDevices.deviceType → group by)'], 'intent': 'calculate_failure_rate_per_device_type', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [], 'units': {'failure_rate': 'failures per day (dimensionless rate)', 'time_period': 'days', 'calculation_formula': 'failure_rate = total_maintenance_records / SUM(CURRENT_DATE - installationDate)'}, 'foreign_keys': [{'fk_table': 'MaintenanceRecords', 'fk_column': 'deviceId', 'ref_table': 'EnergyDevices', 'ref_column': 'deviceId'}, {'fk_table': 'EnergyDevices', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}], 'primary_keys': [{'pk_table': 'EnergyDevices', 'pk_column': 'deviceId'}, {'pk_table': 'MaintenanceRecords', 'pk_column': 'maintenanceId'}], 'tableinfo': {'EnergyManagementDB.EnergyDevices': [{'column': 'deviceType', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['太阳能', '风能', '化石燃料']}, {'column': 'deviceId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '6', '10', '11', '20']}, {'column': 'installationDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-01-15 10:00:00']}], 'EnergyManagementDB.MaintenanceRecords': [{'column': 'deviceId'}, {'column': 'maintenanceId'}]}}\nA mathematical logic question is as follows:\nStatistics of the failure rate (number of failures/days in use) for each type of equipment, sorted in descending order by failure rate.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT deviceType, COUNT(maintenanceId) / (JULIANDAY('now') - JULIANDAY(installationDate)) AS failure_rate FROM MaintenanceRecords GROUP BY deviceType ORDER BY failure_rate DESC;",
        "db_id": "EnergyManagementDB"
    },
    {
        "id": 35,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['equipment', 'installation date'], 'relations': ['equipment_installation_date (direct attribute relationship)'], 'intent': 'filter_records_by_future_installation_date', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'date': 'system current date (implicit temporal unit)'}, 'foreign_keys': [{'fk_table': 'EnergyDevices', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}], 'primary_keys': [{'pk_table': 'EnergyDevices', 'pk_column': 'deviceId'}], 'tableinfo': {'EnergyManagementDB.EnergyDevices': [{'column': 'deviceId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '6', '10', '11', '20']}, {'column': 'installationDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-01-15 10:00:00']}]}}\nA common sense reasoning question is as follows:\nFind records where the equipment installation date is in the future.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM EnergyDevices WHERE installationDate > CURRENT_DATE;",
        "db_id": "EnergyManagementDB"
    },
    {
        "id": 36,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['all devices', 'power rating', 'total annual electricity cost'], 'relations': ['power_increase_effect (40% increase → higher energy consumption)', 'energy_to_cost_conversion'], 'intent': 'calculate_total_annual_electricity_cost_after_power_increase', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [40], 'units': {'power': 'watts (implied by powerRating field)', 'energy': 'kWh (implied by energyConsumed field)', 'percentage_increase': '40% (power increase factor)', 'cost_conversion': 'electricity rate per kWh (not in database)'}, 'foreign_keys': [{'fk_table': 'EnergyConsumption', 'fk_column': 'deviceId', 'ref_table': 'EnergyDevices', 'ref_column': 'deviceId'}, {'fk_table': 'EnergyDevices', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}], 'primary_keys': [{'pk_table': 'EnergyConsumption', 'pk_column': 'consumptionId'}, {'pk_table': 'EnergyDevices', 'pk_column': 'deviceId'}], 'tableinfo': {'EnergyManagementDB.EnergyDevices': [{'column': 'deviceId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '6', '10', '11', '20']}, {'column': 'powerRating', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['100.0', '500.0', '1000.0', '1000000.0', '600.0']}], 'EnergyManagementDB.EnergyConsumption': [{'column': 'energyConsumed'}, {'column': 'timestamp'}]}}\nA hypothetical reasoning question is as follows:\nAssuming the power of all devices increases by 40%, calculate the total annual electricity cost.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT d.deviceType, SUM(e.energyConsumed * d.powerRating * 1.4 * 365 * 24) AS annualElectricityCost FROM EnergyConsumption e JOIN EnergyDevices d ON e.deviceId = d.deviceId GROUP BY d.deviceType ORDER BY annualElectricityCost DESC;",
        "db_id": "EnergyManagementDB"
    },
    {
        "id": 37,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['products', 'average weight', 'kilograms'], 'relations': ['product_to_weight (products → weightKg in Devices table)'], 'intent': 'calculate_average_weight_in_kg', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'weight': 'kg (kilograms) - explicit unit requirement', 'conversion': 'no conversion needed; target unit matches storage unit'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'weightKg'}]}}\nA physical knowledge question is as follows:\nCalculate the average weight of the products (unit: kilograms).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(weightKg) AS avgWeight FROM Devices;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 38,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['product category', 'total sales'], 'relations': ['OrderDetails_to_Products (via productId)'], 'intent': 'aggregate_sales_by_category_and_sort_descending', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'sales': 'currency (implied by OrderDetails.totalPrice)'}, 'foreign_keys': [{'fk_table': 'Products', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}, {'fk_table': 'OrderDetails', 'fk_column': 'orderId', 'ref_table': 'Orders', 'ref_column': 'orderId'}, {'fk_table': 'OrderDetails', 'fk_column': 'productId', 'ref_table': 'Products', 'ref_column': 'productId'}], 'primary_keys': [{'pk_table': 'OrderDetails', 'pk_column': 'detailId'}, {'pk_table': 'Products', 'pk_column': 'productId'}], 'tableinfo': {'ECommerce.Products': [{'column': 'category'}, {'column': 'productId'}], 'ECommerce.OrderDetails': [{'column': 'totalPrice', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['999.99', '1499.99', '299.99']}, {'column': 'productId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3']}]}}\nA mathematical logic question is as follows:\nCount the total sales for each product category and sort them in descending order by sales.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT category, SUM(totalPrice) AS total_sales FROM Orders GROUP BY category ORDER BY total_sales DESC;",
        "db_id": "ECommerce"
    },
    {
        "id": 39,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['product inventory'], 'relations': [], 'intent': 'retrieve_products_with_nonpositive_stock', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [0], 'units': {}, 'foreign_keys': [{'fk_table': 'Products', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}], 'primary_keys': [{'pk_table': 'Products', 'pk_column': 'productId'}], 'tableinfo': {'ECommerce.Products': [{'column': 'stock'}]}}\nA common sense reasoning question is as follows:\nFind records where the product inventory is negative or zero.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM Products WHERE stock <= 0;",
        "db_id": "ECommerce"
    },
    {
        "id": 40,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['all goods', 'transportation weight'], 'relations': ['weight_reduction (30% reduction on all goods)'], 'intent': 'calculate_total_transportation_weight_after_reduction', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [30], 'units': {'reduction': 'percentage (%)', 'weight': 'implicit units from Products.weight (not specified in query)'}, 'foreign_keys': [{'fk_table': 'Products', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}], 'primary_keys': [{'pk_table': 'Products', 'pk_column': 'productId'}], 'tableinfo': {'ECommerce.Products': [{'column': 'weight'}]}}\nA hypothetical reasoning question is as follows:\nAssuming the weight of all goods is reduced by 30%, calculate the total transportation weight.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM(p.weight * od.quantity * 0.7) AS total_shipping_weight FROM OrderDetails od JOIN Products p ON od.productId = p.productId;",
        "db_id": "ECommerce"
    },
    {
        "id": 41,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['equipment', 'remaining warranty days'], 'relations': ['device_to_warranty (Devices.deviceId → warrantyEndDate)'], 'intent': 'calculate_average_remaining_warranty_days', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'time': 'days', 'conversion': 'warrantyEndDate - CURRENT_DATE → days'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'warrantyEndDate'}]}}\nA physical knowledge question is as follows:\nCalculate the average remaining warranty days of the equipment (unit: days).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(JULIANDAY(warrantyExpiryDate) - JULIANDAY('now')) AS avg_warranty_remaining FROM Devices;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 42,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['maintenance cost', 'equipment', 'manufacturers'], 'relations': ['equipment_maintenance (equipment linked to maintenance records via deviceId)', 'equipment_manufacturer (equipment linked to manufacturer via manufacturerId)', 'manufacturer_equipment (manufacturer produces equipment)'], 'intent': 'calculate_average_maintenance_cost_per_manufacturer', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'cost': 'currency unit (implied by database data, not specified)'}, 'foreign_keys': [{'fk_table': 'MaintenanceRecords', 'fk_column': 'deviceId', 'ref_table': 'EnergyDevices', 'ref_column': 'deviceId'}, {'fk_table': 'EnergyDevices', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}], 'primary_keys': [{'pk_table': 'EnergyDevices', 'pk_column': 'deviceId'}, {'pk_table': 'MaintenanceRecords', 'pk_column': 'maintenanceId'}, {'pk_table': 'Manufacturers', 'pk_column': 'manufacturerId'}], 'tableinfo': {'EnergyManagementDB.MaintenanceRecords': [{'column': 'cost'}], 'EnergyManagementDB.EnergyDevices': [{'column': 'deviceId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '6', '10', '11', '20']}, {'column': 'manufacturerId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '10', '20']}], 'EnergyManagementDB.Manufacturers': [{'column': 'manufacturerId'}, {'column': 'manufacturerName'}]}}\nA mathematical logic question is as follows:\nStatistics on the average maintenance cost of equipment for each manufacturer, sorted in descending order by cost.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT manufacturerId, AVG(cost) AS avg_maintenance_cost FROM MaintenanceRecords GROUP BY manufacturerId ORDER BY avg_maintenance_cost DESC;",
        "db_id": "EnergyManagementDB"
    },
    {
        "id": 43,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['equipment status', 'maintenance date'], 'relations': ['device_maintenance_relation (Devices.deviceId → MaintenanceRecords.deviceId)'], 'intent': 'retrieve_running_equipment_without_maintenance_records', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}, {'fk_table': 'MaintenanceRecords', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'MaintenanceRecords', 'pk_column': 'maintenanceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'deviceId'}, {'column': 'status'}], 'PhysicsLabDB.MaintenanceRecords': [{'column': 'maintenanceDate'}]}}\nA common sense reasoning question is as follows:\nFind records where the equipment status is 'running' but no maintenance date has been recorded.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM Devices WHERE status = '运行中' AND lastMaintenanceDate IS NULL;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 44,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['all devices', 'warranty period', 'remaining warranty days'], 'relations': ['warranty_extension (extended by 1 year)', 'device_to_warranty (devices → warranty period)'], 'intent': 'recalculate_average_remaining_warranty_days_post_extension', 'reasoning_type': 'mathematical logic reasoning, ideal hypothesis reasoning', 'numerical_values': [1], 'units': {'time_extension': 'year', 'result_unit': 'days', 'conversion': '1 year = 365 days (assumed)'}, 'foreign_keys': [{'fk_table': 'EnergyDevices', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}], 'primary_keys': [{'pk_table': 'EnergyDevices', 'pk_column': 'deviceId'}], 'tableinfo': {'EnergyManagementDB.EnergyDevices': [{'column': 'installationDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-01-15 10:00:00']}, {'column': 'deviceId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '6', '10', '11', '20']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the warranty period for all devices is extended by 1 year, recalculate the average remaining warranty days.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT deviceId, DATEDIFF(DATE_ADD(installationDate, INTERVAL 1 YEAR), CURRENT_DATE) AS remaining_warranty_days FROM EnergyDevices;",
        "db_id": "EnergyManagementDB"
    },
    {
        "id": 45,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['sensor type', 'data collection frequency'], 'relations': ['type_to_frequency (sensorType → dataCollectionFrequency)'], 'intent': 'retrieve_statistics_by_sensor_type', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'frequency': 'times/day (explicitly stated in query)', 'conversion': 'N/A (unit already matches required output)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': [{'pk_table': 'Sensors', 'pk_column': 'sensorId'}], 'tableinfo': {'PhysicsLabDB.Sensors': [{'column': 'sensorType'}, {'column': 'dataCollectionFrequency'}]}}\nA mathematical logic question is as follows:\nStatistics on the data collection frequency (unit: times/day) for each type of sensor, sorted in descending order by frequency.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT sensorType, AVG(dataCollectionFrequency) AS avgFrequency FROM Sensors GROUP BY sensorType ORDER BY avgFrequency DESC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 46,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['temperature sensor data', 'abnormal records', '50°C', '-20°C'], 'relations': ['temperature_abnormality (condition: temperature > 50 OR temperature < -20)', 'sensor_to_reading (Sensors.sensorId → TemperatureReadings.sensorId)'], 'intent': 'identify_abnormal_temperature_records', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [50, -20], 'units': {'temperature': '°C (Celsius)', 'thresholds': '50°C (upper limit), -20°C (lower limit)'}, 'foreign_keys': [{'fk_table': 'TemperatureReadings', 'fk_column': 'sensorId', 'ref_table': 'Sensors', 'ref_column': 'sensorId'}], 'primary_keys': [{'pk_table': 'TemperatureReadings', 'pk_column': 'recordId'}], 'tableinfo': {'PhysicsLabDB.TemperatureReadings': [{'column': 'recordId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2001', '2002']}, {'column': 'sensorId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['101']}, {'column': 'recordedAt', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2025-06-17 23:44:59']}, {'column': 'temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['65.0', '-25.0']}]}}\nA common sense reasoning question is as follows:\nIdentify abnormal records where the temperature sensor data exceeds 50°C or falls below -20°C.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT sensorId, recordedAt, temperature FROM TemperatureReadings WHERE temperature > 50 OR temperature < -20;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 47,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['carbon emission factor', 'total annual carbon emissions', '50% increase'], 'relations': ['factor_to_emissions (carbon emission factor → carbon emissions)', 'percentage_increase (50%)'], 'intent': 'calculate_total_annual_carbon_emissions_after_increase', 'reasoning_type': 'ideal hypothesis reasoning', 'numerical_values': [50], 'units': {'percentage': '%', 'carbon_emission_factor': 'kg CO2 per kWh (implied by context)', 'energy': 'kWh (implied by EnergyConsumption.energyConsumed)', 'conversion': 'factor * 1.5 (50% increase)'}, 'foreign_keys': [{'fk_table': 'EnergyConsumption', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}, {'fk_table': 'UserPreferences', 'fk_column': 'userId', 'ref_table': 'Users', 'ref_column': 'userId'}, {'fk_table': 'UserPreferences', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'EnergyConsumption', 'pk_column': 'consumptionId'}, {'pk_table': 'UserPreferences', 'pk_column': 'preferenceId'}], 'tableinfo': {'SmartHomeDB.EnergyConsumption': [{'column': 'energyConsumed', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['2.5', '3.0', '1.0']}, {'column': 'timestamp', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-10-01 08:00:00']}], 'SmartHomeDB.UserPreferences': [{'column': 'preferenceName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['灯光亮度', '插座开关', '温度设置']}, {'column': 'preferenceValue', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['80%', '开启', '22°C']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the carbon emission factor increases by 50%, calculate the total annual carbon emissions.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT s.sensorType, COUNT(sd.dataId) AS data_frequency FROM SensorData sd JOIN Sensors s ON sd.sensorId = s.sensorId GROUP BY s.sensorType ORDER BY data_frequency DESC;",
        "db_id": "SmartHomeDB"
    },
    {
        "id": 48,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\nthere is nothing I can give you about this question.\nA physical knowledge question is as follows:\nCalculate the total shipping cost for the goods (assuming the shipping cost is weight × distance × 0.5 yuan per kilogram-kilometer).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM(weight * distance * 0.5) AS total_shipping_cost FROM Products;",
        "db_id": "ECommerce"
    },
    {
        "id": 49,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['user', 'order amount'], 'relations': ['user_places_order (Users.userId → Orders.userId)'], 'intent': 'aggregate_total_order_amount_per_user_and_sort_descending', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'currency': 'implicit from Orders.finalAmount (no conversion specified)'}, 'foreign_keys': [{'fk_table': 'Orders', 'fk_column': 'userId', 'ref_table': 'Users', 'ref_column': 'userId'}], 'primary_keys': [{'pk_table': 'Orders', 'pk_column': 'orderId'}], 'tableinfo': {'ECommerce.Orders': [{'column': 'userId'}, {'column': 'finalAmount'}]}}\nA mathematical logic question is as follows:\nCount the total order amount for each user and sort them in descending order by amount.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT userId, SUM(totalAmount) AS total_spent FROM Orders GROUP BY userId ORDER BY total_spent DESC;",
        "db_id": "ECommerce"
    },
    {
        "id": 50,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': [\"order status 'Completed'\", 'payment status not successful'], 'relations': ['order_to_payment (Orders.orderId → Payments.orderId)'], 'intent': 'find_inconsistent_orders_with_failed_payments', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': [{'fk_table': 'Orders', 'fk_column': 'userId', 'ref_table': 'Users', 'ref_column': 'userId'}, {'fk_table': 'Payments', 'fk_column': 'orderId', 'ref_table': 'Orders', 'ref_column': 'orderId'}], 'primary_keys': [{'pk_table': 'Orders', 'pk_column': 'orderId'}, {'pk_table': 'Payments', 'pk_column': 'paymentId'}], 'tableinfo': {'ECommerce.Orders': [{'column': 'orderId'}, {'column': 'orderStatus'}], 'ECommerce.Payments': [{'column': 'paymentStatus', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['成功', '失败']}, {'column': 'orderId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '6']}]}}\nA common sense reasoning question is as follows:\nFind records where the order status is 'Completed' but the payment was not successful.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM Orders WHERE orderStatus = '已完成' AND orderId NOT IN (SELECT orderId FROM Payments WHERE paymentStatus = '成功');",
        "db_id": "ECommerce"
    },
    {
        "id": 51,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['freight rates', 'total freight cost', '20% increase'], 'relations': ['rate_increase_relationship (freight rates → 20% increase)', 'cost_calculation_relationship (increased rates → total freight cost)'], 'intent': 'calculate_total_freight_cost_after_increase', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20], 'units': {'percentage': '%', 'currency': 'implicit currency unit from shippingFee (exact type unspecified)'}, 'foreign_keys': [{'fk_table': 'Shipping', 'fk_column': 'orderId', 'ref_table': 'Orders', 'ref_column': 'orderId'}], 'primary_keys': [{'pk_table': 'Shipping', 'pk_column': 'shippingId'}], 'tableinfo': {'ECommerce.Shipping': [{'column': 'shippingFee', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['10.0', '15.0', '5.0', '20.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a 20% increase in freight rates, calculate the total freight cost.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM(weight * distance * 0.6) AS total_shipping_cost FROM Products;",
        "db_id": "ECommerce"
    },
    {
        "id": 52,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['maintenance interval', 'equipment'], 'relations': ['date_difference (maintenanceDate to nextMaintenanceDate)'], 'intent': 'calculate_average_maintenance_interval', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'interval': 'days'}, 'foreign_keys': [{'fk_table': 'Orders', 'fk_column': 'userId', 'ref_table': 'Users', 'ref_column': 'userId'}], 'primary_keys': [{'pk_table': 'Orders', 'pk_column': 'orderId'}], 'tableinfo': {'ECommerce.Orders': [{'column': 'maintenanceDate'}, {'column': 'nextMaintenanceDate'}]}}\nA physical knowledge question is as follows:\nCalculate the average maintenance interval of the equipment (unit: days).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(DATEDIFF(nextMaintenanceDate, maintenanceDate)) AS avg_maintenance_interval FROM Orders WHERE maintenanceDate IS NOT NULL AND nextMaintenanceDate IS NOT NULL;",
        "db_id": "ECommerce"
    },
    {
        "id": 53,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['devices (interpreted as products)', 'location (interpreted as shippingAddress in Orders)'], 'relations': ['order_to_details (Orders.orderId → OrderDetails.orderId)', 'shipping_address_aggregation (grouped by Orders.shippingAddress)'], 'intent': 'count_and_sort_products_by_location', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'quantity': 'units (count of devices/products)'}, 'foreign_keys': [{'fk_table': 'OrderDetails', 'fk_column': 'orderId', 'ref_table': 'Orders', 'ref_column': 'orderId'}, {'fk_table': 'OrderDetails', 'fk_column': 'productId', 'ref_table': 'Products', 'ref_column': 'productId'}, {'fk_table': 'Orders', 'fk_column': 'userId', 'ref_table': 'Users', 'ref_column': 'userId'}], 'primary_keys': [{'pk_table': 'OrderDetails', 'pk_column': 'detailId'}, {'pk_table': 'Orders', 'pk_column': 'orderId'}], 'tableinfo': {'ECommerce.Orders': [{'column': 'shippingAddress'}, {'column': 'orderId'}], 'ECommerce.OrderDetails': [{'column': 'orderId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3']}, {'column': 'quantity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1']}]}}\nA mathematical logic question is as follows:\nCount the number of devices at each location and sort in descending order by quantity.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT category, COUNT(*) AS device_count FROM Products GROUP BY category ORDER BY device_count DESC;",
        "db_id": "ECommerce"
    },
    {
        "id": 54,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['maintenance records', 'maintenance date', 'next scheduled maintenance date'], 'relations': ['date_contradiction (maintenanceDate > nextMaintenanceDate)'], 'intent': 'identify_records_with_illogical_maintenance_dates', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'date_comparison': 'date format (implied by database schema)', 'conversion': 'direct chronological comparison'}, 'foreign_keys': [{'fk_table': 'MaintenanceRecords', 'fk_column': 'deviceId', 'ref_table': 'EnergyDevices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'MaintenanceRecords', 'pk_column': 'maintenanceId'}], 'tableinfo': {'EnergyManagementDB.MaintenanceRecords': [{'column': 'maintenanceId'}, {'column': 'deviceId'}, {'column': 'maintenanceDate'}, {'column': 'nextMaintenanceDate'}]}}\nA common sense reasoning question is as follows:\nFind contradictory data in the maintenance records where the maintenance date is later than the next scheduled maintenance date.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(DATEDIFF(nextMaintenanceDate, MaintenanceDate)) AS avg_maintenance_interval FROM MaintenanceRecords;",
        "db_id": "EnergyManagementDB"
    },
    {
        "id": 55,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['maintenance intervals', 'all devices'], 'relations': ['reduction_by_50% (original interval → reduced interval)'], 'intent': 'recalculate_average_maintenance_interval_after_reduction', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.5], 'units': {'reduction_factor': 'percentage (50% = 0.5 multiplier)', 'interval_unit': 'time unit (derived from maintenanceDate differences)'}, 'foreign_keys': [{'fk_table': 'MaintenanceRecords', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'MaintenanceRecords', 'pk_column': 'maintenanceId'}], 'tableinfo': {'PhysicsLabDB.MaintenanceRecords': [{'column': 'deviceId'}, {'column': 'maintenanceDate'}]}}\nA hypothetical reasoning question is as follows:\nAssuming the maintenance intervals for all devices are reduced by 50%, recalculate the average maintenance interval.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT locationId, COUNT(deviceId) AS device_count FROM Devices GROUP BY locationId ORDER BY device_count DESC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 56,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['failure rate', 'each type of equipment', 'number of failures', 'days in use'], 'relations': ['device_to_maintenance (EnergyDevices.deviceId → MaintenanceRecords.deviceId)', 'grouping_by_deviceType (aggregation per equipment type)'], 'intent': 'calculate_and_rank_failure_rates', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'failure_rate': 'failures per day (dimensionless ratio)', 'time': 'days (derived from date differences)'}, 'foreign_keys': [{'fk_table': 'MaintenanceRecords', 'fk_column': 'deviceId', 'ref_table': 'EnergyDevices', 'ref_column': 'deviceId'}, {'fk_table': 'EnergyDevices', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}], 'primary_keys': [{'pk_table': 'EnergyDevices', 'pk_column': 'deviceId'}, {'pk_table': 'MaintenanceRecords', 'pk_column': 'maintenanceId'}], 'tableinfo': {'EnergyManagementDB.EnergyDevices': [{'column': 'deviceType', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['太阳能', '风能', '化石燃料']}, {'column': 'installationDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-01-15 10:00:00']}], 'EnergyManagementDB.MaintenanceRecords': [{'column': 'deviceId'}, {'column': 'maintenanceType'}]}}\nA mathematical logic question is as follows:\nCount the failure rate (number of failures / days in use) for each type of equipment, and sort in descending order by failure rate.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT deviceType, COUNT(maintenanceId) / (JULIANDAY('now') - JULIANDAY(installationDate)) AS failure_rate FROM MaintenanceRecords GROUP BY deviceType ORDER BY failure_rate DESC;",
        "db_id": "EnergyManagementDB"
    },
    {
        "id": 57,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['device installation date'], 'relations': [], 'intent': 'identify_records_with_future_installation_dates', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': [{'fk_table': 'EnergyDevices', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}], 'primary_keys': [{'pk_table': 'EnergyDevices', 'pk_column': 'deviceId'}], 'tableinfo': {'EnergyManagementDB.EnergyDevices': [{'column': 'deviceId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '6', '10', '11', '20']}, {'column': 'deviceName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Solar Panel 1', 'Wind Turbine 1', 'Gas Generator 1', 'TestDevice6', 'TestWindTurbine']}, {'column': 'installationDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-01-15 10:00:00']}]}}\nA common sense reasoning question is as follows:\nIdentify records where the device installation date is in the future.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(DATEDIFF(nextMaintenanceDate, MaintenanceDate)) AS avg_maintenance_interval FROM MaintenanceRecords;",
        "db_id": "EnergyManagementDB"
    },
    {
        "id": 58,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['all devices', 'power increase (40%)', 'total annual electricity cost'], 'relations': ['power_increase_to_energy_relation (power ↑ 40% → energy consumption ↑ 40%)', 'energy_consumption_to_cost_relation (energy × rate = cost)'], 'intent': 'calculate_total_annual_electricity_cost_after_power_increase', 'reasoning_type': 'mathematical logic reasoning, ideal hypothesis reasoning', 'numerical_values': [40], 'units': {'power_increase': '40% (percentage multiplier = 1.4)', 'energy_consumption': 'kWh (implied by EnergyConsumption.energyConsumed)', 'electricity_rate': '$/kWh (required but not in database; ideal hypothesis)', 'note': 'Cost calculation requires external electricity rate constant'}, 'foreign_keys': [{'fk_table': 'EnergyConsumption', 'fk_column': 'deviceId', 'ref_table': 'EnergyDevices', 'ref_column': 'deviceId'}, {'fk_table': 'EnergyDevices', 'fk_column': 'manufacturerId', 'ref_table': 'Manufacturers', 'ref_column': 'manufacturerId'}], 'primary_keys': [{'pk_table': 'EnergyConsumption', 'pk_column': 'consumptionId'}, {'pk_table': 'EnergyDevices', 'pk_column': 'deviceId'}], 'tableinfo': {'EnergyManagementDB.EnergyDevices': [{'column': 'deviceId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '6', '10', '11', '20']}, {'column': 'powerRating', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['100.0', '500.0', '1000.0', '1000000.0', '600.0']}], 'EnergyManagementDB.EnergyConsumption': [{'column': 'energyConsumed'}, {'column': 'timestamp'}]}}\nA hypothetical reasoning question is as follows:\nAssuming all devices' power increases by 40%, calculate the total annual electricity cost.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ed.deviceId, ed.deviceName, ed.powerRating * 1.4 AS newPowerRating, SUM(ec.energyConsumed) AS totalEnergyConsumed, (SUM(ec.energyConsumed) * 1.4 * 0.1) AS annualElectricityCost FROM EnergyDevices ed JOIN EnergyConsumption ec ON ed.deviceId = ec.deviceId WHERE YEAR(ec.timestamp) = YEAR(CURDATE()) GROUP BY ed.deviceId, ed.deviceName;",
        "db_id": "EnergyManagementDB"
    },
    {
        "id": 59,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['customers', 'customer IDs', 'ages', 'driving school sign-up'], 'relations': ['customer_to_signup (customers.id → signup.customer_id)', 'age_calculation (birth_date to signup_date)'], 'intent': 'retrieve_customer_ids_and_signup_ages', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'age': 'years'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.customers': [{'column': 'id'}, {'column': 'birth_date'}], 'school.signups': [{'column': 'customer_id'}, {'column': 'signup_date'}]}}\nA common sense reasoning question is as follows:\nList the IDs of customers and their ages when they signed up for the driving school.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT customer_id , strftime ( \"%Y\" , date_became_customer ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_became_customer ) < strftime ( \"%m-%d\" , date_of_birth ) ) AS age FROM Customers",
        "db_id": "school"
    },
    {
        "id": 60,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['customers', 'IDs', 'ages', 'driving school registration'], 'relations': ['customer_to_registration (customers → registrations)', 'age_calculation (birth_date to registration_date)'], 'intent': 'retrieve_customer_ids_with_age_at_registration', 'reasoning_type': 'common sense understanding reasoning, mathematical logic reasoning', 'numerical_values': [], 'units': {'age': 'years (calculated from date difference)', 'date_format': 'YYYY-MM-DD (implied by database schema)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.customers': [{'column': 'id'}, {'column': 'birth_date'}], 'school.registrations': [{'column': 'customer_id'}, {'column': 'registration_date'}]}}\nA common sense reasoning question is as follows:\nGive me IDs of all customers and their ages at the time of registering for driving school?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT customer_id , strftime ( \"%Y\" , date_became_customer ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_became_customer ) < strftime ( \"%m-%d\" , date_of_birth ) ) AS age FROM Customers",
        "db_id": "school"
    },
    {
        "id": 61,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Damon Sanford', '21st century start (2001-01-01)', 'customers', 'driving school signups'], 'relations': ['birth_reference (Damon Sanford → 2001-01-01 sets timeline reference)', 'age_calculation (customer_age = signup_date - birth_date)'], 'intent': 'retrieve_customer_ages_at_signup_relative_to_reference_date', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2001], 'units': {'time': 'years (age calculation)', 'date_format': 'YYYY-MM-DD', 'reference_point': '2001-01-01 (21st century start)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.customers': [{'column': 'customer_id'}, {'column': 'birth_date'}], 'school.signups': [{'column': 'signup_date'}]}}\nA hypothetical reasoning question is as follows:\nIf Damon Sanford was born on the first day of the 21st century, list the customer IDs and their ages when they signed up for the driving school.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT customer_id, strftime (\"%Y\", date_became_customer) - strftime (\"%Y\", date_of_birth) - (strftime (\"%m-%d\", date_became_customer) < strftime (\"%m-%d\", date_of_birth)) AS age FROM Customers WHERE NOT (first_name = \"Dameon\" AND last_name = \"Sanford\") UNION ALL SELECT customer_id, strftime (\"%Y\", date_became_customer) - strftime (\"%Y\", \"2001-01-01\") - (strftime (\"%m-%d\", date_became_customer) < strftime (\"%m-%d\", \"2001-01-01\")) AS age FROM Customers WHERE first_name = \"Dameon\" AND last_name = \"Sanford\"",
        "db_id": "school"
    },
    {
        "id": 62,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['customers', 'ages when registering', 'driving school', 'Damon Sanford', 'first day of 21st Century (2000-01-01)'], 'relations': ['customer_to_age (customer → age calculation)', 'registration_date_to_birth_date (registration date - birth date)'], 'intent': 'retrieve_customer_ids_and_registration_ages', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2000, 1, 1], 'units': {'age': 'years', 'date': 'YYYY-MM-DD', 'calculation': 'age = registration_date - birth_date (in years)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.customers': [{'column': 'customer_id'}, {'column': 'birth_date'}], 'school.registrations': [{'column': 'registration_date'}]}}\nA hypothetical reasoning question is as follows:\nGive me IDs of all customers and their ages when registering for driving school if Damon Sanford was born on the first day of the 21st Century.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT customer_id, strftime (\"%Y\", date_became_customer) - strftime (\"%Y\", date_of_birth) - (strftime (\"%m-%d\", date_became_customer) < strftime (\"%m-%d\", date_of_birth)) AS age FROM Customers WHERE NOT (first_name = \"Dameon\" AND last_name = \"Sanford\") UNION ALL SELECT customer_id, strftime (\"%Y\", date_became_customer) - strftime (\"%Y\", \"2001-01-01\") - (strftime (\"%m-%d\", date_became_customer) < strftime (\"%m-%d\", \"2001-01-01\")) AS age FROM Customers WHERE first_name = \"Dameon\" AND last_name = \"Sanford\"",
        "db_id": "school"
    },
    {
        "id": 63,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['customers', 'outstanding amounts > 2000', 'good customers'], 'relations': ['amount_condition (customers → outstanding_amount > 2000)', 'status_classification (customers → good_customer status)'], 'intent': 'calculate_percentage_of_qualified_good_customers', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2000], 'units': {'currency': 'implied monetary unit (e.g., dollars from database)', 'percentage': '% (calculated ratio)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.customers': [{'column': 'outstanding_amount'}, {'column': 'is_good_customer'}, {'column': 'customer_id'}]}}\nA mathematical logic question is as follows:\nWhat percentage of customers with outstanding amounts larger than 2000 are good customers?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * good / n AS percent FROM ( SELECT COUNT ( * ) AS good FROM Customers WHERE amount_outstanding > 2000 AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n FROM Customers WHERE amount_outstanding > 2000 )",
        "db_id": "school"
    },
    {
        "id": 64,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['customers', 'outstanding balance > 2000', 'rating = good'], 'relations': ['balance_threshold_condition (customers → outstanding balance > 2000)', \"rating_condition (customers → rating = 'good')\"], 'intent': 'calculate_percentage_of_high_balance_customers_with_good_rating', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2000], 'units': {'currency': 'monetary unit (implied by outstanding_balance field)', 'percentage': 'unitless ratio calculation'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.customers': [{'column': 'customer_id'}, {'column': 'outstanding_balance'}, {'column': 'rating'}]}}\nA mathematical logic question is as follows:\nGive me the percentage of customers with over 2000 in outstanding balance who are rated good?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * good / n AS percent FROM ( SELECT COUNT ( * ) AS good FROM Customers WHERE amount_outstanding > 2000 AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n FROM Customers WHERE amount_outstanding > 2000 )",
        "db_id": "school"
    },
    {
        "id": 65,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['customers registered in 2015', 'outstanding amount 200', 'outstanding amounts greater than 2000', 'good customers'], 'relations': ['registration_year_condition (2015 → outstanding=200)', 'outstanding_threshold_filter (>2000)', 'good_customer_classification'], 'intent': 'calculate_percentage_of_good_customers_meeting_conditions', 'reasoning_type': 'ideal hypothesis reasoning', 'numerical_values': [2015, 200, 2000], 'units': {'currency': 'implied monetary unit (e.g., USD)', 'year': 'calendar year', 'percentage': 'result unit'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.customers': [{'column': 'registration_year'}, {'column': 'outstanding_amount'}, {'column': 'is_good_customer'}]}}\nA hypothetical reasoning question is as follows:\nIf all customers who registered in 2015 have an outstanding amount of 200, what percentage of customers with outstanding amounts greater than 2000 are good customers?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * good / n AS percent FROM ( SELECT COUNT ( * ) AS good FROM ( SELECT 200 AS amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) = \"2015\" UNION ALL SELECT amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) != \"2015\" ) WHERE amount_outstanding > 2000 AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n FROM ( SELECT 200 AS amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) = \"2015\" UNION ALL SELECT amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) != \"2015\" ) WHERE amount_outstanding > 2000 )",
        "db_id": "school"
    },
    {
        "id": 66,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['customers', \"rating 'good'\", 'outstanding balance > 2000', 'registration year 2015'], 'relations': ['customer_has_rating (customers → rating)', 'customer_has_outstanding_balance (customers → balance)', 'customer_registered_in_year (customers → 2015)'], 'intent': 'calculate_percentage_of_good_rated_customers_in_2015_with_balance_over_2000', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [2015, 2000], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.customers': [{'column': 'rating'}, {'column': 'outstanding_balance'}, {'column': 'registration_date'}]}}\nA hypothetical reasoning question is as follows:\nWhat percentage of customers are rated good with an outstanding balance of over 2000 if all customers registered in 2015 have an outstanding amount over 2000?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * good / n AS percent FROM ( SELECT COUNT ( * ) AS good FROM ( SELECT 200 AS amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) = \"2015\" UNION ALL SELECT amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) != \"2015\" ) WHERE amount_outstanding > 2000 AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n FROM ( SELECT 200 AS amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) = \"2015\" UNION ALL SELECT amount_outstanding , customer_status_code FROM Customers WHERE strftime ( \"%Y\" , date_became_customer ) != \"2015\" ) WHERE amount_outstanding > 2000 )",
        "db_id": "school"
    },
    {
        "id": 67,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['staff', 'ID', 'lessons scheduled', 'age at joining', 'driving school'], 'relations': ['staff_has_ID', 'staff_scheduled_lessons', 'age_comparison_at_joining (>20)'], 'intent': 'retrieve_staff_ids_and_lesson_counts_meeting_age_condition', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [20], 'units': {'age': 'years', 'time_calculation': 'date difference between birth_date and join_date'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.staff': [{'column': 'id'}, {'column': 'birth_date'}, {'column': 'join_date'}], 'school.lessons': [{'column': 'staff_id'}, {'column': 'lesson_id'}]}}\nA common sense reasoning question is as follows:\nList the ID and number of lessons scheduled for staffs who were older than 20 when they joined the driving school.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.staff_id, COUNT (*) AS n_lesson FROM Staff A JOIN Lessons B ON A.staff_id = B.staff_id WHERE strftime (\"%Y\", A.date_joined_staff) - strftime (\"%Y\", A.date_of_birth) - (strftime (\"%m-%d\", A.date_joined_staff) < strftime (\"%m-%d\", A.date_of_birth)) > 20 UNION ALL SELECT staff_id, 0 AS n_lesson FROM Staff WHERE strftime (\"%Y\", date_joined_staff) - strftime (\"%Y\", date_of_birth) - (strftime (\"%m-%d\", date_joined_staff) < strftime (\"%m-%d\", date_of_birth)) > 20 AND staff_id NOT IN (SELECT A.staff_id FROM Staff A JOIN Lessons B ON A.staff_id = B.staff_id)",
        "db_id": "school"
    },
    {
        "id": 68,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['staff', 'scheduled lessons', 'age at joining', 'driving school'], 'relations': ['staff_has_lessons (staff → scheduled lessons)', 'age_comparison (age > 20 at joining time)', 'staff_affiliation (staff belongs to driving school)'], 'intent': 'retrieve_staff_id_and_scheduled_lessons_count_for_older_joiners', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20], 'units': {'age': 'years'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.staff': [{'column': 'staff_id'}, {'column': 'date_of_birth'}, {'column': 'join_date'}], 'school.scheduled_lessons': [{'column': 'staff_id'}, {'column': 'lesson_id'}]}}\nA common sense reasoning question is as follows:\nGive me the ID and number of scheduled lessons for all staff older than age 20 at the time of joining the driving school.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.staff_id, COUNT (*) AS n_lesson FROM Staff A JOIN Lessons B ON A.staff_id = B.staff_id WHERE strftime (\"%Y\", A.date_joined_staff) - strftime (\"%Y\", A.date_of_birth) - (strftime (\"%m-%d\", A.date_joined_staff) < strftime (\"%m-%d\", A.date_of_birth)) > 20 UNION ALL SELECT staff_id, 0 AS n_lesson FROM Staff WHERE strftime (\"%Y\", date_joined_staff) - strftime (\"%Y\", date_of_birth) - (strftime (\"%m-%d\", date_joined_staff) < strftime (\"%m-%d\", date_of_birth)) > 20 AND staff_id NOT IN (SELECT A.staff_id FROM Staff A JOIN Lessons B ON A.staff_id = B.staff_id)",
        "db_id": "school"
    },
    {
        "id": 69,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['staff', 'resignation date (March 8th, 2018)', 'join date (March 8th, 2016)', 'age at joining (>20)', 'lessons scheduled'], 'relations': ['staff_to_resignation (staff → resignation date)', 'staff_to_join_date (staff → join date)', 'staff_to_age (date of birth → age calculation at join date)', 'staff_to_lessons (staff → scheduled lessons)'], 'intent': 'list_staff_ids_and_lesson_counts_for_specific_age_group', 'reasoning_type': ['mathematical logic reasoning', 'common sense understanding reasoning', 'ideal hypothesis reasoning'], 'numerical_values': [20], 'units': {'age': 'years', 'date_format': 'YYYY-MM-DD', 'date_calculation': 'age = (join_date - date_of_birth) in years'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.staff': [{'column': 'id'}, {'column': 'date_of_birth'}, {'column': 'resignation_date'}], 'school.lessons': [{'column': 'staff_id'}, {'column': 'scheduled_date'}]}}\nA hypothetical reasoning question is as follows:\nIf the staffs who resigned on March 8th, 2018 all joined on March 8th, 2016, list the IDs and number of lessons scheduled for staffs who were older than 20 when they joined.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.staff_id, COUNT (*) AS n_lesson FROM (SELECT staff_id, date_of_birth, \"2016-03-08\" AS date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) = \"2018-03-08\" UNION ALL SELECT staff_id, date_of_birth, date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) != \"2018-03-08\" ) A JOIN Lessons B ON A.staff_id = B.staff_id WHERE strftime (\"%Y\", A.date_joined_staff) - strftime (\"%Y\", A.date_of_birth) - (strftime (\"%m-%d\", A.date_joined_staff) < strftime (\"%m-%d\", A.date_of_birth)) > 20 UNION ALL SELECT staff_id, 0 AS n_lesson FROM (SELECT staff_id, date_of_birth, \"2016-03-08\" AS date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) = \"2018-03-08\" UNION ALL SELECT staff_id, date_of_birth, date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) != \"2018-03-08\" ) WHERE strftime (\"%Y\", date_joined_staff) - strftime (\"%Y\", date_of_birth) - (strftime (\"%m-%d\", date_joined_staff) < strftime (\"%m-%d\", date_of_birth)) > 20 AND staff_id NOT IN (SELECT A.staff_id FROM Staff A JOIN Lessons B ON A.staff_id = B.staff_id)",
        "db_id": "school"
    },
    {
        "id": 70,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['staff', 'scheduled lessons', 'age older than 20 at employment commencement', 'join date March 8, 2016', 'resignation date March 8, 2018'], 'relations': ['staff_employment_duration (join_date → resignation_date)', 'staff_to_lessons (staff.id → lessons.staff_id)', 'age_calculation (date_of_birth vs. join_date)', 'conditional_filter (IF joined on 2016-03-08 THEN resigned on 2018-03-08)'], 'intent': 'retrieve_staff_ids_and_lesson_counts_with_age_and_employment_conditions', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [20, 2016, 2018], 'units': {'age': 'years', 'dates': 'YYYY-MM-DD format', 'duration': 'employment period in days/years'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.staff': [{'column': 'id'}, {'column': 'date_of_birth'}, {'column': 'join_date'}, {'column': 'resignation_date'}], 'school.lessons': [{'column': 'staff_id'}, {'column': 'scheduled_date'}]}}\nA hypothetical reasoning question is as follows:\nGive me the ID and quantity of scheduled lessons for all staff older than age 20 at the time of commencing employment at the driving school if all staff who joined on March 8 2016 resigned on March 8 2018.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.staff_id, COUNT (*) AS n_lesson FROM (SELECT staff_id, date_of_birth, \"2016-03-08\" AS date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) = \"2018-03-08\" UNION ALL SELECT staff_id, date_of_birth, date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) != \"2018-03-08\" ) A JOIN Lessons B ON A.staff_id = B.staff_id WHERE strftime (\"%Y\", A.date_joined_staff) - strftime (\"%Y\", A.date_of_birth) - (strftime (\"%m-%d\", A.date_joined_staff) < strftime (\"%m-%d\", A.date_of_birth)) > 20 UNION ALL SELECT staff_id, 0 AS n_lesson FROM (SELECT staff_id, date_of_birth, \"2016-03-08\" AS date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) = \"2018-03-08\" UNION ALL SELECT staff_id, date_of_birth, date_joined_staff FROM Staff WHERE strftime (\"%Y-%m-%d\", date_left_staff) != \"2018-03-08\" ) WHERE strftime (\"%Y\", date_joined_staff) - strftime (\"%Y\", date_of_birth) - (strftime (\"%m-%d\", date_joined_staff) < strftime (\"%m-%d\", date_of_birth)) > 20 AND staff_id NOT IN (SELECT A.staff_id FROM Staff A JOIN Lessons B ON A.staff_id = B.staff_id)",
        "db_id": "school"
    },
    {
        "id": 71,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['staff', 'driving school', 'longest tenure'], 'relations': ['employment_duration (staff → start_date/end_date)'], 'intent': 'retrieve_staff_id_with_max_employment_duration', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'time_unit': 'days (implied by date difference calculation)', 'duration_calculation': 'CURRENT_DATE - start_date (if still employed) OR end_date - start_date'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.staff_employment': [{'column': 'staff_id'}, {'column': 'start_date'}, {'column': 'end_date'}]}}\nA common sense reasoning question is as follows:\nWhat's the ID of staff who has worked at the driving school the longest?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT staff_id FROM Staff ORDER BY julianday ( date_left_staff ) - julianday ( date_joined_staff ) DESC LIMIT 1",
        "db_id": "school"
    },
    {
        "id": 72,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['staff', 'driving school', 'employment duration'], 'relations': ['staff_employment_duration (staff.id → duration at driving school)'], 'intent': 'retrieve_staff_id_with_max_employment_duration', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'employment_duration': 'days/date (implied by date calculations)', 'conversion': 'duration = CURRENT_DATE - start_date'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.staff': [{'column': 'id'}, {'column': 'hire_date'}, {'column': 'start_date'}]}}\nA common sense reasoning question is as follows:\nTell me the ID of staff who have worked at the driving school the longest?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT staff_id FROM Staff ORDER BY julianday ( date_left_staff ) - julianday ( date_joined_staff ) DESC LIMIT 1",
        "db_id": "school"
    },
    {
        "id": 73,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Lincoln Benny Carroll', 'staff ID', 'driving school', '21st birthday'], 'relations': ['employment_start (Lincoln joined on 21st birthday)', 'tenure_calculation (years worked based on start date)', 'longest_tenure_comparison (staff with maximum employment duration)'], 'intent': 'identify_longest_tenured_staff_id', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [21], 'units': {'time': 'years (for age and tenure calculation)', 'conversion': 'employment_duration = current_date - start_date'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.staff': [{'column': 'staff_id'}, {'column': 'full_name'}, {'column': 'date_of_birth'}, {'column': 'start_date'}]}}\nA hypothetical reasoning question is as follows:\nIf Lincoln Benny Carroll joined on his 21st birthday, list the ID of the staff who has worked at the driving school the longest? \nyour response just have a SQL without anything.\n",
        "solution": "SELECT staff_id FROM (SELECT staff_id, strftime (\"%Y-%m-%d\", julianday (date_of_birth) + 21 * 365.25) AS date_joined_staff, date_left_staff FROM Staff WHERE first_name = \"Lincoln\" AND middle_name = \"Benny\" AND last_name = \"Carroll\" UNION ALL SELECT staff_id, date_joined_staff, date_left_staff FROM Staff WHERE NOT (first_name = \"Lincoln\" AND middle_name = \"Benny\" AND last_name = \"Carroll\") ) ORDER BY julianday (date_left_staff) - julianday (date_joined_staff) DESC LIMIT 1",
        "db_id": "school"
    },
    {
        "id": 74,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['staff member', 'Lincoln Benny Carroll', 'driving school', 'ID', '21st birthday'], 'relations': ['staff_member_has_employment_duration (staff member → tenure length)', 'staff_member_has_start_date (staff member → join date)', 'staff_member_has_birthdate (Lincoln Benny Carroll → 21st birthday reference)', 'longest_tenure_condition (min start_date → maximum employment duration)'], 'intent': 'retrieve_id_of_longest_tenured_staff', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [21], 'units': {'age_unit': 'years', 'date_unit': 'date (for start_date comparison)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.staff': [{'column': 'id'}, {'column': 'start_date'}, {'column': 'name'}, {'column': 'birth_date'}]}}\nA hypothetical reasoning question is as follows:\nWhat's the ID of the staff member who has worked at the driving school longest if Lincoln Benny Carroll joined on their 21st birthday?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT staff_id FROM (SELECT staff_id, strftime (\"%Y-%m-%d\", julianday (date_of_birth) + 21 * 365.25) AS date_joined_staff, date_left_staff FROM Staff WHERE first_name = \"Lincoln\" AND middle_name = \"Benny\" AND last_name = \"Carroll\" UNION ALL SELECT staff_id, date_joined_staff, date_left_staff FROM Staff WHERE NOT (first_name = \"Lincoln\" AND middle_name = \"Benny\" AND last_name = \"Carroll\") ) ORDER BY julianday (date_left_staff) - julianday (date_joined_staff) DESC LIMIT 1",
        "db_id": "school"
    },
    {
        "id": 75,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['customers who never attended a class', 'bad customers', 'good customers'], 'relations': ['never_attended_condition (customers not in class_attendance)', \"rating_classification (customers rated as 'bad' or 'good')\", 'count_difference (bad_customers - good_customers)'], 'intent': 'calculate_count_difference_between_bad_and_good_customers', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.customers': [{'column': 'customer_id'}, {'column': 'rating'}], 'school.class_attendance': [{'column': 'customer_id'}]}}\nA mathematical logic question is as follows:\nAmong the customers who have never attended a class, how much more bad customers than good customers?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT n_bad - n_good AS diff FROM ( SELECT COUNT ( * ) AS n_good FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM Lessons WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n_bad FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM Lessons WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Bad Customer\" )",
        "db_id": "school"
    },
    {
        "id": 76,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['customers', 'bad rating', 'good rating', 'never attended a class'], 'relations': ['rating_assignment (customers → bad/good ratings)', 'attendance_status (customers → class attendance records)', 'comparison (difference between bad and good counts)'], 'intent': 'calculate_difference_in_customer_ratings_for_non_attending_customers', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.customers': [{'column': 'customer_id'}], 'school.ratings': [{'column': 'rating_value'}], 'school.class_attendance': [{'column': 'customer_id'}, {'column': 'class_id'}]}}\nA mathematical logic question is as follows:\nHow many more customers are rated bad than good for only the customers who have never attended a class?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT n_bad - n_good AS diff FROM ( SELECT COUNT ( * ) AS n_good FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM Lessons WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n_bad FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM Lessons WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Bad Customer\" )",
        "db_id": "school"
    },
    {
        "id": 77,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['March 7, 2018', 'classes', 'canceled classes', 'bad customers', 'good customers', 'customers who never attended a class'], 'relations': ['date_filter (March 7, 2018 → class status)', 'attendance_status (customers → never attended any class)', 'customer_rating (customers → good/bad classification)', 'comparison (bad vs. good customer count difference)'], 'intent': 'calculate_difference_in_customer_counts_by_attendance_status', 'reasoning_type': 'common sense understanding reasoning, mathematical logic reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.customers': [{'column': 'customer_id'}, {'column': 'customer_name'}], 'school.classes': [{'column': 'class_id'}, {'column': 'class_date'}, {'column': 'is_canceled'}], 'school.attendance': [{'column': 'customer_id'}, {'column': 'class_id'}], 'school.customer_feedback': [{'column': 'customer_id'}, {'column': 'rating'}]}}\nA hypothetical reasoning question is as follows:\nAssuming that all classes are not canceled on March 7, 2018, how much more bad customers than good customers among the customers who have never attended a class?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT n_bad - n_good AS diff FROM ( SELECT COUNT ( * ) AS n_good FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM ( SELECT customer_id , \"Completed\" AS lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) = \"2018-03-07\" UNION ALL SELECT customer_id , lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) != \"2018-03-07\" ) WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n_bad FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM ( SELECT customer_id , \"Completed\" AS lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) = \"2018-03-07\" UNION ALL SELECT customer_id , lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) != \"2018-03-07\" ) WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Bad Customer\" )",
        "db_id": "school"
    },
    {
        "id": 78,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['customers', 'bad rating', 'good rating', 'class attendance', 'March 7 2018', 'class cancellation status'], 'relations': ['customer_to_rating (customers have rating status)', 'customer_to_attendance (customers may attend classes)', 'class_to_cancellation (classes have cancellation status on dates)'], 'intent': 'calculate_difference_in_customer_count_between_ratings_with_conditions', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [7, 3, 2018], 'units': {'date_unit': 'YYYY-MM-DD format', 'count_unit': 'integer difference'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.customers': [{'column': 'customer_id'}], 'school.ratings': [{'column': 'rating_value'}], 'school.attendance_records': [{'column': 'customer_id'}, {'column': 'class_id'}, {'column': 'attendance_date'}], 'school.classes': [{'column': 'class_id'}, {'column': 'cancellation_status'}, {'column': 'scheduled_date'}]}}\nA hypothetical reasoning question is as follows:\nHow many more customers are rated bad than good for only the customers who have never attended a class if all classes were not canceled on March 7 2018?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT n_bad - n_good AS diff FROM ( SELECT COUNT ( * ) AS n_good FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM ( SELECT customer_id , \"Completed\" AS lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) = \"2018-03-07\" UNION ALL SELECT customer_id , lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) != \"2018-03-07\" ) WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Good Customer\" ) JOIN ( SELECT COUNT ( * ) AS n_bad FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT ( customer_id ) FROM ( SELECT customer_id , \"Completed\" AS lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) = \"2018-03-07\" UNION ALL SELECT customer_id , lesson_status_code FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) != \"2018-03-07\" ) WHERE lesson_status_code != \"Cancelled\" ) AND customer_status_code = \"Bad Customer\" )",
        "db_id": "school"
    },
    {
        "id": 79,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['staff', 'course fee', 'course schedule', 'March 5, 2018', 'staff ID', 'age'], 'relations': ['staff_absence_of_schedule (staff → no course schedule after date)', 'staff_course_association (staff ↔ course schedule)', 'course_fee_attribute (course schedule → course fee)', 'staff_age_calculation (staff → birth date → current age)'], 'intent': 'retrieve_staff_info_with_no_schedule_after_date', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': ['5', '3', '2018'], 'units': {'date': 'YYYY-MM-DD (ISO format)', 'age': 'years (current year minus birth year)', 'fee': 'currency (unit unspecified)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.staff': [{'column': 'staff_id'}, {'column': 'birth_date'}], 'school.course_schedule': [{'column': 'staff_id'}, {'column': 'schedule_date'}], 'school.course': [{'column': 'course_fee'}]}}\nA common sense reasoning question is as follows:\nHow much is the average course fee for a staff who has no course schedule after March 5, 2018? What's his staff ID and how old is he this year?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.staff_id , AVG ( A.price ) AS avg_price , strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , B.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , B.date_of_birth ) ) AS age FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id NOT IN ( SELECT staff_id FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) > \"2018-03-05\" ) GROUP BY A.staff_id",
        "db_id": "school"
    },
    {
        "id": 80,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['staff', 'course fee', 'age', 'course scheduled date'], 'relations': ['staff_teaches_courses (staff → courses)', 'condition: no_course_after_date (date=2018-03-05)'], 'intent': 'retrieve_staff_info_with_condition', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [2018, 3, 5], 'units': {'age': 'years', 'fee': 'currency', 'date_format': 'YYYY-MM-DD'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.staff': [{'column': 'staff_id'}, {'column': 'birth_date'}], 'school.courses': [{'column': 'fee'}, {'column': 'scheduled_date'}], 'school.teaching_assignments': [{'column': 'staff_id'}, {'column': 'course_id'}]}}\nA common sense reasoning question is as follows:\nTell me the staff ID, average course fee, and age (this year) for staff with no course scheduled after 5 March 2018?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.staff_id , AVG ( A.price ) AS avg_price , strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , B.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , B.date_of_birth ) ) AS age FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id NOT IN ( SELECT staff_id FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) > \"2018-03-05\" ) GROUP BY A.staff_id",
        "db_id": "school"
    },
    {
        "id": 81,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['course prices', '8% increase', 'February 2018', 'average course fee', 'staff with no course schedule after March 5, 2018', 'staff ID', 'age'], 'relations': ['price_adjustment (all courses increased by 8% in Feb 2018)', 'staff_schedule_condition (no courses after 2018-03-05)', 'staff_to_courses (staff teaches courses)', 'fee_calculation_per_staff (average adjusted course fees)'], 'intent': 'calculate_average_adjusted_course_fee_and_retrieve_staff_info', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [8, 2018, 5, 2018], 'units': {'percentage_increase': 'percent', 'date': 'YYYY-MM-DD format', 'age': 'years', 'currency': 'monetary unit (implied by database)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.staff': [{'column': 'staff_id'}, {'column': 'birth_date'}], 'school.courses': [{'column': 'course_fee'}], 'school.course_schedule': [{'column': 'staff_id'}, {'column': 'course_id'}, {'column': 'schedule_date'}]}}\nA hypothetical reasoning question is as follows:\nIf the prices of all courses were increased by 8% in February 2018, how much is the average course fee for a staff who has no course schedule after March 5, 2018? What's his staff ID and how old is he this year?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.staff_id , AVG ( A.price ) AS avg_price , strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , B.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , B.date_of_birth ) ) AS age FROM ( SELECT staff_id , ( 1 + 0.08 ) * price AS price FROM Lessons WHERE strftime ( \"%Y-%m\" , lesson_date ) = \"2018-02\" UNION ALL SELECT staff_id , price FROM Lessons WHERE strftime ( \"%Y-%m\" , lesson_date ) != \"2018-02\" ) A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id NOT IN ( SELECT staff_id FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) > \"2018-03-05\" ) GROUP BY A.staff_id",
        "db_id": "school"
    },
    {
        "id": 82,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['staff', 'course fee', 'age this year', 'March 5 2018', '8% increase', 'February 2018'], 'relations': ['staff_teaches_course (staff → course scheduling)', 'fee_adjustment (original_fee * 1.08)', 'temporal_condition (no schedule after 2018-03-05)'], 'intent': 'retrieve_staff_information_with_fee_adjustment_and_scheduling_condition', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [8, 2018, 3, 5], 'units': {'percentage': '8% (fee increase multiplier: 1.08)', 'date': 'YYYY-MM-DD (March 5 2018 → 2018-03-05)', 'age': 'years (calculated from birth year to current year)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.staff': [{'column': 'staff_id'}, {'column': 'birth_date'}], 'school.courses': [{'column': 'fee'}], 'school.schedules': [{'column': 'staff_id'}, {'column': 'course_id'}, {'column': 'schedule_date'}]}}\nA hypothetical reasoning question is as follows:\nWhat is the staff ID, average course fee, and age this year, for staff with no course scheduled after March 5 2018 if all course prices were increased by 8% in February 2018?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.staff_id , AVG ( A.price ) AS avg_price , strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , B.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , B.date_of_birth ) ) AS age FROM ( SELECT staff_id , ( 1 + 0.08 ) * price AS price FROM Lessons WHERE strftime ( \"%Y-%m\" , lesson_date ) = \"2018-02\" UNION ALL SELECT staff_id , price FROM Lessons WHERE strftime ( \"%Y-%m\" , lesson_date ) != \"2018-02\" ) A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id NOT IN ( SELECT staff_id FROM Lessons WHERE strftime ( \"%Y-%m-%d\" , lesson_date ) > \"2018-03-05\" ) GROUP BY A.staff_id",
        "db_id": "school"
    },
    {
        "id": 83,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['coach with highest average course price', 'coach with lowest average course price', 'average course price'], 'relations': ['coach_teaches_courses (coach linked to courses)', 'price_aggregation_per_coach (average calculation per coach)', 'comparison_relationship (difference between max and min averages)'], 'intent': 'retrieve_coach_id_with_max_avg_price_and_difference_from_min', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'price_difference': 'currency unit (implied by database schema)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.coaches': [{'column': 'coach_id'}], 'school.courses': [{'column': 'price'}, {'column': 'coach_id (for joining)'}], 'school.AVG(courses': [{'column': 'price) AS avg_price'}]}}\nA mathematical logic question is as follows:\nWhat's the ID of the coach who has the highest average course price and how much higher than that of the coach with the lowest average course price?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.staff_id , AVG ( A.price ) - ( SELECT AVG ( price ) FROM Lessons GROUP BY staff_id ORDER BY AVG ( price ) ASC LIMIT 1 ) AS diff FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id GROUP BY A.staff_id ORDER BY AVG ( A.price ) DESC LIMIT 1",
        "db_id": "school"
    },
    {
        "id": 84,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['coach', 'course price', 'highest average course price', 'lowest average course price'], 'relations': ['coach_to_course (coach → teaches courses)', 'course_to_price (course → has price)', 'comparison (highest_avg_price - lowest_avg_price)'], 'intent': 'retrieve_coach_id_with_max_avg_price_and_price_difference_from_min', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'price': 'currency unit (implied by database schema)', 'difference': 'same currency unit'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.courses': [{'column': 'coach_id'}, {'column': 'price'}]}}\nA mathematical logic question is as follows:\nTell me the ID of the coach who has the highest average course price and how much more does this cost than the average price from the coach with the lowest average price?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.staff_id , AVG ( A.price ) - ( SELECT AVG ( price ) FROM Lessons GROUP BY staff_id ORDER BY AVG ( price ) ASC LIMIT 1 ) AS diff FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id GROUP BY A.staff_id ORDER BY AVG ( A.price ) DESC LIMIT 1",
        "db_id": "school"
    },
    {
        "id": 85,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Winnifred Liam Jast', 'courses', 'coach ID', 'average course price', 'highest average price coach', 'lowest average price coach'], 'relations': ['coach_offers_courses (relationship between coaches and the courses they offer)', \"percentage_reduction (12% reduction applied specifically to Winnifred Liam Jast's courses)\", 'price_comparison (difference between highest and lowest average prices)'], 'intent': 'calculate_price_difference_after_specific_adjustment', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [12], 'units': {'percentage': '% (applied to course price reduction)', 'currency': 'implied by database schema (e.g., dollars, euros)', 'difference_unit': 'same currency as course prices'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.coaches': [{'column': 'coach_id'}, {'column': 'name'}], 'school.courses': [{'column': 'price'}, {'column': 'coach_id'}]}}\nA hypothetical reasoning question is as follows:\nIf all courses offered by Winnifred Liam Jast were reduced by 12%, what's the ID of the coach who has the highest average course price and how much higher than that of the coach with the lowest average course price?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT staff_id , AVG ( price ) - ( SELECT AVG ( price ) FROM ( SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price * ( 1 - 0.12 ) AS price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" UNION ALL SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE NOT ( B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" ) ) GROUP BY staff_id ORDER BY AVG ( price ) ASC LIMIT 1 ) AS diff FROM ( SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price * ( 1 - 0.12 ) AS price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" UNION ALL SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE NOT ( B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" ) ) GROUP BY staff_id ORDER BY AVG ( price ) DESC LIMIT 1",
        "db_id": "school"
    },
    {
        "id": 86,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['coach ID', 'highest average course price', 'lowest average course price', 'coach Winnifred Liam Jast', '12% price reduction'], 'relations': ['coach_to_courses (coach provides courses)', 'price_comparison (difference between highest and lowest averages)', 'discount_application (adjust Winnifred Liam Jast prices by 12%)'], 'intent': 'identify_coach_with_max_avg_price_and_price_difference_after_discount', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [12], 'units': {'price': 'monetary units (implied by database)', 'percentage': '% (applied as multiplier: 0.88 for 12% reduction)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.coaches': [{'column': 'coach_id'}, {'column': 'coach_name'}], 'school.courses': [{'column': 'coach_id'}, {'column': 'price'}]}}\nA hypothetical reasoning question is as follows:\nTell me the ID of the coach who has the highest average price of a course and how much more this is than the price of a course from the coach with the lowest average price if courses from Winnifred Liam Jast were 12% cheaper?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT staff_id , AVG ( price ) - ( SELECT AVG ( price ) FROM ( SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price * ( 1 - 0.12 ) AS price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" UNION ALL SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE NOT ( B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" ) ) GROUP BY staff_id ORDER BY AVG ( price ) ASC LIMIT 1 ) AS diff FROM ( SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price * ( 1 - 0.12 ) AS price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" UNION ALL SELECT A.staff_id , B.first_name , B.middle_name , B.last_name , A.price FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE NOT ( B.first_name = \"Winnifred\" AND B.middle_name = \"Liam\" AND B.last_name = \"Jast\" ) ) GROUP BY staff_id ORDER BY AVG ( price ) DESC LIMIT 1",
        "db_id": "school"
    },
    {
        "id": 87,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['clients', 'multiple coaches'], 'relations': ['client_to_coach_assignment (clients ↔ coaches)'], 'intent': 'calculate_percentage_of_clients_with_multiple_coaches', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.clients': [{'column': 'client_id'}], 'school.coaches': [{'column': 'coach_id'}], 'school.client_coach_relationship': [{'column': 'client_id'}, {'column': 'coach_id'}]}}\nA mathematical logic question is as follows:\nWhat percentage of clients have multiple coaches?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customers ) AS percent FROM ( SELECT customer_id FROM Lessons GROUP BY customer_id HAVING COUNT ( DISTINCT ( staff_id ) ) >= 2 )",
        "db_id": "school"
    },
    {
        "id": 88,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['clients', 'coach'], 'relations': ['client_to_coach_assignment (clients ↔ coaches via coaching assignments)', 'count_condition (number of coaches per client > 1)'], 'intent': 'calculate_percentage_of_clients_with_multiple_coaches', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.clients': [{'column': 'client_id'}], 'school.coaching_assignments': [{'column': 'client_id'}, {'column': 'coach_id'}]}}\nA mathematical logic question is as follows:\nCalculate the percentage of clients with more than one coach?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customers ) AS percent FROM ( SELECT customer_id FROM Lessons GROUP BY customer_id HAVING COUNT ( DISTINCT ( staff_id ) ) >= 2 )",
        "db_id": "school"
    },
    {
        "id": 89,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['course ID 12', 'coach Winnifred Liam Jast', 'clients', 'multiple coaches'], 'relations': ['course_to_coach_assignment (course ID 12 → Winnifred Liam Jast)', 'client_to_coach_relationship (clients → coaches through course enrollment)'], 'intent': 'calculate_percentage_of_clients_with_multiple_coaches', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [12], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.courses': [{'column': 'id'}, {'column': 'coach_id'}], 'school.coaches': [{'column': 'id'}, {'column': 'full_name'}], 'school.enrollments': [{'column': 'client_id'}, {'column': 'course_id'}], 'school.clients': [{'column': 'id'}]}}\nA hypothetical reasoning question is as follows:\nIf the coach of the course with ID 12 is Winnifred Liam Jast, what percentage of clients have multiple coaches?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customers ) AS percent FROM ( SELECT customer_id FROM ( SELECT customer_id , ( SELECT staff_id FROM Staff WHERE first_name = \"Winnifred\" AND middle_name = \"Liam\" AND last_name = \"Jast\" ) AS staff_id FROM Lessons WHERE lesson_id = \"12\" UNION ALL SELECT customer_id , staff_id FROM Lessons WHERE lesson_id != \"12\" ) GROUP BY customer_id HAVING COUNT ( DISTINCT ( staff_id ) ) >= 2 )",
        "db_id": "school"
    },
    {
        "id": 90,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['clients', 'course ID 12', 'coach Winnifred Liam Jast'], 'relations': ['coach_assigned_to_course (Winnifred Liam Jast → course ID 12)', 'clients_enrolled_in_course', 'coaches_per_client_count'], 'intent': 'calculate_conditional_client_percentage', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [12, 1], 'units': {'percentage': '%', 'threshold': '>1 coach (count)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.clients': [{'column': 'client_id'}], 'school.courses': [{'column': 'course_id'}], 'school.coaches': [{'column': 'coach_id'}, {'column': 'full_name'}], 'school.client_course': [{'column': 'client_id'}, {'column': 'course_id'}], 'school.course_coach': [{'column': 'course_id'}, {'column': 'coach_id'}]}}\nA hypothetical reasoning question is as follows:\nCalculate the percentage of clients with more than a single coach if course with ID 12 is coached by Winnifred Liam Jast.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customers ) AS percent FROM ( SELECT customer_id FROM ( SELECT customer_id , ( SELECT staff_id FROM Staff WHERE first_name = \"Winnifred\" AND middle_name = \"Liam\" AND last_name = \"Jast\" ) AS staff_id FROM Lessons WHERE lesson_id = \"12\" UNION ALL SELECT customer_id , staff_id FROM Lessons WHERE lesson_id != \"12\" ) GROUP BY customer_id HAVING COUNT ( DISTINCT ( staff_id ) ) >= 2 )",
        "db_id": "school"
    },
    {
        "id": 91,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['oldest staff', 'youngest staff'], 'relations': ['age_difference (oldest → youngest)'], 'intent': 'calculate_age_difference', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'age': 'years'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.staff': [{'column': 'date_of_birth'}]}}\nA common sense reasoning question is as follows:\nHow many years older is the oldest staff than the youngest staff?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT strftime ( \"%Y\" , MAX ( date_of_birth ) ) - strftime ( \"%Y\" , MIN ( date_of_birth ) ) - ( strftime ( \"%m-%d\" , MAX ( date_of_birth ) ) < strftime ( \"%m-%d\" , MIN ( date_of_birth ) ) ) AS diff FROM Staff",
        "db_id": "school"
    },
    {
        "id": 92,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['oldest staff', 'youngest staff', 'age difference'], 'relations': ['staff_to_age (staff → age attribute)', 'comparison_relationship (oldest vs youngest)'], 'intent': 'calculate_age_difference_between_extreme_ages', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'age': 'years (implied from database storage)', 'difference_unit': 'years (mathematical subtraction)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.staff': [{'column': 'birth_date (to derive age)'}, {'column': 'hire_date (possible alternative if age unavailable)'}, {'column': 'age (if directly stored)'}]}}\nA common sense reasoning question is as follows:\nCalculate the difference in age between the oldest and youngest staff?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT strftime ( \"%Y\" , MAX ( date_of_birth ) ) - strftime ( \"%Y\" , MIN ( date_of_birth ) ) - ( strftime ( \"%m-%d\" , MAX ( date_of_birth ) ) < strftime ( \"%m-%d\" , MIN ( date_of_birth ) ) ) AS diff FROM Staff",
        "db_id": "school"
    },
    {
        "id": 93,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Camylle Icie Weissnat', 'person born in 2009', 'oldest staff', 'youngest staff', 'age in 2020'], 'relations': ['Camylle_age = 2 × (2020 - 2009)', 'age_gap = max(staff_birth_year) - min(staff_birth_year)'], 'intent': 'calculate_age_difference_between_oldest_and_youngest_staff', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2020, 2009], 'units': {'time': 'years', 'calculation': 'age = current_year - birth_year', 'difference': 'age_gap (absolute value in years)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.staff': [{'column': 'birth_date'}, {'column': 'name'}]}}\nA hypothetical reasoning question is as follows:\nIf Camylle Icie Weissnat's age in 2020 is twice that of a person born in 2009, how many years older is the oldest staff than the youngest staff?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT MAX ( date_of_birth ) - MIN ( date_of_birth ) AS diff FROM ( SELECT 2020 - ( 2020 - 2009 ) * 2 AS date_of_birth FROM Staff WHERE first_name = \"Camylle\" AND middle_name = \"Icie\" AND last_name = \"Weissnat\" UNION ALL SELECT date_of_birth FROM Staff WHERE NOT ( first_name = \"Camylle\" AND middle_name = \"Icie\" AND last_name = \"Weissnat\" ) ) ORDER BY date_of_birth DESC",
        "db_id": "school"
    },
    {
        "id": 94,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Camylle Icie Weissnat', 'staff born in 2009', 'oldest staff', 'youngest staff'], 'relations': ['Camylle_age_2020 = 2 * staff_2009_age_2020', 'age_difference = max_age - min_age'], 'intent': 'calculate_age_difference_between_oldest_and_youngest_staff', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2020, 2009, 2], 'units': {'age': 'years', 'birth_year': 'calendar year', 'difference': 'years'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.staff': [{'column': 'birth_date'}, {'column': 'full_name'}]}}\nA hypothetical reasoning question is as follows:\nCalculate the difference in age between the oldest and youngest staff, if in 2020, Camylle Icie Weissnat was twice as old as someone born in 2009.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT MAX ( date_of_birth ) - MIN ( date_of_birth ) AS diff FROM ( SELECT 2020 - ( 2020 - 2009 ) * 2 AS date_of_birth FROM Staff WHERE first_name = \"Camylle\" AND middle_name = \"Icie\" AND last_name = \"Weissnat\" UNION ALL SELECT date_of_birth FROM Staff WHERE NOT ( first_name = \"Camylle\" AND middle_name = \"Icie\" AND last_name = \"Weissnat\" ) ) ORDER BY date_of_birth DESC",
        "db_id": "school"
    },
    {
        "id": 95,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['oldest coach', 'courses arranged', 'canceled courses'], 'relations': ['coach_to_courses (oldest coach → courses arranged)', 'course_status (courses arranged → canceled courses)', \"tenure_period (coach's active period until leaving)\"], 'intent': 'calculate_total_courses_and_canceled_percentage_for_oldest_coach_at_departure', 'reasoning_type': ['common sense understanding reasoning', 'mathematical logic reasoning'], 'numerical_values': [], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.coaches': [{'column': 'coach_id'}, {'column': 'birth_date'}, {'column': 'leave_date'}], 'school.courses': [{'column': 'coach_id'}, {'column': 'course_id'}, {'column': 'status'}, {'column': 'course_date'}]}}\nA mathematical logic question is as follows:\nWhat is the total number of courses arranged for the oldest coach when leaving the driving school, and what percentage of them were canceled?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT total, 1.0 * n_cancel / total AS ratio FROM ( SELECT COUNT ( * ) AS total FROM Lessons WHERE staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) ) JOIN ( SELECT COUNT ( * ) AS n_cancel FROM Lessons WHERE staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) AND lesson_status_code = \"Cancelled\" )",
        "db_id": "school"
    },
    {
        "id": 96,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['oldest coach', 'scheduled courses', 'cancelled courses', 'driving school'], 'relations': ['coach_teaches_courses (oldest coach → scheduled courses)', 'course_status (scheduled courses → cancelled status)', 'coach_employment_status (oldest coach → leaving driving school)'], 'intent': 'calculate_total_scheduled_courses_and_cancelled_count_for_oldest_departing_coach', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.coaches': [{'column': 'coach_id'}, {'column': 'birth_date'}, {'column': 'leave_date'}], 'school.courses': [{'column': 'coach_id'}, {'column': 'course_id'}, {'column': 'status'}]}}\nA mathematical logic question is as follows:\nWhat is the sum total of scheduled courses for the oldest coach when leaving the driving school and how many of these were cancelled?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT total, 1.0 * n_cancel / total AS ratio FROM ( SELECT COUNT ( * ) AS total FROM Lessons WHERE staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) ) JOIN ( SELECT COUNT ( * ) AS n_cancel FROM Lessons WHERE staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) AND lesson_status_code = \"Cancelled\" )",
        "db_id": "school"
    },
    {
        "id": 97,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['coaches', 'courses', 'oldest coach (by joining date)', 'leaving driving school', 'courses arranged', 'canceled courses'], 'relations': ['coach_course_relation (coaches assigned to courses)', 'time_after_joining (60-day window)', 'tenure_duration (from joining to leaving)', 'course_status (canceled vs. non-canceled)'], 'intent': 'calculate_total_courses_and_cancel_percentage_for_oldest_coach_meeting_condition', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [60], 'units': {'time': 'days', 'conversion': 'date arithmetic (e.g., joining_date + 60 days)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.coaches': [{'column': 'coach_id'}, {'column': 'joining_date'}, {'column': 'leaving_date'}], 'school.courses': [{'column': 'course_id'}, {'column': 'coach_id'}, {'column': 'scheduled_date'}, {'column': 'status'}]}}\nA hypothetical reasoning question is as follows:\nIf all coaches have no course scheduled within 60 days after joining, what is the total number of courses arranged for the oldest coach when leaving the driving school, and what percentage of them were canceled?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT total, 1.0 * n_cancel / total AS ratio FROM ( SELECT COUNT ( * ) AS total FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) AND A.lesson_date > strftime ( julianday ( B.date_joined_staff ) + 60 ) ) JOIN ( SELECT COUNT ( * ) AS n_cancel FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) AND A.lesson_status_code = \"Cancelled\" AND A.lesson_date > strftime ( julianday ( B.date_joined_staff ) + 60 ) )",
        "db_id": "school"
    },
    {
        "id": 98,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['oldest coach (by earliest join date)', 'arranged courses', 'cancellation rate', 'leaving the driving school', 'no courses within 60 days after joining'], 'relations': ['coach_to_courses (coach schedules courses)', 'temporal_condition (exclude first 60 days post-join)', 'status_dependency (cancellation rate = canceled/arranged courses)'], 'intent': 'retrieve_total_arranged_courses_and_cancellation_rate_for_longest-tenured_coach_upon_departure_under_60-day_course_ban', 'reasoning_type': 'ideal hypothesis reasoning', 'numerical_values': [60], 'units': {'time_period': 'days', 'rate_unit': 'percentage (implied)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.coaches': [{'column': 'coach_id'}, {'column': 'join_date'}, {'column': 'leave_date'}], 'school.courses': [{'column': 'course_id'}, {'column': 'coach_id'}, {'column': 'status'}, {'column': 'scheduled_date'}]}}\nA hypothetical reasoning question is as follows:\nGive me the total number of arranged courses, and the cancellation rate, for the oldest coach when leaving the driving school if all coaches have no course scheduled within 60 days after joining.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT total, 1.0 * n_cancel / total AS ratio FROM ( SELECT COUNT ( * ) AS total FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) AND A.lesson_date > strftime ( julianday ( B.date_joined_staff ) + 60 ) ) JOIN ( SELECT COUNT ( * ) AS n_cancel FROM Lessons A JOIN Staff B ON A.staff_id = B.staff_id WHERE A.staff_id = ( SELECT staff_id FROM Staff ORDER BY strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) DESC LIMIT 1 ) AND A.lesson_status_code = \"Cancelled\" AND A.lesson_date > strftime ( julianday ( B.date_joined_staff ) + 60 ) )",
        "db_id": "school"
    },
    {
        "id": 99,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['customer with highest payment', 'customer with lowest payment', 'payment amounts'], 'relations': ['customer_to_payment (customer ID → payment amount)', 'comparison (difference between max and min payment)'], 'intent': 'identify_extreme_payers_and_calculate_payment_difference', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'currency': 'USD (implied by payment_amount field)', 'calculation': 'Difference = MAX(payment) - MIN(payment)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.payments': [{'column': 'customer_id'}, {'column': 'payment_amount'}]}}\nA mathematical logic question is as follows:\nWhat's the ID of the customer who paid the most, and how much more than the customer who paid the least?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.customer_id , MAX ( A.amount_payment ) - ( SELECT MIN ( amount_payment ) FROM Customer_Payments ) AS payment_diff FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id",
        "db_id": "school"
    },
    {
        "id": 100,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['customer', 'highest fee', 'lowest fee', 'fee difference'], 'relations': ['customer_to_fee (customer → fee paid)', 'comparison (highest_fee vs lowest_fee)', 'difference_calculation (highest_fee - lowest_fee)'], 'intent': 'retrieve_customer_id_with_max_fee_and_difference_from_min_fee', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'currency': 'monetary unit (implied by fee field)', 'difference_unit': 'same as fee currency'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.payments': [{'column': 'customer_id'}, {'column': 'fee'}]}}\nA mathematical logic question is as follows:\nTell me the ID of the customer who paid the highest fee and how much more was this than the customer paying the lowest fee?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.customer_id , MAX ( A.amount_payment ) - ( SELECT MIN ( amount_payment ) FROM Customer_Payments ) AS payment_diff FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id",
        "db_id": "school"
    },
    {
        "id": 101,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Amya Spinka', 'payment on March 12th, 2018', 'customer with highest payment', 'customer with lowest payment'], 'relations': [\"payment_adjustment (Amya Spinka's payment +5000 on 2018-03-12)\", 'comparison (max_payment_customer vs min_payment_customer)', 'customer_identification (ID lookup for payment extremes)'], 'intent': 'identify_customer_with_max_payment_and_difference_after_adjustment', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5000, 20180312], 'units': {'currency': 'implied monetary unit (e.g., dollars, euros)', 'date_format': 'YYYY-MM-DD', 'adjustment': '+5000 (absolute value)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.customers': [{'column': 'customer_id'}, {'column': 'customer_name'}], 'school.payments': [{'column': 'payment_amount'}, {'column': 'payment_date'}, {'column': 'customer_id'}]}}\nA hypothetical reasoning question is as follows:\nIf Amya Spinka paid 5000 more on March 12th, 2018, what's the ID of the customer who paid the most, and how much more than the customer who paid the least?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT customer_id, MAX (amount_payment) - (SELECT MIN (amount_payment) FROM (SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\" UNION ALL SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE NOT (B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\") )) AS payment_diff FROM (SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\" UNION ALL SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE NOT (B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\") )",
        "db_id": "school"
    },
    {
        "id": 102,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Amya Spinka', 'highest fee', 'lowest fee', 'customer ID', '12 March 2018'], 'relations': ['payment_comparison (Amya Spinka paid 5000 more than some reference)', 'difference_calculation (highest_fee - lowest_fee)', 'date_constraint (payment occurred on 2018-03-12)'], 'intent': 'retrieve_customer_id_with_max_fee_and_difference_from_min_fee', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5000, 2018, 3, 12], 'units': {'currency': 'monetary unit (implied by fee column)', 'date': 'YYYY-MM-DD format'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.customers': [{'column': 'customer_id'}, {'column': 'name'}], 'school.payments': [{'column': 'amount'}, {'column': 'payment_date'}]}}\nA hypothetical reasoning question is as follows:\nTell me the ID of the customer who paid the highest fee and how much more was this than the customer paying the lowest fee if Amya Spinka paid 5000 more on 12 March 2018?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT customer_id, MAX (amount_payment) - (SELECT MIN (amount_payment) FROM (SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\" UNION ALL SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE NOT (B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\") )) AS payment_diff FROM (SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\" UNION ALL SELECT A.customer_id, amount_payment + 5000 AS amount_payment FROM Customer_Payments A JOIN Customers B ON A.customer_id = B.customer_id WHERE NOT (B.first_name = \"Amya\" AND B.last_name = \"Spinka\" AND strftime (\"%Y-%m-%d\", A.datetime_payment) = \"2018-03-12\") )",
        "db_id": "school"
    },
    {
        "id": 103,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['coaches', 'Lake Elaine, Georgia'], 'relations': ['coaches reside in Lake Elaine, Georgia'], 'intent': 'calculate_average_age_of_coaches_by_location', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [], 'units': {'age': 'years'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.coaches': [{'column': 'age'}, {'column': 'address_id'}], 'school.addresses': [{'column': 'address_id'}, {'column': 'city'}, {'column': 'state'}]}}\nA common sense reasoning question is as follows:\nWhat is the average age of the coaches living in Lake Elaine, Georgia?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG ( strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , A.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , A.date_of_birth ) ) ) AS avg_age FROM Staff A JOIN Addresses B ON A.staff_address_id = B.address_id WHERE B.state_province_county = \"Georgia\" AND B.city = \"Lake Elaina\"",
        "db_id": "school"
    },
    {
        "id": 104,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['coaches', 'Lake Elaine Georgia', 'average age'], 'relations': ['residence_location (coaches → Lake Elaine Georgia)', 'age_attribute (coaches → age for averaging)'], 'intent': 'calculate_average_age_of_coaches_by_residence', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'age': 'years (implied by database schema)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.coaches': [{'column': 'age'}, {'column': 'city'}, {'column': 'state'}]}}\nA common sense reasoning question is as follows:\nFor the coaches resident in Lake Elaine Georgia, calculate the average age.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG ( strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , A.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , A.date_of_birth ) ) ) AS avg_age FROM Staff A JOIN Addresses B ON A.staff_address_id = B.address_id WHERE B.state_province_county = \"Georgia\" AND B.city = \"Lake Elaina\"",
        "db_id": "school"
    },
    {
        "id": 105,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['coaches living in Lake Elaine, Georgia', 'coaches living in Port Melyssa, Georgia', 'average age'], 'relations': ['average_age(Lake Elaine) = 2 * average_age(Port Melyssa)', 'geographical_location (Lake Elaine and Port Melyssa in Georgia)'], 'intent': 'calculate_average_age_of_coaches_in_Lake_Elaine', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'age': 'years (implied by age calculations)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.coaches': [{'column': 'city'}, {'column': 'state'}, {'column': 'age'}]}}\nA hypothetical reasoning question is as follows:\nIf the average age of coaches living in Lake Elaine, Georgia is twice the average age of coaches living in Port Melyssa,Georgia, what is the average age of the coaches living in Lake Elaine, Georgia?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 2 * AVG ( strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , A.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , A.date_of_birth ) ) ) AS avg_age FROM Staff A JOIN Addresses B ON A.staff_address_id = B.address_id WHERE B.state_province_county = \"Georgia\" AND B.city = \"Port Melyssa\"",
        "db_id": "school"
    },
    {
        "id": 106,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['coaches in Lake Elaine, Georgia', 'coaches in Port Melyssa, Georgia'], 'relations': ['age_relationship (average_age_Lake_Elaine = 2 * average_age_Port_Melyssa)'], 'intent': 'calculate_average_age_of_coaches_in_Lake_Elaine', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'age': 'years (implied)', 'multiplication_factor': '2 (times)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.coaches': [{'column': 'location_city'}, {'column': 'location_state'}, {'column': 'age'}]}}\nA hypothetical reasoning question is as follows:\nWhat is the average age of coaches in Lake Elaine Georgia if the average ages of coaches here is twice the average of coaches living in Port Melyssa, Georgia?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 2 * AVG ( strftime ( \"%Y\" , \"now\" ) - strftime ( \"%Y\" , A.date_of_birth ) - ( strftime ( \"%m-%d\" , \"now\" ) < strftime ( \"%m-%d\" , A.date_of_birth ) ) ) AS avg_age FROM Staff A JOIN Addresses B ON A.staff_address_id = B.address_id WHERE B.state_province_county = \"Georgia\" AND B.city = \"Port Melyssa\"",
        "db_id": "school"
    },
    {
        "id": 107,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Janessa Amara Sawayn', 'Camylle Icie Weissnat', 'five years after leaving office'], 'relations': ['person_to_birthdate (Janessa/Camylle → birth_date)', 'person_to_office_end (Janessa → office_end_date)', 'time_interval_calculation (office_end_date + 5 years → target_date)', 'age_comparison (Janessa_age_at_target < Camylle_age_at_target)'], 'intent': 'calculate_age_at_specific_time_and_comparative_age_difference', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [5], 'units': {'time': 'years', 'age': 'years', 'operations': ['date addition (office_end_date + 5 years)', 'age calculation (current_date - birth_date)', 'subtraction (Camylle_age - Janessa_age)']}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.people': [{'column': 'full_name'}, {'column': 'birth_date'}], 'school.office_terms': [{'column': 'end_date'}, {'column': 'person_id'}]}}\nA common sense reasoning question is as follows:\nHow old is Janessa Amara Sawayn five years after she left office, and how many years younger than Camylle Icie Weissnat?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM ( SELECT 5 + strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) AS age FROM Staff WHERE first_name = \"Janessa\" AND middle_name = \"Amara\" AND last_name = \"Sawayn\" ) JOIN ( SELECT date_of_birth - ( SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND middle_name = \"Amara\" AND last_name = \"Sawayn\" ) AS diff FROM Staff WHERE first_name = \"Camylle\" AND middle_name = \"Icie\" AND last_name = \"Weissnat\" )",
        "db_id": "school"
    },
    {
        "id": 108,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Janessa Amara Sawayn', 'Camylle Icie Weissnat', 'age five years after leaving office', 'years younger'], 'relations': ['person_age_at_time (Janessa Amara Sawayn → age after office exit +5y)', 'person_age_at_time (Camylle Icie Weissnat → age at same reference time)', 'age_comparison (Janessa vs Camylle → younger by N years)'], 'intent': 'calculate_age_at_specific_time_and_comparative_age_difference', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [5], 'units': {'time': 'years', 'conversion': '1 year = 365 days (implied for age calculation)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.people': [{'column': 'birth_date'}, {'column': 'first_name'}, {'column': 'middle_name'}, {'column': 'last_name'}], 'school.office_terms': [{'column': 'leave_date'}]}}\nA common sense reasoning question is as follows:\nGive me Janessa Amara Sawayn's age five years after leaving office and how many years younger were they than Camylle Icie Weissnat?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM ( SELECT 5 + strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) AS age FROM Staff WHERE first_name = \"Janessa\" AND middle_name = \"Amara\" AND last_name = \"Sawayn\" ) JOIN ( SELECT date_of_birth - ( SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND middle_name = \"Amara\" AND last_name = \"Sawayn\" ) AS diff FROM Staff WHERE first_name = \"Camylle\" AND middle_name = \"Icie\" AND last_name = \"Weissnat\" )",
        "db_id": "school"
    },
    {
        "id": 109,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Camylle Icie Weissnat', 'Janessa Amara Sawayn', '30 years old', 'five years after leaving', 'office departure'], 'relations': [\"age_at_event (Camylle's age when Janessa leaves = 30)\", 'time_offset (5 years after departure)', 'age_comparison (difference between their ages)'], 'intent': 'calculate_future_age_and_age_difference', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [30, 5], 'units': {'age': 'years', 'time': 'years', 'conversion': 'linear addition (age + time_offset)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.persons': [{'column': 'full_name'}, {'column': 'birth_date'}]}}\nA hypothetical reasoning question is as follows:\nIf Camylle Icie Weissnat is 30 years old when Janessa Amara Sawayn leaves, how old is Janessa Amara Sawayn five years after she left office, and how many years younger than Camylle Icie Weissnat?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 5 + strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) AS age , 30 - ( strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) ) AS diff FROM Staff WHERE first_name = \"Janessa\" AND middle_name = \"Amara\" AND last_name = \"Sawayn\"",
        "db_id": "school"
    },
    {
        "id": 110,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Janessa Amara Sawayn', 'Camylle Icie Weissnat', 'leaving office event'], 'relations': ['age_at_event (Janessa Amara Sawayn → age when leaving office)', 'age_at_event (Camylle Icie Weissnat → age when Janessa left)', 'time_elapsed (5 years after event)'], 'intent': 'calculate_ages_and_age_difference_at_specific_time', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [5, 30], 'units': {'time': 'years', 'age_difference': 'years'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'school.people': [{'column': 'name'}, {'column': 'birth_date'}], 'school.events': [{'column': 'event_type'}, {'column': 'event_date'}, {'column': 'person_id'}]}}\nA hypothetical reasoning question is as follows:\nHow old was Janessa Amara Sawayn five years after leaving office if Camylle Icie Weissnat was 30 years old when Janessa Amara Sawayn left? How much younger was Janessa Amara Sawayn than Camylle Icie Weissnat?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 5 + strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) AS age , 30 - ( strftime ( \"%Y\" , date_left_staff ) - strftime ( \"%Y\" , date_of_birth ) - ( strftime ( \"%m-%d\" , date_left_staff ) < strftime ( \"%m-%d\" , date_of_birth ) ) ) AS diff FROM Staff WHERE first_name = \"Janessa\" AND middle_name = \"Amara\" AND last_name = \"Sawayn\"",
        "db_id": "school"
    },
    {
        "id": 111,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['John Smith', 'hospital stay'], 'relations': ['patient_to_stay (John Smith → hospital stay duration)'], 'intent': 'calculate_duration_of_hospital_stay', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'time': 'days', 'calculation': 'date difference (discharge_date - admission_date)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.patients': [{'column': 'patient_name'}, {'column': 'patient_id'}], 'hospital.admissions': [{'column': 'patient_id'}, {'column': 'admission_date'}, {'column': 'discharge_date'}]}}\nA common sense reasoning question is as follows:\nHow many days did John Smith stay in hospital?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CAST ( julianday ( A.StayEnd ) - julianday ( A.StayStart ) AS INTEGER ) AS days_diff FROM Stay A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"John Smith\"",
        "db_id": "hospital"
    },
    {
        "id": 112,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['John Smith', 'hospital admission'], 'relations': ['patient_admission (John Smith → hospital admission record)'], 'intent': 'calculate_duration_of_hospital_admission', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'time': 'days (derived from date difference calculation)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.patients': [{'column': 'patient_name'}], 'hospital.admissions': [{'column': 'admission_date'}, {'column': 'discharge_date'}]}}\nA common sense reasoning question is as follows:\nHow long was John Smith admitted to the hospital?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CAST ( julianday ( A.StayEnd ) - julianday ( A.StayStart ) AS INTEGER ) AS days_diff FROM Stay A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"John Smith\"",
        "db_id": "hospital"
    },
    {
        "id": 113,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['John Smith', 'International Nurses Day', 'hospital stay duration'], 'relations': ['patient_discharge_date (John Smith → International Nurses Day)', 'stay_duration_calculation (admission_date to discharge_date)'], 'intent': 'calculate_length_of_hospital_stay', 'reasoning_type': 'common sense understanding reasoning, mathematical logic reasoning', 'numerical_values': [], 'units': {'time': 'days', 'date_conversion': 'International Nurses Day = May 12 (fixed date)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.patients': [{'column': 'patient_id'}, {'column': 'full_name'}], 'hospital.admissions': [{'column': 'admission_date'}, {'column': 'discharge_date'}]}}\nA hypothetical reasoning question is as follows:\nIf John Smith left the hospital on International Nurses Day, how many days did John Smith stay in the hospital?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT julianday ( strftime ( \"%Y-\" , A.StayEnd ) || \"05-12\" ) - julianday ( strftime ( \"%Y-\" , A.StayStart ) || strftime ( \"%m-%d\" , A.StayStart ) ) AS date_diff FROM Stay A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"John Smith\"",
        "db_id": "hospital"
    },
    {
        "id": 114,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['John Smith', 'hospital discharge', 'International Nurses Day', 'admission duration'], 'relations': ['patient_discharge_date (John Smith → International Nurses Day)', 'admission_to_discharge_period (admission date → discharge date)'], 'intent': 'calculate_length_of_hospital_stay', 'reasoning_type': 'common sense understanding reasoning, mathematical logic reasoning', 'numerical_values': [], 'units': {'date': 'YYYY-MM-DD (ISO format)', 'duration': 'days (calculated from date difference)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.patients': [{'column': 'patient_id'}, {'column': 'full_name'}], 'hospital.admissions': [{'column': 'patient_id'}, {'column': 'admission_date'}, {'column': 'discharge_date'}]}}\nA hypothetical reasoning question is as follows:\nIf John Smith was discharged from the hospital on International Nurses Day, for how long was he admitted to the hospital?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT julianday ( strftime ( \"%Y-\" , A.StayEnd ) || \"05-12\" ) - julianday ( strftime ( \"%Y-\" , A.StayStart ) || strftime ( \"%m-%d\" , A.StayStart ) ) AS date_diff FROM Stay A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"John Smith\"",
        "db_id": "hospital"
    },
    {
        "id": 115,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Foo Labs branded drugs', 'Baz Industries branded drugs', 'patients'], 'relations': ['patients_using_brand (patient → drug_brand)', 'comparison (Foo Labs count vs. Baz Industries count)'], 'intent': 'calculate_difference_in_patient_count_by_drug_brand', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'patient_count': 'integer count (unitless)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.prescriptions': [{'column': 'patient_id'}, {'column': 'drug_id'}], 'hospital.drugs': [{'column': 'drug_id'}, {'column': 'manufacturer_id'}], 'hospital.manufacturers': [{'column': 'manufacturer_name'}], 'hospital.patients': [{'column': 'patient_id'}]}}\nA mathematical logic question is as follows:\nHow many more patients have used Foo Labs branded drugs than those have used Baz Industries branded drugs?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT ( DISTINCT ( Patient ) ) - ( SELECT COUNT ( DISTINCT ( Patient ) ) FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Brand = \"Baz Industries\" ) AS diff FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Brand = \"Foo Labs\"",
        "db_id": "hospital"
    },
    {
        "id": 116,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Foo Labs', 'Baz Industries', 'patients', 'drugs branded by Foo Labs', 'drugs branded by Baz Industries'], 'relations': ['branded_by (drug → Foo Labs/Baz Industries)', 'used_by (drug → patient)'], 'intent': 'calculate_difference_in_patient_counts_between_brands', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'difference_unit': 'patients', 'count_unit': 'patients'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.patients': [{'column': 'patient_id'}], 'hospital.prescriptions': [{'column': 'patient_id'}, {'column': 'drug_id'}], 'hospital.drugs': [{'column': 'drug_id'}, {'column': 'brand_id'}], 'hospital.brands': [{'column': 'brand_id'}, {'column': 'brand_name'}]}}\nA mathematical logic question is as follows:\nWhat is the difference in the number of patients who have used drugs branded by Foo Labs compared to those who have used drugs branded by Baz Industries?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT ( DISTINCT ( Patient ) ) - ( SELECT COUNT ( DISTINCT ( Patient ) ) FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Brand = \"Baz Industries\" ) AS diff FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Brand = \"Foo Labs\"",
        "db_id": "hospital"
    },
    {
        "id": 117,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['10 patients (Foo Labs)', 'Foo Labs brand drugs', 'Baz Industries branded drugs'], 'relations': ['brand_usage_comparison (Foo Labs vs Baz Industries)', 'patient_count_difference (Foo Labs count - Baz Industries count)'], 'intent': 'calculate_difference_in_patient_counts_between_brands', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10], 'units': {'count': 'patients (no unit conversion needed)', 'difference': 'patients (absolute count)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.prescriptions': [{'column': 'patient_id'}, {'column': 'drug_id'}], 'hospital.drugs': [{'column': 'drug_id'}, {'column': 'brand_name'}]}}\nA hypothetical reasoning question is as follows:\nIf there were 10 patients who used Foo Labs brand drugs, how many more patients have used Foo Labs branded drugs than those have used Baz Industries branded drugs?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 10 - ( SELECT COUNT ( DISTINCT ( Patient ) ) FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Brand = \"Baz Industries\" ) AS diff",
        "db_id": "hospital"
    },
    {
        "id": 118,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['patients using Foo Labs branded drugs (10)', 'patients using Baz Industries branded drugs'], 'relations': ['comparison (difference between Foo Labs and Baz Industries patient counts)', 'brand_usage (relationship between patients and drug brands)'], 'intent': 'calculate_additional_patients_using_Foo_Labs_vs_Baz_Industries', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [10], 'units': {'patient_count': 'count (unitless)', 'difference_unit': 'patients (additional count)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.patient_records': [{'column': 'patient_id'}, {'column': 'drug_id'}], 'hospital.drug_brand_mapping': [{'column': 'drug_id'}, {'column': 'brand_name'}]}}\nA hypothetical reasoning question is as follows:\nIf 10 patients have used drugs branded by Foo Labs, how many additional patients have used Foo Labs branded drugs compared to the number of patients who have used drugs branded by Baz Industries?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 10 - ( SELECT COUNT ( DISTINCT ( Patient ) ) FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Brand = \"Baz Industries\" ) AS diff",
        "db_id": "hospital"
    },
    {
        "id": 119,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['physician with highest number of appointments', 'physician with lowest number of appointments', 'appointment counts'], 'relations': ['physician_to_appointment_count (each physician → appointment count)', 'comparison_ratio (highest_count / lowest_count)'], 'intent': 'calculate_ratio_of_max_to_min_appointment_counts', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'ratio': 'times (dimensionless)', 'appointment_count': 'count (unitless)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.appointments': [{'column': 'physician_id'}], 'hospital.physicians': [{'column': 'physician_id'}, {'column': 'name'}]}}\nA mathematical logic question is as follows:\nHow many times is the number of appointments made by the physician with the highest number of appointments compared to the physician with the lowest number of appointments?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * MAX ( c ) / MIN ( c ) AS times FROM ( SELECT Physician , COUNT ( * ) AS c FROM Appointment GROUP BY Physician )",
        "db_id": "hospital"
    },
    {
        "id": 120,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['appointments', 'physician with highest appointments', 'physician with lowest appointments'], 'relations': ['physician_to_appointment_count (physician → number of appointments)', 'comparison_between_extremes (relationship between max and min appointment counts)'], 'intent': 'calculate_ratio_of_max_to_min_appointment_counts', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'appointment_count': 'count (dimensionless)', 'ratio': 'dimensionless quotient'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.appointments': [{'column': 'physician_id'}]}}\nA mathematical logic question is as follows:\nWhat is the ratio between the number of appointments made by the physician with the highest and lowest appointments?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * MAX ( c ) / MIN ( c ) AS times FROM ( SELECT Physician , COUNT ( * ) AS c FROM Appointment GROUP BY Physician )",
        "db_id": "hospital"
    },
    {
        "id": 121,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['physician with fewest appointments', 'physician with highest appointments', 'appointments'], 'relations': ['appointments_count_comparison', 'update_effect_on_min'], 'intent': 'calculate_ratio_of_max_to_updated_min_appointments', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'appointments': 'count (unitless)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.physicians': [{'column': 'appointments'}]}}\nA hypothetical reasoning question is as follows:\nIf the physician with the fewest appointments made 2 new appointments, how many times is the number of appointments made by the physician with the highest number of appointments compared to the physician with the lowest number of appointments?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * MAX ( c ) / ( MIN ( c ) + 2 ) AS times FROM ( SELECT Physician , COUNT ( * ) AS c FROM Appointment GROUP BY Physician )",
        "db_id": "hospital"
    },
    {
        "id": 122,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['physician with least appointments', 'physician with highest appointments', 'additional appointments'], 'relations': ['appointment_count_comparison', 'ratio_calculation_after_addition'], 'intent': 'calculate_ratio_of_appointments_between_highest_and_modified_lowest_physician', 'reasoning_type': 'mathematical logic reasoning, ideal hypothesis reasoning', 'numerical_values': [2], 'units': {'appointments': 'count (unitless quantity)', 'ratio': 'dimensionless (e.g., X:1 or numerical quotient)', 'addition_operation': '2 appointments added to minimum count'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.physicians': [{'column': 'physician_id'}], 'hospital.appointments': [{'column': 'physician_id'}, {'column': 'appointment_id'}]}}\nA hypothetical reasoning question is as follows:\nIf the physician who has the least number of appointments schedules 2 additional appointments, what is the ratio between the number of appointments made by the physician with the highest and him?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * MAX ( c ) / ( MIN ( c ) + 2 ) AS times FROM ( SELECT Physician , COUNT ( * ) AS c FROM Appointment GROUP BY Physician )",
        "db_id": "hospital"
    },
    {
        "id": 123,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Dennis Doe', 'drugs', 'treatment', 'dose'], 'relations': ['patient_drug_usage (Dennis Doe → drugs administered)', 'patient_treatment_usage (Dennis Doe → treatments received)', 'drug_pricing (fixed $2 per dose for all drugs)', 'cost_aggregation (sum of drug costs + treatment costs)'], 'intent': 'calculate_total_expenditure_on_medication_and_treatments', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'currency': 'dollars', 'drug_unit': 'dose', 'cost_conversion': 'drug_cost = quantity × $2'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.patients': [{'column': 'patient_id'}, {'column': 'name'}], 'hospital.prescriptions': [{'column': 'patient_id'}, {'column': 'drug_name'}, {'column': 'quantity'}], 'hospital.treatments': [{'column': 'patient_id'}, {'column': 'treatment_name'}, {'column': 'cost'}]}}\nA common sense reasoning question is as follows:\nAll drugs are 2 dollars per dose. How much did Dennis Doe spend on all drugs and treatment in total?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT med_cost + pro_cost AS total_cost FROM ( SELECT 2 * SUM ( A.dose ) AS med_cost FROM Prescribes A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"Dennis Doe\" ) JOIN ( SELECT SUM ( COST ) AS pro_cost FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON B.Patient = C.SSN WHERE C.name = \"Dennis Doe\" )",
        "db_id": "hospital"
    },
    {
        "id": 124,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Dennis Doe', 'drugs', 'treatment', 'dose'], 'relations': ['patient_to_expenses (Dennis Doe → drug purchases and treatments)', 'cost_per_dose (drugs → $2 per unit)', 'spending_aggregation (sum of drug costs + treatment costs)'], 'intent': 'calculate_total_expenditure_on_medical_items', 'reasoning_type': 'ideal hypothesis reasoning', 'numerical_values': [2], 'units': {'currency': 'USD (dollars)', 'drug_unit': 'dose', 'conversion': 'drug_cost = quantity × unit_price'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.patients': [{'column': 'patient_id'}, {'column': 'name'}], 'hospital.prescriptions': [{'column': 'patient_id'}, {'column': 'drug_id'}, {'column': 'quantity'}], 'hospital.treatments': [{'column': 'patient_id'}, {'column': 'cost'}], 'hospital.drugs': [{'column': 'drug_id'}]}}\nA common sense reasoning question is as follows:\nIf all drugs cost 2 dollars per dose, what is the total amount spent by Dennis Doe on drugs and treatment?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT med_cost + pro_cost AS total_cost FROM ( SELECT 2 * SUM ( A.dose ) AS med_cost FROM Prescribes A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"Dennis Doe\" ) JOIN ( SELECT SUM ( COST ) AS pro_cost FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON B.Patient = C.SSN WHERE C.name = \"Dennis Doe\" )",
        "db_id": "hospital"
    },
    {
        "id": 125,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Dennis Doe', 'Thesisin', '10 doses', '2 dollars per dose', 'April 30th, 2008 16:53'], 'relations': ['customer_purchase (Dennis Doe → drug purchases)', 'drug_pricing (fixed cost per dose)', 'temporal_purchase (specific transaction time)'], 'intent': 'calculate_total_expenditure_on_drugs', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10, 2], 'units': {'currency': 'dollars', 'dose': 'unit', 'conversion': 'total_cost = (sum_existing_doses + new_doses) * cost_per_dose'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.purchases': [{'column': 'customer_name'}, {'column': 'drug_name'}, {'column': 'quantity'}, {'column': 'purchase_datetime'}]}}\nA hypothetical reasoning question is as follows:\nAll drugs are 2 dollars per dose. If Dennis Doe bought 10 more doses of Thesisin at 16:53 on April 30th, 2008, how much did Dennis Doe spend on all drugs and treatment in total?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT med_cost + pro_cost + 10 * 2 AS total_cost FROM ( SELECT 2 * SUM ( A.dose ) AS med_cost FROM Prescribes A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"Dennis Doe\" AND A.Date != \"2008-04-30 16:53\" ) JOIN ( SELECT SUM ( COST ) AS pro_cost FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON B.Patient = C.SSN WHERE C.name = \"Dennis Doe\" )",
        "db_id": "hospital"
    },
    {
        "id": 126,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Dennis Doe', 'Thesisin', 'all drugs', 'dose'], 'relations': ['patient_purchases (Dennis Doe → Thesisin purchase)', 'cost_assignment (all drugs → $2 per dose)'], 'intent': 'calculate_total_expenditure', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2, 10], 'units': {'currency': 'dollars ($)', 'drug_quantity': 'dose', 'conversion': 'total_cost = unit_price × total_doses'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.patients': [{'column': 'patient_id'}, {'column': 'patient_name'}], 'hospital.transactions': [{'column': 'patient_id'}, {'column': 'drug_id'}, {'column': 'quantity'}, {'column': 'transaction_datetime'}], 'hospital.drugs': [{'column': 'drug_id'}, {'column': 'drug_name'}]}}\nA hypothetical reasoning question is as follows:\nIf all drugs cost 2 dollars per dose and Dennis Doe purchased 10 additional doses of Thesisin at 16:53 on April 30, 2008, what is the total amount spent by Dennis Doe on all drugs and treatment?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT med_cost + pro_cost + 10 * 2 AS total_cost FROM ( SELECT 2 * SUM ( A.dose ) AS med_cost FROM Prescribes A JOIN Patient B ON A.Patient = B.SSN WHERE B.name = \"Dennis Doe\" AND A.Date != \"2008-04-30 16:53\" ) JOIN ( SELECT SUM ( COST ) AS pro_cost FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON B.Patient = C.SSN WHERE C.name = \"Dennis Doe\" )",
        "db_id": "hospital"
    },
    {
        "id": 127,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['John Wen', 'trained procedures qualification certificate'], 'relations': ['holder_of (John Wen → certificate)', 'certificate_type (certificate → trained procedures qualification)'], 'intent': 'retrieve_validity_period_duration', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'validity_period': 'time unit (e.g., years, months, days)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.employees': [{'column': 'name'}, {'column': 'id'}], 'hospital.certificates': [{'column': 'employee_id'}, {'column': 'certificate_type_id'}, {'column': 'validity_duration'}, {'column': 'issue_date'}, {'column': 'expiration_date'}], 'hospital.certificate_types': [{'column': 'id'}, {'column': 'type_name'}, {'column': 'standard_validity_period'}]}}\nA common sense reasoning question is as follows:\nHow long is the validity period of John Wen''s trained procedures qualification certificate?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT C.name , CAST ( julianday ( A.CertificationExpires ) - julianday ( A.CertificationDate ) AS INTEGER ) AS lifetime FROM Trained_In A JOIN Physician B ON A.Physician = B.EmployeeID JOIN Procedures C ON C.code = A.Treatment WHERE B.name = \"John Wen\"",
        "db_id": "hospital"
    },
    {
        "id": 128,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['John Wen', 'trained procedure qualification certificate'], 'relations': ['person_has_certificate (John Wen → trained procedure qualification certificate)', 'certificate_has_validity (certificate → validity period)'], 'intent': 'retrieve_validity_period_of_certificate', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.employees': [{'column': 'employee_name'}], 'hospital.certificates': [{'column': 'certificate_type'}, {'column': 'validity_start_date'}, {'column': 'validity_end_date'}], 'hospital.qualifications': [{'column': 'certificate_id'}, {'column': 'employee_id'}]}}\nA common sense reasoning question is as follows:\nWhat is the validity period of John Wen''s trained procedure qualification certificate?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT C.name , CAST ( julianday ( A.CertificationExpires ) - julianday ( A.CertificationDate ) AS INTEGER ) AS lifetime FROM Trained_In A JOIN Physician B ON A.Physician = B.EmployeeID JOIN Procedures C ON C.code = A.Treatment WHERE B.name = \"John Wen\"",
        "db_id": "hospital"
    },
    {
        "id": 129,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['John Wen', 'trained procedures qualification certificate', 'validity period', '180 days extension'], 'relations': ['person_holds_certificate (John Wen → qualification certificate)', 'certificate_has_validity (certificate → validity period)', 'extension_applied (validity period + 180 days)'], 'intent': 'calculate_updated_validity_duration', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [180], 'units': {'time': 'days', 'conversion': '1 day = 24 hours (implicit temporal unit consistency)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.certificates': [{'column': 'validity_start_date'}, {'column': 'validity_end_date'}, {'column': 'base_validity_duration'}], 'hospital.personnel': [{'column': 'full_name'}], 'hospital.certificate_types': [{'column': 'type_name'}]}}\nA hypothetical reasoning question is as follows:\nHow long is the validity period of John Wen''s trained procedures qualification certificate, if the the validity period is extended by 180 days?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT C.name , CAST ( julianday ( A.CertificationExpires ) - julianday ( A.CertificationDate ) AS INTEGER ) + 180 AS lifetime FROM Trained_In A JOIN Physician B ON A.Physician = B.EmployeeID JOIN Procedures C ON C.code = A.Treatment WHERE B.name = \"John Wen\"",
        "db_id": "hospital"
    },
    {
        "id": 130,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['John Wen', 'trained procedures qualification certificate', 'validity period', '180 days extension'], 'relations': ['person_holds_certificate (John Wen → qualification certificate)', 'certificate_has_validity (certificate → validity period)', 'extension_applied (validity period + 180 days)'], 'intent': 'calculate_new_certificate_validity_after_extension', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [180], 'units': {'time': 'days', 'operation': 'date addition', 'conversion': '1 day = 24 hours (implicit temporal unit)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.certificates': [{'column': 'validity_start_date'}, {'column': 'validity_end_date'}, {'column': 'extension_days'}], 'hospital.personnel': [{'column': 'full_name'}], 'hospital.certificate_types': [{'column': 'certificate_name'}]}}\nA hypothetical reasoning question is as follows:\nIf the validity period of John Wen's trained procedures qualification certificate is extended by 180 days, what is the new validity period of the certificate?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT C.name , CAST ( julianday ( A.CertificationExpires ) - julianday ( A.CertificationDate ) AS INTEGER ) + 180 AS lifetime FROM Trained_In A JOIN Physician B ON A.Physician = B.EmployeeID JOIN Procedures C ON C.code = A.Treatment WHERE B.name = \"John Wen\"",
        "db_id": "hospital"
    },
    {
        "id": 131,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['physicians', 'Surgery department', 'General Medicine department'], 'relations': ['belongs_to (physicians → departments)', 'set_intersection (physicians in both Surgery and General Medicine)'], 'intent': 'calculate_proportion_of_dual_department_physicians_in_surgery', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'result_unit': 'proportion (unitless ratio)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.physician_department': [{'column': 'physician_id'}, {'column': 'department_id'}], 'hospital.departments': [{'column': 'department_name'}]}}\nA mathematical logic question is as follows:\nWhat is the proportion of physicians who belong to both Surgery department and General Medicine department out of physicians who belong to Surgery department?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Affiliated_With WHERE Department = ( SELECT DepartmentID FROM Department WHERE Name = \"Surgery\" ) ) AS prop FROM ( select * from Affiliated_With as A join department as B on A.Department = B.DepartmentID WHERE B.Name = \"Surgery\" or B.Name = \"General Medicine\" GROUP BY Physician HAVING COUNT ( DISTINCT ( B.Name ) ) = 2 )",
        "db_id": "hospital"
    },
    {
        "id": 132,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['physicians', 'Surgery department', 'General Medicine department'], 'relations': ['membership_in_department (physicians → departments)', 'intersection (physicians belonging to both Surgery and General Medicine)'], 'intent': 'calculate_ratio_of_dual_department_physicians_to_surgery_total', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'ratio': 'dimensionless'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.departments': [{'column': 'department_name'}], 'hospital.department_membership': [{'column': 'physician_id'}, {'column': 'department_id'}]}}\nA mathematical logic question is as follows:\nWhat is the ratio of physicians who are members of both the Surgery department and the General Medicine department, compared to the total number of physicians in the Surgery department?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Affiliated_With WHERE Department = ( SELECT DepartmentID FROM Department WHERE Name = \"Surgery\" ) ) AS prop FROM ( select * from Affiliated_With as A join department as B on A.Department = B.DepartmentID WHERE B.Name = \"Surgery\" or B.Name = \"General Medicine\" GROUP BY Physician HAVING COUNT ( DISTINCT ( B.Name ) ) = 2 )",
        "db_id": "hospital"
    },
    {
        "id": 133,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Keith Dudermeister', 'Surgery department', 'General Medicine department', 'physicians'], 'relations': ['belongs_to (Keith Dudermeister → Surgery department)', 'belongs_to (Keith Dudermeister → General Medicine department)', 'intersection_membership (physicians belonging to both departments)', 'proportional_relation (physicians in both vs physicians in Surgery)'], 'intent': 'calculate_proportion_of_intersection_to_base_set', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'proportion': 'unitless (ratio)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.physicians': [{'column': 'id'}, {'column': 'name'}], 'hospital.departments': [{'column': 'id'}, {'column': 'name'}], 'hospital.physician_department': [{'column': 'physician_id'}, {'column': 'department_id'}]}}\nA hypothetical reasoning question is as follows:\nIf Keith Dudermeister belongs to both the Surgery department and the General Medicine department, what is the proportion of physicians who belong to both the Surgery department and the General Medicine department among physicians who belong to the Surgery department?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * ( 1 + COUNT ( * ) ) / ( 1 + ( SELECT COUNT ( * ) FROM Affiliated_With as A join Physician as B on A.Physician = B.EmployeeID WHERE B.Name != \"Keith Dudermeister\" and Department = ( SELECT DepartmentID FROM Department WHERE Name = \"Surgery\" ) ) ) AS prop FROM ( select * from Affiliated_With as A join department as B on A.Department = B.DepartmentID join Physician as C on A.Physician = C.EmployeeID WHERE C.Name != \"Keith Dudermeister\" and ( B.Name = \"Surgery\" or B.Name = \"General Medicine\" ) GROUP BY Physician HAVING COUNT ( DISTINCT ( B.Name ) ) = 2 )",
        "db_id": "hospital"
    },
    {
        "id": 134,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Keith Dudermeister', 'Surgery department', 'General Medicine department'], 'relations': ['physician_membership (Keith Dudermeister → Surgery department)', 'physician_membership (Keith Dudermeister → General Medicine department)', 'department_intersection (physicians in Surgery ∩ General Medicine)', 'proportion_comparison (|Surgery ∩ General Medicine| / |Surgery|)'], 'intent': 'calculate_proportion_of_physicians_in_both_departments_relative_to_surgery_total', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'count': 'number of physicians (unitless)', 'ratio': 'unitless proportion'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.physicians': [{'column': 'physician_id'}, {'column': 'name'}], 'hospital.departments': [{'column': 'department_id'}, {'column': 'department_name'}], 'hospital.department_membership': [{'column': 'physician_id'}, {'column': 'department_id'}]}}\nA hypothetical reasoning question is as follows:\nIf Keith Dudermeister is a member of both the Surgery and General Medicine departments, what is the proportion of physicians who belong to both departments out of the total number of physicians in the Surgery department?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * ( 1 + COUNT ( * ) ) / ( 1 + ( SELECT COUNT ( * ) FROM Affiliated_With as A join Physician as B on A.Physician = B.EmployeeID WHERE B.Name != \"Keith Dudermeister\" and Department = ( SELECT DepartmentID FROM Department WHERE Name = \"Surgery\" ) ) ) AS prop FROM ( select * from Affiliated_With as A join department as B on A.Department = B.DepartmentID join Physician as C on A.Physician = C.EmployeeID WHERE C.Name != \"Keith Dudermeister\" and ( B.Name = \"Surgery\" or B.Name = \"General Medicine\" ) GROUP BY Physician HAVING COUNT ( DISTINCT ( B.Name ) ) = 2 )",
        "db_id": "hospital"
    },
    {
        "id": 135,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['treatments', 'highest price', 'lowest price'], 'relations': ['ratio_comparison (highest_price / lowest_price)'], 'intent': 'calculate_price_ratio', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'price': 'implied currency unit (e.g., dollars)', 'result': 'dimensionless ratio'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.treatments': [{'column': 'price'}]}}\nA mathematical logic question is as follows:\nHow many times is the highest price of the treatments compared to the lowest price?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * MAX ( Cost ) / MIN ( Cost ) AS times FROM Procedures",
        "db_id": "hospital"
    },
    {
        "id": 136,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['treatments', 'highest price', 'lowest price'], 'relations': ['treatments_have_prices (treatments → price)', 'comparison_relation (highest vs lowest)'], 'intent': 'calculate_price_ratio_highest_to_lowest', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'price': 'monetary unit (implied by database)', 'ratio': 'unitless scalar value'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.treatments': [{'column': 'price'}]}}\nA mathematical logic question is as follows:\nWhat is the ratio between the highest and lowest prices of the treatments?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * MAX ( Cost ) / MIN ( Cost ) AS times FROM Procedures",
        "db_id": "hospital"
    },
    {
        "id": 137,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['highest treatment price', 'lowest treatment price'], 'relations': ['ratio_comparison (highest_price vs increased_lowest_price)', 'percentage_increase (lowest_price +75%)'], 'intent': 'calculate_ratio_of_highest_to_increased_lowest_price', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [75], 'units': {'percentage': '% (applied to lowest price)', 'price': 'currency unit (implied by database schema)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.treatments': [{'column': 'price (to extract MIN/MAX values)'}]}}\nA hypothetical reasoning question is as follows:\nHow many times is the highest price of the treatments compared to the lowest price, if the the lowest price was increased by 75%?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * MAX ( Cost ) / ( ( 1 + 0.75 ) * MIN ( Cost ) ) AS times FROM Procedures",
        "db_id": "hospital"
    },
    {
        "id": 138,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['treatments', 'lowest price', 'highest price', 'new ratio'], 'relations': ['price_modification (lowest price increased by 75%)', 'ratio_comparison (highest price : new lowest price)'], 'intent': 'calculate_modified_price_ratio', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [75], 'units': {'percentage': '75% (increase factor)', 'ratio': 'unitless (dimensionless quantity)', 'currency': 'implied by database (e.g., dollars)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.treatments': [{'column': 'price'}]}}\nA hypothetical reasoning question is as follows:\nIf the lowest price of the treatments was increased by 75%, what would be the new ratio between the highest and lowest prices?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * MAX ( Cost ) / ( ( 1 + 0.75 ) * MIN ( Cost ) ) AS times FROM Procedures",
        "db_id": "hospital"
    },
    {
        "id": 139,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['treatments', 'treatments with cost > 1000', 'total treatments'], 'relations': ['cost_filter (treatments → cost > 1000)', 'subset_relation (treatments with cost > 1000 ⊆ total treatments)'], 'intent': 'calculate_ratio_of_expensive_treatments_to_total', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000], 'units': {'cost': 'currency unit (implied by database schema)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.treatments': [{'column': 'cost'}, {'column': 'treatment_id (or equivalent primary key)'}]}}\nA mathematical logic question is as follows:\nHow many treatments with a cost higher than 1000 account for the total number of treatments?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Procedures ) FROM Procedures WHERE Cost > 1000",
        "db_id": "hospital"
    },
    {
        "id": 140,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['treatments', 'treatment cost'], 'relations': ['cost_threshold_condition (treatment cost > 1000)', 'proportional_relationship (expensive treatments vs total treatments)'], 'intent': 'calculate_proportion_of_expensive_treatments', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000], 'units': {'cost': 'monetary units (specific currency implied by database)', 'proportion': 'unitless ratio'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.treatments': [{'column': 'cost'}, {'column': 'treatment_id'}]}}\nA mathematical logic question is as follows:\nWhat proportion of treatments, out of the total number of treatments, cost higher than 1000?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Procedures ) FROM Procedures WHERE Cost > 1000",
        "db_id": "hospital"
    },
    {
        "id": 141,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['patients', 'Procrastin-X', 'proportion'], 'relations': ['patient_medication_usage (patients → medications)', 'exclusion_condition (patients NOT using Procrastin-X)', 'ratio_composition (subset / total)'], 'intent': 'calculate_exclusion_proportion', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'proportion': 'unitless (fraction or percentage)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.patients': [{'column': 'patient_id'}], 'hospital.prescriptions': [{'column': 'patient_id'}, {'column': 'medication_id'}], 'hospital.medications': [{'column': 'medication_id'}, {'column': 'medication_name'}]}}\nA mathematical logic question is as follows:\nWhat is the proportion of patients who do not use Procrastin-X in the total number of patients?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 - 1.0 * COUNT ( DISTINCT ( Patient ) ) / ( SELECT COUNT ( DISTINCT ( SSN ) ) FROM Patient ) AS prop FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Name = \"Procrastin-X\"",
        "db_id": "hospital"
    },
    {
        "id": 142,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['patients', 'Procrastin-X'], 'relations': ['prescribed_to (Procrastin-X → patients)', 'exclusion_relation (patients NOT using Procrastin-X)'], 'intent': 'calculate_proportion_of_patients_not_using_specific_medication', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'proportion': 'unitless ratio (count_not_using / total_patients)', 'percentage': 'optional conversion (proportion * 100)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.patients': [{'column': 'patient_id'}], 'hospital.prescriptions': [{'column': 'patient_id'}, {'column': 'medication_name'}]}}\nA mathematical logic question is as follows:\nWhat proportion of patients, out of the total number of patients, do not use Procrastin-X?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 - 1.0 * COUNT ( DISTINCT ( Patient ) ) / ( SELECT COUNT ( DISTINCT ( SSN ) ) FROM Patient ) AS prop FROM Medication A JOIN Prescribes B ON A.code = B.Medication WHERE A.Name = \"Procrastin-X\"",
        "db_id": "hospital"
    },
    {
        "id": 143,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Dennis Doe', 'most expensive treatment', 'cheapest treatment'], 'relations': ['patient_has_treatment (Dennis Doe → treatments)', 'cost_comparison (max_cost - min_cost)'], 'intent': 'calculate_cost_difference_between_extreme_treatments', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'currency': 'monetary unit (implied by database schema, e.g., USD)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.patients': [{'column': 'patient_id'}, {'column': 'name'}], 'hospital.treatments': [{'column': 'patient_id'}, {'column': 'cost'}]}}\nA mathematical logic question is as follows:\nHow much is the difference between Dennis Doe's most expensive treatment and his cheapest treatment?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT MAX ( A.Cost ) - MIN ( A.Cost ) AS diff FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON C.SSN = B.Patient WHERE C.Name = \"Dennis Doe\"",
        "db_id": "hospital"
    },
    {
        "id": 144,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Dennis Doe', 'most expensive treatment', 'least expensive treatment'], 'relations': ['patient_to_treatments (Dennis Doe → associated treatments)', 'cost_comparison (difference between max_cost and min_cost)'], 'intent': 'calculate_cost_difference_between_treatment_extremes', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'cost': 'currency (implied by database schema, e.g., USD)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.patients': [{'column': 'name'}], 'hospital.treatments': [{'column': 'cost'}]}}\nA mathematical logic question is as follows:\nWhat is the difference between Dennis Doe's most expensive and least expensive treatments?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT MAX ( A.Cost ) - MIN ( A.Cost ) AS diff FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON C.SSN = B.Patient WHERE C.Name = \"Dennis Doe\"",
        "db_id": "hospital"
    },
    {
        "id": 145,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Dennis Doe', 'treatment prices', 'most expensive treatment', 'cheapest treatment'], 'relations': ['patient_to_treatments (Dennis Doe → treatments received)', 'price_comparison (most expensive vs. cheapest treatment)', 'price_adjustment (50% increase applied to all treatments)'], 'intent': 'calculate_price_difference_after_hypothetical_increase', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50], 'units': {'percentage': '% (percentage increase)', 'currency': 'implied monetary unit (e.g., dollars from database schema)', 'operation': 'price * 1.5 (50% increase calculation)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.patients': [{'column': 'patient_id'}, {'column': 'patient_name'}], 'hospital.treatments': [{'column': 'treatment_id'}, {'column': 'price'}], 'hospital.appointments': [{'column': 'patient_id'}, {'column': 'treatment_id'}]}}\nA hypothetical reasoning question is as follows:\nIf the price of each treatment was increased by 50%, how much is the difference between Dennis Doe's most expensive treatment and his cheapest treatment?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ( ( 1 + 0.5 ) * MAX ( A.Cost ) ) - ( ( 1 + 0.5 ) * MIN ( A.Cost ) ) AS diff FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON C.SSN = B.Patient WHERE C.Name = \"Dennis Doe\"",
        "db_id": "hospital"
    },
    {
        "id": 146,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Dennis Doe', 'treatments', 'treatment prices', '50% price increase'], 'relations': ['patient_to_treatments (Dennis Doe → treatments received)', 'price_adjustment (original_price × 1.5)', 'min_max_comparison (difference between highest/lowest adjusted prices)'], 'intent': 'calculate_price_difference_after_hypothetical_increase', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50], 'units': {'percentage': '% (percentage increase)', 'currency': '(implied by database, e.g., USD)', 'calculation': 'new_price = original_price * 1.5'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.patients': [{'column': 'patient_name'}], 'hospital.treatments': [{'column': 'treatment_name'}, {'column': 'price'}], 'hospital.visits': [{'column': 'patient_id (if applicable)'}, {'column': 'treatment_id (if applicable)'}]}}\nA hypothetical reasoning question is as follows:\nIf the price of each treatment was increased by 50%, what would be the difference between Dennis Doe's most expensive and least expensive treatments?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ( ( 1 + 0.5 ) * MAX ( A.Cost ) ) - ( ( 1 + 0.5 ) * MIN ( A.Cost ) ) AS diff FROM Procedures A JOIN Undergoes B ON A.Code = B.Procedures JOIN Patient C ON C.SSN = B.Patient WHERE C.Name = \"Dennis Doe\"",
        "db_id": "hospital"
    },
    {
        "id": 147,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['available rooms', 'total number of rooms'], 'relations': ['proportional_relationship (available_rooms ⊆ total_rooms)', 'accounting_relation (available_rooms ÷ total_rooms)'], 'intent': 'calculate_available_rooms_proportion', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'output_unit': 'percentage or ratio', 'calculation': 'division (available_rooms_count / total_rooms_count)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.rooms': [{'column': 'availability_status'}, {'column': 'room_id'}]}}\nA mathematical logic question is as follows:\nHow many available rooms account for the total number of rooms?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Room ) AS prop FROM Room WHERE Unavailable = \"0\"",
        "db_id": "hospital"
    },
    {
        "id": 148,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['available rooms', 'total rooms'], 'relations': ['proportion (available_rooms ÷ total_rooms)'], 'intent': 'calculate_room_availability_ratio', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'result_unit': 'dimensionless_ratio (unitless proportion)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.rooms': [{'column': 'status (to identify available rooms)'}, {'column': 'room_id (for counting total rooms)'}]}}\nA mathematical logic question is as follows:\nWhat is the proportion of available rooms to the total number of rooms?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Room ) AS prop FROM Room WHERE Unavailable = \"0\"",
        "db_id": "hospital"
    },
    {
        "id": 149,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['available rooms', 'beds', 'people'], 'relations': ['room_availability (rooms → available status)', 'bed_assumption (each room → 2 beds)', 'accommodation_capacity (beds → people)'], 'intent': 'calculate_total_accommodation_capacity', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'people': 'count', 'beds_per_room': 'count', 'capacity_per_bed': 'people per bed (implied by database)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.rooms': [{'column': 'room_id'}, {'column': 'availability_status'}], 'hospital.bed_types': [{'column': 'bed_type_id'}, {'column': 'capacity'}]}}\nA mathematical logic question is as follows:\nIf there are two beds in each room, how many people can be accommodated in the available room in total?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 2 * COUNT ( * ) AS n_people FROM Room WHERE Unavailable = \"0\"",
        "db_id": "hospital"
    },
    {
        "id": 150,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['room', 'bed', 'person'], 'relations': ['room_bed_relation (1 room → 2 beds)', 'bed_person_relation (1 bed → 1 person)'], 'intent': 'calculate_total_accommodation_capacity', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'beds_per_room': 'count (unitless)', 'people_per_bed': 'count (unitless, assumed 1)', 'total_people': 'count (unitless)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.rooms': [{'column': 'room_id'}, {'column': 'availability_status'}]}}\nA mathematical logic question is as follows:\nIf each room has two beds, what is the total number of people that can be accommodated in all the available rooms?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 2 * COUNT ( * ) AS n_people FROM Room WHERE Unavailable = \"0\"",
        "db_id": "hospital"
    },
    {
        "id": 151,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['appointment ID 13216584', 'duration in minutes'], 'relations': ['appointment_id_to_duration (13216584 → duration value)'], 'intent': 'retrieve_duration_of_specific_appointment', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [13216584], 'units': {'time_input_unit': 'unknown (depends on database storage)', 'time_output_unit': 'minutes', 'conversion': 'minutes = [stored_time_unit] * conversion_factor (e.g., seconds→minutes: /60; hours→minutes: *60)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.appointments': [{'column': 'appointment_id'}, {'column': 'duration'}]}}\nA common sense reasoning question is as follows:\nWhat is the duration in minutes of an appointment with an appointment ID of 13216584?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ( strftime ( \"%s\" , End ) - strftime ( \"%s\" , Start ) ) / 60.0 AS time FROM Appointment WHERE AppointmentID = \"13216584\"",
        "db_id": "hospital"
    },
    {
        "id": 152,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['appointment ID 13216584'], 'relations': ['ID_to_duration (13216584 → duration in minutes)'], 'intent': 'retrieve_appointment_duration', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [13216584], 'units': {'target_unit': 'minutes', 'source_unit': 'unknown (database-dependent)', 'conversion': 'minutes = source_value × conversion_factor (if stored unit differs)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.appointments': [{'column': 'appointment_id'}, {'column': 'duration'}]}}\nA common sense reasoning question is as follows:\nHow long is the appointment with appointment ID 13216584 in minutes?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ( strftime ( \"%s\" , End ) - strftime ( \"%s\" , Start ) ) / 60.0 AS time FROM Appointment WHERE AppointmentID = \"13216584\"",
        "db_id": "hospital"
    },
    {
        "id": 153,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['appointment ID 13216584', 'duration extension of half an hour'], 'relations': ['appointment_has_current_duration', 'extension_applied_to_duration'], 'intent': 'calculate_total_duration_in_minutes_after_extension', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [13216584, 0.5], 'units': {'time': 'hours and minutes', 'conversion': '1 hour = 60 minutes', 'extension_value': '0.5 hours = 30 minutes'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.appointments': [{'column': 'appointment_id'}, {'column': 'duration_minutes'}]}}\nA hypothetical reasoning question is as follows:\nIf the duration of the appointment with an appointment ID 13216584 is extended for half an hour, how many minutes will it last?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ( strftime ( \"%s\" , End ) - strftime ( \"%s\" , Start ) ) / 60.0 + 30 AS time FROM Appointment WHERE AppointmentID = \"13216584\"",
        "db_id": "hospital"
    },
    {
        "id": 154,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['appointment ID 13216584', '30 minutes extension', 'total duration'], 'relations': ['appointment_id_to_duration (13216584 → current duration)', 'duration_modification (current duration + 30 minutes)'], 'intent': 'calculate_new_appointment_duration_after_extension', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [13216584, 30], 'units': {'time': 'minutes', 'conversion': '1 minute = 1 minute (no unit conversion needed)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.appointments': [{'column': 'appointment_id'}, {'column': 'duration_minutes'}]}}\nA hypothetical reasoning question is as follows:\nIf the appointment with appointment ID 13216584 is extended by 30 minutes, what will be the new total duration of the appointment in minutes?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ( strftime ( \"%s\" , End ) - strftime ( \"%s\" , Start ) ) / 60.0 + 30 AS time FROM Appointment WHERE AppointmentID = \"13216584\"",
        "db_id": "hospital"
    },
    {
        "id": 155,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['physician', 'training fee', 'training expenses'], 'relations': ['physician_attends_training', 'fee_per_training (fixed at 50)', 'physician_to_expenses (sum calculation)'], 'intent': 'identify_physician_with_max_training_expenses', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50], 'units': {'training_fee': 'monetary units (implied)', 'expenses_unit': 'monetary units (aggregated sum)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.physicians': [{'column': 'name'}, {'column': 'position'}], 'hospital.training_attendance': [{'column': 'physician_id'}, {'column': 'training_id'}]}}\nA mathematical logic question is as follows:\nIf the training fee for each training is 50, who is the physician who spent the most on training? List his name, position, and training expenses.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.Name , A.Position , 50 * COUNT ( * ) AS cost FROM Physician A JOIN Trained_In B ON A.EmployeeID = B.Physician GROUP BY A.EmployeeID HAVING COUNT ( * ) = ( SELECT MAX ( training_count ) FROM ( SELECT COUNT ( * ) AS training_count FROM Trained_In GROUP BY Physician ) )",
        "db_id": "hospital"
    },
    {
        "id": 156,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['physician', 'training session', 'training fee (50 per session)'], 'relations': ['physician_attends_sessions (physician → training sessions)', 'cost_per_session (each session costs 50)'], 'intent': 'identify_physician_with_max_training_expense', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50], 'units': {'training_fee': 'currency units per session (implied)', 'total_expense': 'currency units (calculated)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.physicians': [{'column': 'name'}, {'column': 'position'}], 'hospital.training_attendance': [{'column': 'physician_id'}, {'column': 'session_id'}]}}\nA mathematical logic question is as follows:\nWhich physician has incurred the highest training expenses, if the training fee for each session is 50? Provide their name, position, and total training expense.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.Name , A.Position , 50 * COUNT ( * ) AS cost FROM Physician A JOIN Trained_In B ON A.EmployeeID = B.Physician GROUP BY A.EmployeeID HAVING COUNT ( * ) = ( SELECT MAX ( training_count ) FROM ( SELECT COUNT ( * ) AS training_count FROM Trained_In GROUP BY Physician ) )",
        "db_id": "hospital"
    },
    {
        "id": 157,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['available rooms', 'top floor', 'bottom floor'], 'relations': ['floor_location (rooms → floor assignment)', 'floor_comparison (top vs bottom floor)', 'room_availability (available status)'], 'intent': 'calculate_difference_in_available_rooms_between_extreme_floors', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'quantity': 'rooms (count unit)', 'comparison': 'difference (arithmetic subtraction)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.rooms': [{'column': 'floor'}, {'column': 'availability_status'}, {'column': 'room_id'}]}}\nA mathematical logic question is as follows:\nHow many more rooms are available on the top floor than on the bottom floor?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT ( * ) - ( SELECT COUNT ( * ) FROM Room WHERE Unavailable = \"0\" AND BlockFloor = ( SELECT MIN ( BlockFloor ) FROM Room ) ) AS diff FROM Room WHERE Unavailable = \"0\" AND BlockFloor = ( SELECT MAX ( BlockFloor ) FROM Room )",
        "db_id": "hospital"
    },
    {
        "id": 158,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['available rooms', 'top floor', 'bottom floor'], 'relations': ['room_floor_association (rooms belong to specific floors)', 'comparison_between_floors (difference in room counts)'], 'intent': 'calculate_difference_in_available_rooms_across_extreme_floors', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [], 'units': {'room_count': 'rooms', 'difference': 'rooms (integer count)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.floors': [{'column': 'floor_number'}], 'hospital.rooms': [{'column': 'availability_status'}, {'column': 'floor_id (for joining)'}]}}\nA mathematical logic question is as follows:\nWhat is the difference in the number of available rooms on the top and bottom floors?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT ( * ) - ( SELECT COUNT ( * ) FROM Room WHERE Unavailable = \"0\" AND BlockFloor = ( SELECT MIN ( BlockFloor ) FROM Room ) ) AS diff FROM Room WHERE Unavailable = \"0\" AND BlockFloor = ( SELECT MAX ( BlockFloor ) FROM Room )",
        "db_id": "hospital"
    },
    {
        "id": 159,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['top floor available rooms (20)', 'bottom floor available rooms'], 'relations': ['numerical_difference (top_floor_rooms - bottom_floor_rooms)'], 'intent': 'calculate_difference_in_available_rooms_between_floors', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20], 'units': {'room_count': 'rooms (discrete count)', 'difference': 'rooms (implied)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.hotel_rooms': [{'column': 'floor_level'}, {'column': 'available_rooms_count'}]}}\nA hypothetical reasoning question is as follows:\nSuppose there are 20 available rooms on the top floor, how many more rooms are available on the top floor than on the bottom floor?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 20 - ( SELECT COUNT ( * ) FROM Room WHERE Unavailable = \"0\" AND BlockFloor = ( SELECT MIN ( BlockFloor ) FROM Room ) ) AS diff",
        "db_id": "hospital"
    },
    {
        "id": 160,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['top floor', 'bottom floor', 'available rooms'], 'relations': ['comparison_difference (top floor vs bottom floor available rooms)', 'floor_hierarchy (top floor → highest floor, bottom floor → lowest floor)'], 'intent': 'calculate_difference_in_available_rooms_between_floors', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20], 'units': {'available_rooms': 'count (unitless)', 'difference_operation': 'arithmetic subtraction'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'hospital.floors': [{'column': 'floor_id'}, {'column': 'floor_position (e.g., level/rank to identify top/bottom)'}], 'hospital.rooms': [{'column': 'availability_status'}, {'column': 'floor_id'}]}}\nA hypothetical reasoning question is as follows:\nIf the top floor has 20 available rooms, what is the difference in the number of available rooms between the top and bottom floors?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 20 - ( SELECT COUNT ( * ) FROM Room WHERE Unavailable = \"0\" AND BlockFloor = ( SELECT MIN ( BlockFloor ) FROM Room ) ) AS diff",
        "db_id": "hospital"
    },
    {
        "id": 161,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['players', 'coaches', 'players with coaches', 'total players'], 'relations': ['player_to_coach_association (players ↔ coaches)', 'subset_relation (players with coaches ⊆ total players)'], 'intent': 'calculate_percentage_of_players_with_coaches', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'result': '% (percentage)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.players': [{'column': 'player_id'}], 'exerciseclub.player_coach_relation': [{'column': 'player_id'}]}}\nA mathematical logic question is as follows:\nWhat is the percentage of players with coaches in the total number of players?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * COUNT ( DISTINCT ( Player_ID ) ) / ( SELECT COUNT ( DISTINCT ( Player_ID ) ) FROM player ) AS ratio FROM player_coach",
        "db_id": "exerciseclub"
    },
    {
        "id": 162,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['players', 'coaches'], 'relations': ['player_to_coach_assignment'], 'intent': 'calculate_percentage_of_players_with_coaches', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'result_unit': '% (percentage)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.players': [{'column': 'player_id'}], 'exerciseclub.coaches': [{'column': 'player_id'}]}}\nA mathematical logic question is as follows:\nWhat percentage of total players have coaches?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * COUNT ( DISTINCT ( Player_ID ) ) / ( SELECT COUNT ( DISTINCT ( Player_ID ) ) FROM player ) AS ratio FROM player_coach",
        "db_id": "exerciseclub"
    },
    {
        "id": 163,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Jim Maloway', 'Joe Fabbri', 'players', 'coaches'], 'relations': ['coached_by (Jim Maloway → Joe Fabbri)', 'has_coach (player → coach)'], 'intent': 'calculate_percentage_of_players_with_coaches', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'result_unit': '% (percentage)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.players': [{'column': 'player_id'}, {'column': 'player_name'}], 'exerciseclub.coaching_relationships': [{'column': 'player_id'}, {'column': 'coach_id'}]}}\nA hypothetical reasoning question is as follows:\nIf Jim Maloway's coach is Joe Fabbri, what is the percentage of players with coaches in the total number of players?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * ( COUNT ( DISTINCT ( A.Player_ID ) ) + 1 ) / ( SELECT COUNT ( DISTINCT ( Player_ID ) ) FROM player ) AS ratio FROM player_coach A JOIN player B ON A.Player_ID = B.Player_ID WHERE B.Player_name != \"Jim Maloway\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 164,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['players', 'coaches', 'Joe Fabbri', 'Jim Maloway'], 'relations': ['coaching_relationship (Joe Fabbri → Jim Maloway)', 'player_coach_association (players → coaches)'], 'intent': 'calculate_percentage_of_players_with_coaches', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'percentage': '% (unitless ratio)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.players': [{'column': 'player_id'}, {'column': 'name'}], 'exerciseclub.coaches': [{'column': 'coach_id'}, {'column': 'name'}], 'exerciseclub.coaching_relationships': [{'column': 'player_id'}, {'column': 'coach_id'}]}}\nA hypothetical reasoning question is as follows:\nWhat percentage of players have a coach under the premise of Joe Fabbri coaching Jim Maloway?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * ( COUNT ( DISTINCT ( A.Player_ID ) ) + 1 ) / ( SELECT COUNT ( DISTINCT ( Player_ID ) ) FROM player ) AS ratio FROM player_coach A JOIN player B ON A.Player_ID = B.Player_ID WHERE B.Player_name != \"Jim Maloway\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 165,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['clubs', 'Bitcoin Network first launched'], 'relations': ['temporal_comparison (club_construction_year < bitcoin_launch_year)', 'percentage_calculation ((subset_count / total_count) * 100)'], 'intent': 'calculate_percentage_of_clubs_built_before_specific_event', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'time': 'years'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.clubs': [{'column': 'construction_year'}, {'column': 'id (for counting)'}], 'exerciseclub.bitcoin_events': [{'column': 'launch_year'}, {'column': 'event_name'}]}}\nA common sense reasoning question is as follows:\nWhat percentage of the total number of clubs were built before the year the Bitcoin Network was first launched?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM club ) AS ratio FROM club WHERE Start_year < \"2009\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 166,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['clubs', 'Bitcoin Network launch'], 'relations': ['opened_before (clubs.opening_date < Bitcoin_Network.launch_date)', 'subset_of_total (counted clubs vs all clubs)'], 'intent': 'count_clubs_opened_before_bitcoin_launch', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.clubs': [{'column': 'opening_date'}, {'column': 'id (implied for counting)'}], 'exerciseclub.bitcoin_network': [{'column': 'launch_date'}]}}\nA common sense reasoning question is as follows:\nHow many clubs, out of the total number, were constructed and opened prior to the launching of the Bitcoin Network?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM club ) AS ratio FROM club WHERE Start_year < \"2009\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 167,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Helsingborgs IF Club', '2000 (hypothetical establishment year)', 'Bitcoin Network first launch year', 'total number of clubs'], 'relations': ['hypothetical_establishment (Helsingborgs IF → 2000)', 'comparison: establishment_year < Bitcoin_launch_year', 'percentage_calculation (clubs_before_bitcoin / total_clubs)'], 'intent': 'calculate_percentage_of_clubs_established_before_bitcoin_launch_under_hypothesis', 'reasoning_type': 'ideal hypothesis reasoning', 'numerical_values': [2000], 'units': {'time': 'years', 'result': 'percentage'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.clubs': [{'column': 'club_name'}, {'column': 'established_year'}], 'exerciseclub.system_events': [{'column': 'event_name'}, {'column': 'year'}]}}\nA hypothetical reasoning question is as follows:\nIf the Helsingborgs IF Club was established in 2000 instead, what percentage of the total number of clubs were built before the year the Bitcoin Network was first launched?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * ( COUNT ( * ) + 1 ) / ( SELECT COUNT ( * ) FROM club ) AS ratio FROM club WHERE Start_year < \"2009\" AND Club_name != \"Helsingborgs IF\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 168,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['clubs', 'Bitcoin Network foundation', 'Helsingborgs IF Club', 'established year'], 'relations': ['comparison_condition (clubs.established_year < Bitcoin_Network_foundation_year)', 'example_instance (Helsingborgs IF Club established in 2000)'], 'intent': 'calculate_percentage_of_clubs_established_before_specific_date', 'reasoning_type': 'common sense understanding reasoning, mathematical logic reasoning', 'numerical_values': [2000], 'units': {'year': 'integer calendar year', 'percentage': 'unitless ratio multiplied by 100'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.clubs': [{'column': 'name'}, {'column': 'established_year'}]}}\nA hypothetical reasoning question is as follows:\nWhich clubs, as a percentage of total clubs, existed prior to the foundation of the Bitcoin Network if the Helsingborgs IF Club was actuallly established in 2000?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * ( COUNT ( * ) + 1 ) / ( SELECT COUNT ( * ) FROM club ) AS ratio FROM club WHERE Start_year < \"2009\" AND Club_name != \"Helsingborgs IF\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 169,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': [\"world's longest railway\", 'country', 'clubs', 'medals'], 'relations': ['railway_ownership (railway → country)', 'club_location (club → country)', 'medal_achievement (medal → club)'], 'intent': 'count_total_medals_for_clubs_in_country_with_longest_railway', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'railway_length': 'unit from database (e.g. kilometers/miles)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.railways': [{'column': 'length'}, {'column': 'country_id'}], 'exerciseclub.countries': [{'column': 'country_id'}], 'exerciseclub.clubs': [{'column': 'club_id'}, {'column': 'country_id'}], 'exerciseclub.medals': [{'column': 'club_id'}]}}\nA common sense reasoning question is as follows:\nHow many medals have all the clubs in the country that owns the world's longest railway won?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM ( Gold + Big_Silver + Small_Silver + Bronze ) AS total_medals FROM club A JOIN match_result B ON A.Club_ID = B.Club_ID WHERE A.Region = \"Russia\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 170,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['medal count', 'clubs', 'country', 'longest railway'], 'relations': ['clubs_located_in_country', 'railway_located_in_country', 'railway_has_length_attribute'], 'intent': 'retrieve_aggregated_medal_count_for_clubs_in_specific_country', 'reasoning_type': 'common sense understanding reasoning, mathematical logic reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.railways': [{'column': 'country'}, {'column': 'length'}], 'exerciseclub.clubs': [{'column': 'id'}, {'column': 'country'}], 'exerciseclub.medals': [{'column': 'club_id'}]}}\nA common sense reasoning question is as follows:\nWhat is the medal count for all clubs located in the same country as the longest railway in the world?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM ( Gold + Big_Silver + Small_Silver + Bronze ) AS total_medals FROM club A JOIN match_result B ON A.Club_ID = B.Club_ID WHERE A.Region = \"Russia\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 171,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': [\"world's longest railway\", 'country', 'clubs', 'medals'], 'relations': ['country_owns_railway (country → railway)', 'clubs_located_in_country (clubs → country)', 'clubs_win_medals (clubs → medals)', 'gold_medal_doubling (operation on medals)'], 'intent': 'calculate_total_medals_after_doubling_gold', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [], 'units': {'railway_length': 'unknown (requires database unit)', 'medals': 'count (integer units)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.railways': [{'column': 'length'}, {'column': 'country_id'}], 'exerciseclub.countries': [{'column': 'country_id'}], 'exerciseclub.clubs': [{'column': 'club_id'}, {'column': 'country_id'}], 'exerciseclub.medals': [{'column': 'club_id'}, {'column': 'gold'}]}}\nA hypothetical reasoning question is as follows:\nHow many medals have all the clubs in the country that owns the world's longest railway won if the number of gold medal of each club was doubled?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM ( 2 * Gold + Big_Silver + Small_Silver + Bronze ) AS total_medals FROM club A JOIN match_result B ON A.Club_ID = B.Club_ID WHERE A.Region = \"Russia\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 172,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['gold medals', 'clubs', 'country', 'longest railway'], 'relations': ['clubs located in country (clubs.country = country_name)', 'railway located in country (railways.country = country_name)', 'longest railway determined by maximum length (MAX(railways.length))', \"medal_count derived from clubs' medals (2 * gold_medals + silver_medals + bronze_medals)\"], 'intent': 'calculate_total_medal_count_after_doubling_gold_for_clubs_in_longest_railway_country', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.railways': [{'column': 'length'}, {'column': 'country'}], 'exerciseclub.clubs': [{'column': 'country'}, {'column': 'gold_medals'}, {'column': 'silver_medals'}, {'column': 'bronze_medals'}]}}\nA hypothetical reasoning question is as follows:\nAssuming the number of gold medal of each club was doubled, what is the medal count for all clubs located in the same country as the longest railway in the world?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM ( 2 * Gold + Big_Silver + Small_Silver + Bronze ) AS total_medals FROM club A JOIN match_result B ON A.Club_ID = B.Club_ID WHERE A.Region = \"Russia\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 173,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\nthere is nothing I can give you about this question.\nA mathematical logic question is as follows:\nHow many times more medals does the top ranked club have than the third ranked club?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * n_1 / n_3 AS times FROM ( SELECT Gold + Big_Silver + Small_Silver + Bronze AS n_1 FROM match_result WHERE rank = \"1\" ) JOIN ( SELECT Gold + Big_Silver + Small_Silver + Bronze AS n_3 FROM match_result WHERE rank = \"3\" )",
        "db_id": "exerciseclub"
    },
    {
        "id": 174,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['top ranked club', 'third ranked club', 'medals'], 'relations': ['rank_comparison (top vs third)', \"medal_count_extraction (each club's medal count)\", 'ratio_calculation (medals_top / medals_third)'], 'intent': 'calculate_medal_ratio_between_top_and_third_clubs', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'medals': 'count', 'ratio': 'unitless'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.clubs': [{'column': 'rank'}, {'column': 'club_name'}], 'exerciseclub.medal_records': [{'column': 'medal_count'}, {'column': 'club_id'}]}}\nA mathematical logic question is as follows:\nWhat is the ratio of medals between the top ranked and third ranked club?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * n_1 / n_3 AS times FROM ( SELECT Gold + Big_Silver + Small_Silver + Bronze AS n_1 FROM match_result WHERE rank = \"1\" ) JOIN ( SELECT Gold + Big_Silver + Small_Silver + Bronze AS n_3 FROM match_result WHERE rank = \"3\" )",
        "db_id": "exerciseclub"
    },
    {
        "id": 175,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['top ranked club', 'third ranked club', 'bronze medals'], 'relations': ['ranking_comparison (top vs third rank)', 'medal_count_difference', 'conditional_modification (tripling bronze medals of top club)'], 'intent': 'calculate_ratio_of_adjusted_medals_between_top_and_third_ranked_clubs', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [3, 1, 3], 'units': {'medals': 'count (unitless)', 'ratio': 'times more (dimensionless)', 'multiplier': '3x (tripling factor)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.club_rankings': [{'column': 'club_id'}, {'column': 'rank'}], 'exerciseclub.medal_counts': [{'column': 'club_id'}, {'column': 'gold_medals'}, {'column': 'silver_medals'}, {'column': 'bronze_medals'}]}}\nA hypothetical reasoning question is as follows:\nHow many times more medals does the top ranked club have than the third ranked club, if the number of bronze medals of the top ranked club was tripled?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * n_1 / n_3 AS times FROM ( SELECT Gold + Big_Silver + Small_Silver + 3 * Bronze AS n_1 FROM match_result WHERE rank = \"1\" ) JOIN ( SELECT Gold + Big_Silver + Small_Silver + Bronze AS n_3 FROM match_result WHERE rank = \"3\" )",
        "db_id": "exerciseclub"
    },
    {
        "id": 176,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['highest-ranking club', 'third ranked club', 'bronze medals'], 'relations': ['medal_comparison (highest-ranking club vs third ranked club)', 'medal_modification (bronze medals tripled for highest club)'], 'intent': 'calculate_medal_ratio_after_bronze_adjustment', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3], 'units': {'medals': 'count', 'ratio': 'times (unitless multiplier)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.medal_standings': [{'column': 'rank'}, {'column': 'gold_medals'}, {'column': 'silver_medals'}, {'column': 'bronze_medals'}, {'column': 'total_medals'}]}}\nA hypothetical reasoning question is as follows:\nIf the number of bronze medals for the highest-ranking club was tripled, how many times more medals does the highest-ranking club club have compared to the thrid ranked club?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * n_1 / n_3 AS times FROM ( SELECT Gold + Big_Silver + Small_Silver + 3 * Bronze AS n_1 FROM match_result WHERE rank = \"1\" ) JOIN ( SELECT Gold + Big_Silver + Small_Silver + Bronze AS n_3 FROM match_result WHERE rank = \"3\" )",
        "db_id": "exerciseclub"
    },
    {
        "id": 177,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['gold medal (5 points)', 'big silver medal (3 points)', 'small silver medal (2 points)', 'bronze medal (1 point)', 'club with highest points', 'club location', 'establishment date', 'male coaches count', 'female coaches count'], 'relations': ['medal_to_points (gold:5, big_silver:3, small_silver:2, bronze:1)', 'club_to_medals (aggregation relationship)', 'club_to_location (direct attribute)', 'club_to_establishment_date (direct attribute)', 'club_to_coaches (gender-based count aggregation)'], 'intent': 'identify_top_scoring_club_and_retrieve_location_establishment_date_coach_gender_counts', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5, 3, 2, 1], 'units': {'points': 'unitless scoring system', 'counts': 'unitless (medal counts, coach counts)', 'date': 'year (establishment date)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.clubs': [{'column': 'club_id'}, {'column': 'location'}, {'column': 'established_date'}], 'exerciseclub.medals': [{'column': 'club_id'}, {'column': 'medal_type'}], 'exerciseclub.coaches': [{'column': 'club_id'}, {'column': 'gender'}]}}\nA mathematical logic question is as follows:\nIf a gold medal equals 5 points, a big silver medal equals 3 points, a small silver equals 2 points, and a bronze equals 1 point, where is the club with the highest number of points located, when was it established, and how many male and female coaches does it have?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM ( SELECT A.Region , A.Start_year , COUNT ( * ) AS n_M FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze ) AS new_points , Club_ID FROM match_result ) ) AND B.Gender = \"M\" ) JOIN ( SELECT COUNT ( * ) AS n_F FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze ) AS new_points , Club_ID FROM match_result ) ) AND B.Gender = \"F\" )",
        "db_id": "exerciseclub"
    },
    {
        "id": 178,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['club', 'gold medal', 'big silver medal', 'small silver medal', 'bronze medal', 'points', 'location', 'establishment date', 'male coach count', 'female coach count'], 'relations': ['medal_to_points_conversion (gold:5, big silver:3, small silver:2, bronze:1)', 'club_has_medals (association between clubs and medals)', 'club_has_location (clubs linked to their locations)', 'club_has_establishment_date (clubs linked to founding year)', 'club_has_coaches (clubs linked to coaches with gender)'], 'intent': 'identify_highest_scoring_club_and_retrieve_details', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5, 3, 2, 1], 'units': {'points': 'unitless scoring system'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.clubs': [{'column': 'club_id'}, {'column': 'location'}, {'column': 'established_year'}], 'exerciseclub.medals': [{'column': 'club_id'}, {'column': 'medal_type'}, {'column': 'medal_size'}], 'exerciseclub.coaches': [{'column': 'club_id'}, {'column': 'gender'}]}}\nA mathematical logic question is as follows:\nAssuming you converted a gold medal to 5 points, a big silver medal to 3 points, a small silver to two points and a bronze medal to 1 point, where is the highest scoring club located, when was it established, and what are the male coach count and the female coach count for the club?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM ( SELECT A.Region , A.Start_year , COUNT ( * ) AS n_M FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze ) AS new_points , Club_ID FROM match_result ) ) AND B.Gender = \"M\" ) JOIN ( SELECT COUNT ( * ) AS n_F FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze ) AS new_points , Club_ID FROM match_result ) ) AND B.Gender = \"F\" )",
        "db_id": "exerciseclub"
    },
    {
        "id": 179,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['gold medal', 'big silver medal', 'small silver medal', 'bronze medal', 'club', 'points', 'location', 'establishment date', 'male coaches', 'female coaches'], 'relations': ['medal_to_points_conversion (gold:5, big_silver:3, small_silver:2, bronze:1)', 'club_medal_counts (club → medal quantities)', 'club_attributes (club → location, establishment date)', 'club_coaches (club → coach counts by gender)', 'bronze_equality_condition (max_gold_clubs.bronze = min_gold_clubs.bronze)'], 'intent': 'identify_top_scoring_club_and_retrieve_details', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5, 3, 2, 1], 'units': {'medal_points': 'points per medal (unitless)', 'coach_counts': 'individual counts (unitless)', 'bronze_equality': 'equal bronze counts (unitless)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.clubs': [{'column': 'club_id'}, {'column': 'location'}, {'column': 'established_date'}], 'exerciseclub.medals': [{'column': 'gold'}, {'column': 'big_silver'}, {'column': 'small_silver'}, {'column': 'bronze'}], 'exerciseclub.coaches': [{'column': 'gender'}, {'column': 'club_id'}]}}\nA hypothetical reasoning question is as follows:\nIf a gold medal equals 5 points, a big silver medal equals 3 points, a small silver equals 2 points, a bronze equals 1 point and the number of bronze medals of clubs that have the most and fewest number of gold medals were the same, where is the club with the highest number of points located, when was it established, and how many male and female coaches does it have?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM ( SELECT A.Region , A.Start_year , COUNT ( * ) AS n_M FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( new_points ) , Club_ID FROM ( SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze AS new_points , Club_ID FROM match_result WHERE Club_ID != ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) UNION SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * ( SELECT Bronze FROM ( SELECT MAX ( Gold ) , Bronze FROM match_result ) ) AS new_points , Club_ID FROM match_result WHERE Club_ID = ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) ) ) ) AND B.Gender = \"M\" ) JOIN ( SELECT COUNT ( * ) AS n_F FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( new_points ) , Club_ID FROM ( SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze AS new_points , Club_ID FROM match_result WHERE Club_ID != ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) UNION SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * ( SELECT Bronze FROM ( SELECT MAX ( Gold ) , Bronze FROM match_result ) ) AS new_points , Club_ID FROM match_result WHERE Club_ID = ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) ) ) ) AND B.Gender = \"F\" )",
        "db_id": "exerciseclub"
    },
    {
        "id": 180,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['clubs', 'gold medals', 'bronze medals', 'highest scoring club', 'male coach count', 'female coach count'], 'relations': ['same_bronze_medals (between max_gold_club and min_gold_club)', 'medal_to_points_conversion (gold=5, big_silver=3, small_silver=2, bronze=1)', 'club_location (highest_scoring_club → location)', 'club_establishment (highest_scoring_club → establishment_date)', 'coach_gender_count (highest_scoring_club → male_coach_count, female_coach_count)'], 'intent': 'retrieve_location_establishment_and_coach_counts_for_highest_point_club_after_medal_conversion_with_condition', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [5, 3, 2, 1], 'units': {'medal_points': 'points (gold=5, big_silver=3, small_silver=2, bronze=1)', 'count_units': 'medal counts (unitless), coach counts (unitless)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.clubs': [{'column': 'club_id'}, {'column': 'gold_medal_count'}, {'column': 'big_silver_medal_count'}, {'column': 'small_silver_medal_count'}, {'column': 'bronze_medal_count'}, {'column': 'location'}, {'column': 'established_year'}, {'column': 'male_coach_count'}, {'column': 'female_coach_count'}]}}\nA hypothetical reasoning question is as follows:\nIf the clubs with the highest and lowest number of gold medals had an equivalent number of bronze medals --- find me where the highest scoring club is located, when it was established, and the male coach count and the female coach count for the club if you converted all medals to points when a gold medal is 5 points, a big silver medal is 3 points, a small silver medal is 2 points and a bronze medal is 1 point.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM ( SELECT A.Region , A.Start_year , COUNT ( * ) AS n_M FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( new_points ) , Club_ID FROM ( SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze AS new_points , Club_ID FROM match_result WHERE Club_ID != ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) UNION SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * ( SELECT Bronze FROM ( SELECT MAX ( Gold ) , Bronze FROM match_result ) ) AS new_points , Club_ID FROM match_result WHERE Club_ID = ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) ) ) ) AND B.Gender = \"M\" ) JOIN ( SELECT COUNT ( * ) AS n_F FROM club A JOIN coach B ON A.Club_ID = B.Club_ID WHERE A.Club_ID = ( SELECT Club_ID FROM ( SELECT MAX ( new_points ) , Club_ID FROM ( SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * Bronze AS new_points , Club_ID FROM match_result WHERE Club_ID != ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) UNION SELECT 5 * Gold + 3 * Big_Silver + 2 * Small_Silver + 1 * ( SELECT Bronze FROM ( SELECT MAX ( Gold ) , Bronze FROM match_result ) ) AS new_points , Club_ID FROM match_result WHERE Club_ID = ( SELECT Club_ID FROM ( SELECT MIN ( Gold ) , Club_ID FROM match_result ) ) ) ) ) AND B.Gender = \"F\" )",
        "db_id": "exerciseclub"
    },
    {
        "id": 181,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['small businessman', 'contestants', 'championship winners'], 'relations': ['occupation_relation (contestants → occupation)', 'championship_status (contestants → win status)'], 'intent': 'calculate_proportion_of_small_businessman_winners', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'proportion': 'unitless ratio (count of small businessman winners / total winners)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.contestants': [{'column': 'occupation'}, {'column': 'contestant_id'}], 'exerciseclub.championship_results': [{'column': 'contestant_id'}, {'column': 'win_status'}]}}\nA mathematical logic question is as follows:\nWhat is the proportion of small businessman among the contestants who have won the championship?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM ( SELECT * FROM player WHERE Rank = \"1st\" GROUP BY Player_ID ) ) AS propotion FROM ( SELECT * FROM player WHERE Rank = \"1st\" AND Occupation = \"Small Businessman\" GROUP BY Player_ID )",
        "db_id": "exerciseclub"
    },
    {
        "id": 182,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['contestants', 'championship winners', 'small businessman'], 'relations': ['contestant_to_championship (contestant → championship winner status)', 'occupation_classification (championship winner → small businessman)'], 'intent': 'calculate_proportion_of_champions_who_are_small_businessmen', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'proportion': \"percentage or ratio (implied by 'proportion' in query)\"}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.contestants': [{'column': 'contestant_id'}, {'column': 'championship_winner'}], 'exerciseclub.occupations': [{'column': 'occupation_type'}, {'column': 'contestant_id'}]}}\nA mathematical logic question is as follows:\nOut of contestants winning the championship, how many of them are small businessman as a proportion?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM ( SELECT * FROM player WHERE Rank = \"1st\" GROUP BY Player_ID ) ) AS propotion FROM ( SELECT * FROM player WHERE Rank = \"1st\" AND Occupation = \"Small Businessman\" GROUP BY Player_ID )",
        "db_id": "exerciseclub"
    },
    {
        "id": 183,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Ross Eadie', 'first place', 'small businessman', 'contestants who have won the championship'], 'relations': ['contestant_to_result (Ross Eadie → first place winner in hypothetical scenario)', 'profession_assignment (champion → small businessman status)'], 'intent': 'calculate_proportion_of_small_businessmen_among_hypothetical_champions', 'reasoning_type': 'ideal hypothesis reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.contestants': [{'column': 'contestant_id'}, {'column': 'name'}], 'exerciseclub.championships': [{'column': 'champion_id'}, {'column': 'rank'}], 'exerciseclub.professions': [{'column': 'profession_name'}, {'column': 'contestant_id'}]}}\nA hypothetical reasoning question is as follows:\nIf Ross Eadie won the first place instead, what is the proportion of small businessman among the contestants who have won the championship?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) FROM player WHERE Player_name = \"Ross Eadie\" AND Occupation = \"Small Businessman\" ) ) / ( ( SELECT COUNT ( * ) FROM ( SELECT * FROM player WHERE Rank = \"1st\" and Player_name != \"Ross Eadie\" GROUP BY Player_ID ) ) + ( SELECT COUNT ( * ) FROM player WHERE Player_name = \"Ross Eadie\" ) ) AS propotion FROM ( SELECT * FROM player WHERE Rank = \"1st\" AND Occupation = \"Small Businessman\" AND Player_name != \"Ross Eadie\" GROUP BY Player_ID )",
        "db_id": "exerciseclub"
    },
    {
        "id": 184,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Ross Eadie', 'winning contestants', 'small businessmen', 'first place'], 'relations': ['contestant_to_placement (Ross Eadie → actual placement → adjusted to first place)', 'occupation_of_winner (winning contestant → small businessman)'], 'intent': 'calculate_adjusted_proportion_of_small_business_winners', 'reasoning_type': 'ideal hypothesis reasoning', 'numerical_values': [1], 'units': {'proportion': 'unitless ratio (count of small businessmen / total winners)', 'placement_value': '1 (first place)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.contestants': [{'column': 'contestant_id'}, {'column': 'contestant_name'}, {'column': 'occupation'}], 'exerciseclub.placements': [{'column': 'contestant_id'}, {'column': 'placement'}]}}\nA hypothetical reasoning question is as follows:\nWhat proportion of the winning contestants are small businessmen if Ross Eadie won first place instead of their actual placement?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) FROM player WHERE Player_name = \"Ross Eadie\" AND Occupation = \"Small Businessman\" ) ) / ( ( SELECT COUNT ( * ) FROM ( SELECT * FROM player WHERE Rank = \"1st\" and Player_name != \"Ross Eadie\" GROUP BY Player_ID ) ) + ( SELECT COUNT ( * ) FROM player WHERE Player_name = \"Ross Eadie\" ) ) AS propotion FROM ( SELECT * FROM player WHERE Rank = \"1st\" AND Occupation = \"Small Businessman\" AND Player_name != \"Ross Eadie\" GROUP BY Player_ID )",
        "db_id": "exerciseclub"
    },
    {
        "id": 185,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['contestant', 'Jameson Tomas', 'championship win'], 'relations': ['guided_by (contestant → Jameson Tomas)', 'achieves (contestant → championship win)'], 'intent': 'calculate_win_probability_for_guide', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'probability': 'unitless (decimal/percentage)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.contestants': [{'column': 'contestant_id'}], 'exerciseclub.coach_assignments': [{'column': 'coach_id'}, {'column': 'contestant_id'}, {'column': 'coach_name'}], 'exerciseclub.championship_results': [{'column': 'contestant_id'}, {'column': 'win_status'}]}}\nA common sense reasoning question is as follows:\nWhat is the probability of a contestant guided by Jameson Tomas winning the championship?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" ) AS prob FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" AND A.Rank = \"1st\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 186,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['contestant', 'Jameson Tomas', 'championship win'], 'relations': ['mentored_by (contestant → Jameson Tomas)', 'outcome (contestant → championship win)'], 'intent': 'calculate_win_probability_by_mentor', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'probability': 'fraction or percentage (unitless)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.mentors': [{'column': 'mentor_name'}, {'column': 'mentor_id'}], 'exerciseclub.contestants': [{'column': 'contestant_id'}, {'column': 'mentor_id'}], 'exerciseclub.championship_results': [{'column': 'contestant_id'}, {'column': 'won'}]}}\nA common sense reasoning question is as follows:\nIf a contestant is guided by Jameson Tomas then what probability is there of this contestant winning the championship?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" ) AS prob FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" AND A.Rank = \"1st\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 187,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Fiona Shiells', 'Jameson Tomas', 'first place', 'championship', 'contestant'], 'relations': ['contestant_placement_relation (Fiona Shiells → first place)', 'guide_contestant_relation (Jameson Tomas → guided contestants)', 'win_condition_relation (championship requires first place)'], 'intent': 'calculate_conditional_probability_of_winning', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'probability': 'unitless (fraction between 0-1)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.contestants': [{'column': 'contestant_name'}, {'column': 'guide_id'}], 'exerciseclub.guides': [{'column': 'guide_id'}, {'column': 'guide_name'}], 'exerciseclub.results': [{'column': 'contestant_id'}, {'column': 'placement'}]}}\nA hypothetical reasoning question is as follows:\nIf Fiona Shiells won the first place instead, what is the probability of a contestant guided by Jameson Tomas winning the championship?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" AND A.Player_name = \"Fiona Shiells\" ) ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" ) AS prob FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" AND A.Rank = \"1st\" AND A.Player_name != \"Fiona Shiells\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 188,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Fiona Shiells', 'Jameson Tomas', 'championship', 'contestant', 'probability'], 'relations': ['won_by (Fiona Shiells → championship)', 'guided_by (contestant → Jameson Tomas)', 'win_outcome (contestant → championship)'], 'intent': 'calculate_conditional_probability_of_victory', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'probability': 'unitless (fraction or percentage)', 'conversion': 'None required'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.contestants': [{'column': 'contestant_id'}, {'column': 'name'}, {'column': 'coach_id'}], 'exerciseclub.coaches': [{'column': 'coach_id'}, {'column': 'coach_name'}], 'exerciseclub.championship_results': [{'column': 'contestant_id'}, {'column': 'championship_id'}, {'column': 'won'}]}}\nA hypothetical reasoning question is as follows:\nImagine if Fiona Shiells won the championship then what would the probability be for a contestant winning if they are guided by Jameson Tomas?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" AND A.Player_name = \"Fiona Shiells\" ) ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" ) AS prob FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE C.Coach_name = \"Jameson Tomas\" AND A.Rank = \"1st\" AND A.Player_name != \"Fiona Shiells\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 189,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['coach', 'champions', 'most number of champions', 'fewest number of champions'], 'relations': ['coach_to_champions (coach guided champions)', 'comparison_most_vs_least (difference in champion counts)'], 'intent': 'identify_extreme_performing_coaches_and_count_difference', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'count': 'unitless count of champions', 'difference': 'unitless count difference'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.coaches': [{'column': 'coach_id'}, {'column': 'name'}], 'exerciseclub.champions': [{'column': 'coach_id'}, {'column': 'champion_id'}]}}\nA mathematical logic question is as follows:\nWhat's the name of the coach who has guided the most number of champions, and how many more has he produced than the coach who has guided the fewest?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Coach_name , n_1st - ( SELECT MIN ( n_1st ) FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) ) AS diff FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) WHERE n_1st = ( SELECT MAX ( n_1st ) FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) )",
        "db_id": "exerciseclub"
    },
    {
        "id": 190,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['coach', 'winning contestants', 'champions', 'coach with most winning contestants', 'coach with fewest winning contestants'], 'relations': ['trains (coach → contestants)', 'achieved_champion_status (contestant → champion)'], 'intent': 'retrieve_top_coach_and_compute_champion_count_difference', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'count': 'number of champions (dimensionless)', 'difference': 'count (dimensionless)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.coaches': [{'column': 'coach_id'}, {'column': 'name'}], 'exerciseclub.contestants': [{'column': 'contestant_id'}, {'column': 'coach_id'}], 'exerciseclub.competition_results': [{'column': 'contestant_id'}, {'column': 'is_winner'}]}}\nA mathematical logic question is as follows:\nFind me the name of the coach with the most winning contestants and then find me how many more champions this coach has trained than the coach with the fewest winning contestants.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Coach_name , n_1st - ( SELECT MIN ( n_1st ) FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) ) AS diff FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) WHERE n_1st = ( SELECT MAX ( n_1st ) FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) )",
        "db_id": "exerciseclub"
    },
    {
        "id": 191,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['coach', 'champion', 'runner-up', 'third-place finisher', 'bonus amount'], 'relations': ['coach_guided_achievement (coach → champion/runner-up/third-place)', 'bonus_calculation_per_achievement (champion→$100, runner-up→$60, third-place→$20)'], 'intent': 'identify_coach_with_highest_total_bonus_and_amount', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100, 60, 20], 'units': {'currency': 'USD (dollars)', 'conversion': 'bonus rates are fixed per achievement type'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.coaches': [{'column': 'coach_id'}, {'column': 'coach_name'}], 'exerciseclub.achievements': [{'column': 'coach_id'}, {'column': 'achievement_type'}]}}\nA mathematical logic question is as follows:\nCoaches earn $100 for every champion they guided, $60 for every runner-up and $20 for every third-place finisher. What's the name of the coach who gets the most bonuses and how much does they earn?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT t1.Coach_name , MAX ( 100 * n_1st + 60 * n_2nd + 20 * n_3rd ) AS money FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) t1 JOIN ( SELECT Coach_name , COUNT ( * ) AS n_2nd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" GROUP BY C.Coach_ID ) ) t2 ON t1.Coach_name = t2.Coach_name JOIN ( SELECT Coach_name , COUNT ( * ) AS n_3rd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID ) ) t3 ON t2.Coach_name = t3.Coach_name",
        "db_id": "exerciseclub"
    },
    {
        "id": 192,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['coach', 'bonus', 'champion', 'runner-up', 'third place'], 'relations': ['coach_to_players (coach → players supervised)', 'achievement_to_bonus (champion→$100, runner-up→$60, third→$20)'], 'intent': 'retrieve_name_and_bonus_of_max_earning_coach', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100, 60, 20], 'units': {'currency': 'USD', 'bonus_per_champion': 100, 'bonus_per_runner_up': 60, 'bonus_per_third': 20}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.coaches': [{'column': 'name'}, {'column': 'id'}], 'exerciseclub.tournament_results': [{'column': 'coach_id'}, {'column': 'player_achievement'}]}}\nA mathematical logic question is as follows:\nFind me the name and bonus of the highest bonus earning coach if each champion earns $100, a runner-up earns $60 and a third place earns $20.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT t1.Coach_name , MAX ( 100 * n_1st + 60 * n_2nd + 20 * n_3rd ) AS money FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) t1 JOIN ( SELECT Coach_name , COUNT ( * ) AS n_2nd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" GROUP BY C.Coach_ID ) ) t2 ON t1.Coach_name = t2.Coach_name JOIN ( SELECT Coach_name , COUNT ( * ) AS n_3rd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID ) ) t3 ON t2.Coach_name = t3.Coach_name",
        "db_id": "exerciseclub"
    },
    {
        "id": 193,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['coaches', 'bonuses', 'champion', 'runner-up', 'third-place', 'Rachel Heinrichs'], 'relations': ['coach_guides_athlete (coach → athlete)', 'athlete_achievement (athlete → placement)', 'bonus_calculation (placement → bonus amount)'], 'intent': 'identify_coach_with_max_total_bonus_and_amount', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100, 60, 20], 'units': {'currency': 'USD', 'conversion': 'Fixed bonuses per placement level (champion=$100, runner-up=$60, third-place=$20)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.coaches': [{'column': 'coach_id'}, {'column': 'name'}], 'exerciseclub.athletes': [{'column': 'athlete_id'}, {'column': 'coach_id'}, {'column': 'athlete_name'}], 'exerciseclub.competition_results': [{'column': 'athlete_id'}, {'column': 'placement'}]}}\nA hypothetical reasoning question is as follows:\nCoaches earn $100 for every champion they guided, $60 for every runner-up and $20 for every third-place finisher. If Rachel Heinrichs won the runner-up, what's the name of the coach who gets the most bonuses and how much does he earn?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT t1.Coach_name , MAX ( 100 * n_1st + 60 * n_2nd + 20 * n_3rd ) AS money FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) t1 JOIN ( SELECT Coach_name , COUNT ( * ) AS n_2nd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" AND C.Coach_ID != ( SELECT C.Coach_ID FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Player_name = \"Rachel Heinrichs\" ) GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" GROUP BY C.Coach_ID ) AND Coach_ID != ( SELECT C.Coach_ID FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Player_name = \"Rachel Heinrichs\" ) UNION SELECT ( SELECT C.Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Player_name = \"Rachel Heinrichs\" ) AS Coach_name , COUNT ( * ) + 1 AS n_2nd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" AND A.Player_name = \"Rachel Heinrichs\" ) t2 ON t1.Coach_name = t2.Coach_name JOIN ( SELECT Coach_name , COUNT ( * ) AS n_3rd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID ) ) t3 ON t2.Coach_name = t3.Coach_name",
        "db_id": "exerciseclub"
    },
    {
        "id": 194,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Rachel Heinrichs', 'runner-up', 'coach', 'bonus', 'champion', 'third-place'], 'relations': ['athlete_coach_relation (Rachel Heinrichs → coach)', 'achievement_bonus_mapping (runner-up → $60 bonus)'], 'intent': 'retrieve_coach_name_and_bonus_for_athlete_achievement', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100, 60, 20], 'units': {'bonus_conversion': {'champion': 100, 'runner-up': 60, 'third-place': 20}, 'currency': 'USD'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.athletes': [{'column': 'athlete_name'}, {'column': 'coach_id'}], 'exerciseclub.coaches': [{'column': 'coach_id'}, {'column': 'coach_name'}], 'exerciseclub.achievements': [{'column': 'athlete_id'}, {'column': 'achievement_type'}]}}\nA hypothetical reasoning question is as follows:\nWhat is the name and bonus of the coach with the highest bonus of Rachel Heinrichs won runner-up? Convert a champion into $100 bonus, a runner-up to $60 bonus and a third-place position to a $20 bonus.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT t1.Coach_name , MAX ( 100 * n_1st + 60 * n_2nd + 20 * n_3rd ) AS money FROM ( SELECT Coach_name , COUNT ( * ) AS n_1st FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"1st\" GROUP BY C.Coach_ID ) ) t1 JOIN ( SELECT Coach_name , COUNT ( * ) AS n_2nd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" AND C.Coach_ID != ( SELECT C.Coach_ID FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Player_name = \"Rachel Heinrichs\" ) GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" GROUP BY C.Coach_ID ) AND Coach_ID != ( SELECT C.Coach_ID FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Player_name = \"Rachel Heinrichs\" ) UNION SELECT ( SELECT C.Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Player_name = \"Rachel Heinrichs\" ) AS Coach_name , COUNT ( * ) + 1 AS n_2nd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"2nd\" AND A.Player_name = \"Rachel Heinrichs\" ) t2 ON t1.Coach_name = t2.Coach_name JOIN ( SELECT Coach_name , COUNT ( * ) AS n_3rd FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID UNION SELECT Coach_name , 0 FROM coach WHERE Coach_name NOT IN ( SELECT Coach_name FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON C.Coach_ID = B.Coach_ID WHERE A.Rank = \"3rd\" GROUP BY C.Coach_ID ) ) t3 ON t2.Coach_name = t3.Coach_name",
        "db_id": "exerciseclub"
    },
    {
        "id": 195,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['clubs', 'establishment date', '21st century (2001-2100)'], 'relations': ['club_has_establishment_date (clubs → founding year)', 'temporal_comparison (establishment_date < 2001)'], 'intent': 'calculate_percentage_of_clubs_founded_before_2001', 'reasoning_type': 'common sense understanding reasoning, mathematical logic reasoning', 'numerical_values': [2001], 'units': {'year': 'integer (Gregorian calendar year)', 'percentage': 'unitless (ratio * 100)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.clubs': [{'column': 'established_year'}]}}\nA common sense reasoning question is as follows:\nWhat percentage of clubs were established before the 21st century?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM club ) AS percent FROM club WHERE Start_year < 2001",
        "db_id": "exerciseclub"
    },
    {
        "id": 196,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['clubs', '21st Century'], 'relations': ['time_comparison (founding year < 2001)'], 'intent': 'calculate_percentage_of_entities_before_time_threshold', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2001], 'units': {'time': 'year (Gregorian calendar)', 'conversion': '21st Century start = January 1, 2001'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.clubs': [{'column': 'founded_year'}]}}\nA common sense reasoning question is as follows:\nWhat percentage of clubs were founded prior to the 21st Century?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM club ) AS percent FROM club WHERE Start_year < 2001",
        "db_id": "exerciseclub"
    },
    {
        "id": 197,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['clubs in USA', 'established in 2000 (hypothetical)', 'before the 21st century'], 'relations': ['hypothetical_assumption (all clubs → established in 2000)', 'temporal_comparison (establishment year vs. 21st century start)'], 'intent': 'calculate_percentage_of_clubs_established_before_year_2000_under_hypothetical_condition', 'reasoning_type': 'ideal hypothesis reasoning, mathematical logic reasoning', 'numerical_values': [2000, 2001], 'units': {'year': 'calendar year', 'percentage': '%', 'century_boundary': '21st century starts at 2001'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.clubs': [{'column': 'establishment_year'}, {'column': 'country'}]}}\nA hypothetical reasoning question is as follows:\nIf all the clubs in USA were established in 2000, what percentage of clubs were established before the 21st century?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) FROM club WHERE Region = \"USA\" ) ) / ( SELECT COUNT ( * ) FROM club ) AS percent FROM club WHERE Start_year < 2001 AND Region != \"USA\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 198,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['clubs', 'USA', 'founding year', '21st Century'], 'relations': ['location_relation (clubs → country)', 'temporal_relation (clubs → founding_year)', 'conditional_constraint (USA clubs founded in 2000)'], 'intent': 'calculate_percentage_of_clubs_founded_before_21st_century_under_USA_constraint', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2000, 2001], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.clubs': [{'column': 'country'}, {'column': 'founding_year'}]}}\nA hypothetical reasoning question is as follows:\nWhat percentage of clubs were founded before the 21st Century given that all clubs in the USA were founded in 2000.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) FROM club WHERE Region = \"USA\" ) ) / ( SELECT COUNT ( * ) FROM club ) AS percent FROM club WHERE Start_year < 2001 AND Region != \"USA\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 199,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['players', 'capital of Manitoba province', 'Canada', 'Ross C. Martin'], 'relations': ['residence (players → capital city of Manitoba)', \"vote_comparison (players' votes > 2 × Ross C. Martin's votes)\"], 'intent': 'retrieve_players_by_residence_and_vote_comparison', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [2], 'units': {'vote_count': 'unitless (implied comparison ratio)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.players': [{'column': 'player_name'}, {'column': 'city_id'}], 'exerciseclub.provinces': [{'column': 'province_name'}, {'column': 'capital_city'}, {'column': 'country'}], 'exerciseclub.votes': [{'column': 'player_id'}, {'column': 'total_votes'}]}}\nA common sense reasoning question is as follows:\nWhat are the names of players living in the capital of Manitoba provincee in Cnanda received more than twice as many votes as Ross C. Martin?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Player_name FROM player WHERE Residence = \"Winnipeg\" AND Votes > 2 * ( SELECT Votes FROM player WHERE Player_name = \"Ross C. Martin\" )",
        "db_id": "exerciseclub"
    },
    {
        "id": 200,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Manitona province', 'capital city', 'players', 'Ross C. Martin', 'votes'], 'relations': ['province_has_capital (Manitona province → capital city)', 'player_residence (player → capital city)', 'player_votes (player → vote count)', \"vote_comparison (> twice Ross C. Martin's votes)\"], 'intent': 'retrieve_players_from_capital_exceeding_vote_threshold', 'reasoning_type': 'common sense understanding reasoning, mathematical logic reasoning', 'numerical_values': [2], 'units': {'vote_count': 'count (no unit conversion needed)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.players': [{'column': 'player_name'}, {'column': 'city_id'}], 'exerciseclub.provinces': [{'column': 'province_name'}, {'column': 'capital_city_id'}], 'exerciseclub.votes': [{'column': 'player_id'}, {'column': 'vote_count'}]}}\nA common sense reasoning question is as follows:\nOf the players living in Manitona province's capital city, what are the names of players who received more than twice the votes that Ross C. Martin recieved?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Player_name FROM player WHERE Residence = \"Winnipeg\" AND Votes > 2 * ( SELECT Votes FROM player WHERE Player_name = \"Ross C. Martin\" )",
        "db_id": "exerciseclub"
    },
    {
        "id": 201,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Manitoba province', 'Canada', 'Ross C. Martin', 'players'], 'relations': ['province_in_country (Manitoba → Canada)', 'province_has_capital (Manitoba → capital city)', 'player_resides_in_city (player → capital city)', 'player_receives_votes (player → vote_count)'], 'intent': 'retrieve_players_in_manitoba_capital_with_votes_over_twice_ross_martin', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2000], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.players': [{'column': 'name'}, {'column': 'city_id'}], 'exerciseclub.votes': [{'column': 'vote_count'}], 'exerciseclub.provinces': [{'column': 'province_name'}, {'column': 'capital_city_id'}], 'exerciseclub.countries': [{'column': 'country_name'}]}}\nA hypothetical reasoning question is as follows:\nWhat are the names of players living in the capital of Manitoba provincee in Cnanda received more than twice as many votes as Ross C. Martin, if Ross C. Martin obtained 2000 votes instead?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Player_name FROM player WHERE Residence = \"Winnipeg\" AND Votes > 2 * 2000 AND Player_name != \"Ross C. Martin\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 202,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Manitona province', 'capital city', 'players', 'Ross C. Martin', 'votes'], 'relations': ['province_has_capital (Manitona province → capital city)', 'player_resides_in_city (players → capital city)', 'player_receives_votes (players → votes)', \"vote_comparison (players' votes > 2 × Ross C. Martin's votes)\"], 'intent': 'retrieve_player_names_meeting_vote_threshold_in_location', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [2000, 2, 4000], 'units': {'votes': 'count (no unit conversion required)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.players': [{'column': 'name'}, {'column': 'city_id'}], 'exerciseclub.provinces': [{'column': 'province_name'}, {'column': 'capital_city_id'}], 'exerciseclub.cities': [{'column': 'city_id'}, {'column': 'province_id'}], 'exerciseclub.votes': [{'column': 'player_id'}, {'column': 'vote_count'}]}}\nA hypothetical reasoning question is as follows:\nOf the players living in Manitona province's capital city, what are the names of players who received more than twice the votes that Ross C. Martin recieved, if if Ross C. Martin obtained 2000 votes instead?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Player_name FROM player WHERE Residence = \"Winnipeg\" AND Votes > 2 * 2000 AND Player_name != \"Ross C. Martin\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 203,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['players', 'coaches', 'clubs established before 21st Century', 'player votes', 'lowest vote'], 'relations': ['player_coached_by (player → coach)', 'coach_affiliated_with_club (coach → club)', 'club_establishment_date (club attribute for filtering)', 'vote_comparison (player vote vs minimum vote)'], 'intent': 'retrieve_player_names_and_vote_difference_above_minimum', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [2001], 'units': {'date': 'year (establishment year threshold)', 'vote_difference': 'unitless count'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.players': [{'column': 'name'}, {'column': 'vote_count'}, {'column': 'coach_id'}], 'exerciseclub.coaches': [{'column': 'id'}, {'column': 'club_id'}], 'exerciseclub.clubs': [{'column': 'establishment_year'}]}}\nA common sense reasoning question is as follows:\nWhat are the names of the players whose coaches come from clubs established before the 21st Century, and how much higher are their votes than the lowest?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.Player_name , A.Votes - ( SELECT MIN ( Votes ) FROM player ) AS diff FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID JOIN club D ON C.Club_ID = D.Club_ID WHERE D.Start_year < 2006",
        "db_id": "exerciseclub"
    },
    {
        "id": 204,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['players', 'coaches', 'clubs established prior to 21st Century (before 2000)', 'votes', 'lowest number of votes'], 'relations': ['player_to_coach (players are associated with coaches)', 'coach_to_club (coaches are associated with clubs)', 'club_establishment_time (clubs have establishment years)', 'player_votes_comparison (comparison between player votes and global minimum votes)'], 'intent': 'retrieve_players_with_pre_21st_century_coach_clubs_and_calculate_vote_difference_from_min', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2000], 'units': {'year': 'Gregorian calendar year (integer)', 'votes': 'count (unitless integer)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.players': [{'column': 'name'}, {'column': 'votes'}, {'column': 'coach_id'}], 'exerciseclub.coaches': [{'column': 'id'}, {'column': 'club_id'}], 'exerciseclub.clubs': [{'column': 'establishment_year'}]}}\nA common sense reasoning question is as follows:\nFind me the names of players who have coaches that come from clubs established prior to the 21st Century and then calculate how much higher their respective votes are than the lowest number of votes.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.Player_name , A.Votes - ( SELECT MIN ( Votes ) FROM player ) AS diff FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID JOIN club D ON C.Club_ID = D.Club_ID WHERE D.Start_year < 2006",
        "db_id": "exerciseclub"
    },
    {
        "id": 205,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['players', 'coaches', 'clubs established before 21st Century', 'votes', 'lowest votes count (1000)'], 'relations': ['guided_by (players → coaches)', 'affiliated_with (coaches → clubs)', 'established_before_21st_century (clubs → establishment_year < 2001)', 'vote_comparison (player_votes - 1000)'], 'intent': 'retrieve_player_names_and_calculate_vote_difference', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [1000, 2001], 'units': {'votes': 'count (unitless)', 'year': 'Gregorian calendar', 'difference': 'absolute count (player_votes - 1000)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.players': [{'column': 'name'}, {'column': 'vote_count'}, {'column': 'coach_id'}], 'exerciseclub.coaches': [{'column': 'coach_id'}, {'column': 'club_id'}], 'exerciseclub.clubs': [{'column': 'club_id'}, {'column': 'establishment_year'}]}}\nA hypothetical reasoning question is as follows:\nWhat are the names of players who are guided by coaches from clubs established before the 21st Century, and how much higher are their votes than the lowest if the lowest votes count is 1000?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.Player_name , A.Votes - 1000 AS diff FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID JOIN club D ON C.Club_ID = D.Club_ID WHERE D.Start_year < 2006",
        "db_id": "exerciseclub"
    },
    {
        "id": 206,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['lowest vote count (1000)', 'players', 'coaches', 'pre-21st-century clubs'], 'relations': ['player_coach_relation (players → coaches)', 'coach_club_relation (coaches → clubs)', 'club_era_classification (clubs → founded_year < 2001)', 'vote_comparison (player_votes - min_votes)'], 'intent': 'retrieve_player_names_and_calculate_vote_difference_above_minimum', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000], 'units': {'vote_count': 'unitless count', 'difference': 'unitless count (implied subtraction)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.players': [{'column': 'name'}, {'column': 'player_id'}], 'exerciseclub.coaches': [{'column': 'coach_id'}, {'column': 'club_id'}], 'exerciseclub.clubs': [{'column': 'club_id'}, {'column': 'founded_year'}], 'exerciseclub.votes': [{'column': 'player_id'}, {'column': 'vote_count'}]}}\nA hypothetical reasoning question is as follows:\nIf the lowest vote count is 1000 then find what are the names of the players who have coaches from pre-21st-century clubs and calculate how much higher these players votes are than the minimum vote count.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.Player_name , A.Votes - 1000 AS diff FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID JOIN club D ON C.Club_ID = D.Club_ID WHERE D.Start_year < 2006",
        "db_id": "exerciseclub"
    },
    {
        "id": 207,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['player without coach', 'championship win'], 'relations': ['absence_of_coach (player has no coach)', 'championship_achievement (player won championship)'], 'intent': 'calculate_win_probability_without_coach', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'probability': 'unitless (ratio between 0-1)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.players': [{'column': 'player_id'}], 'exerciseclub.coach_assignments': [{'column': 'player_id'}], 'exerciseclub.championship_winners': [{'column': 'player_id'}, {'column': 'championship_year'}]}}\nA common sense reasoning question is as follows:\nWhat is the probability of a player without a coach winning the championship?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) ) AS ratio FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND Rank = \"1st\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 208,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['player', 'coach', 'championship'], 'relations': ['player_to_coach (existence relationship: has coach / no coach)', 'player_to_championship (win/loss outcome)'], 'intent': 'calculate_probability_of_winning_without_coach', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': None, 'units': {'probability': 'percentage or ratio', 'conversion': 'count(winners) / count(players) * 100 for percentage'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.players': [{'column': 'player_id'}], 'exerciseclub.championships': [{'column': 'winner_player_id'}], 'exerciseclub.player_coach': [{'column': 'player_id'}, {'column': 'coach_id'}]}}\nA common sense reasoning question is as follows:\nIf a player has no coach then how likely is it that they will win the championship?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) ) AS ratio FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND Rank = \"1st\"",
        "db_id": "exerciseclub"
    },
    {
        "id": 209,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['coached player', 'uncoached player', 'top two finish'], 'relations': ['probability_comparison (coached player vs uncoached player for top two finish)', 'performance_difference (coached vs uncoached)'], 'intent': 'calculate_probability_difference_for_top_two_finish', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'probability': 'percentage or decimal', 'difference': 'percentage points or multiplicative factor'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.player_training': [{'column': 'coaching_status'}], 'exerciseclub.player_performance': [{'column': 'finish_position'}, {'column': 'player_id'}]}}\nA common sense reasoning question is as follows:\nHow much more likely is the coached player to finish in the top two than the uncoached player?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) - ( SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) ) FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND ( Rank = \"1st\" OR Rank = \"2nd\" ) ) AS diff FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE ( A.Rank = \"1st\" OR A.Rank = \"2nd\" )",
        "db_id": "exerciseclub"
    },
    {
        "id": 210,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['coached player', 'uncoached player', 'top two finish'], 'relations': ['comparison (coached vs uncoached performance)', 'performance_outcome (player → finish position)'], 'intent': 'calculate_difference_in_top_two_finish_probability', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'probability': 'percentage or decimal (implied)', 'difference': 'absolute/relative percentage points'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.player_performance': [{'column': 'player_id'}, {'column': 'finish_position'}], 'exerciseclub.coaching_status': [{'column': 'is_coached'}]}}\nA common sense reasoning question is as follows:\nWhat is the difference in likelihood of a coached player finishing in the top two versus an uncoached player?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) - ( SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) ) FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND ( Rank = \"1st\" OR Rank = \"2nd\" ) ) AS diff FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE ( A.Rank = \"1st\" OR A.Rank = \"2nd\" )",
        "db_id": "exerciseclub"
    },
    {
        "id": 211,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Niki Ashton', 'coached player', 'uncoached player', 'top two finish'], 'relations': ['player_type_assignment (Niki Ashton → uncoached player)', 'outcome_likelihood (coached player → top two finish probability)', 'outcome_likelihood (uncoached player → top two finish probability)', 'probability_comparison (coached vs uncoached player difference)'], 'intent': 'calculate_difference_in_top_two_finish_probability_between_coached_and_uncoached', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'probability_difference': 'percentage points or ratio (absolute/relative difference)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.players': [{'column': 'coaching_status'}, {'column': 'player_name'}], 'exerciseclub.tournament_results': [{'column': 'finish_position'}, {'column': 'player_id'}]}}\nA hypothetical reasoning question is as follows:\nIf Niki Ashton was an uncoached player, how much more likely is the coached player to finish in the top two than the uncoached player?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT prob_1 - prob_2 AS diff FROM ( SELECT 1.0 * ( COUNT ( * ) - ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE ( A.Rank = \"1st\" OR A.Rank = \"2nd\" ) AND A.Player_name = \"Niki Ashton\" ) ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE A.Player_name != \"Niki Ashton\" ) AS prob_1 FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE ( A.Rank = \"1st\" OR A.Rank = \"2nd\" ) ) JOIN ( SELECT 1.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) From player WHERE ( Rank = \"1st\" OR Rank = \"2nd\" ) AND Player_name = \"Niki Ashton\" ) ) / ( SELECT COUNT ( * ) + 1 FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND Player_name != \"Niki Ashton\" ) AS prob_2 FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND ( Rank = \"1st\" OR Rank = \"2nd\" ) AND Player_name != \"Niki Ashton\" )",
        "db_id": "exerciseclub"
    },
    {
        "id": 212,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['coached player', 'player without a coach', 'top two rank', 'Niki Ashton'], 'relations': ['coaching_status_effect (coached → rank probability)', 'comparison_ratio (coached vs non-coached likelihood)', 'conditional_scenario (Niki Ashton has no coach)'], 'intent': 'calculate_relative_probability_ratio_of_top_two_rank_by_coaching_status', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'result': 'ratio (unitless)', 'threshold': 'top two ranks (implied by rank ≤ 2)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'exerciseclub.players': [{'column': 'coach_id'}, {'column': 'rank'}, {'column': 'name'}]}}\nA hypothetical reasoning question is as follows:\nHow much likelier is it that a coached player ranks in the top two than a player without a coach if Niki Ashton has no coach?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT prob_1 - prob_2 AS diff FROM ( SELECT 1.0 * ( COUNT ( * ) - ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE ( A.Rank = \"1st\" OR A.Rank = \"2nd\" ) AND A.Player_name = \"Niki Ashton\" ) ) / ( SELECT COUNT ( * ) FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE A.Player_name != \"Niki Ashton\" ) AS prob_1 FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID WHERE ( A.Rank = \"1st\" OR A.Rank = \"2nd\" ) ) JOIN ( SELECT 1.0 * ( COUNT ( * ) + ( SELECT COUNT ( * ) From player WHERE ( Rank = \"1st\" OR Rank = \"2nd\" ) AND Player_name = \"Niki Ashton\" ) ) / ( SELECT COUNT ( * ) + 1 FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND Player_name != \"Niki Ashton\" ) AS prob_2 FROM player WHERE Player_ID NOT IN ( SELECT A.Player_ID AS player_with_coach FROM player A JOIN player_coach B ON A.Player_ID = B.Player_ID JOIN coach C ON B.Coach_ID = C.Coach_ID ) AND ( Rank = \"1st\" OR Rank = \"2nd\" ) AND Player_name != \"Niki Ashton\" )",
        "db_id": "exerciseclub"
    },
    {
        "id": 213,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Sterling'], 'relations': ['person_to_transactions (Sterling → spending records)'], 'intent': 'retrieve_total_expenditure', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'currency': 'implied by database schema (e.g., USD, GBP)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.customers': [{'column': 'customer_name'}, {'column': 'customer_id'}], 'contract.transactions': [{'column': 'amount'}, {'column': 'customer_id'}]}}\nA common sense reasoning question is as follows:\nHow much has Sterling spent so far?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM ( C.order_quantity * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\"",
        "db_id": "contract"
    },
    {
        "id": 214,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Sterling', 'total spend'], 'relations': ['entity_expenditure (Sterling → spending records)'], 'intent': 'calculate_cumulative_expenditure_for_entity', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'currency': 'implied monetary unit (e.g., USD, EUR)', 'temporal': 'current date context'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.entities': [{'column': 'entity_name'}], 'contract.transactions': [{'column': 'entity_id'}, {'column': 'amount'}, {'column': 'date'}]}}\nA common sense reasoning question is as follows:\nWhat is the total spend for Sterling to date?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM ( C.order_quantity * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\"",
        "db_id": "contract"
    },
    {
        "id": 215,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Gucci products', 'Sterling', 'unit price 600'], 'relations': ['customer_purchases (Sterling → Gucci products)', 'fixed_price_condition (all Gucci products → unit price 600)'], 'intent': 'calculate_total_expenditure_by_customer', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [600], 'units': {'currency': 'unspecified but implied (e.g., USD, EUR)', 'calculation': 'total_spent = quantity * 600'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.customers': [{'column': 'customer_name'}], 'contract.products': [{'column': 'brand'}], 'contract.purchases': [{'column': 'quantity'}, {'column': 'customer_id'}, {'column': 'product_id'}]}}\nA hypothetical reasoning question is as follows:\nIf the unit price of all Gucci products is 600, how much has Sterling spent so far?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM ( cost ) FROM ( SELECT SUM ( C.order_quantity * 600 ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\" AND product_name = \"gucci\" UNION SELECT SUM ( C.order_quantity * D.product_price ) AS ost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\" AND product_name != \"gucci\" )",
        "db_id": "contract"
    },
    {
        "id": 216,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Sterling', 'Gucci products'], 'relations': ['purchased_by (Gucci products → Sterling)'], 'intent': 'calculate_total_expenditure', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [600], 'units': {'currency': 'implied monetary units (e.g., USD, EUR)', 'calculation': 'quantity × unit_price = total_spend'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.purchases': [{'column': 'buyer_name'}, {'column': 'product_id'}, {'column': 'quantity'}], 'contract.products': [{'column': 'product_brand'}, {'column': 'product_id'}]}}\nA hypothetical reasoning question is as follows:\nCalculate Sterling's total spend to date if all Gucci products cost 600 each.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM ( cost ) FROM ( SELECT SUM ( C.order_quantity * 600 ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\" AND product_name = \"gucci\" UNION SELECT SUM ( C.order_quantity * D.product_price ) AS ost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\" AND product_name != \"gucci\" )",
        "db_id": "contract"
    },
    {
        "id": 217,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Sterling', '20% discount', 'spending'], 'relations': ['member_discount (Sterling → 20% discount)', 'purchase_history (Sterling → products purchased)'], 'intent': 'calculate_total_expenditure_after_discount', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20], 'units': {'discount': 'percentage', 'currency': 'monetary units (implied by database schema)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.members': [{'column': 'member_id'}, {'column': 'name'}], 'contract.orders': [{'column': 'order_id'}, {'column': 'member_id'}], 'contract.order_details': [{'column': 'order_id'}, {'column': 'product_id'}, {'column': 'quantity'}], 'contract.products': [{'column': 'product_id'}, {'column': 'price'}]}}\nA common sense reasoning question is as follows:\nSterling is a member and gets a 20% discount on all products. How much has he spent so far?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM ( C.order_quantity * D.product_price * ( 1.0 - 1.0 * 20 / 100 ) ) AS cost_after_discount FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\"",
        "db_id": "contract"
    },
    {
        "id": 218,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Sterling', 'spend to date', '20% member price discount'], 'relations': [\"discount_applied_to_spend (20% discount → Sterling's purchases)\", 'membership_entitlement (Sterling → discount eligibility)'], 'intent': 'calculate_discounted_total_expenditure', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20], 'units': {'discount': '% (percentage)', 'currency': 'monetary unit (implied by database currency columns)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.customers': [{'column': 'customer_id'}, {'column': 'name'}, {'column': 'membership_status'}], 'contract.transactions': [{'column': 'customer_id'}, {'column': 'transaction_date'}, {'column': 'product_id'}, {'column': 'quantity'}], 'contract.products': [{'column': 'product_id'}, {'column': 'base_price'}, {'column': 'member_discount'}]}}\nA common sense reasoning question is as follows:\nCalculate Sterling's spend to date factoring in a 20% member price discount.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM ( C.order_quantity * D.product_price * ( 1.0 - 1.0 * 20 / 100 ) ) AS cost_after_discount FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\"",
        "db_id": "contract"
    },
    {
        "id": 219,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Sterling (member)', '20% discount', 'savings amount'], 'relations': ['member_discount_entitlement (Sterling → 20% discount)', 'purchase_history (Sterling → product purchases)', 'discount_calculation (original_price → 20% → savings)'], 'intent': 'calculate_total_discount_savings', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20], 'units': {'discount': '% (percentage)', 'currency': 'monetary unit (implied by database schema)', 'calculation': 'savings = original_price × 0.20'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.members': [{'column': 'member_id'}, {'column': 'name'}], 'contract.sales': [{'column': 'member_id'}, {'column': 'product_id'}, {'column': 'quantity'}, {'column': 'unit_price'}], 'contract.products': [{'column': 'product_id'}]}}\nA common sense reasoning question is as follows:\nSterling is a member and gets a 20% discount on all products. How much has he saved so far?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM ( C.order_quantity * D.product_price * ( 1.0 * 20 / 100 ) ) AS svaed_money FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\"",
        "db_id": "contract"
    },
    {
        "id": 220,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Sterling', '20% member price discount', 'savings to date'], 'relations': ['member_discount_application (Sterling → purchases with discount)', 'savings_calculation (discount_rate → total_savings)'], 'intent': 'calculate_cumulative_savings_from_membership_discount', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20], 'units': {'discount_rate': '% (percentage)', 'savings': 'currency unit (e.g., dollars, pounds - implied by database)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.members': [{'column': 'member_id'}, {'column': 'name'}], 'contract.purchases': [{'column': 'member_id'}, {'column': 'original_price'}, {'column': 'discount_rate'}]}}\nA common sense reasoning question is as follows:\nCalculate how much Sterling has saved to date through their 20% member price discount.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM ( C.order_quantity * D.product_price * ( 1.0 * 20 / 100 ) ) AS svaed_money FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Sterling\"",
        "db_id": "contract"
    },
    {
        "id": 221,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['customers', 'customer IDs', 'names', 'addresses', 'phone numbers', 'email addresses', 'total spending to date'], 'relations': ['customer_to_spending (customers → sum of purchases)', 'attribute_ownership (customer IDs → names/addresses/phones/emails)'], 'intent': 'retrieve_customer_details_ordered_by_total_spending', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'currency': 'implied by database schema (e.g., USD)', 'aggregation': 'SUM() function for spending'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.customers': [{'column': 'customer_id'}, {'column': 'name'}, {'column': 'address'}, {'column': 'phone'}, {'column': 'email'}], 'contract.orders': [{'column': 'order_amount'}, {'column': 'customer_id'}]}}\nA common sense reasoning question is as follows:\nList customer IDs, names, addresses, phone numbers, and email addresses in descending order of their total spending to date.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.customer_id , A.customer_name , A.customer_address , A.customer_phone , A.customer_email , SUM ( C.order_quantity * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id GROUP BY A.customer_name ORDER BY cost DESC",
        "db_id": "contract"
    },
    {
        "id": 222,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['customers', 'total spending', 'today'], 'relations': ['customer_to_orders (customers → associated orders)', 'spending_aggregation (sum of order amounts per customer)', 'time_constraint (order_date ≤ today)'], 'intent': 'retrieve_customers_sorted_by_descending_total_spend', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'currency': 'implied by database schema (e.g., USD, EUR)', 'date': 'current date (today)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.customers': [{'column': 'customer_id'}, {'column': 'name'}, {'column': 'email'}, {'column': 'phone'}, {'column': 'mail_address'}], 'contract.orders': [{'column': 'amount'}, {'column': 'order_date'}]}}\nA common sense reasoning question is as follows:\nSort customers by descending order of total spending to today and give me the total spend, name, email address, phone number, mail address and customer ID.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.customer_id , A.customer_name , A.customer_address , A.customer_phone , A.customer_email , SUM ( C.order_quantity * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id GROUP BY A.customer_name ORDER BY cost DESC",
        "db_id": "contract"
    },
    {
        "id": 223,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Cleo', 'latest order', 'total price'], 'relations': ['customer_to_order (Cleo → orders)', 'order_recency (latest order by date)', 'order_to_price (order → total price)'], 'intent': 'retrieve_total_price_of_most_recent_order', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'currency': 'implied monetary unit (e.g., dollars, euros - from database context)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.customers': [{'column': 'customer_name'}], 'contract.orders': [{'column': 'order_id'}, {'column': 'customer_id'}, {'column': 'order_date'}], 'contract.order_details': [{'column': 'order_id'}, {'column': 'quantity'}, {'column': 'unit_price'}]}}\nA common sense reasoning question is as follows:\nWhat is the total price of Cleo's latest order?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT cost FROM ( SELECT B.order_date , SUM ( C.order_quantity * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Cleo\" GROUP BY C.order_id ) ORDER BY order_date DESC LIMIT 1",
        "db_id": "contract"
    },
    {
        "id": 224,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Cleo', 'latest order'], 'relations': ['customer_to_order (Cleo → orders)', 'order_recency (most recent by date)'], 'intent': 'calculate_total_price_of_most_recent_order', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'currency': 'USD (as per database schema)', 'conversion': 'N/A'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.orders': [{'column': 'customer_name'}, {'column': 'order_date'}, {'column': 'order_id'}], 'contract.order_details': [{'column': 'price'}]}}\nA common sense reasoning question is as follows:\nCalculate the sum price of the lastest order from Cleo.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT cost FROM ( SELECT B.order_date , SUM ( C.order_quantity * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Cleo\" GROUP BY C.order_id ) ORDER BY order_date DESC LIMIT 1",
        "db_id": "contract"
    },
    {
        "id": 225,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Cleo', 'latest order', 'each product', 'total price', '5 units'], 'relations': ['customer_to_order (Cleo → latest order)', 'order_to_products (order contains products)', 'quantity_per_product (each product has quantity 5)'], 'intent': 'calculate_total_order_price_with_fixed_quantity', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [5], 'units': {'currency': 'monetary units (implied by database schema)', 'quantity': 'units (count)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.customers': [{'column': 'customer_name'}], 'contract.orders': [{'column': 'order_date'}, {'column': 'order_id'}], 'contract.order_details': [{'column': 'product_id'}, {'column': 'quantity'}, {'column': 'unit_price'}], 'contract.products': [{'column': 'product_id'}]}}\nA hypothetical reasoning question is as follows:\nWhat is the total price of Cleo's latest order if he purchased 5 of each product?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT cost FROM ( SELECT B.order_date , SUM ( 5.0 * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Cleo\" GROUP BY C.order_id ) ORDER BY order_date DESC LIMIT 1",
        "db_id": "contract"
    },
    {
        "id": 226,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Cleo', 'each product', 'latest order', 'total cost'], 'relations': ['customer_to_order (Cleo → latest order)', 'order_to_products (latest order → purchased products)', 'product_to_quantity (each product → quantity 5)', 'product_to_price (each product → cost calculation)'], 'intent': 'calculate_total_cost_of_hypothetical_order', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5], 'units': {'currency': 'implied monetary unit (e.g., USD) from database', 'quantity': 'units (count)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.customers': [{'column': 'customer_name'}], 'contract.orders': [{'column': 'order_id'}, {'column': 'order_date'}], 'contract.order_details': [{'column': 'product_id'}, {'column': 'quantity'}], 'contract.products': [{'column': 'price'}, {'column': 'product_id'}]}}\nA hypothetical reasoning question is as follows:\nIf Cleo purchased 5 of each product, then what is the total cost of Cleo's latest order?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT cost FROM ( SELECT B.order_date , SUM ( 5.0 * D.product_price ) AS cost FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.customer_name = \"Cleo\" GROUP BY C.order_id ) ORDER BY order_date DESC LIMIT 1",
        "db_id": "contract"
    },
    {
        "id": 227,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Apple products', 'Gucci products', 'other products', 'product ID', 'product name', 'sales volume', 'sales revenue', 'total gross profit'], 'relations': ['cost_to_revenue_ratio (Apple: 40% of revenue)', 'cost_to_revenue_ratio (Gucci: 20% of revenue)', 'cost_to_revenue_ratio (other: 50% of revenue)', 'product_to_sales_metrics (each product has ID, name, volume, revenue)'], 'intent': 'calculate_and_list_product_profits', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [40, 20, 50], 'units': {'percentages': '% (cost as percentage of revenue)', 'monetary': 'currency unit (implied by sales revenue field)', 'volume_unit': 'count (implied by sales volume field)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.products': [{'column': 'id'}, {'column': 'name'}, {'column': 'brand_category'}], 'contract.sales': [{'column': 'volume'}, {'column': 'revenue'}]}}\nA common sense reasoning question is as follows:\nThe cost of Apple products is 40% of the selling price, Gucci products is 20% of the selling price, and other products is 50% of the selling price. Please list each product's ID, name, sales volume, sales revenue, and total gross profit.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 40.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"Apple\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 20.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 50.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name != \"Apple\" AND B.product_name != \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , 0 , 0 , 0 FROM ( SELECT product_id FROM Products A EXCEPT SELECT B.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id ) A JOIN Products B ON A.product_id = B.product_id",
        "db_id": "contract"
    },
    {
        "id": 228,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['products', 'Apple products', 'Gucci products', 'other products', 'product ID', 'product name', 'volume of sales', 'sales revenue', 'gross profit'], 'relations': ['brand_cost_relation (Apple products → 40% cost)', 'brand_cost_relation (Gucci products → 20% cost)', 'brand_cost_relation (other products → 50% cost)', 'gross_profit_calculation (gross profit = sales revenue - cost)'], 'intent': 'list_products_with_computed_gross_profit', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [40, 20, 50], 'units': {'percentages': '%', 'sales_volume': 'unit', 'currency': 'monetary unit (implied by database)', 'conversion': 'gross profit = revenue × (1 - cost_percentage)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.products': [{'column': 'id'}, {'column': 'name'}, {'column': 'brand'}, {'column': 'sales_volume'}, {'column': 'sales_revenue'}]}}\nA common sense reasoning question is as follows:\nList all products and product ID, name, volume of sales, sales revenue and total gross profit if Apple products cost 40% of selling price, Gucci products cost 20% of selling price and all other products cost half their sale price.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 40.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"Apple\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 20.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 50.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name != \"Apple\" AND B.product_name != \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , 0 , 0 , 0 FROM ( SELECT product_id FROM Products A EXCEPT SELECT B.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id ) A JOIN Products B ON A.product_id = B.product_id",
        "db_id": "contract"
    },
    {
        "id": 229,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Apple products', 'Gucci products', 'other products', 'product ID', 'product name', 'sales volume', 'sales revenue', 'total gross profit', '15% discount'], 'relations': ['cost_structure: Apple → 40% of selling price', 'cost_structure: Gucci → 20% of selling price', 'cost_structure: other → 50% of selling price', 'discount_effect: Apple → 15% reduction in selling price'], 'intent': 'calculate_and_list_product_financial_metrics', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [40, 20, 50, 15], 'units': {'percentages': '% (no unit conversion required)', 'currency': 'implied monetary unit from database'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.products': [{'column': 'product_id'}, {'column': 'product_name'}, {'column': 'category'}], 'contract.sales': [{'column': 'quantity_sold'}, {'column': 'unit_price'}]}}\nA hypothetical reasoning question is as follows:\nThe cost of Apple products is 40% of the selling price, Gucci products is 20% of the selling price, and other products is 50% of the selling price. If all Apple products are discounted by 15%, please list each product's ID, name, sales volume, sales revenue, and total gross profit.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * ( B.product_price * ( 1.0 - 15.0 / 100 ) ) ) AS revenue , SUM ( A.order_quantity * ( B.product_price * ( 1.0 - 15.0 / 100 ) ) ) * ( 1.0 - 40.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"Apple\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 20.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 50.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name != \"Apple\" AND B.product_name != \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , 0 , 0 , 0 FROM ( SELECT product_id FROM Products A EXCEPT SELECT B.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id ) A JOIN Products B ON A.product_id = B.product_id",
        "db_id": "contract"
    },
    {
        "id": 230,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Apple products', 'Gucci products', 'other products', '15% discount', '40% cost factor (Apple)', '20% cost factor (Gucci)', '50% cost factor (others)'], 'relations': ['brand_determines_cost (Apple → 40% of original price, Gucci → 20% of original price, others → 50% of discounted price)', 'discount_applies (all products → 15% off original price)'], 'intent': 'list_products_with_revenue_and_profit_after_discount', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [15, 40, 20, 50], 'units': {'discount_percentage': '%', 'cost_percentage': '%', 'revenue': 'monetary unit (database-specific)', 'profit': 'monetary unit (database-specific)', 'sales_volume': 'count'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.products': [{'column': 'id'}, {'column': 'name'}, {'column': 'brand'}, {'column': 'original_price'}], 'contract.sales': [{'column': 'quantity_sold'}]}}\nA hypothetical reasoning question is as follows:\nDuring an Apple sale discounting all product selling price by 15%, list all products and name, sales volume, product ID, revenue of sales and total profit gross if Apple products cost 40% of selling price, Gucci products cost 20% of selling price and all other products cost half their sale price.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * ( B.product_price * ( 1.0 - 15.0 / 100 ) ) ) AS revenue , SUM ( A.order_quantity * ( B.product_price * ( 1.0 - 15.0 / 100 ) ) ) * ( 1.0 - 40.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"Apple\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 20.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name = \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , SUM ( A.order_quantity ) AS quantity , SUM ( A.order_quantity * B.product_price ) AS revenue , SUM ( A.order_quantity * B.product_price ) * ( 1.0 - 50.0 / 100 ) AS profit FROM Order_Items A JOIN Products B ON A.product_id = B.product_id WHERE B.product_name != \"Apple\" AND B.product_name != \"gucci\" GROUP BY B.product_id UNION SELECT B.product_id , B.product_name , 0 , 0 , 0 FROM ( SELECT product_id FROM Products A EXCEPT SELECT B.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id ) A JOIN Products B ON A.product_id = B.product_id",
        "db_id": "contract"
    },
    {
        "id": 231,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['orders', 'completed orders'], 'relations': ['subset_relation (completed orders are a subset of all orders)', \"status_condition (orders.status = 'completed')\"], 'intent': 'calculate_percentage_of_completed_orders', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'result_unit': '% (percentage)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.orders': [{'column': 'order_id'}, {'column': 'status'}]}}\nA mathematical logic question is as follows:\nWhat percentage of orders have been completed?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customer_Orders ) * 100 AS percent FROM Customer_Orders WHERE order_status_code = \"Completed\"",
        "db_id": "contract"
    },
    {
        "id": 232,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['total orders', 'completed orders'], 'relations': ['completion_status (completed orders ⊆ total orders)'], 'intent': 'calculate_percentage_completed_orders', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'result_unit': '% (percentage)', 'calculation_basis': 'ratio of counts'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.orders': [{'column': 'order_id'}, {'column': 'status'}]}}\nA mathematical logic question is as follows:\nOf total orders, what percentage are completed?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customer_Orders ) * 100 AS percent FROM Customer_Orders WHERE order_status_code = \"Completed\"",
        "db_id": "contract"
    },
    {
        "id": 233,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['orders', 'year 2000', 'completed orders'], 'relations': ['temporal_filter (orders → date before 2000)', 'status_condition (orders → completed status)', 'percentage_calculation (completed orders / total orders)'], 'intent': 'calculate_percentage_of_completed_orders_under_hypothesis', 'reasoning_type': 'logical reasoning', 'numerical_values': [2000], 'units': {'time': 'year', 'percentage': 'unitless ratio'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.orders': [{'column': 'order_date'}, {'column': 'status'}]}}\nA hypothetical reasoning question is as follows:\nIf all orders before year 2000 have been completed, what percentage of orders have been completed?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100 - 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customer_Orders ) * 100 AS percent FROM Customer_Orders WHERE strftime ( \"%Y\" , order_date ) >= \"2000\" AND order_status_code != \"Completed\"",
        "db_id": "contract"
    },
    {
        "id": 234,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['total orders', 'completed orders', 'pre-2000 orders'], 'relations': ['assumption: pre-2000 → completed', 'completed_orders = pre-2000_orders + completed_post1999_orders', 'percentage = (completed_orders / total_orders) × 100'], 'intent': 'calculate_percentage_completed_orders_with_assumption', 'reasoning_type': 'ideal hypothesis reasoning, mathematical logic reasoning', 'numerical_values': [2000], 'units': {'year': 'year (for order_date filtering)', 'percentage': '% (implied by calculation)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.orders': [{'column': 'order_date'}, {'column': 'status'}]}}\nA hypothetical reasoning question is as follows:\nOf total orders, what percentage are completed assuming all pre-2000 orders are completed?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100 - 1.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM Customer_Orders ) * 100 AS percent FROM Customer_Orders WHERE strftime ( \"%Y\" , order_date ) >= \"2000\" AND order_status_code != \"Completed\"",
        "db_id": "contract"
    },
    {
        "id": 235,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['users', 'contact methods', 'first order', 'order amount'], 'relations': ['user_contact_association (users ↔ contact methods)', 'user_order_association (users ↔ orders)', 'multiple_contact_condition (contact count > 1)', 'first_order_temporal (minimum order date per user)'], 'intent': 'retrieve_users_with_multiple_contact_methods_and_their_initial_order_amount', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.users': [{'column': 'id'}, {'column': 'name'}], 'contract.contact_methods': [{'column': 'user_id'}, {'column': 'id'}], 'contract.orders': [{'column': 'user_id'}, {'column': 'amount'}, {'column': 'order_date'}]}}\nA common sense reasoning question is as follows:\nWhat are the names of users with multiple contact methods and the amount of their first order?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT customer_name , price FROM ( SELECT M.customer_id , N.customer_name , M.price , MIN ( M.order_date ) FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) M JOIN Customers N ON M.customer_id = N.customer_id WHERE M.customer_id IN ( SELECT customer_id FROM Contacts GROUP BY customer_id HAVING COUNT ( * ) > 1 ) GROUP BY M.customer_id )",
        "db_id": "contract"
    },
    {
        "id": 236,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['users', 'names', 'first order cost', 'multiple contact methods'], 'relations': ['user_to_contact_methods (users → contact methods count)', 'user_to_orders (users → first order cost)'], 'intent': 'retrieve_users_with_multiple_contact_methods_along_with_names_and_first_order_costs', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.users': [{'column': 'name'}, {'column': 'id'}], 'contract.contact_methods': [{'column': 'user_id'}, {'column': 'contact_type'}], 'contract.orders': [{'column': 'user_id'}, {'column': 'cost'}, {'column': 'order_date'}]}}\nA common sense reasoning question is as follows:\nTell me the names and first order cost of users only with multiple contact methods?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT customer_name , price FROM ( SELECT M.customer_id , N.customer_name , M.price , MIN ( M.order_date ) FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) M JOIN Customers N ON M.customer_id = N.customer_id WHERE M.customer_id IN ( SELECT customer_id FROM Contacts GROUP BY customer_id HAVING COUNT ( * ) > 1 ) GROUP BY M.customer_id )",
        "db_id": "contract"
    },
    {
        "id": 237,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Apple products before 2000', 'hypothetical price 888', 'first order', 'users with multiple contact methods'], 'relations': [\"product_brand_filter (brand = 'Apple')\", 'temporal_filter (release_year < 2000)', 'hypothetical_pricing (override original price to 888)', 'contact_method_count (user contact methods > 1)', 'temporal_ordering (earliest order per user)'], 'intent': 'calculate_hypothetical_first_order_amount_for_multi_contact_users', 'reasoning_type': 'ideal hypothesis reasoning, mathematical logic reasoning', 'numerical_values': [2000, 888], 'units': {'currency': 'implied by database schema (e.g., USD)', 'time': 'year (for product release year)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.products': [{'column': 'brand'}, {'column': 'release_year'}, {'column': 'product_id'}], 'contract.order_items': [{'column': 'product_id'}, {'column': 'quantity'}, {'column': 'unit_price'}], 'contract.orders': [{'column': 'order_id'}, {'column': 'user_id'}, {'column': 'order_date'}], 'contract.users': [{'column': 'user_id'}], 'contract.user_contacts': [{'column': 'user_id'}, {'column': 'contact_id'}]}}\nA hypothetical reasoning question is as follows:\nIf all Apple products before year 2000 were priced at 888, what is the amount of the first order for users with multiple contact methods?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT customer_name , price FROM ( SELECT M.customer_id , N.customer_name , M.price , MIN ( M.order_date ) FROM ( SELECT customer_id , order_id , order_date , SUM ( price ) AS price FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * 888.0 ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id WHERE C.product_name = \"Apple\" AND strftime ( \"%Y\" , B.order_date ) < \"2000\" GROUP BY B.customer_id , B.order_id UNION SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id WHERE C.product_name != \"Apple\" OR strftime ( \"%Y\" , B.order_date ) >= \"2000\" GROUP BY B.customer_id , B.order_id ) GROUP BY customer_id , order_id ) M JOIN Customers N ON M.customer_id = N.customer_id WHERE M.customer_id IN ( SELECT customer_id FROM Contacts GROUP BY customer_id HAVING COUNT ( * ) > 1 ) GROUP BY M.customer_id )",
        "db_id": "contract"
    },
    {
        "id": 238,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['initial order amount', 'users with multiple contact methods', 'Apple products', 'cost 888', 'before 2000'], 'relations': ['user_to_contact_method (user ↔ contact_method entries)', 'user_to_order (user ↔ order history)', 'order_to_product (order contains Apple products)', 'price_time_condition (price=888 AND order_date<2000)'], 'intent': 'retrieve_initial_order_amount_for_qualified_users', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [888, 2000], 'units': {'currency': 'implied by database schema (e.g., dollars)', 'time': \"year (for 'before 2000')\"}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.users': [{'column': 'user_id'}], 'contract.contact_methods': [{'column': 'user_id'}, {'column': 'contact_type'}], 'contract.orders': [{'column': 'order_id'}, {'column': 'user_id'}, {'column': 'order_date'}, {'column': 'amount'}], 'contract.products': [{'column': 'product_id'}, {'column': 'product_name'}, {'column': 'brand'}], 'contract.order_items': [{'column': 'order_id'}, {'column': 'product_id'}, {'column': 'unit_price'}]}}\nA hypothetical reasoning question is as follows:\nTell me the amount of the initial order only for users with multiple contact methods if all Apple products cost 888 before 2000?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT customer_name , price FROM ( SELECT M.customer_id , N.customer_name , M.price , MIN ( M.order_date ) FROM ( SELECT customer_id , order_id , order_date , SUM ( price ) AS price FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * 888.0 ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id WHERE C.product_name = \"Apple\" AND strftime ( \"%Y\" , B.order_date ) < \"2000\" GROUP BY B.customer_id , B.order_id UNION SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id WHERE C.product_name != \"Apple\" OR strftime ( \"%Y\" , B.order_date ) >= \"2000\" GROUP BY B.customer_id , B.order_id ) GROUP BY customer_id , order_id ) M JOIN Customers N ON M.customer_id = N.customer_id WHERE M.customer_id IN ( SELECT customer_id FROM Contacts GROUP BY customer_id HAVING COUNT ( * ) > 1 ) GROUP BY M.customer_id )",
        "db_id": "contract"
    },
    {
        "id": 239,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['users', 'addresses', 'postcode'], 'relations': ['user_has_addresses', 'address_associated_with_postcode', 'duration_of_address_usage'], 'intent': 'identify_users_with_multiple_addresses_and_longest_used_postcode', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'duration': 'days (or relevant time unit from database)', 'conversion': 'N/A (duration comparison only)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.users': [{'column': 'id'}, {'column': 'name'}], 'contract.addresses': [{'column': 'user_id'}, {'column': 'postcode'}, {'column': 'start_date'}, {'column': 'end_date'}]}}\nA common sense reasoning question is as follows:\nWhat are the names of users who have had multiple different addresses, and which postcode have they used the longest?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT customer_name, zip_postcode FROM (SELECT C.customer_name, B.zip_postcode, MAX (julianday (A.date_to) - julianday (A.date_from)) FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id JOIN Customers C ON C.customer_id = A.customer_id GROUP BY A.customer_id HAVING COUNT (*) > 1)",
        "db_id": "contract"
    },
    {
        "id": 240,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['users', 'addresses', 'postcode', 'duration'], 'relations': ['user_has_addresses (users → addresses)', 'address_has_duration (addresses → time period held)', 'address_has_postcode (addresses → postcode)'], 'intent': 'retrieve_users_with_multiple_addresses_and_their_longest_held_postcode', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'time': 'days (implied by date operations for duration calculation)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.users': [{'column': 'name'}, {'column': 'id'}], 'contract.addresses': [{'column': 'user_id'}, {'column': 'postcode'}, {'column': 'start_date'}, {'column': 'end_date'}]}}\nA common sense reasoning question is as follows:\nTell me the names of users who have held multiple addresses on file and which postcode each user has held the longest?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT customer_name, zip_postcode FROM (SELECT C.customer_name, B.zip_postcode, MAX (julianday (A.date_to) - julianday (A.date_from)) FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id JOIN Customers C ON C.customer_id = A.customer_id GROUP BY A.customer_id HAVING COUNT (*) > 1)",
        "db_id": "contract"
    },
    {
        "id": 241,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['users', 'addresses', 'postcode'], 'relations': ['user_address_association (users → addresses)', 'address_uniqueness_condition (single distinct address)'], 'intent': 'retrieve_users_with_only_one_distinct_address_and_their_postcode', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.users': [{'column': 'user_id'}, {'column': 'name'}], 'contract.addresses': [{'column': 'postcode'}, {'column': 'address_id'}]}}\nA common sense reasoning question is as follows:\nWhat are the names of users have never had multiple different addresses, and which postcode have they used?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT C.customer_name, B.zip_postcode FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id JOIN Customers C ON C.customer_id = A.customer_id GROUP BY A.customer_id HAVING COUNT (*) = 1",
        "db_id": "contract"
    },
    {
        "id": 242,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['users', 'addresses', 'postcode'], 'relations': ['user_has_addresses (users → addresses)', 'address_has_postcode (addresses → postcode)', 'temporal_uniqueness (max one concurrent address per user)'], 'intent': 'retrieve_users_with_single_address_history_and_their_postcodes', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.users': [{'column': 'user_id'}, {'column': 'name'}], 'contract.addresses': [{'column': 'user_id'}, {'column': 'postcode'}, {'column': 'start_date'}, {'column': 'end_date'}]}}\nA common sense reasoning question is as follows:\nTell me the names of users who have never had more than 1 address at any given time and which postcode each user held?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT C.customer_name, B.zip_postcode FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id JOIN Customers C ON C.customer_id = A.customer_id GROUP BY A.customer_id HAVING COUNT (*) = 1",
        "db_id": "contract"
    },
    {
        "id": 243,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['user', 'order', 'year 2000', 'ID', 'name', 'email', 'last order amount'], 'relations': ['user_has_orders (one-to-many relationship)', 'order_belongs_to_user (foreign key dependency)', 'temporal_constraint (since 2000)'], 'intent': 'identify_users_with_no_orders_after_2000_and_retrieve_last_order_details', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2000], 'units': {'year': 'calendar year (Gregorian calendar)', 'temporal_reference': 'YYYY-MM-DD (ISO 8601 date format for database comparison)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.users': [{'column': 'id'}, {'column': 'name'}, {'column': 'email'}], 'contract.orders': [{'column': 'user_id'}, {'column': 'order_date'}, {'column': 'amount'}]}}\nA common sense reasoning question is as follows:\nWhich user has not placed an order since 2000? List their ID, name, email, and the amount of their last order.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT customer_id , customer_name , customer_email , price AS last_order_price FROM ( SELECT M.customer_id , N.customer_name , N.customer_email , M.price , MAX ( M.order_date ) FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) M JOIN Customers N ON M.customer_id = N.customer_id WHERE M.customer_id IN ( SELECT customer_id FROM Customer_Orders GROUP BY customer_id HAVING strftime ( \"%Y\" , MAX ( order_date ) ) < \"2000\" ) GROUP BY M.customer_id )",
        "db_id": "contract"
    },
    {
        "id": 244,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['users', 'name', 'email', 'customer ID', 'most recent order total', 'orders since 2000'], 'relations': ['customer_to_orders (one-to-many relationship)', 'temporal_condition (last order date < 2000-01-01 OR no orders)'], 'intent': 'retrieve_inactive_customers_with_order_history', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2000], 'units': {'date': \"year (implicitly converted to date '2000-01-01')\", 'currency': 'implied for order total (from database schema)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.customers': [{'column': 'customer_id'}, {'column': 'name'}, {'column': 'email'}], 'contract.orders': [{'column': 'order_date'}, {'column': 'order_total'}]}}\nA common sense reasoning question is as follows:\nTell me the name, email, customer ID and most recent order total of users who have not ordered anything since 2000?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT customer_id , customer_name , customer_email , price AS last_order_price FROM ( SELECT M.customer_id , N.customer_name , N.customer_email , M.price , MAX ( M.order_date ) FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) M JOIN Customers N ON M.customer_id = N.customer_id WHERE M.customer_id IN ( SELECT customer_id FROM Customer_Orders GROUP BY customer_id HAVING strftime ( \"%Y\" , MAX ( order_date ) ) < \"2000\" ) GROUP BY M.customer_id )",
        "db_id": "contract"
    },
    {
        "id": 245,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['user', 'single order', 'points', 'total price'], 'relations': ['user_has_orders (user → orders relationship)', 'price_based_points_calculation (total_price → points mapping)'], 'intent': 'retrieve_user_with_max_points', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000, 2000, 222, 666], 'units': {'price': 'currency unit (implied by database schema, e.g., USD)', 'points': 'points (unitless)', 'calculation_rules': ['>1000: 222 points', '>2000: 222 + 666 points (additive)']}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.orders': [{'column': 'user_id'}, {'column': 'total_price'}]}}\nA common sense reasoning question is as follows:\nUsers can earn 222 points for a single order with a total price of over 1000 and another 666 points for a total price of over 2000. Which user currently has the most total points? Give me their ID.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT customer_id FROM ( SELECT customer_id , COUNT ( * ) * ( 666 + 222 ) AS points FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) WHERE price > 2000 GROUP BY customer_id UNION SELECT customer_id , COUNT ( * ) * 222 AS points FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) WHERE price > 1000 AND price < 2000 GROUP BY customer_id ) GROUP BY customer_id ORDER BY points DESC LIMIT 1",
        "db_id": "contract"
    },
    {
        "id": 246,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['user ID', 'total points', 'orders over 1000', 'orders over 2000'], 'relations': ['user_has_orders (user → orders)', 'points_calculation_rule (order_amount → points)'], 'intent': 'identify_user_with_maximum_points', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000, 2000, 222, 666], 'units': {'order_value': 'currency units (implied threshold)', 'points': 'abstract units', 'calculation': 'conditional_points = IF(order_value > 2000, 222+666, IF(order_value > 1000, 222, 0))'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.orders': [{'column': 'user_id'}, {'column': 'order_value'}, {'column': 'order_id (for aggregation context)'}]}}\nA common sense reasoning question is as follows:\nTell me the ID of the user with the most total points if all orders over 1000 earn 222 points and orders over 2000 earn and additional 666 points?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT customer_id FROM ( SELECT customer_id , COUNT ( * ) * ( 666 + 222 ) AS points FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) WHERE price > 2000 GROUP BY customer_id UNION SELECT customer_id , COUNT ( * ) * 222 AS points FROM ( SELECT B.customer_id , B.order_id , B.order_date , SUM ( A.order_quantity * C.product_price ) AS price FROM Order_Items A JOIN Customer_Orders B ON A.order_id = B.order_id JOIN Products C ON C.product_id = A.product_id GROUP BY B.customer_id , B.order_id ) WHERE price > 1000 AND price < 2000 GROUP BY customer_id ) GROUP BY customer_id ORDER BY points DESC LIMIT 1",
        "db_id": "contract"
    },
    {
        "id": 247,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['clothing', 'hardware', 'average unit price'], 'relations': ['comparison_difference (clothing_avg_price vs hardware_avg_price)'], 'intent': 'calculate_price_difference_between_categories', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'price_difference': 'currency_units (implied by database schema)', 'calculation': 'absolute_difference = AVG(clothing_price) - AVG(hardware_price)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.products': [{'column': 'category'}, {'column': 'unit_price'}]}}\nA mathematical logic question is as follows:\nHow much higher is the average unit price of clothing compared to hardware?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT clothes_avg - hw_avg AS diff FROM ( SELECT AVG ( product_price ) AS hw_avg FROM Products WHERE product_type_code = \"Hardware\" ) JOIN ( SELECT AVG ( product_price ) AS clothes_avg FROM Products WHERE product_type_code = \"Clothes\" )",
        "db_id": "contract"
    },
    {
        "id": 248,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['clothing', 'hardware', 'average prices'], 'relations': ['category_to_price (clothing → average price)', 'category_to_price (hardware → average price)', 'price_difference (clothing vs hardware)'], 'intent': 'compute_price_difference_between_categories', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'price': 'currency unit (implied by database schema)', 'conversion': 'none required'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.products': [{'column': 'category'}, {'column': 'price'}]}}\nA mathematical logic question is as follows:\nCalculate the difference in average prices between clothing and hardware?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT clothes_avg - hw_avg AS diff FROM ( SELECT AVG ( product_price ) AS hw_avg FROM Products WHERE product_type_code = \"Hardware\" ) JOIN ( SELECT AVG ( product_price ) AS clothes_avg FROM Products WHERE product_type_code = \"Clothes\" )",
        "db_id": "contract"
    },
    {
        "id": 249,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['clothing prices', 'hardware prices', 'average unit price', 'price increase'], 'relations': ['percentage_increase (clothing prices → +20%)', 'comparison_ratio (average clothing price vs average hardware price after increase)'], 'intent': 'calculate_percentage_difference_in_avg_unit_price_after_increase', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20], 'units': {'percentage': '%', 'price_unit': 'currency (implied by database)', 'difference_unit': 'percentage points or ratio'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.product_prices': [{'column': 'category'}, {'column': 'unit_price'}, {'column': 'product_type'}]}}\nA hypothetical reasoning question is as follows:\nIf clothing prices increase by 20%, how much higher is the average unit price of clothing compared to hardware?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ( 1 + 20.0 / 100 ) * clothes_avg - hw_avg AS diff FROM ( SELECT AVG ( product_price ) AS hw_avg FROM Products WHERE product_type_code = \"Hardware\" ) JOIN ( SELECT AVG ( product_price ) AS clothes_avg FROM Products WHERE product_type_code = \"Clothes\" )",
        "db_id": "contract"
    },
    {
        "id": 250,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['clothing', 'hardware', 'average price', '20% price increase', 'price difference'], 'relations': ['category_comparison (clothing vs hardware)', 'price_delta_effect (increase → new difference)', 'relative_change_calculation (percentage impact)'], 'intent': 'calculate_relative_change_in_price_difference_after_increase', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20], 'units': {'percentage': '%', 'price': 'currency unit (implied by database)', 'difference': 'currency unit', 'relative_change': 'percentage points or absolute currency (context-dependent)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.products': [{'column': 'category'}, {'column': 'price'}]}}\nA hypothetical reasoning question is as follows:\nCalculate how much higher the difference in average price is between clothing and hardware if clothing prices increase by 20%?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ( 1 + 20.0 / 100 ) * clothes_avg - hw_avg AS diff FROM ( SELECT AVG ( product_price ) AS hw_avg FROM Products WHERE product_type_code = \"Hardware\" ) JOIN ( SELECT AVG ( product_price ) AS clothes_avg FROM Products WHERE product_type_code = \"Clothes\" )",
        "db_id": "contract"
    },
    {
        "id": 251,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['users', 'address', 'state', 'capital city Frankfurt', 'female users'], 'relations': ['user_has_address (users → address)', 'address_belongs_to_state (address → state)', 'state_has_capital (state → capital city)', 'user_has_gender (users → gender)'], 'intent': 'retrieve_count_and_gender_proportion_of_users_by_state_capital', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.users': [{'column': 'id'}, {'column': 'gender'}], 'contract.addresses': [{'column': 'user_id'}, {'column': 'state_id'}], 'contract.states': [{'column': 'id'}, {'column': 'capital_city'}]}}\nA common sense reasoning question is as follows:\nHow many users have used an address in a state with a capital city of Frankfurt, and what is the proportion of females among them?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT n_total , 1.0 * n_female / n_total AS female_ratio FROM ( SELECT COUNT ( DISTINCT ( A.customer_id ) ) AS n_female FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id JOIN Contacts C ON A.customer_id = C.customer_id WHERE B.state_province_county = \"Kentucky\" AND C.gender = \"female\" ) JOIN ( SELECT COUNT ( DISTINCT ( A.customer_id ) ) AS n_total FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id WHERE B.state_province_county = \"Kentucky\" )",
        "db_id": "contract"
    },
    {
        "id": 252,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Frankfurt', 'state', 'users', 'females'], 'relations': ['city_is_capital (Frankfurt → state)', 'users_located_in_state (users → state)', 'gender_subset (females ⊆ users)'], 'intent': 'calculate_state_user_total_and_female_proportion', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'user_count': 'dimensionless count', 'proportion': 'fraction (dimensionless)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.states': [{'column': 'capital_city'}, {'column': 'state_id'}], 'contract.users': [{'column': 'state_id'}, {'column': 'gender'}, {'column': 'user_id'}]}}\nA common sense reasoning question is as follows:\nWhat is the total number of users in the state with Frankfurt as the capital city? What proportion of this total are females?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT n_total , 1.0 * n_female / n_total AS female_ratio FROM ( SELECT COUNT ( DISTINCT ( A.customer_id ) ) AS n_female FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id JOIN Contacts C ON A.customer_id = C.customer_id WHERE B.state_province_county = \"Kentucky\" AND C.gender = \"female\" ) JOIN ( SELECT COUNT ( DISTINCT ( A.customer_id ) ) AS n_total FROM Customer_Address_History A JOIN Addresses B ON A.address_id = B.address_id WHERE B.state_province_county = \"Kentucky\" )",
        "db_id": "contract"
    },
    {
        "id": 253,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['product', 'highest sales volume', 'lowest sales volume', 'sales volume difference'], 'relations': ['product_has_sales_volume (product → sales_volume)', 'comparison_difference (highest_sales_volume - lowest_sales_volume)'], 'intent': 'retrieve_top_selling_product_details_and_sales_difference', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'sales_volume': 'units (implied by database schema)', 'difference': 'units (same as sales_volume)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.products': [{'column': 'id'}, {'column': 'name'}, {'column': 'sales_volume'}]}}\nA mathematical logic question is as follows:\nWhat are the ID, name, and sales volume of the product that has the highest sales volume, and how much higher is it compared to the product with the lowest sales volume?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT t1.product_id , t1.product_name , MAX ( t1.quantity ) AS max_quantity , t2.diff FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) t1 JOIN ( SELECT MAX ( quantity ) - MIN ( quantity ) AS diff FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) ) t2",
        "db_id": "contract"
    },
    {
        "id": 254,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['product', 'sales volume', 'highest sales volume', 'lowest sales volume', 'product ID', 'product name'], 'relations': ['product_has_sales_volume (product → sales volume)', 'comparison (difference between highest and lowest sales volumes)', 'ranking (ordering of sales volumes)'], 'intent': 'retrieve_product_with_max_sales_and_compare_with_min', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'sales_volume': 'count (unitless quantity representing number of units sold)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.products': [{'column': 'product_id'}, {'column': 'product_name'}], 'contract.sales': [{'column': 'quantity'}, {'column': 'product_id'}]}}\nA mathematical logic question is as follows:\nFind me the product ID and name with the highest volume of sales, and tell me its sales volumne, and how much higher this volume is than the product with the lowest sales volume?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT t1.product_id , t1.product_name , MAX ( t1.quantity ) AS max_quantity , t2.diff FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) t1 JOIN ( SELECT MAX ( quantity ) - MIN ( quantity ) AS diff FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) ) t2",
        "db_id": "contract"
    },
    {
        "id": 255,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['product', 'highest sales volume', 'lowest sales volume', 'sales volume increase'], 'relations': ['product_has_sales_volume (product → sales_volume)', 'comparison_between_highest_and_lowest (highest vs. lowest sales volume)', 'hypothetical_increase (current sales volume + 500)'], 'intent': 'identify_top_product_and_compare_increased_sales_with_bottom_product', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [500], 'units': {'sales_volume': 'unit count', 'increase_amount': '500 units (absolute value)', 'difference': 'units (result of comparison)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.products': [{'column': 'id'}, {'column': 'name'}], 'contract.sales': [{'column': 'product_id'}, {'column': 'quantity'}]}}\nA hypothetical reasoning question is as follows:\nWhat are the ID and name of product that has the highest sales volume? If its sales volume was increased by 500, what is its sales volume and how much higher is it compared to the product with the lowest sales volume?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT t1.product_id , t1.product_name , MAX ( t1.quantity ) + 500 AS max_quantity , t2.diff + 500 FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) t1 JOIN ( SELECT MAX ( quantity ) - MIN ( quantity ) AS diff FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) ) t2",
        "db_id": "contract"
    },
    {
        "id": 256,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['product with highest sales volume', 'product with lowest sales volume', 'sales volume increase amount'], 'relations': ['ranking_by_sales (product → sales volume ordering)', 'hypothetical_increase (highest sales volume + 500)', 'comparison_difference (increased highest sales volume - lowest sales volume)'], 'intent': 'retrieve_top_product_info_and_calculate_hypothetical_scenario_comparison', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [500], 'units': {'sales_volume': 'units (implied by database schema)', 'increase_amount': 'absolute units (no conversion required)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.products': [{'column': 'id'}, {'column': 'name'}], 'contract.sales_records': [{'column': 'product_id'}, {'column': 'quantity'}]}}\nA hypothetical reasoning question is as follows:\nFind me the ID and name of the product with the highest sales volume. What would its sales volume be if it increased by 500, and how much higher would its sale volume be , relative to the product with lowest sale?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT t1.product_id , t1.product_name , MAX ( t1.quantity ) + 500 AS max_quantity , t2.diff + 500 FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) t1 JOIN ( SELECT MAX ( quantity ) - MIN ( quantity ) AS diff FROM ( SELECT A.product_id , B.product_name , SUM ( order_quantity ) AS quantity FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id UNION SELECT product_id , product_name , 0 AS quantity FROM Products WHERE product_id NOT IN ( SELECT A.product_id FROM Order_Items A JOIN Products B ON A.product_id = B.product_id GROUP BY A.product_id ) ) ) t2",
        "db_id": "contract"
    },
    {
        "id": 257,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['customer', 'order', 'credit card payment', 'service charge (5%)', 'order id'], 'relations': ['customer_places_order (customer → order)', 'payment_method_affects_charge (credit card → 5% service charge)', 'order_has_total_spend (order → calculated amount with service charge)'], 'intent': 'list_customer_order_details_with_payment_adjustment', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5], 'units': {'service_charge': '% (percentage)', 'currency': 'monetary unit (implied by amount fields)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.customers': [{'column': 'customer_name'}], 'contract.orders': [{'column': 'order_id'}, {'column': 'order_amount'}], 'contract.payments': [{'column': 'payment_method'}]}}\nA common sense reasoning question is as follows:\nA 5% service charge is required for credit card payments. List the name of each customer and how much each customer spent on each order along with the order id.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.customer_name , B.order_id , ( C.order_quantity * D.product_price ) * ( 1 + 5.0 / 100 ) AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code = \"Credit Card\" GROUP BY A.customer_name , B.order_id UNION SELECT A.customer_name , B.order_id , C.order_quantity * D.product_price AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code != \"Credit Card\" GROUP BY A.customer_name , B.order_id",
        "db_id": "contract"
    },
    {
        "id": 258,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['customer', 'order', 'credit card payment', 'service charge'], 'relations': ['customer_places_order', 'order_has_payment_method', 'service_charge_applied_to_credit_card_payments'], 'intent': 'retrieve_customer_order_payments_with_service_charge', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5], 'units': {'service_charge': '% (percentage)', 'currency': 'implied currency unit from amount fields'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.customers': [{'column': 'customer_name'}], 'contract.orders': [{'column': 'order_id'}, {'column': 'order_amount'}], 'contract.payments': [{'column': 'payment_method'}, {'column': 'payment_id'}]}}\nA common sense reasoning question is as follows:\nTell me the name of each customer and how much each customer spent on each order along with the order id, if a 5% service charge is required for all credit card payments.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.customer_name , B.order_id , ( C.order_quantity * D.product_price ) * ( 1 + 5.0 / 100 ) AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code = \"Credit Card\" GROUP BY A.customer_name , B.order_id UNION SELECT A.customer_name , B.order_id , C.order_quantity * D.product_price AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code != \"Credit Card\" GROUP BY A.customer_name , B.order_id",
        "db_id": "contract"
    },
    {
        "id": 259,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['customer', 'order', 'product', 'credit card payment', 'service charge'], 'relations': ['customer_places_order (customer → order)', 'order_contains_products (order → product)', 'payment_incurs_service_charge (credit card payment → 5% service charge)'], 'intent': 'calculate_order_total_with_service_charge', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5, 99], 'units': {'service_charge': 'percentage', 'unit_price': 'currency (base unit)', 'conversion': 'total_charge = base_amount * (1 + 0.05) for credit card payments'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.customers': [{'column': 'customer_name'}], 'contract.orders': [{'column': 'order_id'}], 'contract.order_items': [{'column': 'quantity'}], 'contract.payments': [{'column': 'payment_method'}], 'contract.products': [{'column': 'unit_price (overridden to 99 per question)'}]}}\nA hypothetical reasoning question is as follows:\nA 5% service charge is required for credit card payments. If the unit price of each product is 99, list the name of each customer and how much each customer spent on each order along with the order id.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.customer_name , B.order_id , ( C.order_quantity * 99 ) * ( 1 + 5.0 / 100 ) AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code = \"Credit Card\" GROUP BY A.customer_name , B.order_id UNION SELECT A.customer_name , B.order_id , C.order_quantity * 99 AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code != \"Credit Card\" GROUP BY A.customer_name , B.order_id",
        "db_id": "contract"
    },
    {
        "id": 260,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['customer', 'order', 'unit price', 'credit card fee'], 'relations': ['customer_places_order (customer → order)', 'order_has_payment_method (order → payment type)', 'product_has_unit_price (applies universally to all products)'], 'intent': 'retrieve_customer_order_spending_with_conditions', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [99, 5], 'units': {'unit_price': 'currency (implied)', 'fee_percentage': '% (percentage)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.customers': [{'column': 'customer_name'}], 'contract.orders': [{'column': 'order_id'}], 'contract.order_details': [{'column': 'quantity'}], 'contract.payments': [{'column': 'payment_method'}]}}\nA hypothetical reasoning question is as follows:\nTell me the name of each customer and how much each customer spent on each order along with the order id, given that the unit price of all products is 99 and we charge a 5% fee for credit card payments.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.customer_name , B.order_id , ( C.order_quantity * 99 ) * ( 1 + 5.0 / 100 ) AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code = \"Credit Card\" GROUP BY A.customer_name , B.order_id UNION SELECT A.customer_name , B.order_id , C.order_quantity * 99 AS cost_plus_fee FROM Customers A JOIN Customer_Orders B ON A.customer_id = B.customer_id JOIN Order_Items C ON B.order_id = C.order_id JOIN Products D ON C.product_id = D.product_id WHERE A.payment_method_code != \"Credit Card\" GROUP BY A.customer_name , B.order_id",
        "db_id": "contract"
    },
    {
        "id": 261,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['year', 'annual sales revenue'], 'relations': ['year_revenue_association (year → annual sales revenue)'], 'intent': 'retrieve_annual_sales_by_year', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'revenue': 'currency unit (implied by database schema)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.sales': [{'column': 'year'}, {'column': 'annual_revenue'}]}}\nA common sense reasoning question is as follows:\nList the year in record and the annual sales revenue for each year.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT strftime ( \"%Y\" , A.order_date ) AS year , SUM ( B.order_quantity * C.product_price ) AS annual_sales_revenue FROM Customer_Orders A JOIN Order_Items B ON A.order_id = B.order_id JOIN Products C ON B.product_id = C.product_id GROUP BY strftime ( \"%Y\" , A.order_date )",
        "db_id": "contract"
    },
    {
        "id": 262,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['year in record', 'annual sales revenue'], 'relations': ['year_revenue_correlation (each year maps to its sales revenue)'], 'intent': 'retrieve_annual_sales_data', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'revenue': 'currency unit (implied by database schema)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.sales_data': [{'column': 'year'}, {'column': 'annual_revenue'}]}}\nA common sense reasoning question is as follows:\nTell me the year in record and corresponding annual sales revenue.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT strftime ( \"%Y\" , A.order_date ) AS year , SUM ( B.order_quantity * C.product_price ) AS annual_sales_revenue FROM Customer_Orders A JOIN Order_Items B ON A.order_id = B.order_id JOIN Products C ON B.product_id = C.product_id GROUP BY strftime ( \"%Y\" , A.order_date )",
        "db_id": "contract"
    },
    {
        "id": 263,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Apple products', 'highest price', 'lowest price', 'variance'], 'relations': ['product_brand (Apple products → brand filter)', 'price_aggregation (statistical computation across products)'], 'intent': 'retrieve_aggregate_price_statistics_for_brand', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'price': 'currency unit (implied from database schema)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.products': [{'column': 'brand'}, {'column': 'price'}]}}\nA common sense reasoning question is as follows:\nList the highest price, lowest price, and variance of Apple products.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT max_price , min_price , variance FROM ( SELECT 1.0 * ( product_price - AVG ( product_price ) ) * ( product_price - AVG ( product_price ) ) / COUNT ( * ) AS variance FROM Products WHERE product_name = \"Apple\" ) JOIN ( SELECT MAX ( product_price ) AS max_price , MIN ( product_price ) AS min_price FROM Products WHERE product_name = \"Apple\" )",
        "db_id": "contract"
    },
    {
        "id": 264,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Apple products', 'price'], 'relations': ['brand_filter (products → Apple brand restriction)', 'price_aggregation (min/max/variance calculation across Apple products)'], 'intent': 'retrieve_price_statistics_for_apple_products', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'price': 'currency unit (implied by database schema)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'contract.products': [{'column': 'brand'}, {'column': 'price'}]}}\nA common sense reasoning question is as follows:\nConsidering only Apple products tell me the highest and lowest prices and also the variance across the Apple range.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT max_price , min_price , variance FROM ( SELECT 1.0 * ( product_price - AVG ( product_price ) ) * ( product_price - AVG ( product_price ) ) / COUNT ( * ) AS variance FROM Products WHERE product_name = \"Apple\" ) JOIN ( SELECT MAX ( product_price ) AS max_price , MIN ( product_price ) AS min_price FROM Products WHERE product_name = \"Apple\" )",
        "db_id": "contract"
    },
    {
        "id": 265,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['singer', 'song \"Gentleman\"', 'age at release time'], 'relations': ['singer_performs_song (singer → song)', 'age_calculation (birth_date, release_date → age)'], 'intent': 'retrieve_singer_names_and_ages_for_specific_song', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'age': 'years', 'date': 'date format (YYYY-MM-DD)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.singers': [{'column': 'name'}, {'column': 'birth_date'}], 'concert.songs': [{'column': 'release_date'}, {'column': 'title'}], 'concert.song_performances': [{'column': 'singer_id'}, {'column': 'song_id'}]}}\nA common sense reasoning question is as follows:\nList the name and age of each singer at the time of the release of the song \"Gentleman\".\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name , Age + ( SELECT Song_release_year FROM singer WHERE Song_Name = \"Gentleman\" ) - strftime ( \"%Y\" , \"now\" ) AS target_age FROM singer",
        "db_id": "concert"
    },
    {
        "id": 266,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['song \"Gentleman\"', 'singers', 'names', 'ages'], 'relations': ['song_to_release (Gentleman → associated release)', 'release_to_singers (release → performing artists)', 'singers_to_biographical_data (artists → names/birthdates)'], 'intent': 'retrieve_artist_biographical_data_for_specific_song_release', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': None, 'units': {'age': 'years (implied by date difference calculation)', 'conversion': 'age = (release_date - birth_date) in years'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.songs': [{'column': 'song_title'}, {'column': 'release_id'}], 'concert.artists': [{'column': 'artist_name'}, {'column': 'birth_date'}], 'concert.releases': [{'column': 'release_date'}], 'concert.release_artists': [{'column': 'artist_id'}]}}\nA common sense reasoning question is as follows:\nWhat were the names and ages of all singers of the release of the song \"Gentleman\"\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name , Age + ( SELECT Song_release_year FROM singer WHERE Song_Name = \"Gentleman\" ) - strftime ( \"%Y\" , \"now\" ) AS target_age FROM singer",
        "db_id": "concert"
    },
    {
        "id": 267,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': [\"song 'Gentleman'\", '21st century', 'release year (2001)', 'singers', 'age at release'], 'relations': [\"song_release_year ('Gentleman' → 2001)\", 'artist_performance (singer → song)', 'age_calculation (birth year → 2001 → age)'], 'intent': 'list_singer_names_and_ages_for_song_at_release_year', 'reasoning_type': 'common sense understanding reasoning, mathematical logic reasoning', 'numerical_values': [2001], 'units': {'time': 'years', 'age_calculation': 'age = release_year - birth_year'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.songs': [{'column': 'title'}, {'column': 'release_year'}], 'concert.artists': [{'column': 'name'}, {'column': 'birth_year'}], 'concert.song_artist': [{'column': 'song_id'}, {'column': 'artist_id'}]}}\nA hypothetical reasoning question is as follows:\nIf the song \"Gentleman\" was released in the first year of the 21st century, list the name and age of each singer at the time of the song's release.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name , Age + 2001 - strftime ( \"%Y\" , \"now\" ) AS target_age FROM singer",
        "db_id": "concert"
    },
    {
        "id": 268,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['song \"Gentleman\"', 'release year 2001', 'singers', 'ages at release'], 'relations': ['song_to_singer (Gentleman → singers)', 'age_calculation (birth year → age at 2001)'], 'intent': 'retrieve_singer_names_and_ages_at_song_release', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2001], 'units': {'time': 'years (for age calculation)', 'reference': 'first year of 21st century = 2001 CE'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.songs': [{'column': 'title'}, {'column': 'release_year'}], 'concert.artists': [{'column': 'name'}, {'column': 'birth_year'}], 'concert.song_artists': [{'column': 'song_id'}, {'column': 'artist_id'}]}}\nA hypothetical reasoning question is as follows:\nAssuming that the song \"Gentleman\" was released in the first year of the 21st century, what were the names and ages of all its singers at the time of its release?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name , Age + 2001 - strftime ( \"%Y\" , \"now\" ) AS target_age FROM singer",
        "db_id": "concert"
    },
    {
        "id": 269,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['participating singers', 'concert theme \"Free choice\"'], 'relations': ['singers_participate_in_concert (singers → concert)', 'concert_has_theme (concert → theme)'], 'intent': 'retrieve_names_and_ages_of_singers_for_specific_concert_theme', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'age': 'years (implied output unit)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'theme'}, {'column': 'concert_id'}], 'concert.singers': [{'column': 'name'}, {'column': 'age OR singers.birth_date (with date calculation)'}], 'concert.participation': [{'column': 'concert_id'}, {'column': 'singer_id'}]}}\nA common sense reasoning question is as follows:\nWhat are the names and ages of the participating singers in the concert with the theme of \"Free choice\" at that time?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT C.Name , C.Age + ( A.Year - strftime ( \"%Y\" , \"now\" ) ) AS age_at_concert FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID WHERE A.Theme = \"Free choice\"",
        "db_id": "concert"
    },
    {
        "id": 270,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['singers', \"concert with theme 'Free Choice'\", 'names of singers', 'ages of singers at concert time'], 'relations': ['participation (singers → concert)', 'theme_belonging (concert → theme)', 'age_calculation (birth_date to concert_date)'], 'intent': 'retrieve_names_and_ages_of_participating_singers', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'age': 'years (calculated from date difference)', 'date_format': 'YYYY-MM-DD (ISO standard)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.singers': [{'column': 'name'}, {'column': 'birth_date'}], 'concert.concerts': [{'column': 'date'}, {'column': 'theme_id'}], 'concert.themes': [{'column': 'theme_name'}], 'concert.participations': [{'column': 'singer_id'}, {'column': 'concert_id'}]}}\nA common sense reasoning question is as follows:\nWhat were the names and ages of all singers who participated in the \"Free Choice\" themed concert at the time of the concert?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT C.Name , C.Age + ( A.Year - strftime ( \"%Y\" , \"now\" ) ) AS age_at_concert FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID WHERE A.Theme = \"Free choice\"",
        "db_id": "concert"
    },
    {
        "id": 271,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['singers born before 1985', 'concert with theme \"Free Choice\"', 'participating singers'], 'relations': ['birth_year_filter (singers → born before 1985)', \"concert_theme_match (concert → theme = 'Free Choice')\", 'participation_relation (singers → concert)'], 'intent': 'retrieve_names_and_ages_of_participating_singers', 'reasoning_type': 'ideal hypothesis reasoning, mathematical logic reasoning', 'numerical_values': [1985], 'units': {'age': 'years', 'year': 'calendar year'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.singers': [{'column': 'name'}, {'column': 'birth_year'}], 'concert.concerts': [{'column': 'theme'}, {'column': 'date'}], 'concert.participations': [{'column': 'singer_id'}, {'column': 'concert_id'}]}}\nA hypothetical reasoning question is as follows:\nIf all singers born before 1985 participated in the \"Free Choice\" themed concert, what are the names and ages of the participating singers in the concert with the theme of \"Free choice\" at that time?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT C.Name , C.Age + ( ( SELECT Year FROM concert WHERE Theme = \"Free choice\" ) - strftime ( \"%Y\" , \"now\" ) ) AS age_at_concert FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID WHERE A.Theme = \"Free choice\" OR strftime ( \"%Y\" , \"now\" ) - C.Age < 1985 GROUP BY C.Name",
        "db_id": "concert"
    },
    {
        "id": 272,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['singers born before 1985', '\"Free Choice\" themed concert', 'names of singers', 'ages at concert time'], 'relations': ['birth_year_before_threshold (birth year < 1985 → participation eligibility)', \"concert_theme_participation (theme = 'Free Choice' → event filter)\", 'age_calculation (concert_date - birth_date → age)'], 'intent': 'retrieve_names_and_ages_of_eligible_participants', 'reasoning_type': 'ideal hypothesis reasoning', 'numerical_values': [1985], 'units': {'birth_year': 'year (integer)', 'age': 'years (derived from date difference)', 'date': 'YYYY-MM-DD format (for birth_date and concert_date)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.singers': [{'column': 'name'}, {'column': 'birth_date'}], 'concert.concerts': [{'column': 'date'}, {'column': 'theme'}], 'concert.participations': [{'column': 'singer_id'}, {'column': 'concert_id'}]}}\nA hypothetical reasoning question is as follows:\nAssuming that all the singers born before 1985 participated in the \"Free Choice\" themed concert, what were the names and ages of all the singers who took part at the time of the concert?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT C.Name , C.Age + ( ( SELECT Year FROM concert WHERE Theme = \"Free choice\" ) - strftime ( \"%Y\" , \"now\" ) ) AS age_at_concert FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID WHERE A.Theme = \"Free choice\" OR strftime ( \"%Y\" , \"now\" ) - C.Age < 1985 GROUP BY C.Name",
        "db_id": "concert"
    },
    {
        "id": 273,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['earliest concert'], 'relations': ['time_elapsed_since (earliest concert → current date)'], 'intent': 'calculate_years_since_oldest_recorded_concert', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'temporal': 'years (time difference calculation)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'start_time'}]}}\nA common sense reasoning question is as follows:\nHow many years has it been since the earliest concert?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT strftime ( \"%Y\" , \"now\" ) - MIN ( Year ) AS years FROM concert",
        "db_id": "concert"
    },
    {
        "id": 274,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['first concert', 'current time'], 'relations': ['chronological_order (first concert → earliest occurrence)', 'time_difference (between first concert and now)'], 'intent': 'calculate_time_elapsed_since_earliest_concert', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'time': 'years', 'calculation': 'current_year - MIN(concert_year)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'concert_date'}]}}\nA common sense reasoning question is as follows:\nHow many years ago did the first concert occur?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT strftime ( \"%Y\" , \"now\" ) - MIN ( Year ) AS years FROM concert",
        "db_id": "concert"
    },
    {
        "id": 275,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Wide Awake concert', 'earliest concert'], 'relations': ['temporal_adjustment (held 3 years earlier)', 'time_difference (years since earliest concert)'], 'intent': 'calculate_adjusted_time_gap_from_earliest_event', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3], 'units': {'time': 'years', 'operation': 'date subtraction'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'theme'}, {'column': 'concert_date'}]}}\nA hypothetical reasoning question is as follows:\nIf the \"Wide Awake\" themed concert was held three years earlier, how many years has it been since the earliest concert?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT strftime ( \"%Y\" , \"now\" ) - MIN ( Year ) AS years FROM ( SELECt Year - 3 AS Year FROM concert WHERE Theme = \"Wide Awake\" UNION ALL SELECT Year FROM concert WHERE Theme != \"Wide Awake\" )",
        "db_id": "concert"
    },
    {
        "id": 276,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['earliest concert', \"concert with theme 'Wide Awake'\"], 'relations': ['time_difference (Wide Awake concert occurred 3 years before earliest concert)', 'temporal_sequence (Wide Awake → earliest concert)'], 'intent': 'calculate_years_ago_of_earliest_concert_relative_to_Wide_Awake', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3], 'units': {'time': 'years', 'calculation': 'years_ago = (current_year - earliest_concert_year) + 3'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'theme'}, {'column': 'date'}, {'column': 'year'}]}}\nA hypothetical reasoning question is as follows:\nHow many years ago did the earliest concert occur if the concert with the theme \"Wide Awake\" took place three years earlier?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT strftime ( \"%Y\" , \"now\" ) - MIN ( Year ) AS years FROM ( SELECt Year - 3 AS Year FROM concert WHERE Theme = \"Wide Awake\" UNION ALL SELECT Year FROM concert WHERE Theme != \"Wide Awake\" )",
        "db_id": "concert"
    },
    {
        "id": 277,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['\"Home Visits\" concert', 'singers', '20th anniversary'], 'relations': ['participation (singers → \"Home Visits\" concert)', 'age_calculation (birth_date → anniversary_age)'], 'intent': 'retrieve_singer_names_and_age_at_anniversary', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [20], 'units': {'time_offset': 20, 'time_unit': 'years', 'age_unit': 'years', 'calculation': 'anniversary_date = concert_date + 20 years, age = anniversary_date - birth_date'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'concert_name'}, {'column': 'concert_date'}], 'concert.singers': [{'column': 'singer_name'}, {'column': 'birth_date'}], 'concert.concert_participants': [{'column': 'concert_id'}, {'column': 'singer_id'}]}}\nA common sense reasoning question is as follows:\nWhat are the names of the singer participating in the \"Home Visits\" concert, and how old will they be on its 20th anniversary?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT C.Name , A.Year - strftime ( \"%Y\" , \"now\" ) + C.Age + 20 AS target_age FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID WHERE A.concert_Name = \"Home Visits\"",
        "db_id": "concert"
    },
    {
        "id": 278,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Home Visits concert', 'singer', '20th anniversary'], 'relations': ['concert_singer (Home Visits → performer)', 'concert_date (Home Visits → date)', 'singer_birth (singer → birth date)', 'anniversary_calculation (concert_date + 20 years)'], 'intent': 'retrieve_singer_name_and_age_on_anniversary', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20], 'units': {'time': 'years', 'age_calculation': 'age = (anniversary_year - birth_year) - adjustment_for_exact_date', 'anniversary_offset': '20 years'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'concert_name'}, {'column': 'concert_date'}, {'column': 'singer_id'}], 'concert.singers': [{'column': 'singer_id'}, {'column': 'singer_name'}, {'column': 'birth_date'}]}}\nA common sense reasoning question is as follows:\nWhat are the names of the \"Home Visits\" concert singer, and how old will they be on its 20th anniversary?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT C.Name , A.Year - strftime ( \"%Y\" , \"now\" ) + C.Age + 20 AS target_age FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID WHERE A.concert_Name = \"Home Visits\"",
        "db_id": "concert"
    },
    {
        "id": 279,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['singers', 'Stark Park concerts', 'Home Visits concert', '20th anniversary'], 'relations': ['participation_in (singer → Stark Park concert)', 'participation_in (singer → Home Visits concert)', 'conditional_participation (IF Stark Park THEN Home Visits)', 'age_calculation (singer_birthdate → 20th_anniversary_date)'], 'intent': 'find_singer_names_and_future_ages_with_conditional_participation', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20], 'units': {'time': 'years (age calculation)', 'date_arithmetic': 'concert_date + 20 years'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.singers': [{'column': 'name'}, {'column': 'birthdate'}], 'concert.concerts': [{'column': 'name'}, {'column': 'date'}, {'column': 'location'}], 'concert.participation': [{'column': 'singer_id'}, {'column': 'concert_id'}]}}\nA hypothetical reasoning question is as follows:\nIf all the singers who participated in concerts held in Stark Park also participated in the \"Home Visits\" concert, what are the names of the singer participating in the \"Home Visits\" concert, and how old will they be on its 20th anniversary?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT C.Name , ( SELECT Year FROM concert WHERE concert_Name = \"Home Visits\" ) - strftime ( \"%Y\" , \"now\" ) + C.Age + 20 AS target_age FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID WHERE A.concert_Name = \"Home Visits\" OR B.Singer_ID IN ( SELECT C.Singer_ID FROM concert A JOIN stadium B ON A.Stadium_ID = B.Stadium_ID JOIN singer_in_concert C ON A.concert_ID = C.concert_ID WHERE B.Name = \"Stark's Park\" ) GROUP BY B.Singer_ID",
        "db_id": "concert"
    },
    {
        "id": 280,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Home Visits concert', '20th anniversary', 'singers', 'Stark Park concerts'], 'relations': ['concert_to_singers (Home Visits → performers)', 'concert_location (Stark Park → concerts)', 'singer_participation (singers in both Home Visits and Stark Park concerts)', 'anniversary_date_calculation (original date + 20 years)'], 'intent': 'retrieve_names_and_ages_of_singers_for_anniversary_event_with_participation_condition', 'reasoning_type': 'temporal reasoning and set-based reasoning', 'numerical_values': [20], 'units': {'time': 'years', 'age_calculation': 'current age + (anniversary year - original concert year)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'concert_name'}, {'column': 'location'}, {'column': 'date'}], 'concert.performances': [{'column': 'concert_id'}, {'column': 'singer_id'}], 'concert.singers': [{'column': 'singer_id'}, {'column': 'name'}, {'column': 'birth_date'}]}}\nA hypothetical reasoning question is as follows:\nWhat will be the ages and names of the \"Home Visits\" concert singers on its 20th anniversary, if all the singers who performed at concerts in Stark Park also took part in it?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT C.Name , ( SELECT Year FROM concert WHERE concert_Name = \"Home Visits\" ) - strftime ( \"%Y\" , \"now\" ) + C.Age + 20 AS target_age FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID WHERE A.concert_Name = \"Home Visits\" OR B.Singer_ID IN ( SELECT C.Singer_ID FROM concert A JOIN stadium B ON A.Stadium_ID = B.Stadium_ID JOIN singer_in_concert C ON A.concert_ID = C.concert_ID WHERE B.Name = \"Stark's Park\" ) GROUP BY B.Singer_ID",
        "db_id": "concert"
    },
    {
        "id": 281,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Balmoor stadium', 'Hampden Park stadium', 'ticket sales', '20 dollars (ticket price)', '5.5 dollars (ticket price)'], 'relations': ['stadium_to_capacity (Balmoor → seat count)', 'stadium_to_capacity (Hampden Park → seat count)', 'revenue_calculation (capacity × ticket_price per stadium)'], 'intent': 'calculate_total_revenue_at_full_occupancy', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20, 5.5], 'units': {'currency': 'dollars (USD)', 'conversion': '1 dollar = 1 (base unit)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.stadiums': [{'column': 'stadium_name'}, {'column': 'capacity'}]}}\nA common sense reasoning question is as follows:\nWhen all tickets sold out, how much money can be made from ticket sales at the Balmoor stadium with a ticket price of 20 dollars and the Hampden Park stadium with a ticket price of 5.5 dollars?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Capacity * 20 + ( SELECT Capacity * 5.5 FROM stadium WHERE Name = \"Hampden Park\" ) AS total FROM stadium WHERE Name = \"Balmoor\"",
        "db_id": "concert"
    },
    {
        "id": 282,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Balmoor stadium', 'Hampden Park stadium', 'ticket price $20', 'ticket price $5.5', 'all tickets sold out'], 'relations': ['stadium_to_price (Balmoor → $20)', 'stadium_to_price (Hampden Park → $5.5)', 'stadium_to_capacity (Balmoor → ?)', 'stadium_to_capacity (Hampden Park → ?)', 'revenue_calculation (price × capacity)'], 'intent': 'calculate_total_revenue_from_ticket_sales', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20, 5.5], 'units': {'currency': 'USD ($)', 'capacity': 'number of tickets', 'revenue': 'USD ($)', 'conversion': 'revenue = ticket_price × capacity'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.stadiums': [{'column': 'name'}, {'column': 'capacity'}]}}\nA common sense reasoning question is as follows:\nIf the ticket price for Balmoor stadium is $20 and for Hampden Park stadium is $5.5, and all tickets are sold out, how much money can be generated from ticket sales?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Capacity * 20 + ( SELECT Capacity * 5.5 FROM stadium WHERE Name = \"Hampden Park\" ) AS total FROM stadium WHERE Name = \"Balmoor\"",
        "db_id": "concert"
    },
    {
        "id": 283,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Hampden Park stadium', 'Balmoor stadium', 'ticket sales', 'stadium capacity', 'ticket price'], 'relations': ['capacity_relation (Hampden Park capacity = 2 × Balmoor capacity)', 'revenue_calculation (revenue = capacity × ticket_price)'], 'intent': 'calculate_total_revenue_from_ticket_sales', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20, 5.5, 2], 'units': {'currency': 'dollars', 'capacity': 'number of seats', 'revenue': 'dollars'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.stadiums': [{'column': 'stadium_name'}, {'column': 'capacity'}]}}\nA hypothetical reasoning question is as follows:\nIf the capacity of the Hampden Park stadium is twice that of the Balmoor stadium, when all tickets sold out, how much money can be made from ticket sales at the Balmoor stadium with a ticket price of 20 dollars and the Hampden Park stadium with a ticket price of 5.5 dollars?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Capacity * 20 + 2 * Capacity * 5.5 AS total FROM stadium WHERE Name = \"Balmoor\"",
        "db_id": "concert"
    },
    {
        "id": 284,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Balmoor stadium', 'Hampden Park stadium', 'ticket price', 'capacity', 'total revenue'], 'relations': ['Hampden_has_twice_capacity_of_Balmoor', 'revenue_Balmoor = ticket_price_Balmoor × capacity_Balmoor', 'revenue_Hampden = ticket_price_Hampden × capacity_Hampden'], 'intent': 'calculate_total_revenue_from_ticket_sales', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20, 5.5, 2], 'units': {'currency': 'USD (US Dollars)', 'capacity': 'number of seats (count)', 'revenue': 'USD', 'conversion_notes': 'No unit conversions required; all monetary values in USD'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.stadiums': [{'column': 'name'}, {'column': 'capacity'}]}}\nA hypothetical reasoning question is as follows:\nAssuming the ticket price for Balmoor stadium is $20 and for Hampden Park stadium is $5.5, and if the Hampden Park stadium has twice the capacity of the Balmoor stadium, what would be the total revenue generated from ticket sales if all tickets are sold out at both stadiums?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Capacity * 20 + 2 * Capacity * 5.5 AS total FROM stadium WHERE Name = \"Balmoor\"",
        "db_id": "concert"
    },
    {
        "id": 285,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['singers born before 1980', 'singers born after 1980', 'Somerset Park stadium'], 'relations': ['birth_year_to_earnings (<1980 → $355/concert)', 'birth_year_to_earnings (>1980 → $228/concert)', 'concert_to_stadium (Somerset Park venue)', 'singer_to_concert (performance relationship)'], 'intent': 'calculate_total_payment_for_concerts_at_specified_venue', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1980, 355, 228], 'units': {'currency': 'USD', 'conversion': 'Direct monetary calculation (no unit conversion needed)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.singers': [{'column': 'singer_id'}, {'column': 'birth_year'}], 'concert.concerts': [{'column': 'concert_id'}, {'column': 'venue'}], 'concert.performances': [{'column': 'concert_id'}, {'column': 'singer_id'}]}}\nA common sense reasoning question is as follows:\nSingers born before 1980 earn $355 per concert, while singers born after 1980 earn $228 per concert. How much was spent on paying the singers for the concerts held in Somerset Park stadium?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p1 + p2 AS cost FROM ( SELECT 355 * ( COUNT ( * ) ) AS p1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND strftime ( \"%Y\" , \"now\" ) - C.Age < 1980 ) JOIN ( SELECT 228 * ( COUNT ( * ) ) AS p2 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND strftime ( \"%Y\" , \"now\" ) - C.Age >= 1980 )",
        "db_id": "concert"
    },
    {
        "id": 286,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Somerset Park stadium', 'singers', 'concerts', 'expenditure', 'birth year (before/after 1980)'], 'relations': ['concert_venue (concerts → Somerset Park stadium)', 'singer_payment (birth year → fee amount)', 'performance_relationship (singers → concerts)'], 'intent': 'calculate_total_expenditure_for_venue', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1980, 355, 228], 'units': {'currency': 'USD', 'birth_year': 'year', 'fee_structure': {'born_before_1980': '$355 per concert', 'born_after_1980': '$228 per concert'}}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'venue_id'}, {'column': 'concert_id'}], 'concert.singers': [{'column': 'singer_id'}, {'column': 'birth_date'}], 'concert.concert_performances': [{'column': 'concert_id'}, {'column': 'singer_id'}]}}\nA common sense reasoning question is as follows:\nWhat was the total expenditure on paying singers for concerts held at Somerset Park stadium, given that singers born before 1980 earned $355 per concert and those born after 1980 earned $228 per concert?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p1 + p2 AS cost FROM ( SELECT 355 * ( COUNT ( * ) ) AS p1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND strftime ( \"%Y\" , \"now\" ) - C.Age < 1980 ) JOIN ( SELECT 228 * ( COUNT ( * ) ) AS p2 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND strftime ( \"%Y\" , \"now\" ) - C.Age >= 1980 )",
        "db_id": "concert"
    },
    {
        "id": 287,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Somerset Park stadium', 'Justin Brown', 'John Nizinik', 'concerts', 'singers'], 'relations': ['concert_held_at (concerts → stadium)', 'singer_performed_in (singer → concert)', 'age_difference (Justin Brown is 3 years older than John Nizinik)'], 'intent': 'calculate_total_payment_for_concerts', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1980, 355, 228, 3], 'units': {'currency': 'USD', 'age': 'years'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'stadium'}, {'column': 'singer_id'}, {'column': 'concert_count (or equivalent for aggregation)'}], 'concert.singers': [{'column': 'singer_id'}, {'column': 'name'}, {'column': 'birth_year'}]}}\nA hypothetical reasoning question is as follows:\nSingers born before 1980 earn $355 per concert, while singers born after 1980 earn $228 per concert. If Justin Brown is 3 years older than John Nizinik, how much was spent on paying the singers for the concerts held in Somerset Park stadium?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p1 + p2 AS cost FROM ( SELECT 355 * ( COUNT ( * ) ) AS p1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year < 1980 ) JOIN ( SELECT 228 * ( COUNT ( * ) ) AS p2 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year >= 1980 )",
        "db_id": "concert"
    },
    {
        "id": 288,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Justin Brown', 'John Nizinik', 'Somerset Park stadium', 'singers', 'concerts', 'birth years', 'payment rates'], 'relations': ['age_difference (Justin Brown is 3 years older than John Nizinik → birth_year_Justin = birth_year_John - 3)', 'performance_venue (concerts held at Somerset Park stadium)', 'payment_rule (singers born before 1980: $355/concert, after 1980: $228/concert)'], 'intent': 'calculate_total_expenditure_for_singers', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3, 1980, 355, 228], 'units': {'age': 'years', 'currency': 'USD (dollars)', 'threshold': '1980 (birth year boundary)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.singers': [{'column': 'singer_id'}, {'column': 'name'}, {'column': 'birth_year'}], 'concert.concerts': [{'column': 'concert_id'}, {'column': 'venue'}], 'concert.concert_performances': [{'column': 'concert_id'}, {'column': 'singer_id'}]}}\nA hypothetical reasoning question is as follows:\nIf Justin Brown was 3 years older than John Nizinik, what was the total expenditure on paying singers for concerts held at Somerset Park stadium, given that singers born before 1980 earned $355 per concert and those born after 1980 earned $228 per concert?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p1 + p2 AS cost FROM ( SELECT 355 * ( COUNT ( * ) ) AS p1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year < 1980 ) JOIN ( SELECT 228 * ( COUNT ( * ) ) AS p2 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year >= 1980 )",
        "db_id": "concert"
    },
    {
        "id": 289,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['stadiums', 'average attendance rates', 'concerts'], 'relations': ['stadium_has_attendance (stadium → average attendance rate)', 'stadium_hosts_concerts (stadium → concerts)'], 'intent': 'identify_extreme_attendance_stadiums_with_concert_counts', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'attendance': 'implied numerical count (e.g., people)', 'rate_calculation': 'average = total_attendance / total_events'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.stadiums': [{'column': 'stadium_id'}, {'column': 'name'}], 'concert.concerts': [{'column': 'stadium_id'}, {'column': 'attendance'}, {'column': 'event_id'}]}}\nA common sense reasoning question is as follows:\nWhich stadiums have the lowest and highest average attendance rates respectively, and how many concerts have they each held?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM ( SELECT Name AS highest_name FROM stadium GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity DESC LIMIT 1 ) JOIN ( SELECT COUNT ( * ) AS concerts_in_highest_stadium FROM stadium A JOIN concert B ON A.Stadium_ID = B.Stadium_ID WHERE A.Stadium_ID = ( SELECT Stadium_ID FROM stadium GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity DESC LIMIT 1 ) ) JOIN ( SELECT Name AS lowest_name FROM stadium GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity ASC LIMIT 1 ) JOIN ( SELECT COUNT ( * ) AS concerts_in_lowest_stadium FROM stadium A JOIN concert B ON A.Stadium_ID = B.Stadium_ID WHERE A.Stadium_ID = ( SELECT Stadium_ID FROM stadium GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity ASC LIMIT 1 ) )",
        "db_id": "concert"
    },
    {
        "id": 290,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['stadiums', 'average attendance rates', 'concerts'], 'relations': ['stadium_to_attendance (stadium → average_attendance_rate)', 'stadium_to_concert_count (stadium → number_of_concerts)'], 'intent': 'retrieve_stadiums_with_extreme_attendance_and_concert_counts', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'attendance_rate': 'average number of attendees per event (unit: count)', 'concert_count': 'number of events (unit: count)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.stadiums': [{'column': 'stadium_id'}, {'column': 'name'}], 'concert.concerts': [{'column': 'stadium_id'}, {'column': 'attendance'}]}}\nA common sense reasoning question is as follows:\nWhat are the names of the stadiums with the highest and lowest average attendance rates, and how many concerts have been held in each of them?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM ( SELECT Name AS highest_name FROM stadium GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity DESC LIMIT 1 ) JOIN ( SELECT COUNT ( * ) AS concerts_in_highest_stadium FROM stadium A JOIN concert B ON A.Stadium_ID = B.Stadium_ID WHERE A.Stadium_ID = ( SELECT Stadium_ID FROM stadium GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity DESC LIMIT 1 ) ) JOIN ( SELECT Name AS lowest_name FROM stadium GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity ASC LIMIT 1 ) JOIN ( SELECT COUNT ( * ) AS concerts_in_lowest_stadium FROM stadium A JOIN concert B ON A.Stadium_ID = B.Stadium_ID WHERE A.Stadium_ID = ( SELECT Stadium_ID FROM stadium GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity ASC LIMIT 1 ) )",
        "db_id": "concert"
    },
    {
        "id": 291,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Gayfield Park stadium', 'Hampden Park stadium', 'stadiums', 'average attendance rates', 'concerts'], 'relations': ['capacity_ratio (Gayfield Park = 0.1 × Hampden Park)', 'stadium_to_attendance (stadium → average attendance rate)', 'stadium_to_concerts (stadium → number of concerts held)'], 'intent': 'identify_stadiums_with_min_max_avg_attendance_and_their_concert_counts_under_hypothetical_capacity', 'reasoning_type': 'ideal hypothesis reasoning', 'numerical_values': [0.1], 'units': {'capacity_ratio': 'unitless (0.1 represents 1/10)', 'attendance_rate': 'percentage or ratio (implied by attendance/capacity)', 'concert_count': 'count'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.stadiums': [{'column': 'stadium_id'}, {'column': 'name'}, {'column': 'capacity'}], 'concert.events': [{'column': 'stadium_id'}, {'column': 'event_type'}, {'column': 'attendance'}, {'column': 'event_date'}]}}\nA hypothetical reasoning question is as follows:\nSuppose Gayfield Park stadium had a tenth of the capacity of Hampden Park stadium, which stadiums have the lowest and highest average attendance rates respectively, and how many concerts have they each held?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM ( SELECT Name AS highest_name FROM ( SELECT Stadium_ID , Name , ( SELECT Capacity FROM stadium WHERE Name = \"Hampden Park\" ) / 10 AS Capacity , Average FROM stadium WHERE Name = \"Gayfield Park\" UNION ALL SELECt Stadium_ID , Name , Capacity , Average FROM stadium WHERE Name != \"Gayfield Park\" ) GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity DESC LIMIT 1 ) JOIN ( SELECT COUNT ( * ) AS concerts_in_highest_stadium FROM stadium A JOIN concert B ON A.Stadium_ID = B.Stadium_ID WHERE A.Stadium_ID = ( SELECT Stadium_ID FROM ( SELECT Stadium_ID , Name , ( SELECT Capacity FROM stadium WHERE Name = \"Hampden Park\" ) / 10 AS Capacity , Average FROM stadium WHERE Name = \"Gayfield Park\" UNION ALL SELECt Stadium_ID , Name , Capacity , Average FROM stadium WHERE Name != \"Gayfield Park\" ) GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity DESC LIMIT 1 ) ) JOIN ( SELECT Name AS lowest_name FROM ( SELECT Stadium_ID , Name , ( SELECT Capacity FROM stadium WHERE Name = \"Hampden Park\" ) / 10 AS Capacity , Average FROM stadium WHERE Name = \"Gayfield Park\" UNION ALL SELECt Stadium_ID , Name , Capacity , Average FROM stadium WHERE Name != \"Gayfield Park\" ) GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity ASC LIMIT 1 ) JOIN ( SELECT COUNT ( * ) AS concerts_in_lowest_stadium FROM stadium A JOIN concert B ON A.Stadium_ID = B.Stadium_ID WHERE A.Stadium_ID = ( SELECT Stadium_ID FROM ( SELECT Stadium_ID , Name , ( SELECT Capacity FROM stadium WHERE Name = \"Hampden Park\" ) / 10 AS Capacity , Average FROM stadium WHERE Name = \"Gayfield Park\" UNION ALL SELECt Stadium_ID , Name , Capacity , Average FROM stadium WHERE Name != \"Gayfield Park\" ) GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity ASC LIMIT 1 ) )",
        "db_id": "concert"
    },
    {
        "id": 292,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['stadiums', 'Gayfield Park stadium', 'Hampden Park stadium', 'average attendance rates', 'capacity', 'concerts'], 'relations': ['capacity_ratio (Gayfield Park = 0.1 * Hampden Park)', 'stadium_to_events (stadiums host concerts)', 'attendance_comparison (highest vs lowest)'], 'intent': 'identify_stadiums_with_extreme_attendance_and_their_concert_counts', 'reasoning_type': 'mathematical logic reasoning, ideal hypothesis reasoning', 'numerical_values': [0.1], 'units': {'capacity': 'unitless ratio (1:10)', 'attendance_rate': 'percentage', 'concert_count': 'integer count'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.stadiums': [{'column': 'stadium_name'}, {'column': 'capacity'}], 'concert.attendance_records': [{'column': 'average_attendance_rate'}], 'concert.events': [{'column': 'event_type'}, {'column': 'stadium_id'}]}}\nA hypothetical reasoning question is as follows:\nWhat are the names of the stadiums with the highest and lowest average attendance rates, if Gayfield Park stadium has one-tenth the capacity of Hampden Park stadium, and how many concerts have been held in each of them?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM ( SELECT Name AS highest_name FROM ( SELECT Stadium_ID , Name , ( SELECT Capacity FROM stadium WHERE Name = \"Hampden Park\" ) / 10 AS Capacity , Average FROM stadium WHERE Name = \"Gayfield Park\" UNION ALL SELECt Stadium_ID , Name , Capacity , Average FROM stadium WHERE Name != \"Gayfield Park\" ) GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity DESC LIMIT 1 ) JOIN ( SELECT COUNT ( * ) AS concerts_in_highest_stadium FROM stadium A JOIN concert B ON A.Stadium_ID = B.Stadium_ID WHERE A.Stadium_ID = ( SELECT Stadium_ID FROM ( SELECT Stadium_ID , Name , ( SELECT Capacity FROM stadium WHERE Name = \"Hampden Park\" ) / 10 AS Capacity , Average FROM stadium WHERE Name = \"Gayfield Park\" UNION ALL SELECt Stadium_ID , Name , Capacity , Average FROM stadium WHERE Name != \"Gayfield Park\" ) GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity DESC LIMIT 1 ) ) JOIN ( SELECT Name AS lowest_name FROM ( SELECT Stadium_ID , Name , ( SELECT Capacity FROM stadium WHERE Name = \"Hampden Park\" ) / 10 AS Capacity , Average FROM stadium WHERE Name = \"Gayfield Park\" UNION ALL SELECt Stadium_ID , Name , Capacity , Average FROM stadium WHERE Name != \"Gayfield Park\" ) GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity ASC LIMIT 1 ) JOIN ( SELECT COUNT ( * ) AS concerts_in_lowest_stadium FROM stadium A JOIN concert B ON A.Stadium_ID = B.Stadium_ID WHERE A.Stadium_ID = ( SELECT Stadium_ID FROM ( SELECT Stadium_ID , Name , ( SELECT Capacity FROM stadium WHERE Name = \"Hampden Park\" ) / 10 AS Capacity , Average FROM stadium WHERE Name = \"Gayfield Park\" UNION ALL SELECt Stadium_ID , Name , Capacity , Average FROM stadium WHERE Name != \"Gayfield Park\" ) GROUP BY Stadium_ID ORDER BY 100.0 * Average / Capacity ASC LIMIT 1 ) )",
        "db_id": "concert"
    },
    {
        "id": 293,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Somerset Park stadium', 'concert', 'female singers', 'ID', 'name', 'percentage'], 'relations': ['venue_hosts_concert (Somerset Park stadium → concert)', 'concert_has_performers (concert → singers)', 'singer_has_gender (singer → female)'], 'intent': 'retrieve_concert_list_with_female_singer_percentage', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [], 'units': {'percentage': '% (unitless ratio calculation)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'concert_id'}, {'column': 'concert_name'}], 'concert.venues': [{'column': 'venue_name'}], 'concert.performances': [{'column': 'concert_id'}, {'column': 'singer_id'}], 'concert.singers': [{'column': 'singer_id'}, {'column': 'gender'}]}}\nA mathematical logic question is as follows:\nWhat are the ID and name of each concert held at Somerset Park stadium, and what percentage of the singers in each of these concert are female singers?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT t1.concert_ID, t1.concert_Name, 100.0 * n_female / n AS female_proportion FROM (SELECT A.concert_ID, A.concert_Name, COUNT (*) AS n_female FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.Is_male = \"F\" GROUP BY A.concert_ID UNION ALL SELECT A.concert_ID, A.concert_Name, 0 AS n_female FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE D.Name = \"Somerset Park\" AND A.concert_ID NOT IN (SELECT A.concert_ID FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.Is_male = \"F\" GROUP BY A.concert_ID) GROUP BY A.concert_ID) t1 JOIN (SELECT A.concert_ID, A.concert_Name, COUNT (*) AS n FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE D.Name = \"Somerset Park\" GROUP BY A.concert_ID) t2 ON t1.concert_ID = t2.concert_ID",
        "db_id": "concert"
    },
    {
        "id": 294,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Somerset Park stadium', 'concert', 'female singers', 'percentage'], 'relations': ['concert_held_at_stadium (concert → Somerset Park stadium)', 'singer_performs_in_concert (singer → concert)', 'singer_gender_classification (singer → female)'], 'intent': 'retrieve_concert_details_with_female_singer_percentage', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'percentage': '% (unit for female singer ratio calculation)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'concert_id'}, {'column': 'concert_name'}], 'concert.stadiums': [{'column': 'stadium_name'}], 'concert.performances': [{'column': 'concert_id'}, {'column': 'singer_id'}], 'concert.singers': [{'column': 'singer_id'}, {'column': 'gender'}]}}\nA mathematical logic question is as follows:\nWhat are the ID and name of each concert held at Somerset Park stadium, and what is the percentage of female singers in each of these concert held at Somerset Park?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT t1.concert_ID, t1.concert_Name, 100.0 * n_female / n AS female_proportion FROM (SELECT A.concert_ID, A.concert_Name, COUNT (*) AS n_female FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.Is_male = \"F\" GROUP BY A.concert_ID UNION ALL SELECT A.concert_ID, A.concert_Name, 0 AS n_female FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE D.Name = \"Somerset Park\" AND A.concert_ID NOT IN (SELECT A.concert_ID FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.Is_male = \"F\" GROUP BY A.concert_ID) GROUP BY A.concert_ID) t1 JOIN (SELECT A.concert_ID, A.concert_Name, COUNT (*) AS n FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE D.Name = \"Somerset Park\" GROUP BY A.concert_ID) t2 ON t1.concert_ID = t2.concert_ID",
        "db_id": "concert"
    },
    {
        "id": 295,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Week 2 concert', 'Somerset Park stadium', 'concert ID', 'concert name', 'female singers', 'percentage'], 'relations': ['concert_held_at_stadium (Week 2 concert → Somerset Park stadium)', 'singers_perform_in_concert (singers → concerts at Somerset Park)', 'gender_attribute (singers → female)'], 'intent': 'retrieve_concert_details_and_female_singer_percentage', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'percentage': '% (calculated as (female_singers / total_singers) * 100)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'concert_id'}, {'column': 'concert_name'}], 'concert.stadiums': [{'column': 'stadium_name'}], 'concert.concert_singer': [{'column': 'concert_id'}, {'column': 'singer_id'}], 'concert.singers': [{'column': 'singer_id'}, {'column': 'gender'}]}}\nA hypothetical reasoning question is as follows:\nIf the \"Week 2\" concert was held at Somerset Park stadium, what are the ID and name of each concert held at Somerset Park stadium, and what percentage of the singers in each concert held at Somerset Park stadium are female singers?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT t1.concert_ID, t1.concert_Name, 100.0 * n_female / n AS female_proportion FROM (SELECT A.concert_ID, A.concert_Name, COUNT (*) AS n_female FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE (D.Name = \"Somerset Park\" OR A.concert_Name = \"Week 2\") AND C.Is_male = \"F\" GROUP BY A.concert_ID UNION ALL SELECT A.concert_ID, A.concert_Name, 0 AS n_female FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE (D.Name = \"Somerset Park\" OR A.concert_Name = \"Week 2\") AND A.concert_ID NOT IN (SELECT A.concert_ID FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE (D.Name = \"Somerset Park\" OR A.concert_Name = \"Week 2\") AND C.Is_male = \"F\" GROUP BY A.concert_ID) GROUP BY A.concert_ID) t1 JOIN (SELECT A.concert_ID, A.concert_Name, COUNT (*) AS n FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE (D.Name = \"Somerset Park\" OR A.concert_Name = \"Week 2\") GROUP BY A.concert_ID) t2 ON t1.concert_ID = t2.concert_ID",
        "db_id": "concert"
    },
    {
        "id": 296,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Somerset Park stadium', 'concert', 'Week 2 concert', 'female singers'], 'relations': ['venue_concert (Somerset Park → concerts held there)', 'concert_singer (concert → singers performing in it)', 'singer_gender (singer → female or male)', 'conditional_filter (Week 2 concert location validation)'], 'intent': 'retrieve_concert_IDs_names_and_female_singer_percentages', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'percentage': '%', 'count_unit': 'individual singers'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'concert_id'}, {'column': 'concert_name'}], 'concert.venues': [{'column': 'venue_name'}], 'concert.performances': [{'column': 'concert_id'}, {'column': 'singer_id'}], 'concert.singers': [{'column': 'singer_id'}, {'column': 'gender'}]}}\nA hypothetical reasoning question is as follows:\nWhat are the ID and name of each concert held at Somerset Park stadium, and what is the percentage of female singers in each concert held at Somerset Park, if the \"Week 2\" concert was held there?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT t1.concert_ID, t1.concert_Name, 100.0 * n_female / n AS female_proportion FROM (SELECT A.concert_ID, A.concert_Name, COUNT (*) AS n_female FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE (D.Name = \"Somerset Park\" OR A.concert_Name = \"Week 2\") AND C.Is_male = \"F\" GROUP BY A.concert_ID UNION ALL SELECT A.concert_ID, A.concert_Name, 0 AS n_female FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE (D.Name = \"Somerset Park\" OR A.concert_Name = \"Week 2\") AND A.concert_ID NOT IN (SELECT A.concert_ID FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE (D.Name = \"Somerset Park\" OR A.concert_Name = \"Week 2\") AND C.Is_male = \"F\" GROUP BY A.concert_ID) GROUP BY A.concert_ID) t1 JOIN (SELECT A.concert_ID, A.concert_Name, COUNT (*) AS n FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN singer C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON D.Stadium_ID = A.Stadium_ID WHERE (D.Name = \"Somerset Park\" OR A.concert_Name = \"Week 2\") GROUP BY A.concert_ID) t2 ON t1.concert_ID = t2.concert_ID",
        "db_id": "concert"
    },
    {
        "id": 297,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['concerts', 'stadiums', 'top three stadiums', 'average attendance rate', 'percentage'], 'relations': ['concerts_held_in_stadiums', 'stadium_ranking_by_attendance (top three based on average attendance rate)', 'percentage_calculation (concerts_in_top_three / total_concerts)'], 'intent': 'calculate_percentage_of_concerts_in_highest_attendance_venues', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3], 'units': {'percentage': '%', 'attendance_rate': 'implied ratio (e.g., 0.85 for 85%)', 'ranking_limit': 'top 3 venues'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'venue_id'}, {'column': 'concert_id'}], 'concert.venues': [{'column': 'venue_id'}, {'column': 'venue_name'}], 'concert.attendance_records': [{'column': 'concert_id'}, {'column': 'attendance_rate'}]}}\nA common sense reasoning question is as follows:\nWhat percentage of the concerts were held in the top three stadiums in terms of average attendance rate?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM concert ) AS percent FROM concert WHERE Stadium_ID IN ( SELECT Stadium_ID FROM stadium ORDER BY 100.0 * Average / Capacity DESC LIMIT 3 )",
        "db_id": "concert"
    },
    {
        "id": 298,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['concerts', 'stadiums', 'average attendance rates', 'top three stadiums'], 'relations': ['concerts_held_in_stadium', 'stadium_has_attendance_rate', 'ranking_of_stadiums_by_attendance'], 'intent': 'calculate_percentage_of_concerts_in_top_attendance_stadiums', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3], 'units': {'attendance': 'people (implied)', 'percentage': 'unitless'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'stadium_id'}, {'column': 'attendance'}], 'concert.stadiums': [{'column': 'stadium_id'}, {'column': 'name'}]}}\nA common sense reasoning question is as follows:\nWhat is the percentage of concerts that took place in the three stadiums with the highest average attendance rates?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM concert ) AS percent FROM concert WHERE Stadium_ID IN ( SELECT Stadium_ID FROM stadium ORDER BY 100.0 * Average / Capacity DESC LIMIT 3 )",
        "db_id": "concert"
    },
    {
        "id": 299,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['\"Bleeding Love\" themed concert', 'Glebe Park stadium', 'top three stadiums', 'average attendance rate', 'percentage of concerts'], 'relations': ['theme_to_stadium (\"Bleeding Love\" → Glebe Park in hypothetical scenario)', 'stadium_to_attendance_rank (stadiums → ranking based on average attendance rate)', 'concerts_in_top_stadiums (concerts → top three stadiums)'], 'intent': 'calculate_percentage_of_concerts_held_in_top_three_stadiums_by_attendance_after_hypothetical_venue_change', 'reasoning_type': 'mathematical logic reasoning, ideal hypothesis reasoning', 'numerical_values': [3], 'units': {'percentage': '%', 'attendance_rate': 'unitless ratio (attendance/capacity)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'theme'}, {'column': 'stadium_id'}, {'column': 'attendance'}], 'concert.stadiums': [{'column': 'stadium_id'}, {'column': 'name'}, {'column': 'capacity'}]}}\nA hypothetical reasoning question is as follows:\nIf the \"Bleeding Love\" themed concert was held at Glebe Park stadium, what percentage of the concerts were held in the top three stadiums in terms of average attendance rate?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM concert ) AS percent FROM ( SELECT Stadium_ID FROM stadium WHERE Name = \"Glebe Park\" UNION ALL SELECT Stadium_ID FROM concert WHERE Theme != \"Bleeding Love\" ) WHERE Stadium_ID IN ( SELECT Stadium_ID FROM stadium ORDER BY 100.0 * Average / Capacity DESC LIMIT 3 )",
        "db_id": "concert"
    },
    {
        "id": 300,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['concerts', 'stadiums', 'average attendance rates', 'Glebe Park stadium', \"concert theme 'Bleeding Love'\"], 'relations': ['concerts_hosted_at_stadiums (concerts → stadiums)', 'stadium_ranking_by_attendance (stadiums → average attendance ranking)', \"theme_to_stadium ('Bleeding Love' → Glebe Park)\"], 'intent': 'calculate_percentage_of_concerts_in_top_attendance_stadiums', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3], 'units': {'percentage': 'unitless ratio', 'attendance': 'number of attendees (implied)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'concert_id'}, {'column': 'stadium_id'}, {'column': 'theme'}], 'concert.stadiums': [{'column': 'stadium_id'}, {'column': 'stadium_name'}], 'concert.attendance_records': [{'column': 'concert_id'}, {'column': 'attendance_count'}]}}\nA hypothetical reasoning question is as follows:\nWhat percentage of concerts took place in the three stadiums with the highest average attendance rates, assuming that the concert with the theme \"Bleeding Love\" took place at the Glebe Park stadium?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM concert ) AS percent FROM ( SELECT Stadium_ID FROM stadium WHERE Name = \"Glebe Park\" UNION ALL SELECT Stadium_ID FROM concert WHERE Theme != \"Bleeding Love\" ) WHERE Stadium_ID IN ( SELECT Stadium_ID FROM stadium ORDER BY 100.0 * Average / Capacity DESC LIMIT 3 )",
        "db_id": "concert"
    },
    {
        "id": 301,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['stadium', 'Glebe Park stadium', 'singers'], 'relations': ['hosted_concerts (stadium ← concerts → singers)', 'count_comparison (count(singers) at stadium ≥ 3 × count(singers) at Glebe Park)'], 'intent': 'identify_stadiums_with_3x_more_singers_than_reference', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3], 'units': {'count': 'unitless (singer count)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.stadium': [{'column': 'stadium_id'}, {'column': 'name'}], 'concert.concert': [{'column': 'stadium_id'}, {'column': 'singer_id'}], 'concert.singer': [{'column': 'singer_id'}]}}\nA mathematical logic question is as follows:\nWhich stadium has at least three times the number of singers who have sung at the Glebe Park stadium?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT C.Name FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID GROUP BY C.Stadium_ID HAVING COUNT ( DISTINCT ( B.Singer_ID ) ) >= 3 * ( SELECT COUNT ( DISTINCT ( B.Singer_ID ) ) FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID WHERE C.name = \"Glebe Park\" )",
        "db_id": "concert"
    },
    {
        "id": 302,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['stadium', 'Glebe Park', 'singers'], 'relations': ['stadium_to_singers (stadium → count of singers)', 'comparison_ratio (stadium_singer_count ≥ 3 × Glebe_Park_singer_count)'], 'intent': 'identify_stadiums_with_singer_count_three_times_Glebe_Park', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3], 'units': {'count_multiplier': 'ratio (dimensionless)', 'comparison_operator': 'minimum of three times (≥ 3×)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.stadiums': [{'column': 'stadium_id'}, {'column': 'stadium_name'}], 'concert.concerts': [{'column': 'stadium_id'}, {'column': 'singer_id'}]}}\nA mathematical logic question is as follows:\nWhich stadium has had a minimum of three times more singers than Glebe Park does?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT C.Name FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID GROUP BY C.Stadium_ID HAVING COUNT ( DISTINCT ( B.Singer_ID ) ) >= 3 * ( SELECT COUNT ( DISTINCT ( B.Singer_ID ) ) FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID WHERE C.name = \"Glebe Park\" )",
        "db_id": "concert"
    },
    {
        "id": 303,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Somerset Park stadium', 'Balmoor stadium', 'Glebe Park stadium', 'singers', 'stadium with at least three times singers'], 'relations': ['subset_relation (singers of Somerset Park ⊆ singers of Balmoor)', 'cardinality_comparison (target_stadium singers ≥ 3 × Glebe Park singers)'], 'intent': 'identify_stadium_by_conditional_singer_count', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3], 'units': {'count': 'unitless (number of singers)', 'multiplier': '3 times (scalar factor)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.stadiums': [{'column': 'stadium_id'}, {'column': 'stadium_name'}], 'concert.performances': [{'column': 'stadium_id'}, {'column': 'singer_id'}], 'concert.singers': [{'column': 'singer_id'}]}}\nA hypothetical reasoning question is as follows:\nIf all the singers who have performed at Somerset Park stadium also performed at Balmoor stadium, what is the name of the stadium with at least three times the number of singers who have sung at the Glebe Park stadium?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM ( SELECT C.Stadium_ID , B.Singer_ID , C.Name FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID UNION ALL SELECT ( SELECT Stadium_ID FROM stadium WHERE Name = \"Balmoor\" ) , B.Singer_ID , C.Name FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID WHERE C.name = \"Somerset Park\" ) GROUP BY Stadium_ID HAVING COUNT ( DISTINCT ( Singer_ID ) ) >= 3 * ( SELECT COUNT ( DISTINCT ( B.Singer_ID ) ) FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID WHERE C.name = \"Glebe Park\" )",
        "db_id": "concert"
    },
    {
        "id": 304,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Glebe Park', 'Somerset Park', 'Balmoor stadium', 'target stadium', 'singers'], 'relations': ['singer_performance (stadium to singer relationship)', 'subset_relation (singers of Somerset Park ⊆ singers of Balmoor stadium)', 'count_comparison (target stadium has ≥ 3 × singers of Glebe Park)'], 'intent': 'identify_stadium_with_minimum_triple_singer_count_relative_to_Glebe_given_Somerset_Balmoor_constraint', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3], 'units': {}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.stadiums': [{'column': 'stadium_id'}, {'column': 'stadium_name'}], 'concert.performances': [{'column': 'stadium_id'}, {'column': 'singer_id'}], 'concert.singers': [{'column': 'singer_id'}]}}\nA hypothetical reasoning question is as follows:\nWhat is the name of the stadium that has a minimum of three times more singers than Glebe Park if the singers who have performed at Somerset Park also performed at the Balmoor stadium?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM ( SELECT C.Stadium_ID , B.Singer_ID , C.Name FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID UNION ALL SELECT ( SELECT Stadium_ID FROM stadium WHERE Name = \"Balmoor\" ) , B.Singer_ID , C.Name FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID WHERE C.name = \"Somerset Park\" ) GROUP BY Stadium_ID HAVING COUNT ( DISTINCT ( Singer_ID ) ) >= 3 * ( SELECT COUNT ( DISTINCT ( B.Singer_ID ) ) FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN stadium C ON A.Stadium_ID = C.Stadium_ID WHERE C.name = \"Glebe Park\" )",
        "db_id": "concert"
    },
    {
        "id": 305,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['stadium', 'Balmoor stadium', 'attendance rate'], 'relations': ['stadium_to_attendance (stadium → highest attendance rate)', \"comparison_relation (attendance_rate > 2 × Balmoor's attendance)\"], 'intent': 'find_stadium_with_attendance_exceeding_twice_balmoor_max', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'attendance_rate': 'implied percentage or absolute number (no conversion needed)', 'scaling_factor': 'multiplicative (twice = 2×)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.stadiums': [{'column': 'name'}, {'column': 'highest_attendance_rate'}]}}\nA common sense reasoning question is as follows:\nWhat is the name of the stadium that has a highest attendance rate more than twice the highest attendance rate of the Balmoor stadium?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM stadium WHERE 100.0 * Highest / Capacity > 2 * ( SELECT 100.0 * Highest / Capacity FROM stadium WHERE Name = \"Balmoor\" )",
        "db_id": "concert"
    },
    {
        "id": 306,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Balmoor stadium', 'stadium maximum attendance rate'], 'relations': ['comparison_relation (target_attendance > 2 × Balmoor_max_attendance)', 'stadium_attendance_link (stadium → highest_attendance_rate)'], 'intent': 'retrieve_stadiums_exceeding_double_Balmoor_attendance', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'attendance_rate': 'percentage (implied by context)', 'conversion': 'scalar multiplication (no unit conversion required)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.stadiums': [{'column': 'name'}, {'column': 'highest_attendance_rate'}]}}\nA common sense reasoning question is as follows:\nWhich stadium's maximum attendance rate is more than double the Balmoor stadium's highest attendance rate? Give the the stadium names.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM stadium WHERE 100.0 * Highest / Capacity > 2 * ( SELECT 100.0 * Highest / Capacity FROM stadium WHERE Name = \"Balmoor\" )",
        "db_id": "concert"
    },
    {
        "id": 307,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Balmoor stadium', 'capacity 5600', 'highest attendance rate'], 'relations': ['stadium_capacity (Balmoor stadium → 5600)', 'stadium_attendance_rate (stadium → highest attendance rate)', \"comparison_relation (target attendance rate > 2 × Balmoor's attendance rate)\"], 'intent': 'find_stadium_with_attendance_rate_exceeding_twice_balmoor', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5600, 2], 'units': {'capacity': 'number of seats (unitless count)', 'attendance_rate': 'dimensionless ratio (implied by database schema)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.stadiums': [{'column': 'name'}, {'column': 'capacity'}, {'column': 'highest_attendance_number'}, {'column': 'highest_attendance_rate'}]}}\nA hypothetical reasoning question is as follows:\nIf the capacity of the Balmoor stadium is 5600, what is the name of the stadium that has a highest attendance rate more than twice the highest attendance rate of the Balmoor stadium?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM stadium WHERE 100.0 * Highest / Capacity > 2 * ( SELECT 100.0 * Highest / 5600 FROM stadium WHERE Name = \"Balmoor\" )",
        "db_id": "concert"
    },
    {
        "id": 308,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Balmoor stadium', 'stadiums', 'attendance rate'], 'relations': ['Balmoor_capacity:5600', 'stadium_max_attendance_from_events', 'attendance_rate_calculation (max_attendance / capacity)', 'comparison_condition (rate > 2 * Balmoor_rate)'], 'intent': 'find_stadiums_exceeding_double_balmoor_attendance_rate', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5600, 2], 'units': {'capacity': 'seats', 'attendance': 'seats', 'rate': 'ratio (dimensionless)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.stadiums': [{'column': 'stadium_id'}, {'column': 'stadium_name'}, {'column': 'capacity'}], 'concert.matches': [{'column': 'stadium_id'}, {'column': 'attendance'}]}}\nA hypothetical reasoning question is as follows:\nWhich stadium's maximum attendance rate is more than double the Balmoor stadium's highest attendance rate, given its capacity of 5600? List the stadium names.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM stadium WHERE 100.0 * Highest / Capacity > 2 * ( SELECT 100.0 * Highest / 5600 FROM stadium WHERE Name = \"Balmoor\" )",
        "db_id": "concert"
    },
    {
        "id": 309,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['concerts', '2012', 'Happy Tonight concert', 'number of singers'], 'relations': ['held_after (concert → year 2012)', 'has_theme (concert → theme name)', 'has_singers (concert → count of singers)', 'greater_than (singer count comparison)'], 'intent': 'retrieve_concert_ids_names_and_singer_counts_after_2012_exceeding_Happy_Tonight_singer_count', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2012], 'units': {'year': 'calendar year', 'singer_count': 'count (unitless)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'id'}, {'column': 'name'}, {'column': 'date'}], 'concert.themes': [{'column': 'theme_name'}], 'concert.concert_singers': [{'column': 'concert_id'}, {'column': 'singer_id'}]}}\nA mathematical logic question is as follows:\nWhat are the IDs and names of the concerts held after 2012 and has more singers than the \"Happy Tonight\" themed concert, and how many times is it?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.concert_ID, A.concert_Name, 1.0 * COUNT (DISTINCT (B.Singer_ID)) / (SELECT COUNT (DISTINCT (B.Singer_ID)) FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Theme = \"Happy Tonight\" ) AS times FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Year > 2012 GROUP BY A.concert_ID HAVING COUNT (DISTINCT (B.Singer_ID)) > (SELECT COUNT (DISTINCT (B.Singer_ID)) FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Theme = \"Happy Tonight\" )",
        "db_id": "concert"
    },
    {
        "id": 310,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['post-2012 concert', 'Happy Tonight themed concert', 'number of singers', 'ID', 'name', 'ratio'], 'relations': ['temporal_comparison (post-2012 vs. specific concert)', 'numerical_comparison (singer count > Happy Tonight)', 'ratio_calculation (singer_count_post2012 / singer_count_HappyTonight)'], 'intent': 'retrieve_concert_details_and_calculate_singer_ratio', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [2012], 'units': {'year': 'calendar year', 'count': 'number of singers (unitless)', 'ratio': 'unitless quotient'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concert': [{'column': 'concert_id'}, {'column': 'name'}, {'column': 'theme'}, {'column': 'year'}], 'concert.singer_in_concert': [{'column': 'concert_id'}, {'column': 'singer_id'}]}}\nA mathematical logic question is as follows:\nWhat are the ID and name of the post-2012 concert features more singers than the \"Happy Tonight\" themed concert, what is the ratio of the number of singers in both concerts?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.concert_ID, A.concert_Name, 1.0 * COUNT (DISTINCT (B.Singer_ID)) / (SELECT COUNT (DISTINCT (B.Singer_ID)) FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Theme = \"Happy Tonight\" ) AS times FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Year > 2012 GROUP BY A.concert_ID HAVING COUNT (DISTINCT (B.Singer_ID)) > (SELECT COUNT (DISTINCT (B.Singer_ID)) FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Theme = \"Happy Tonight\" )",
        "db_id": "concert"
    },
    {
        "id": 311,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['singer Joe Sharp', 'concert held after 2012', '\"Happy Tonight\" themed concert'], 'relations': ['performance_relation (Joe Sharp → concerts)', 'comparison_relation (singer_count > Happy Tonight singer count)', 'temporal_relation (date > 2012)'], 'intent': 'retrieve_concert_ids_names_and_count_with_conditions', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [2012], 'units': {'time_unit': 'year (for date comparison)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'concert_id'}, {'column': 'concert_name'}, {'column': 'date'}, {'column': 'theme'}], 'concert.singers': [{'column': 'singer_name'}], 'concert.performances': [{'column': 'concert_id'}, {'column': 'singer_id'}]}}\nA hypothetical reasoning question is as follows:\nIf singer Joe Sharp performed in every concert, what are the IDs and names of concerts held after 2012 has more singers than the \"Happy Tonight\" themed concert, and and how many times is it?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.concert_ID, A.concert_Name, 1.0 * (COUNT (DISTINCT (B.Singer_ID)) + 1) / (SELECT COUNT (DISTINCT (B.Singer_ID)) + 1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Theme = \"Happy Tonight\" AND B.Singer_ID != (SELECT Singer_ID FROM singer WHERE Name = \"Joe Sharp\" ) ) AS times FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Year > 2012 AND B.Singer_ID != (SELECT Singer_ID FROM singer WHERE Name = \"Joe Sharp\" ) GROUP BY A.concert_ID HAVING (COUNT (DISTINCT (B.Singer_ID)) + 1) > (SELECT COUNT (DISTINCT (B.Singer_ID)) + 1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Theme = \"Happy Tonight\" AND B.Singer_ID != (SELECT Singer_ID FROM singer WHERE Name = \"Joe Sharp\" ) )",
        "db_id": "concert"
    },
    {
        "id": 312,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Joe Sharp', 'post-2012 concert', 'Happy Tonight themed concert', 'concert ID', 'concert name', 'number of singers'], 'relations': ['performed_in (Joe Sharp → concerts)', 'theme_of (Happy Tonight → concert)', 'after (concert, 2012)', 'comparison (singer_count > Happy Tonight)', 'ratio (singer_count / Happy Tonight singer_count)'], 'intent': 'retrieve_post-2012_concerts_with_higher_singer_count_than_Happy_Tonight_and_ratio', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2012], 'units': {'count': 'unitless', 'ratio': 'unitless (singer_count/singer_count)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.concerts': [{'column': 'id'}, {'column': 'name'}, {'column': 'date'}, {'column': 'theme'}], 'concert.performances': [{'column': 'concert_id'}, {'column': 'singer_id'}], 'concert.singers': [{'column': 'id'}, {'column': 'name'}]}}\nA hypothetical reasoning question is as follows:\nAssuming that Joe Sharp performed in all concerts, what are the ID and name of post-2012 concert features more singers than the \"Happy Tonight\" themed concert, and what is the ratio of the number of singers in both concerts?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT A.concert_ID, A.concert_Name, 1.0 * (COUNT (DISTINCT (B.Singer_ID)) + 1) / (SELECT COUNT (DISTINCT (B.Singer_ID)) + 1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Theme = \"Happy Tonight\" AND B.Singer_ID != (SELECT Singer_ID FROM singer WHERE Name = \"Joe Sharp\" ) ) AS times FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Year > 2012 AND B.Singer_ID != (SELECT Singer_ID FROM singer WHERE Name = \"Joe Sharp\" ) GROUP BY A.concert_ID HAVING (COUNT (DISTINCT (B.Singer_ID)) + 1) > (SELECT COUNT (DISTINCT (B.Singer_ID)) + 1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID WHERE A.Theme = \"Happy Tonight\" AND B.Singer_ID != (SELECT Singer_ID FROM singer WHERE Name = \"Joe Sharp\" ) )",
        "db_id": "concert"
    },
    {
        "id": 313,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['song \"Love\"', 'singers', 'age at release time'], 'relations': ['song_to_singer (\"Love\" → singer)', 'age_comparison (singer_age > 2 * love_singer_age)'], 'intent': 'find_singers_with_age_condition_relative_to_love_singer', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'age': 'years (implied age calculation from dates)', 'time_calculation': 'date_diff(release_date, birth_date)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.songs': [{'column': 'song_name'}, {'column': 'release_date'}, {'column': 'artist_id'}], 'concert.artists': [{'column': 'artist_id'}, {'column': 'artist_name'}, {'column': 'birth_date'}]}}\nA common sense reasoning question is as follows:\nAt the time of the release of the song \"Love,\" what are the names of singers who were more than twice as old as the singer of the song?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM singer WHERE ( SELECT Song_release_year FROM singer WHERE Song_Name = \"Love\" ) - ( strftime ( \"%Y\" , \"now\" ) - Age ) > 2 * ( SELECT Age - ( strftime ( \"%Y\" , \"now\" ) - Song_release_year ) FROM singer WHERE Song_Name = \"Love\" )",
        "db_id": "concert"
    },
    {
        "id": 314,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': [\"song titled 'Love'\", \"singer who performed 'Love'\", 'other singers', \"release date of 'Love'\", 'age of singers at release time'], 'relations': [\"performed_by (song 'Love' → singer)\", \"age_comparison (other singers' age > 2 * reference singer's age)\"], 'intent': 'retrieve_names_of_singers_whose_age_exceeded_double_of_performer_at_song_release', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'age': 'years', 'time_calculation': 'date arithmetic (release_date - birth_date)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.songs': [{'column': 'title'}, {'column': 'release_date'}, {'column': 'artist_id'}], 'concert.artists': [{'column': 'artist_id'}, {'column': 'artist_name'}, {'column': 'birth_date'}]}}\nA common sense reasoning question is as follows:\nWhich singers, at the time when \"Love\" was released, had an age more than double that of the singer who performed the song? List their names.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM singer WHERE ( SELECT Song_release_year FROM singer WHERE Song_Name = \"Love\" ) - ( strftime ( \"%Y\" , \"now\" ) - Age ) > 2 * ( SELECT Age - ( strftime ( \"%Y\" , \"now\" ) - Song_release_year ) FROM singer WHERE Song_Name = \"Love\" )",
        "db_id": "concert"
    },
    {
        "id": 315,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': [\"song 'Love'\", 'release year 2010', 'singers', 'age comparison'], 'relations': [\"song_to_release_year ('Love' → 2010)\", \"song_to_singer ('Love' → original_singer)\", 'singer_age_at_release (singer, birth_year → age_in_2010)', 'age_comparison (other_singer_age > 2 * original_singer_age)'], 'intent': 'identify_singers_older_than_double_original_singer_age', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2010, 2], 'units': {'time': 'years (age calculation)', 'multiplier': '2x (age ratio)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.songs': [{'column': 'title'}, {'column': 'release_year'}], 'concert.singers': [{'column': 'singer_id'}, {'column': 'birth_year'}], 'concert.song_artists': [{'column': 'song_id'}, {'column': 'singer_id'}]}}\nA hypothetical reasoning question is as follows:\nIf \"Love\" was released in 2010, at the time of the release of the song \"Love,\" what are the names of singers who were more than twice as old as the singer of the song?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM singer WHERE 2010 - ( strftime ( \"%Y\" , \"now\" ) - Age ) > 2 * ( SELECT Age - ( strftime ( \"%Y\" , \"now\" ) - 2010 ) FROM singer WHERE Song_Name = \"Love\" )",
        "db_id": "concert"
    },
    {
        "id": 316,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': [\"song 'Love'\", 'release year 2010', \"singer of 'Love'\", 'other singers'], 'relations': [\"performed_by ('Love' → singer)\", 'age_comparison (other_singer_age > 2 × singer_of_love_age)'], 'intent': 'list_singers_older_than_twice_age_of_love_performer', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2010], 'units': {'time': 'years', 'age_calculation': 'current_year - birth_year'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'concert.artists': [{'column': 'artist_id'}, {'column': 'artist_name'}, {'column': 'birth_year'}], 'concert.songs': [{'column': 'song_title'}, {'column': 'release_year'}, {'column': 'artist_id'}]}}\nA hypothetical reasoning question is as follows:\nAssuming \"Love\" was released in 2010, which singers, at that time, had an age that was more than twice the age of the singer who performed the song? List their names.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM singer WHERE 2010 - ( strftime ( \"%Y\" , \"now\" ) - Age ) > 2 * ( SELECT Age - ( strftime ( \"%Y\" , \"now\" ) - 2010 ) FROM singer WHERE Song_Name = \"Love\" )",
        "db_id": "concert"
    },
    {
        "id": 317,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['country', 'GNP per capita', 'continent'], 'relations': ['country_has_gnp_per_capita', 'country_located_in_continent'], 'intent': 'identify_continent_of_country_with_max_gnp_per_capita', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'GNP_per_capita': 'currency unit (implied by database schema)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.country': [{'column': 'Continent', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Africa', 'Oceania', 'South America', 'Europe', 'Asia']}, {'column': 'GNP', 'type': 'DOUBLE', 'primary_key': False, 'comment': '', 'examples': ['8000.0', '1500000.0', '1800000.0', '700000.0', '50000.0']}, {'column': 'Population', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['40000000', '25788215', '213993437', '8654622', '108407742']}, {'column': 'Name', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['阿拉伯联合共和国', '澳大利亚', '巴西', 'Switzerland', '刚果(金)']}]}}\nA common sense reasoning question is as follows:\nWhich continent is the country with the highest GNP per capita located in?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Continent FROM country ORDER BY 1.0 * GNP / Population DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 318,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\nthere is nothing I can give you about this question.\nA common sense reasoning question is as follows:\nIn which continent can we find the country with the highest GNP per capita?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Continent FROM country ORDER BY 1.0 * GNP / Population DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 319,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Korla City', 'gross national product (GNP)', 'country of Korla City', 'continent', 'GNP per capita'], 'relations': ['city_belongs_to_country (Korla City → country)', 'country_belongs_to_continent (country → continent)', 'gnp_per_capita_computation (GNP / population)'], 'intent': 'identify_continent_with_highest_gnp_per_capita', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1982268.0], 'units': {'gnp': 'monetary unit (assumed consistent in database)', 'population': 'people', 'gnp_per_capita': 'monetary unit per person'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.city': [{'column': 'name'}, {'column': 'country_code'}], 'Population.country': [{'column': 'code'}, {'column': 'gnp'}, {'column': 'population'}, {'column': 'continent'}]}}\nA hypothetical reasoning question is as follows:\nIf the gross national product of the country where Korla City is located is 1982268.0, which continent is the country with the highest GNP per capita located in?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Continent FROM (SELECT \"1982268.0\" AS GNP, Population, Continent FROM country WHERE name = (SELECT A.name FROM country A JOIN city B ON A.Code = B.CountryCode WHERE B.name = \"Korla\" ) UNION ALL SELECT GNP, Population, Continent FROM country WHERE name != (SELECT A.name FROM country A JOIN city B ON A.Code = B.CountryCode WHERE B.name = \"Korla\" ) ) ORDER BY 1.0 * GNP / Population DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 320,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['country with highest GNP per capita', 'continent', 'Korla City', 'GNP value 1982268'], 'relations': ['city_in_country (Korla City → country)', 'country_in_continent (country → continent)', 'gnp_property (country → GNP value)'], 'intent': 'identify_continent_of_country_with_max_gnp_per_capita', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [1982268], 'units': {'GNP': 'implied monetary unit (e.g., USD) from database schema', 'per_capita': 'GNP divided by population'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'country_id'}, {'column': 'continent'}], 'Population.cities': [{'column': 'city_name'}, {'column': 'country_id'}], 'Population.gnp_data': [{'column': 'gnp'}, {'column': 'population'}, {'column': 'country_id'}]}}\nA hypothetical reasoning question is as follows:\nIn which continent can we find the country with the highest GNP per capita, if the GNP of the country containing Korla City is 1982268?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Continent FROM (SELECT \"1982268.0\" AS GNP, Population, Continent FROM country WHERE name = (SELECT A.name FROM country A JOIN city B ON A.Code = B.CountryCode WHERE B.name = \"Korla\" ) UNION ALL SELECT GNP, Population, Continent FROM country WHERE name != (SELECT A.name FROM country A JOIN city B ON A.Code = B.CountryCode WHERE B.name = \"Korla\" ) ) ORDER BY 1.0 * GNP / Population DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 321,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['countries', 'independence year > 1979', 'GNP growth rate'], 'relations': ['independence_filter (countries → independence_year > 1979)', 'growth_rate_attribute (countries → gnp_growth_rate)'], 'intent': 'identify_country_with_max_gnp_growth_among_post_1979_independent', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [1979], 'units': {'year': 'calendar year', 'gnp_growth_rate': 'percent (%)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'name'}, {'column': 'independence_year'}, {'column': 'gnp_growth_rate'}]}}\nA mathematical logic question is as follows:\nAmong the countries that became independent after 1979, which country has the highest growth rate of GNP?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM country WHERE IndepYear > 1979 ORDER BY 1.0 * ( GNP - GNPOld ) / GNPOld DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 322,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['country', 'independence year', 'gross national product growth rate'], 'relations': ['country_has_independence_year', 'country_has_gnp_growth_rate', 'filter_by_independence_year_after_threshold'], 'intent': 'identify_country_with_max_gnp_growth_post_1979_independence', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [1979], 'units': {'independence_year': 'calendar year', 'gnp_growth_rate': 'percentage'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.country_stats': [{'column': 'country_name'}, {'column': 'independence_year'}, {'column': 'gnp_growth_rate'}]}}\nA mathematical logic question is as follows:\nWhich country, among those that gained independence after 1979, has the highest gross national product growth rate?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM country WHERE IndepYear > 1979 ORDER BY 1.0 * ( GNP - GNPOld ) / GNPOld DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 323,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['countries independent after 1979', 'Oceania countries', 'GNP', 'increase of 1,000,000'], 'relations': ['independence_year > 1979', \"continent = 'Oceania'\", 'growth_rate = (new_gnp - gnp) / gnp'], 'intent': 'identify_country_with_max_gnp_growth_rate_after_fixed_increase', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1979, 1000000], 'units': {'currency': 'unspecified (assume consistent with GNP field)', 'increase': '1,000,000 (absolute currency units)', 'growth_rate': 'unitless ratio (percentage equivalent implied)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.country': [{'column': 'name'}, {'column': 'independence_year'}, {'column': 'continent'}, {'column': 'gnp'}]}}\nA hypothetical reasoning question is as follows:\nAmong the countries that became independent after 1979, which country has the highest growth rate in GNP if all countries in Oceania have an increase in curretn GNP of 1,000,000?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT name FROM ( SELECT name , GNP + 1000000 AS GNP , GNPOld , IndepYear FROM country WHERE Continent = \"Oceania\" UNION ALL SELECT name , GNP , GNPOld , IndepYear FROM country WHERE Continent != \"Oceania\" ) WHERE IndepYear > 1979 ORDER BY 1.0 * ( GNP - GNPOld ) / GNPOld DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 324,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['countries in Oceania', 'increase of 1,000,000 in GNP', 'independence after 1979', 'gross national product growth rate'], 'relations': ['continent_membership (countries → Oceania)', 'temporal_filter (independence_year > 1979)', 'gnp_modification (current GNP → current GNP + 1,000,000)', 'growth_rate_computation (growth_rate = (new_gnp - gnp) / gnp)'], 'intent': 'identify_country_with_max_gnp_growth_after_increase', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000000, 1979], 'units': {'gnp_increase': 'absolute currency units (consistent with GNP field)', 'growth_rate': 'dimensionless ratio (convertible to percentage)', 'conversion': 'growth_rate = ΔGNP / original_GNP'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'name'}, {'column': 'continent'}, {'column': 'gnp'}, {'column': 'indep_year'}]}}\nA hypothetical reasoning question is as follows:\nAssuming all countries in Oceania have an increase of 1,000,000 in their current GNP, which country among those that gained independence after 1979 has the highest gross national product growth rate?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT name FROM ( SELECT name , GNP + 1000000 AS GNP , GNPOld , IndepYear FROM country WHERE Continent = \"Oceania\" UNION ALL SELECT name , GNP , GNPOld , IndepYear FROM country WHERE Continent != \"Oceania\" ) WHERE IndepYear > 1979 ORDER BY 1.0 * ( GNP - GNPOld ) / GNPOld DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 325,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['English-speaking countries', 'highest population density', 'lowest population density', 'ratio comparison'], 'relations': [\"majority_language_condition (country → language = 'English' and percentage > 50)\", 'density_computation (population_density = population / land_area)', 'density_comparison (highest_density : lowest_density)'], 'intent': 'identify_english_majority_country_with_max_density_and_ratio_to_min_density', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'population_density': 'people per square unit (implied by database)', 'ratio': 'dimensionless (times larger)', 'note': 'Units cancel in ratio calculation; consistent land_area units required'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'name'}, {'column': 'id (for joining)'}], 'Population.languages': [{'column': 'language'}, {'column': 'percentage'}, {'column': 'country_id (for joining)'}], 'Population.demographics': [{'column': 'population'}, {'column': 'land_area'}]}}\nA common sense reasoning question is as follows:\nWhich country where the majority of people speak English has the highest population density, how many times larger than the country with the lowest population density?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name , ( 100.0 * Population / SurfaceArea ) / ( SELECT MIN ( 100.0 * Population / SurfaceArea ) FROM country WHERE 100.0 * Population / SurfaceArea > 0 ) AS times FROM country WHERE Code IN ( SELECT CountryCode FROM ( SELECT * , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"English\" ) ORDER BY 100.0 * Population / SurfaceArea DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 326,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['countries where English is the most spoken language', 'population density', 'country with highest population density', 'country with lowest population density'], 'relations': ['language_prevalence_relation (country → language dominance)', 'density_computation_relation (population/area → density)', 'max_min_comparison_relation (density comparison)', 'ratio_calculation_relation (highest_density / lowest_density)'], 'intent': 'identify_country_with_max_density_and_compute_density_ratio', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'population_density': 'people per square kilometer (implied by database schema)', 'ratio': 'unitless (dimensionless quantity)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'country_id'}, {'column': 'country_name'}], 'Population.languages': [{'column': 'language_name'}, {'column': 'is_primary'}, {'column': 'percentage_spoken'}], 'Population.demographics': [{'column': 'population'}, {'column': 'area'}, {'column': 'population_density'}]}}\nA common sense reasoning question is as follows:\nAmong the countries in which English is the most spoken language, which country has the highest population density? What is the ratio between the highest and lowest population density?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name , ( 100.0 * Population / SurfaceArea ) / ( SELECT MIN ( 100.0 * Population / SurfaceArea ) FROM country WHERE 100.0 * Population / SurfaceArea > 0 ) AS times FROM country WHERE Code IN ( SELECT CountryCode FROM ( SELECT * , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"English\" ) ORDER BY 100.0 * Population / SurfaceArea DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 327,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Ireland', 'English-speaking countries', 'population density', 'highest population density', 'lowest population density'], 'relations': ['excluded_country (Ireland removed from consideration)', 'language_majority (country → language = English AND percentage > 50%)', 'density_comparison (highest_density / lowest_density ratio)'], 'intent': 'compute_population_density_ratio_between_extreme_english_speaking_countries_excluding_ireland', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'population_density': 'people per square kilometer or square mile (units cancel in ratio)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'name'}, {'column': 'population'}, {'column': 'area'}], 'Population.country_languages': [{'column': 'language'}, {'column': 'percentage'}]}}\nA hypothetical reasoning question is as follows:\nIf no one in Ireland speaks English, which country where the majority of people speak English has the highest population density, how many times larger than the country with the lowest population density?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name , ( 100.0 * Population / SurfaceArea ) / ( SELECT MIN ( 100.0 * Population / SurfaceArea ) FROM country WHERE 100.0 * Population / SurfaceArea > 0 ) AS times FROM country WHERE Code IN ( SELECT CountryCode FROM ( SELECT * , MAX ( Percentage ) FROM countrylanguage A JOIN country B ON A.CountryCode = B.Code WHERE B.name != \"Ireland\" GROUP BY A.CountryCode ) WHERE Language = \"English\" ) ORDER BY 100.0 * Population / SurfaceArea DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 328,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Ireland', 'English', 'population density', 'countries with English as primary language'], 'relations': ['language_primary (English spoken as most common language)', 'country_exclusion (Ireland excluded despite English prevalence)', 'density_comparison (maximum vs minimum population density)', 'ratio_calculation (highest / lowest density)'], 'intent': 'identify_country_with_max_population_density_and_compute_density_ratio_among_primary_english_speaking', 'reasoning_type': 'common sense understanding reasoning, mathematical logic reasoning', 'numerical_values': [], 'units': {'population_density': 'people per square kilometer (implied by database)', 'ratio': 'unitless (dimensionless quantity)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'name'}], 'Population.languages': [{'column': 'language'}, {'column': 'is_primary'}], 'Population.demographics': [{'column': 'population'}, {'column': 'area'}, {'column': 'density'}]}}\nA hypothetical reasoning question is as follows:\nIf English is not spoken in Ireland, which country among those in which English is the most spoken language has the highest population density? What is the ratio between the highest and lowest population density?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name , ( 100.0 * Population / SurfaceArea ) / ( SELECT MIN ( 100.0 * Population / SurfaceArea ) FROM country WHERE 100.0 * Population / SurfaceArea > 0 ) AS times FROM country WHERE Code IN ( SELECT CountryCode FROM ( SELECT * , MAX ( Percentage ) FROM countrylanguage A JOIN country B ON A.CountryCode = B.Code WHERE B.name != \"Ireland\" GROUP BY A.CountryCode ) WHERE Language = \"English\" ) ORDER BY 100.0 * Population / SurfaceArea DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 329,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['countries', 'Arabic (language)', 'official language', 'GNP increase rate'], 'relations': ['country_to_language (country → official language)', 'language_exclusion (Arabic NOT official)', 'country_to_GNP_trend (country → GNP growth metric)'], 'intent': 'identify_country_with_maximum_GNP_growth_under_language_constraint', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'GNP_rate': 'percentage (%)', 'time_period': 'annual (implied by database schema)', 'conversion': 'growth_rate = [(current_GNP - past_GNP) / past_GNP] * 100'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'country_id'}, {'column': 'name'}], 'Population.languages': [{'column': 'official_language'}], 'Population.economic_indicators': [{'column': 'gnp_value'}, {'column': 'year'}]}}\nA mathematical logic question is as follows:\nIn countries where Arabic is not the official language, which country has the largest increase rate in GNP?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM country WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = \"Arabic\" AND IsOfficial = \"T\" ) ORDER BY 100.0 * ( GNP - GNPOld ) / GNPOld DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 330,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['countries', 'non-Arabic official languages', 'GNP growth rate'], 'relations': ['country_has_language (country → official language)', 'country_has_gnp_growth (country → GNP growth rate)', 'exclusion_filter (languages ≠ Arabic)'], 'intent': 'retrieve_country_with_maximum_gnp_growth_in_non_arabic_speaking_nations', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'growth_rate': 'percentage (implied by growth rate calculation)', 'gnp': 'monetary units (database-dependent, e.g., USD)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'country_id'}, {'column': 'name'}], 'Population.languages': [{'column': 'language'}, {'column': 'is_official'}], 'Population.gnp_data': [{'column': 'gnp_value'}, {'column': 'year'}, {'column': 'country_id'}, {'column': 'growth_rate (if precomputed)'}]}}\nA mathematical logic question is as follows:\nAmong countries with non-Arabic official languages, what is the name of the country that has experienced the greatest growth rate in GNP?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM country WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = \"Arabic\" AND IsOfficial = \"T\" ) ORDER BY 100.0 * ( GNP - GNPOld ) / GNPOld DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 331,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['countries without Arabic as official language', 'GNP growth rate', 'South America', 'GNP increase (9999.0)'], 'relations': ['country_to_language (country → official language ≠ Arabic)', 'country_to_continent (country → continent = South America)', 'gnp_growth_calculation (new_GNP = old_GNP + 9999.0 → growth_rate = (new_GNP - old_GNP) / old_GNP)'], 'intent': 'identify_country_with_maximum_gnp_growth_rate_after_increase', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [9999.0], 'units': {'gnp': 'monetary unit (implied by database)', 'growth_rate': 'unitless ratio', 'conversion': 'absolute increase (9999.0) added directly to GNP'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'name'}, {'column': 'official_language'}, {'column': 'continent'}, {'column': 'gnp'}]}}\nA hypothetical reasoning question is as follows:\nAmong the countries where Arabic is not the official language, which country has the largest growth rate of GNP if the old GNP of all countries in South America increased by 9999.0?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM ( SELECT Name , Code , GNP , GNPOld + 9999.0 AS GNPOld FROM country WHERE Continent = \"South America\" UNION ALL SELECT Name , Code , GNP , GNPOld FROM country WHERE Continent != \"South America\" ) WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = \"Arabic\" AND IsOfficial = \"T\" ) ORDER BY 100.0 * ( GNP - GNPOld ) / GNPOld DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 332,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['South American countries', 'non-Arabic official languages', 'GNP increase 9999.0', 'Gross National Product growth rate'], 'relations': ['continent_assignment (country → South America)', 'language_exclusion (official_language ≠ Arabic)', 'gnp_modification (new_gnp = gnp + 9999.0)', 'growth_rate_calculation (growth_rate = (9999.0 / original_gnp) × 100)'], 'intent': 'identify_country_with_max_gnp_growth_rate_after_fixed_increase', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [9999.0], 'units': {'gnp': 'monetary units (from database schema)', 'growth_rate': 'percent', 'conversion': 'growth_rate = (ΔGNP / original_gnp) × 100%'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'name'}, {'column': 'continent'}, {'column': 'gnp'}], 'Population.country_languages': [{'column': 'language_type'}, {'column': 'is_official'}]}}\nA hypothetical reasoning question is as follows:\nIf all South American countries have an increase of 9999.0 in their previous GNP, which country, among those with non-Arabic official languages, has the highest Gross National Product growth rate?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM ( SELECT Name , Code , GNP , GNPOld + 9999.0 AS GNPOld FROM country WHERE Continent = \"South America\" UNION ALL SELECT Name , Code , GNP , GNPOld FROM country WHERE Continent != \"South America\" ) WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = \"Arabic\" AND IsOfficial = \"T\" ) ORDER BY 100.0 * ( GNP - GNPOld ) / GNPOld DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 333,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['city in North America', 'Kang-won'], 'relations': ['location (city → North America continent)', 'population_comparison (city population ≥ 2 × Kang-won population)'], 'intent': 'identify_city_by_population_comparison', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'population': 'count (absolute number)', 'comparison': 'ratio (dimensionless multiplier)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.cities': [{'column': 'name'}, {'column': 'population'}, {'column': 'country_code'}], 'Population.regions': [{'column': 'name'}, {'column': 'population'}, {'column': 'region_type'}], 'Population.countries': [{'column': 'continent'}]}}\nA mathematical logic question is as follows:\nWhich city in North America has a population at least twice that of Kang-won?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT B.name FROM country A JOIN city B ON A.Code = B.CountryCode WHERE A.Continent = \"North America\" AND B.Population >= 2 * ( SELECT SUM ( Population ) FROM city WHERE District = \"Kang-won\" )",
        "db_id": "Population"
    },
    {
        "id": 334,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['North American city', 'Kang-won population'], 'relations': ['population_comparison (city_population ≥ 2 × Kang-won_population)', 'geographical_scope (city in North America)'], 'intent': 'find_city_with_min_double_population', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': None, 'units': {'population': 'people (implied by database schema)', 'comparison': 'ratio (≥2.0)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.cities': [{'column': 'name'}, {'column': 'population'}, {'column': 'region'}], 'Population.regions': [{'column': 'name'}, {'column': 'population'}, {'column': 'region_type'}]}}\nA mathematical logic question is as follows:\nWhat North American city has a population that is at least double the population of Kang-won?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT B.name FROM country A JOIN city B ON A.Code = B.CountryCode WHERE A.Continent = \"North America\" AND B.Population >= 2 * ( SELECT SUM ( Population ) FROM city WHERE District = \"Kang-won\" )",
        "db_id": "Population"
    },
    {
        "id": 335,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['North American countries with English as official language', 'city in North America', 'Kang-won'], 'relations': ['country_has_language (official language relationship)', 'city_located_in_country', 'continent_filter (North America)', 'population_comparison (at least twice)'], 'intent': 'identify_cities_with_population_at_least_double_that_of_Kang_won_after_country_population_increase', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1, 2], 'units': {'percentage': '% (1% population increase)', 'population_multiplier': \"factor (2 for 'twice')\", 'population_unit': 'people (implicit)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'id'}, {'column': 'continent'}], 'Population.cities': [{'column': 'name'}, {'column': 'population'}, {'column': 'country_id'}], 'Population.country_languages': [{'column': 'country_id'}, {'column': 'language'}, {'column': 'is_official'}]}}\nA hypothetical reasoning question is as follows:\nIf the population of North American countries where English is the official language was increased by 1%, which city in North America has a population at least twice that of Kang-won?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT DISTINCT ( name ) FROM ( SELECT B.name , B.Population * ( 1 + 0.01 ) AS Population FROM country A JOIN city B ON A.Code = B.CountryCode JOIN countrylanguage C ON A.Code = C.CountryCode WHERE A.Continent = \"North America\" AND C.Language = \"English\" AND C.IsOfficial = \"T\" UNION ALL SELECT B.name , B.Population FROM country A JOIN city B ON A.Code = B.CountryCode JOIN countrylanguage C ON A.Code = C.CountryCode WHERE A.Continent = \"North America\" AND NOT ( C.Language = \"English\" AND C.IsOfficial = \"T\" ) ) WHERE Population >= 2 * ( SELECT SUM ( Population ) FROM city WHERE District = \"Kang-won\" )",
        "db_id": "Population"
    },
    {
        "id": 336,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['countries in North America', 'English as official language', 'population increase of 1%', 'North American city', 'Kang-won', 'population comparison (double)'], 'relations': ['country_continent (country belongs to North America)', 'country_language (country has English as official language)', 'city_country (city located in a country)', 'population_adjustment (applying 1% increase to qualifying countries)', \"population_comparison (city population >= 2 * Kang-won's population)\"], 'intent': 'identify_north_american_city_with_population_condition_after_adjustment', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1, 2], 'units': {'population': 'persons', 'increase_percentage': '%', 'comparison_factor': 'multiplier'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'country_id'}, {'column': 'continent'}, {'column': 'official_language'}], 'Population.cities': [{'column': 'city_id'}, {'column': 'city_name'}, {'column': 'country_id'}, {'column': 'population'}]}}\nA hypothetical reasoning question is as follows:\nIf all countries in North America with English as the official language experienced a population increase of 1%, what North American city would have a population that is at least double the population of Kang-won?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT DISTINCT ( name ) FROM ( SELECT B.name , B.Population * ( 1 + 0.01 ) AS Population FROM country A JOIN city B ON A.Code = B.CountryCode JOIN countrylanguage C ON A.Code = C.CountryCode WHERE A.Continent = \"North America\" AND C.Language = \"English\" AND C.IsOfficial = \"T\" UNION ALL SELECT B.name , B.Population FROM country A JOIN city B ON A.Code = B.CountryCode JOIN countrylanguage C ON A.Code = C.CountryCode WHERE A.Continent = \"North America\" AND NOT ( C.Language = \"English\" AND C.IsOfficial = \"T\" ) ) WHERE Population >= 2 * ( SELECT SUM ( Population ) FROM city WHERE District = \"Kang-won\" )",
        "db_id": "Population"
    },
    {
        "id": 337,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['continent', 'Africa', 'GNP growth rate'], 'relations': ['comparison_ratio (continent_GNP_growth ≥ 1.5 × Africa_GNP_growth)', 'geographical_hierarchy (continent contains countries)'], 'intent': 'identify_continents_exceeding_growth_threshold_relative_to_africa', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1.5], 'units': {'growth_rate': 'percentage (implied ratio, no explicit unit conversion)', 'multiplier': 'dimensionless (1.5x ratio)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.continent': [{'column': 'name'}, {'column': 'gnp_growth'}]}}\nA mathematical logic question is as follows:\nWhich continent has a GNP growth rate at least 1.5 times that of Africa?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Continent FROM country GROUP BY Continent HAVING 100.0 * ( SUM ( GNP ) - SUM ( GNPOld ) ) / SUM ( GNPOld ) > 1.5 * ( SELECT 100.0 * ( SUM ( GNP ) - SUM ( GNPOld ) ) / SUM ( GNPOld ) FROM country WHERE Continent = \"Africa\" )",
        "db_id": "Population"
    },
    {
        "id": 338,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['continent', 'rate of growth of GNP', 'Africa'], 'relations': ['continent_gnp_growth (continent → growth_rate)', 'growth_comparison (target_growth ≥ 1.5 × Africa_growth)'], 'intent': 'identify_continents_exceeding_relative_gnp_growth_threshold', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1.5], 'units': {'growth_rate': 'percentage (implied unit for growth rate)', 'multiplier': 'unitless scalar (1.5)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.continents': [{'column': 'continent_name'}, {'column': 'gnp_growth_rate'}]}}\nA mathematical logic question is as follows:\nName the continent whose rate of growth of GNP is no less than 1.5 times that of Africa?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Continent FROM country GROUP BY Continent HAVING 100.0 * ( SUM ( GNP ) - SUM ( GNPOld ) ) / SUM ( GNPOld ) > 1.5 * ( SELECT 100.0 * ( SUM ( GNP ) - SUM ( GNPOld ) ) / SUM ( GNPOld ) FROM country WHERE Continent = \"Africa\" )",
        "db_id": "Population"
    },
    {
        "id": 339,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Czech-speaking countries', 'current GNP', 'continent', 'GNP growth rate', 'Africa', '0.5% increase', '1.5 times growth ratio'], 'relations': ['countries_have_continent_membership', 'countries_have_GNP_values', 'language_majority_defines_country_group (Czech → countries)', 'GNP_change_impacts_continent_growth', 'growth_rate_comparison_between_continents'], 'intent': 'identify_continent_with_minimum_1.5x_growth_rate_relative_to_africa_after_czech_gnp_increase', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.5, 1.5], 'units': {'percentage': '% (for GNP increase)', 'growth_rate_ratio': 'dimensionless', 'GNP': 'monetary units (implied by database)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'country_id'}, {'column': 'continent_id'}], 'Population.country_languages': [{'column': 'language'}, {'column': 'is_majority'}], 'Population.gnp_data': [{'column': 'gnp_value'}], 'Population.continents': [{'column': 'continent_name'}]}}\nA hypothetical reasoning question is as follows:\nIf the current GNP of countries where the majority of people speak Czech was increased by 0.5%, which continent has a GNP growth rate at least 1.5 times that of Africa?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Continent FROM ( SELECT Code , GNP * ( 1 + 0.005 ) AS GNP , GNPOld , Continent FROM country WHERE Code IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Czech\" ) UNION ALL SELECT Code , GNP , GNPOld , Continent FROM country WHERE Code NOT IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Czech\" ) ) GROUP BY Continent HAVING 100.0 * ( SUM ( GNP ) - SUM ( GNPOld ) ) / SUM ( GNPOld ) > 1.5 * ( SELECT 100.0 * ( SUM ( GNP ) - SUM ( GNPOld ) ) / SUM ( GNPOld ) FROM country WHERE Continent = \"Africa\" )",
        "db_id": "Population"
    },
    {
        "id": 340,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Africa', 'Czech-speaking countries', 'GNP growth rate', 'continent'], 'relations': ['language_to_country (Czech → countries)', 'country_to_continent (country → continent)', 'gnp_to_growth (GNP change → growth rate)', 'growth_comparison (growth_rate_continent >= 1.5 * growth_rate_Africa)'], 'intent': 'identify_continent_with_gnp_growth_1.5x_greater_than_Africa_after_czech_country_gnp_increase', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1.5, 0.5], 'units': {'percentage': '% (for GNP increase and growth rates)', 'factor': 'dimensionless (1.5x comparison factor)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.country': [{'column': 'Continent', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['Africa', 'Oceania', 'South America', 'Europe', 'Asia']}, {'column': 'GNP', 'type': 'DOUBLE', 'primary_key': False, 'comment': '', 'examples': ['8000.0', '1500000.0', '1800000.0', '700000.0', '50000.0']}, {'column': 'Language'}]}}\nA hypothetical reasoning question is as follows:\nWhich continent would have a GNP growth rate that is at least 1.5 times greater than Africa if the GNP of countries where Czech is the dominant language increased by 0.5%?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Continent FROM ( SELECT Code , GNP * ( 1 + 0.005 ) AS GNP , GNPOld , Continent FROM country WHERE Code IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Czech\" ) UNION ALL SELECT Code , GNP , GNPOld , Continent FROM country WHERE Code NOT IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Czech\" ) ) GROUP BY Continent HAVING 100.0 * ( SUM ( GNP ) - SUM ( GNPOld ) ) / SUM ( GNPOld ) > 1.5 * ( SELECT 100.0 * ( SUM ( GNP ) - SUM ( GNPOld ) ) / SUM ( GNPOld ) FROM country WHERE Continent = \"Africa\" )",
        "db_id": "Population"
    },
    {
        "id": 341,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Zambia', 'life expectancy', '1.5 times'], 'relations': [\"country_life_expectancy_comparison (≥1.5× Zambia's life expectancy)\", 'country_reference (Zambia → benchmark)'], 'intent': 'find_countries_by_relative_life_expectancy_threshold', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1.5], 'units': {'life_expectancy': 'years (implied by database schema)', 'comparison': 'ratio (dimensionless multiplier)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.country': [{'column': 'name'}, {'column': 'life_expectancy'}]}}\nA mathematical logic question is as follows:\nWhich country has a life expectancy no less than 1.5 times that of Zambia?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM country WHERE LifeExpectancy >= 1.5 * ( SELECT LifeExpectancy FROM country WHERE name = \"Zambia\" )",
        "db_id": "Population"
    },
    {
        "id": 342,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['country', 'Zambia', 'average life expectancy'], 'relations': ['country_to_life_expectancy (country → life expectancy value)', \"ratio_comparison (life_expectancy ≥ 1.5 * Zambia's life expectancy)\"], 'intent': 'compare_life_expectancy_ratios_across_countries', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1.5], 'units': {'life_expectancy': 'years (implied)', 'ratio': 'dimensionless multiplier', 'conversion': \"ratio = (Country's life expectancy) / (Zambia's life expectancy)\"}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.country_life_expectancy': [{'column': 'country_name'}, {'column': 'life_expectancy_years'}]}}\nA mathematical logic question is as follows:\nWhat country has an average life expectancy that is at least 1.5 times that of Zambia?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM country WHERE LifeExpectancy >= 1.5 * ( SELECT LifeExpectancy FROM country WHERE name = \"Zambia\" )",
        "db_id": "Population"
    },
    {
        "id": 343,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['top 20 countries by per capita GNP', 'life expectancy', 'Zambia'], 'relations': ['ranking_relation (top 20 by GNP per capita)', \"comparison_relation (life expectancy ≥ 1.5 × Zambia's life expectancy)\"], 'intent': 'identify_countries_meeting_hypothetical_life_expectancy_condition', 'reasoning_type': 'ideal hypothesis reasoning', 'numerical_values': [20, 90, 1.5], 'units': {'life_expectancy': 'years (implied)', 'gnp_per_capita': 'monetary units (from database schema)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'country_name'}], 'Population.economic_indicators': [{'column': 'gnp_per_capita'}], 'Population.health_indicators': [{'column': 'life_expectancy'}]}}\nA hypothetical reasoning question is as follows:\nIf the top 20 countries in terms of per capita GNP in the world has a life expectancy of 90, which country has a life expectancy no less than 1.5 times that of Zambia?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM ( SELECT Name , 90 AS LifeExpectancy FROM country WHERE Code IN ( SELECT Code FROM country ORDER BY 1.0 * GNP / Population DESC LIMIT 20 ) UNION ALL SELECT Name , LifeExpectancy FROM country WHERE Code NOT IN ( SELECT Code FROM country ORDER BY 1.0 * GNP / Population DESC LIMIT 20 ) ) WHERE LifeExpectancy >= 1.5 * ( SELECT LifeExpectancy FROM country WHERE name = \"Zambia\" )",
        "db_id": "Population"
    },
    {
        "id": 344,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Zambia', 'life expectancy', 'per capita GNP', 'country', 'top 20 countries'], 'relations': [\"comparison_ratio (life_expectancy >= 1.5 * Zambia's life_expectancy)\", 'ranking_criteria (top 20 by per capita GNP)', 'attribute_constraint (top 20 life_expectancy = 90)'], 'intent': 'identify_countries_meeting_life_expectancy_ratio', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1.5, 20, 90], 'units': {'life_expectancy': 'years', 'per_capita_gnp': 'monetary units (implied by database)', 'ratio_calculation': 'dimensionless multiplier (1.5)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'country_name'}], 'Population.population_statistics': [{'column': 'life_expectancy'}], 'Population.economic_indicators': [{'column': 'gnp_per_capita'}, {'column': 'country_code'}]}}\nA hypothetical reasoning question is as follows:\nWhich country has a life expectancy that is at least 1.5 times that of Zambia, given that the top 20 countries in the world with the highest per capita GNP have a life expectancy of 90?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM ( SELECT Name , 90 AS LifeExpectancy FROM country WHERE Code IN ( SELECT Code FROM country ORDER BY 1.0 * GNP / Population DESC LIMIT 20 ) UNION ALL SELECT Name , LifeExpectancy FROM country WHERE Code NOT IN ( SELECT Code FROM country ORDER BY 1.0 * GNP / Population DESC LIMIT 20 ) ) WHERE LifeExpectancy >= 1.5 * ( SELECT LifeExpectancy FROM country WHERE name = \"Zambia\" )",
        "db_id": "Population"
    },
    {
        "id": 345,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['countries', 'Dutch language', 'GNP reduction'], 'relations': ['country_language_relationship (country → language status)', 'gnp_temporal_relationship (country → GNP change over time)'], 'intent': 'identify_country_with_max_gnp_decrease_non_dutch_speaking', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'GNP': 'currency unit (implied by database schema)', 'reduction_calculation': 'ΔGNP = GNP_previous - GNP_current'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'country_id'}, {'column': 'name'}], 'Population.languages': [{'column': 'country_id'}, {'column': 'is_main'}, {'column': 'language_name'}], 'Population.gnp_data': [{'column': 'country_id'}, {'column': 'gnp_value'}, {'column': 'year'}]}}\nA mathematical logic question is as follows:\nIn countries where Dutch is not the main language, which country has the largest reduction in GNP?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM country WHERE Code NOT IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Dutch\" ) ORDER BY GNPOld - GNP DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 346,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['country', 'Dutch', 'primary language', 'Gross National Product (GNP)', 'decrease'], 'relations': ['language_exclusion (country where Dutch ≠ primary language)', 'gnp_decline (country → change in GNP over time)'], 'intent': 'identify_country_with_max_gnp_decline_excluding_dutch_speaking', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'GNP': 'monetary unit (implied by database, e.g., USD)', 'decrease': 'absolute or percentage change (context-dependent)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'country_code'}, {'column': 'primary_language'}, {'column': 'name'}], 'Population.gnp_data': [{'column': 'country_code'}, {'column': 'year'}, {'column': 'gnp_value'}]}}\nA mathematical logic question is as follows:\nWhich country, among those where Dutch is not the primary language, has experienced the most significant decrease in Gross National Product (GNP)?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM country WHERE Code NOT IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Dutch\" ) ORDER BY GNPOld - GNP DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 347,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Aruba', 'Dutch', 'countries where Dutch is not the main language', 'GNP', 'reduction'], 'relations': ['country_language_status (determines if Dutch is primary)', 'gnp_comparison (current vs hypothetical GNP for reduction)', \"scenario_impact (effect of Aruba's language shift)\"], 'intent': 'identify_country_with_max_gnp_decrease_in_hypothetical_scenario', 'reasoning_type': 'ideal hypothesis reasoning', 'numerical_values': [], 'units': {'GNP': 'currency unit (e.g., USD, dependent on database)', 'reduction': 'absolute or percentage difference in GNP'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'country_name'}], 'Population.languages': [{'column': 'language_name'}, {'column': 'is_main_language'}], 'Population.gnp_data': [{'column': 'gnp_value'}, {'column': 'year'}], 'Population.population': [{'column': 'population_count'}, {'column': 'country_id'}]}}\nA hypothetical reasoning question is as follows:\nIf everyone in Aruba spoke Dutch, in countries where Dutch is not the main language, which country has the largest reduction in GNP?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM country WHERE Code NOT IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Dutch\" UNION SELECT Code FROM country WHERE name = \"Aruba\" ) ORDER BY GNPOld - GNP DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 348,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Aruba', 'Dutch language', 'Gross National Product (GNP)', 'country', 'primary language'], 'relations': ['language_exclusion (countries where Dutch ≠ primary language)', 'gnp_trend (country → GNP decrease over time)', 'territory_language_assumption (Aruba → all speak Dutch)'], 'intent': 'identify_country_with_largest_gnp_decrease_excluding_dutch_primary', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [], 'units': {'GNP': 'monetary unit (e.g., USD, as per database storage)', 'change_calculation': 'absolute or percentage decrease (requires temporal comparison)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'country_code'}, {'column': 'name'}], 'Population.languages': [{'column': 'primary_language'}], 'Population.gnp_data': [{'column': 'country_code'}, {'column': 'gnp_value'}, {'column': 'year'}]}}\nA hypothetical reasoning question is as follows:\nAssuming every person in Aruba speaks Dutch, which country, among those where Dutch is not the primary language, has experienced the most significant decrease in Gross National Product (GNP)?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name FROM country WHERE Code NOT IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Dutch\" UNION SELECT Code FROM country WHERE name = \"Aruba\" ) ORDER BY GNPOld - GNP DESC LIMIT 1",
        "db_id": "Population"
    },
    {
        "id": 349,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['North America', 'South America', 'declining GNP'], 'relations': ['continent_contains_countries (North America/South America → countries)', 'gnp_trend_status (countries → declining GNP status)'], 'intent': 'compare_count_of_countries_with_declining_gnp_between_continents', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'comparison_unit': 'count (number of countries)', 'gnp_unit': 'implied monetary unit (from database schema)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'continent'}, {'column': 'country_id'}], 'Population.economic_indicators': [{'column': 'gnp_trend'}, {'column': 'country_id'}]}}\nA mathematical logic question is as follows:\nHow many more countries in North America than in South America have a declining GNP?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT ( * ) - ( SELECT COUNT ( * ) FROM country WHERE GNP < GNPOld AND Continent = \"South America\" ) AS diff FROM country WHERE GNP < GNPOld AND Continent = \"North America\"",
        "db_id": "Population"
    },
    {
        "id": 350,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['countries', 'decreasing GNP', 'North America', 'South America'], 'relations': ['located_in (country → continent)', 'has_gnp_trend (country → GNP trend status)'], 'intent': 'calculate_difference_in_counts', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'count': 'unitless (number of countries)', 'difference': 'unitless (subtraction result)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'continent'}, {'column': 'country_id'}], 'Population.gnp_data': [{'column': 'gnp_trend'}, {'column': 'country_id'}]}}\nA mathematical logic question is as follows:\nWhat is the difference in the number of countries with a decreasing GNP in North America compared to South America?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT ( * ) - ( SELECT COUNT ( * ) FROM country WHERE GNP < GNPOld AND Continent = \"South America\" ) AS diff FROM country WHERE GNP < GNPOld AND Continent = \"North America\"",
        "db_id": "Population"
    },
    {
        "id": 351,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['GNP (Gross National Product)', 'top two most populous countries in North America', 'North America', 'South America', 'declining GNP', 'countries in North America', 'countries in South America'], 'relations': ['continent_membership (country → continent)', 'population_ranking (within North America)', 'gnp_change (increase by 2% for top two populous NA countries)', 'gnp_trend_comparison (declining vs stable/increasing)', 'count_difference (NA declining countries vs SA declining countries)'], 'intent': 'compare_count_of_declining_gnp_countries_between_north_and_south_america_after_hypothetical_gnp_increase', 'reasoning_type': 'ideal hypothesis reasoning', 'numerical_values': [2, 2], 'units': {'percentage': '% (for GNP increase)', 'count': 'countries (unit for final comparison)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'continent'}, {'column': 'country_name'}, {'column': 'population'}], 'Population.economic_data': [{'column': 'gnp_current'}, {'column': 'gnp_previous'}]}}\nA hypothetical reasoning question is as follows:\nSuppose the current GNP of the top two most populous countries in North America increases by 2%, how many more countries in North America than in South America have a declining GNP?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT ( * ) - ( SELECT COUNT ( * ) FROM country WHERE GNP < GNPOld AND Continent = \"South America\" ) AS diff FROM ( SELECT Name , GNP * ( 1 + 0.02 ) AS GNP , GNPOld , Continent FROM country WHERE Continent = \"North America\" AND Code IN ( SELECT Code FROM country WHERE Continent = \"North America\" ORDER BY Population DESC LIMIT 2 ) UNION ALL SELECT Name , GNP , GNPOld , Continent FROM country WHERE Continent = \"North America\" AND Code NOT IN ( SELECT Code FROM country WHERE Continent = \"North America\" ORDER BY Population DESC LIMIT 2 ) ) WHERE GNP < GNPOld AND Continent = \"North America\"",
        "db_id": "Population"
    },
    {
        "id": 352,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['North America', 'South America', 'two most populated countries (North America)', 'GNP (Gross National Product)', 'decreasing GNP countries'], 'relations': ['continent_contains_countries (North America → countries)', 'population_ranking (countries sorted by population)', 'gnp_change_impact (2% increase → altered GNP distribution)', 'comparison_between_regions (North vs South America)'], 'intent': 'compare_gnp_decline_count_after_hypothetical_increase', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'population': 'people (implied)', 'gnp': 'currency (from database)', 'percentage_change': '% (2% GNP increase)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'country_name'}, {'column': 'continent'}, {'column': 'population'}], 'Population.gnp_records': [{'column': 'gnp_value'}, {'column': 'year'}]}}\nA hypothetical reasoning question is as follows:\nIf the two most populated North American countries experience a 2% increase in GNP, what is the difference in the number of countries with a decreasing GNP between North and South America?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT COUNT ( * ) - ( SELECT COUNT ( * ) FROM country WHERE GNP < GNPOld AND Continent = \"South America\" ) AS diff FROM ( SELECT Name , GNP * ( 1 + 0.02 ) AS GNP , GNPOld , Continent FROM country WHERE Continent = \"North America\" AND Code IN ( SELECT Code FROM country WHERE Continent = \"North America\" ORDER BY Population DESC LIMIT 2 ) UNION ALL SELECT Name , GNP , GNPOld , Continent FROM country WHERE Continent = \"North America\" AND Code NOT IN ( SELECT Code FROM country WHERE Continent = \"North America\" ORDER BY Population DESC LIMIT 2 ) ) WHERE GNP < GNPOld AND Continent = \"North America\"",
        "db_id": "Population"
    },
    {
        "id": 353,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['continent', 'Europe', 'per capita GNP growth rate'], 'relations': ['comparison (continent vs Europe)', 'growth_difference (≥2 percentage points)'], 'intent': 'identify_continents_with_gnp_growth_superior_to_europe', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2.0], 'units': {'growth_rate': 'percentage points', 'differential': 'Δ ≥ 2 percentage points'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.gnp_data': [{'column': 'continent'}, {'column': 'per_capita_gnp_growth'}]}}\nA common sense reasoning question is as follows:\nWhich continent has a per capita GNP growth rate at least two percentage points higher than Europe?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Continent FROM country GROUP BY Continent HAVING 1.0 * ( SUM ( GNP ) / SUM ( Population ) - SUM ( GNPOld ) / SUM ( Population ) ) / ( SUM ( GNPOld ) / SUM ( Population ) ) >= ( SELECT 1.0 * ( SUM ( GNP ) / SUM ( Population ) - SUM ( GNPOld ) / SUM ( Population ) ) / ( SUM ( GNPOld ) / SUM ( Population ) ) FROM country WHERE Continent = \"Europe\" ) + 0.02",
        "db_id": "Population"
    },
    {
        "id": 354,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['continent', 'Europe', 'per capita GNP growth rate', 'percentage points'], 'relations': ['comparison (continent growth rate > Europe growth rate)', 'growth_rate_difference (Δ ≥ 2 percentage points)'], 'intent': 'retrieve_continent_by_growth_rate_comparison', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'growth_rate': 'percentage points', 'difference': 'percentage points (absolute difference)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.continent_economic_data': [{'column': 'continent_name'}, {'column': 'gnp_growth_rate'}, {'column': 'population'}]}}\nA common sense reasoning question is as follows:\nName a continent whose per capita GNP growth rate exceeds Europe by at least two percentage points?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Continent FROM country GROUP BY Continent HAVING 1.0 * ( SUM ( GNP ) / SUM ( Population ) - SUM ( GNPOld ) / SUM ( Population ) ) / ( SUM ( GNPOld ) / SUM ( Population ) ) >= ( SELECT 1.0 * ( SUM ( GNP ) / SUM ( Population ) - SUM ( GNPOld ) / SUM ( Population ) ) / ( SUM ( GNPOld ) / SUM ( Population ) ) FROM country WHERE Continent = \"Europe\" ) + 0.02",
        "db_id": "Population"
    },
    {
        "id": 355,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['top three countries', 'longest life expectancy', 'GNP', 'continent', 'Europe', 'per capita GNP growth rate'], 'relations': ['country_to_continent (countries belong to continents)', 'life_expectancy_ranking (top three countries by life expectancy)', 'gnp_adjustment (GNP decreased by 2% for top three countries)', 'growth_rate_comparison (continent vs Europe with ≥2 point difference)'], 'intent': 'identify_continent_with_superior_per_capita_gnp_growth_after_adjustment', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3, 2, 2], 'units': {'percentage_decrease': '%', 'growth_rate_difference': 'percentage points', 'gnp': 'monetary units (e.g., USD)', 'per_capita': 'monetary units per person'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'life_expectancy'}, {'column': 'gnp'}, {'column': 'population'}, {'column': 'continent_id'}], 'Population.continents': [{'column': 'continent_name'}], 'Population.economic_data': [{'column': 'gnp_growth_rate'}, {'column': 'per_capita_gnp'}]}}\nA hypothetical reasoning question is as follows:\nIf the GNP of the top three countries with the longest life expectancy decreases by 2%, which continent has a per capita GNP growth rate at least two points higher than Europe?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Continent FROM ( SELECT name , Continent , GNP * ( 1 - 0.02 ) AS GNP , Population , GNPOld FROM country WHERE Code IN ( SELECT Code FROM country ORDER BY LifeExpectancy DESC LIMIT 3 ) UNION ALL SELECT name , Continent , GNP , Population , GNPOld FROM country WHERE Code NOT IN ( SELECT Code FROM country ORDER BY LifeExpectancy DESC LIMIT 3 ) ) GROUP BY Continent HAVING 1.0 * ( SUM ( GNP ) / SUM ( Population ) - SUM ( GNPOld ) / SUM ( Population ) ) / ( SUM ( GNPOld ) / SUM ( Population ) ) >= ( SELECT 1.0 * ( SUM ( GNP ) / SUM ( Population ) - SUM ( GNPOld ) / SUM ( Population ) ) / ( SUM ( GNPOld ) / SUM ( Population ) ) FROM country WHERE Continent = \"Europe\" ) + 0.02",
        "db_id": "Population"
    },
    {
        "id": 356,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['top three countries by life expectancy', 'GNP', 'continent', 'Europe', 'per capita GNP growth rate', '2% decrease'], 'relations': ['country_to_continent_mapping', 'ranking_by_life_expectancy', 'gnp_decrease_impact', 'growth_rate_comparison', 'continent_per_capita_calculation'], 'intent': 'identify_continent_with_superior_growth_after_specific_gnp_reduction', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2, 2], 'units': {'decrease': 'percentage (2%)', 'growth_difference': 'percentage points (≥2 points)', 'gnp_measure': 'monetary units (implied by database)', 'per_capita_basis': 'per person'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'life_expectancy'}, {'column': 'gnp'}, {'column': 'continent_id'}], 'Population.continents': [{'column': 'name'}], 'Population.economic_data': [{'column': 'gnp_growth_rate'}, {'column': 'population'}, {'column': 'year'}]}}\nA hypothetical reasoning question is as follows:\nAssuming a 2% decrease in the GNP of the top three countries with the highest life expectancy, which continent has a per capita GNP growth rate that exceeds Europe by at least two points?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Continent FROM ( SELECT name , Continent , GNP * ( 1 - 0.02 ) AS GNP , Population , GNPOld FROM country WHERE Code IN ( SELECT Code FROM country ORDER BY LifeExpectancy DESC LIMIT 3 ) UNION ALL SELECT name , Continent , GNP , Population , GNPOld FROM country WHERE Code NOT IN ( SELECT Code FROM country ORDER BY LifeExpectancy DESC LIMIT 3 ) ) GROUP BY Continent HAVING 1.0 * ( SUM ( GNP ) / SUM ( Population ) - SUM ( GNPOld ) / SUM ( Population ) ) / ( SUM ( GNPOld ) / SUM ( Population ) ) >= ( SELECT 1.0 * ( SUM ( GNP ) / SUM ( Population ) - SUM ( GNPOld ) / SUM ( Population ) ) / ( SUM ( GNPOld ) / SUM ( Population ) ) FROM country WHERE Continent = \"Europe\" ) + 0.02",
        "db_id": "Population"
    },
    {
        "id": 357,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['countries in Asia', 'gross national product', 'past GNP', 'current GNP', 'future GNP', 'growth rate'], 'relations': ['country_continent (country → Asia)', 'gnp_time_series (country → past, current, future GNP)', 'growth_rate_relation (GNP data → growth rate calculation)', 'growth_projection (current GNP + growth rate → future GNP)'], 'intent': 'list_historical_current_and_project_future_gnp', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'GNP': 'currency unit (e.g., USD) from database', 'growth_rate': 'percentage (implied for calculation)', 'conversion': 'future_gnp = current_gnp × (1 + growth_rate)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'name'}, {'column': 'continent'}], 'Population.gnp_data': [{'column': 'country_id'}, {'column': 'year'}, {'column': 'gnp_value'}]}}\nA mathematical logic question is as follows:\nList name, the past and current gross national product of each country in Asia, and estimate the future gross national product if the growth rate remains unchanged.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT name , GNPOld , GNP , GNP + ( GNP - GNPOld ) AS GNPFuture FROM country WHERE Continent = \"Asia\"",
        "db_id": "Population"
    },
    {
        "id": 358,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['countries in Asia', 'name', 'past GNP', 'current GNP', 'future Gross National Product', 'constant growth rate'], 'relations': ['country_belongs_to_continent (country → Asia)', 'temporal_sequence (past GNP → current GNP → future GNP)', 'growth_projection (current GNP → future GNP using constant growth rate)'], 'intent': 'retrieve_historical_and_project_future_economic_data', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'GNP': 'currency units (e.g., USD, from database schema)', 'growth_rate': 'percentage (implied for calculation)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'name'}, {'column': 'continent'}], 'Population.gnp_data': [{'column': 'gnp_value'}, {'column': 'year'}]}}\nA mathematical logic question is as follows:\nFor each country in Asia, provide a list of their name, the past and current GNP, and estimate their future Gross National Product assuming a constant growth rate.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT name , GNPOld , GNP , GNP + ( GNP - GNPOld ) AS GNPFuture FROM country WHERE Continent = \"Asia\"",
        "db_id": "Population"
    },
    {
        "id": 359,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['country with Chinese as main language', 'Asia', 'gross national product (GNP)', 'current GNP value 1000000.0', 'past GNP', 'future GNP', 'growth rate'], 'relations': ['country_to_language (country → Chinese)', 'country_to_region (country → Asia)', 'gnp_history (country → past GNP)', 'gnp_current (country → current GNP)', 'gnp_projection (current GNP → future GNP via growth rate)'], 'intent': 'list_historical_and_current_gnp_with_future_projection', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000000.0], 'units': {'GNP': 'monetary unit (implied by database schema)', 'growth_rate': 'percentage (implied for projection)', 'note': 'No explicit unit conversion required'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'name'}, {'column': 'region'}, {'column': 'main_language'}], 'Population.economic_data': [{'column': 'country_id'}, {'column': 'year'}, {'column': 'gnp'}, {'column': 'growth_rate'}]}}\nA hypothetical reasoning question is as follows:\nIf the current gross national product of a country with Chinese as its main language is 1000000.0, list name, the past and current gross national product of each country in Asia, and estimate the future gross national product if the growth rate remains unchanged.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT name , GNPOld , GNP , GNP + ( GNP - GNPOld ) AS GNPFuture FROM ( SELECT name , GNPOld , 1000000.0 AS GNP , Continent FROM country WHERE Code IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Chinese\" ) UNION ALL SELECT name , GNPOld , GNP , Continent FROM country WHERE Code NOT IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Chinese\" ) ) WHERE Continent = \"Asia\"",
        "db_id": "Population"
    },
    {
        "id": 360,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Asian countries', 'country with Chinese as primary language (China)', 'current GNP', 'past GNP', 'future Gross National Product'], 'relations': ['continent_membership (country → Asia)', 'primary_language_association (China → Chinese)', 'gnp_temporal_relation (past → current → future)', 'growth_computation (future GNP = current GNP × (1 + growth_rate)^n)'], 'intent': 'retrieve_country_gnp_data_and_project_future_gnp', 'reasoning_type': 'mathematical logic reasoning, ideal hypothesis reasoning', 'numerical_values': [1000000.0], 'units': {'GNP': 'monetary unit (e.g., USD)', 'growth_rate': 'implied percentage (e.g., annual %)', 'time_period': 'years (implied for projection)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'name'}, {'column': 'continent'}, {'column': 'primary_language'}], 'Population.gnp_records': [{'column': 'country_id'}, {'column': 'year'}, {'column': 'gnp_value'}]}}\nA hypothetical reasoning question is as follows:\nAssuming that the country with Chinese as its primary language has a current GNP of 1000000.0, provide a list of their name, the past and current GNP for each Asian country, and estimate their future Gross National Product assuming a constant growth rate.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT name , GNPOld , GNP , GNP + ( GNP - GNPOld ) AS GNPFuture FROM ( SELECT name , GNPOld , 1000000.0 AS GNP , Continent FROM country WHERE Code IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Chinese\" ) UNION ALL SELECT name , GNPOld , GNP , Continent FROM country WHERE Code NOT IN ( SELECT CountryCode FROM ( SELECT CountryCode , Language , MAX ( Percentage ) FROM countrylanguage GROUP BY CountryCode ) WHERE Language = \"Chinese\" ) ) WHERE Continent = \"Asia\"",
        "db_id": "Population"
    },
    {
        "id": 361,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['UK', 'annual population growth rate 0.4%', 'current population', 'one year later'], 'relations': ['growth_rate_of (UK, 0.4%)', 'temporal_projection (current_population → future_population after 1 year)'], 'intent': 'calculate_future_population', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.4, 1], 'units': {'growth_rate': '% per year', 'time': 'years', 'conversion_formula': 'future_population = current_population × (1 + growth_rate/100)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.population_data': [{'column': 'country'}, {'column': 'population'}]}}\nA mathematical logic question is as follows:\nThe annual population growth rate in the UK is 0.4%. What is the population size in the UK one year later?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Population * ( 1 + 0.004 ) AS population_in_1year FROM country WHERE name = \"United Kingdom\"",
        "db_id": "Population"
    },
    {
        "id": 362,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['UK', 'population size', 'annual growth rate of 0.4%'], 'relations': ['country_metric (UK → current population)', 'growth_application (current population → future population via growth rate)'], 'intent': 'calculate_future_population', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.4, 1], 'units': {'growth_rate': '% (percentage per year)', 'time': 'years', 'conversion': '0.4% → 0.004 (decimal multiplier)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.country_demographics': [{'column': 'country_name'}, {'column': 'current_population'}, {'column': 'growth_rate'}]}}\nA mathematical logic question is as follows:\nWhat will be the population size of UK after one year, given that the UK has an annual growth rate of 0.4%?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Population * ( 1 + 0.004 ) AS population_in_1year FROM country WHERE name = \"United Kingdom\"",
        "db_id": "Population"
    },
    {
        "id": 363,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['UK', 'annual population growth rate 0.4%', 'population of countries with life expectancy > 75 in Europe (103000)', 'population size in UK one year later'], 'relations': ['country_in_continent (UK → Europe)', 'growth_rate_applied (UK population → future population)', 'population_condition (life_expectancy > 75 AND continent = Europe → total_population = 103000)'], 'intent': 'calculate_future_population_uk', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.4, 103000], 'units': {'growth_rate': '% (percentage)', 'population': 'people (unit for population counts)', 'conversion': 'growth_multiplier = 1 + (0.4 / 100) = 1.004'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.country_population': [{'column': 'country_name'}, {'column': 'population'}], 'Population.country_attributes': [{'column': 'life_expectancy'}, {'column': 'continent'}]}}\nA hypothetical reasoning question is as follows:\nThe annual population growth rate in the UK is 0.4%. If the population of countries with a life expectancy greater than 75 in Europe is 103000, what is the population size in the UK one year later?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Population * ( 1 + 0.004 ) AS population_in_1year FROM ( SELECT Continent , name , 103000 AS Population FROM country WHERE Continent = \"Europe\" AND LifeExpectancy > 75 UNION SELECT Continent , name , Population FROM country WHERE Continent = \"Europe\" AND LifeExpectancy <= 75 ) WHERE name = \"United Kingdom\"",
        "db_id": "Population"
    },
    {
        "id": 364,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['UK', 'population size', 'annual population growth rate 0.4%', 'European countries with life expectancy >75', 'population 103000'], 'relations': ['UK is a European country', 'UK has life expectancy >75 (implied by condition)', 'growth rate applies to UK population', '103000 is current population for qualifying countries'], 'intent': 'calculate_future_population', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.4, 103000, 1], 'units': {'growth_rate': '% per year (0.4% = 0.004 decimal multiplier)', 'population': 'people', 'time': 'year'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'name'}, {'column': 'continent'}, {'column': 'life_expectancy'}]}}\nA hypothetical reasoning question is as follows:\nWhat will be the population size of the UK after one year, given that the UK has an annual population growth rate of 0.4% and all European countries with a life expectancy greater than 75 have a population of 103000?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Population * ( 1 + 0.004 ) AS population_in_1year FROM ( SELECT Continent , name , 103000 AS Population FROM country WHERE Continent = \"Europe\" AND LifeExpectancy > 75 UNION SELECT Continent , name , Population FROM country WHERE Continent = \"Europe\" AND LifeExpectancy <= 75 ) WHERE name = \"United Kingdom\"",
        "db_id": "Population"
    },
    {
        "id": 365,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Zambia', 'life expectancy', 'independence year', 'expected year of death'], 'relations': ['country_to_independence (Zambia → independence year)', 'birth_year_to_death_year (independence year + life expectancy → expected year of death)'], 'intent': 'calculate_expected_death_year_based_on_birth_year_and_life_expectancy', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [], 'units': {'time': 'years', 'calculation': 'birth_year + life_expectancy = death_year'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.country_facts': [{'column': 'country_name'}, {'column': 'independence_year'}], 'Population.demographics': [{'column': 'life_expectancy'}, {'column': 'year'}]}}\nA common sense reasoning question is as follows:\nAccording to Zambia's life expectancy, what is the expected year of death for people born in the year of Zambia's independence?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CAST ( IndepYear + LifeExpectancy AS INT ) AS death_year FROM country WHERE name = \"Zambia\"",
        "db_id": "Population"
    },
    {
        "id": 366,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Zambia', 'life expectancy', 'year of independence', 'predicted year of death'], 'relations': ['country_to_independence_year (Zambia → independence year)', 'life_expectancy_to_death_prediction (independence year + life expectancy → death year)'], 'intent': 'calculate_predicted_death_year_based_on_independence_birth', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'life_expectancy': 'years', 'years': 'integer calendar years', 'calculation': 'death_year = independence_year + life_expectancy'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.country_demographics': [{'column': 'country_name'}, {'column': 'life_expectancy'}], 'Population.historical_events': [{'column': 'event_year'}, {'column': 'event_type'}, {'column': 'country'}]}}\nA common sense reasoning question is as follows:\nBased on Zambia's life expectancy, what is the predicted year of death for individuals born in the year of it's independence?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CAST ( IndepYear + LifeExpectancy AS INT ) AS death_year FROM country WHERE name = \"Zambia\"",
        "db_id": "Population"
    },
    {
        "id": 367,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['life expectancy', 'per capita GNP', 'European countries', 'Zambia', \"Zambia's independence year\", 'expected year of death'], 'relations': ['comparison (per capita GNP > European average)', 'increment (life expectancy + 10 years)', 'temporal_calculation (independence year + life expectancy = death year)', \"membership (Zambia's qualification for increment)\"], 'intent': 'calculate_adjusted_death_year_based_on_gnp_condition', 'reasoning_type': 'mathematical logic reasoning, conditional reasoning', 'numerical_values': [10], 'units': {'time': 'years', 'currency': 'GNP unit (implied by database)', 'conversion': 'life expectancy increment in years'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.country_data': [{'column': 'country_name'}, {'column': 'continent'}, {'column': 'gnp_per_capita'}, {'column': 'life_expectancy'}, {'column': 'independence_year'}]}}\nA hypothetical reasoning question is as follows:\nIf life expectancy increases by 10 years in countries with per capita GNP greater than the average per capita GNP of all European countries, what is the expected year of death for people born in the year of Zambia's independence asccording to Zambia's life expectancy?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CAST ( IndepYear + LifeExpectancy AS INT ) AS death_year FROM ( SELECT name , IndepYear , LifeExpectancy + 10 AS LifeExpectancy FROM country WHERE 1.0 * GNP / Population > ( SELECT 1.0 * SUM ( GNP ) / SUM ( Population ) FROM country WHERE Continent = \"Europe\" ) UNION ALL SELECT name , IndepYear , LifeExpectancy FROM country WHERE NOT ( 1.0 * GNP / Population > ( SELECT 1.0 * SUM ( GNP ) / SUM ( Population ) FROM country WHERE Continent = \"Europe\" ) ) ) WHERE name = \"Zambia\"",
        "db_id": "Population"
    },
    {
        "id": 368,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Zambia', 'independence year of Zambia', 'predicted year of death', 'per capita GNP', 'European countries', 'life expectancy'], 'relations': ['country_to_independence_year (Zambia → independence year)', 'country_to_gnp (Zambia → per capita GNP)', 'region_filter (European countries → per capita GNP average)', 'conditional_adjustment (GNP comparison → life expectancy +10 years)'], 'intent': 'calculate_adjusted_death_year_based_on_gnp_condition', 'reasoning_type': 'mathematical logic reasoning, common sense understanding reasoning', 'numerical_values': [10], 'units': {'life_expectancy_adjustment': 'years', 'year_calculation': 'integer years (birth year + life expectancy)', 'gnp_unit': 'currency (implied by database)'}, 'foreign_keys': 'This issue does not provide foreign keys', 'primary_keys': 'This issue does not provide primary keys', 'tableinfo': {'Population.countries': [{'column': 'name'}, {'column': 'independence_year'}, {'column': 'region'}], 'Population.life_expectancy_data': [{'column': 'life_expectancy'}], 'Population.economic_indicators': [{'column': 'gnp_per_capita'}]}}\nA hypothetical reasoning question is as follows:\nWhat is the predicted year of death for individuals born during the year of Zambia's independence, according to the country's life expectancy, if countries with a per capita GNP higher than the average per capita GNP of all European countries experience a 10-year increase in life expectancy?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CAST ( IndepYear + LifeExpectancy AS INT ) AS death_year FROM ( SELECT name , IndepYear , LifeExpectancy + 10 AS LifeExpectancy FROM country WHERE 1.0 * GNP / Population > ( SELECT 1.0 * SUM ( GNP ) / SUM ( Population ) FROM country WHERE Continent = \"Europe\" ) UNION ALL SELECT name , IndepYear , LifeExpectancy FROM country WHERE NOT ( 1.0 * GNP / Population > ( SELECT 1.0 * SUM ( GNP ) / SUM ( Population ) FROM country WHERE Continent = \"Europe\" ) ) ) WHERE name = \"Zambia\"",
        "db_id": "Population"
    }
]