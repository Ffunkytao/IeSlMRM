[
    {
        "id": 0,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Logitech G502 HERO', 'Planck scale (Δt=1e-43 seconds)', 'Planck scale (Δx=1e-35 meters)', 'quantum Zeno effect (f=1e43 Hz)'], 'relations': ['mouse_to_specifications (Logitech G502 HERO → mice.Dpi)', 'quantum_scale_relationship (Δt ↔ Δx)', 'frequency_impact (f=1e43 Hz → effective DPI calculation)'], 'intent': 'calculate_effective_dpi_under_quantum_conditions', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1e-43, 1e-35, 1e+43], 'units': {'time_quantum': 'seconds (s)', 'space_quantum': 'meters (m)', 'frequency': 'Hertz (Hz)', 'dpi': 'dots_per_inch (from database)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}], 'tableinfo': {'mouse.mice': [{'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '鼠标型号', 'examples': ['G502 HERO', 'DeathAdder V2', 'Dark Core RGB Pro', 'Wireless Eco', 'Rival 800X']}, {'column': 'Dpi', 'type': 'INTEGER', 'primary_key': False, 'comment': 'DPI（每英寸点数）', 'examples': ['16000', '20000', '18000', '8000', '12000']}]}}\nA hypothetical reasoning question is as follows:\nAssuming operating a Logitech G502 HERO at the Planck scale (time quantum Δt=1e-43 seconds, space quantum Δx=1e-35 meters), calculate its effective DPI under the quantum Zeno effect (measurement collapse frequency f=1e43 Hz).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT m.Dpi * (1.0 * 1e43*1e-43)/1.32934 AS Effective_DPI FROM mice m WHERE m.Model = 'G502 HERO' AND m.Manufacturer_Id = (SELECT Manufacturer_Id FROM manufacturers WHERE Manufacturer_Name = 'Logitech');",
        "db_id": "mouse"
    },
    {
        "id": 1,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Corsair Dark Core RGB Pro mouse', 'Polling_Rate_Hz', 'Acceleration_G', 'Weight_Grams', 'Cable_Length_Meters', 'thermal conductivity coefficient 0.2 W/m·K'], 'relations': ['mouse_to_sensor_data (Corsair Dark Core RGB Pro → sensor_data table)', 'mouse_to_physical_params (Corsair Dark Core RGB Pro → Weight_Grams, Cable_Length_Meters)', 'thermal_conductivity_relation (coefficient 0.2 W/m·K → heat power calculation)'], 'intent': 'calculate_joule_heat_power', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [0.2], 'units': {'polling_rate': 'Hz', 'acceleration': 'G (gravitational units)', 'weight': 'Grams', 'cable_length': 'Meters', 'thermal_conductivity': 'W/m·K (watts per meter-kelvin)', 'power': 'Watts (implied output unit)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'sensor_data', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'sensor_data', 'pk_column': 'Sensor_Id'}], 'tableinfo': {'mouse.sensor_data': [{'column': 'Polling_Rate_Hz'}, {'column': 'Acceleration_G'}], 'mouse.mice': [{'column': 'Weight_Grams', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '重量（克）', 'examples': ['121.0', '82.0', '133.0', '101.0', '105.0']}, {'column': 'Cable_Length_Meters', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '线缆长度（米）', 'examples': ['2.1', '1.8', '0.0', '2.0']}]}}\nA physical knowledge question is as follows:\nBased on the Polling_Rate_Hz and Acceleration_G columns from the sensor_data table, calculate the Joule heat power generated by the Corsair Dark Core RGB Pro mouse under full load operation (incorporating Weight_Grams and Cable_Length_Meters with a thermal conductivity coefficient of 0.2 W/m·K).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (m.Weight_Grams/1000 * POWER(sd.Acceleration_G * 9.8, 2)) / 3000 * (m.Cable_Length_Meters / (0.2 * PI() * POWER(0.001, 2))) AS Thermal_Power_W FROM sensor_data sd JOIN mice m ON sd.Mouse_Id = m.Mouse_Id WHERE m.Model = 'Dark Core RGB Pro' AND m.Manufacturer_Id = (SELECT Manufacturer_Id FROM manufacturers WHERE Manufacturer_Name = 'Corsair');",
        "db_id": "mouse"
    },
    {
        "id": 2,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturer market share', 'mouse parameter matrix (Dpi, Price, Weight)', 'grey prediction GM(1,1) model', 'canonical correlation analysis (CCA)', 'singular value decomposition (SVD)'], 'relations': ['manufacturers_to_mice (Manufacturer_Id → Manufacturer_Id)', 'mouse_parameters_to_SVD (Dpi, Price, Weight → SVD_decomposition)', 'SVD_to_CCA (SVD_components → Canonical_Correlation_Coefficients)', 'market_share_to_GM11 (Market_Share_Percent → GM(1,1)_model)'], 'intent': 'perform_multivariate_statistical_analysis_with_time_series_prediction', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3], 'units': {'Dpi': 'dots per inch', 'Price': 'USD', 'Weight': 'grams', 'Market_Share': 'percentage (%)', 'canonical_coefficients': 'unitless (correlation values)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_Id'}, {'pk_table': 'mice', 'pk_column': 'Mouse_Id'}], 'tableinfo': {'mouse.manufacturers': [{'column': 'Manufacturer_Id'}, {'column': 'Market_Share_Percent'}], 'mouse.mice': [{'column': 'Manufacturer_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '制造商ID（外键）', 'examples': ['1', '2', '3', '4', '6']}, {'column': 'Dpi', 'type': 'INTEGER', 'primary_key': False, 'comment': 'DPI（每英寸点数）', 'examples': ['16000', '20000', '18000', '8000', '12000']}, {'column': 'Price_Usd', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '价格（美元）', 'examples': ['79.99', '69.99', '99.99', '89.99', '129.99']}, {'column': 'Weight_Grams', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '重量（克）', 'examples': ['121.0', '82.0', '133.0', '101.0', '105.0']}]}}\nA mathematical logic question is as follows:\nEstablish a grey prediction GM(1,1) model for manufacturer market share and perform canonical correlation analysis (CCA) with the singular value decomposition (SVD) results of the mouse parameter matrix (Dpi, Price, Weight), calculating the first 3 canonical correlation coefficients.\nyour response just have a SQL without anything.\n",
        "solution": "WITH Market_Share_Data AS (SELECT Manufacturer_Id, Market_Share_Percent, ROW_NUMBER() OVER (PARTITION BY Manufacturer_Id ORDER BY Founded_year) AS rn FROM manufacturers), GM_Model AS (SELECT Manufacturer_Id, (FIRST_VALUE(Market_Share_Percent) OVER (PARTITION BY Manufacturer_Id ORDER BY rn) - (SUM(Market_Share_Percent) OVER (PARTITION BY Manufacturer_Id) / COUNT(*) OVER (PARTITION BY Manufacturer_Id))) * EXP(-0.5 * (rn-1)) + (SUM(Market_Share_Percent) OVER (PARTITION BY Manufacturer_Id) / COUNT(*) OVER (PARTITION BY Manufacturer_Id)) AS Predicted_Share FROM Market_Share_Data), Mouse_Matrix AS (SELECT Manufacturer_Id, AVG(Dpi) AS avg_dpi, AVG(Price_Usd) AS avg_price, AVG(Weight_Grams) AS avg_weight FROM mice GROUP BY Manufacturer_Id), SVD_Decomp AS (SELECT Manufacturer_Id, avg_dpi/SQRT(POWER(avg_dpi,2)+POWER(avg_price,2)+POWER(avg_weight,2)) AS u1, avg_price/SQRT(POWER(avg_dpi,2)+POWER(avg_price,2)+POWER(avg_weight,2)) AS u2, avg_weight/SQRT(POWER(avg_dpi,2)+POWER(avg_price,2)+POWER(avg_weight,2)) AS u3 FROM Mouse_Matrix), Covariance_Matrix AS (SELECT gm.Manufacturer_Id, gm.Predicted_Share * svd.u1 AS cov1, gm.Predicted_Share * svd.u2 AS cov2, gm.Predicted_Share * svd.u3 AS cov3 FROM GM_Model gm JOIN SVD_Decomp svd ON gm.Manufacturer_Id = svd.Manufacturer_Id) SELECT AVG(cov1)/SQRT(AVG(POWER(gm.Predicted_Share,2)) * AVG(POWER(svd.u1,2))) AS rho1, AVG(cov2)/SQRT(AVG(POWER(gm.Predicted_Share,2)) * AVG(POWER(svd.u2,2))) AS rho2, AVG(cov3)/SQRT(AVG(POWER(gm.Predicted_Share,2)) * AVG(POWER(svd.u3,2))) AS rho3 FROM Covariance_Matrix cm JOIN GM_Model gm ON cm.Manufacturer_Id = gm.Manufacturer_Id JOIN SVD_Decomp svd ON cm.Manufacturer_Id = svd.Manufacturer_Id;",
        "db_id": "mouse"
    },
    {
        "id": 3,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"wireless mouse\", \"charging current >500mA\", \"PD3.0 protocol not supported\", \"efficiency <80%\", \"theoretical maximum charging loss\"],\n  \"relations\": [\n    \"wireless_mouse_to_charging_current (wireless mouse → charging current)\",\n    \"protocol_compliance (PD3.0 support required if charging current >500mA)\",\n    \"efficiency_threshold (efficiency <80%)\",\n    \"loss_calculation (η = (P_out/P_in)×100%)\"\n  ],\n  \"intent\": \"identify_non_compliant_devices_and_calculate_charging_loss\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [500, 80, 100],\n  \"units\": {\n    \"current\": \"mA (milliamperes)\",\n    \"efficiency\": \"% (percent)\",\n    \"power\": \"W (Watts) implied for P_in/P_out\",\n    \"conversion\": \"η = (P_out/P_in)×100%\"\n  },\n  \"required_tables\": [\"mice\", \"usage_records\"],\n  \"required_fields\": [\n    \"mice.Is_Wireless\",\n    \"mice.Model\",\n    \"mice.Charging_Current_mA (assumed field)\",\n    \"mice.Supports_PD3_0 (assumed field)\",\n    \"mice.Efficiency_Percent (assumed field)\",\n    \"usage\nA common sense reasoning question is as follows:\nIdentify models that violate the USB-IF specification (support for PD3.0 protocol required when wireless mouse charging current >500mA) with efficiency <80%, and calculate their theoretical maximum charging loss (η=(P_out/P_in)×100%).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT m.Model, (m.Battery_Life_Hours * 3.7) / (m.Price_Usd * 0.8) * 100 AS Efficiency_Percent FROM mice m WHERE m.Is_Wireless = 1 AND EXISTS (SELECT 1 FROM sensor_data sd WHERE sd.Mouse_Id = m.Mouse_Id AND sd.Max_Dpi > 16000) AND (m.Battery_Life_Hours * 3.7) / (m.Price_Usd * 0.8) * 100 < 80;",
        "db_id": "mouse"
    },
    {
        "id": 4,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Razer DeathAdder V2', 'cosmic expansion rate (H0=70km/s/Mpc)', 'Hubble radius (4.4e26 meters)', 'Planck length (1.6e-35 meters)'], 'relations': ['mouse_model_to_DPI (Razer DeathAdder V2 → DPI)', 'cosmic_scale_relation (Hubble radius ↔ Planck length)', 'quantum_displacement_unit (Planck length as minimum unit)'], 'intent': 'calculate_effective_DPI_under_quantum_entangled_cosmic_expansion', 'reasoning_type': 'ideal hypothesis reasoning', 'numerical_values': [70, 4.4e+26, 1.6e-35], 'units': {'velocity': 'km/s/Mpc (cosmic expansion rate)', 'distance': 'meters (Hubble radius)', 'length': 'meters (Planck length)', 'dpi': 'dots/inch (implied by database schema)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'sensor_data', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'sensor_data', 'pk_column': 'Sensor_Id'}], 'tableinfo': {'mouse.mice': [{'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '鼠标型号', 'examples': ['G502 HERO', 'DeathAdder V2', 'Dark Core RGB Pro', 'Wireless Eco', 'Rival 800X']}, {'column': 'Dpi', 'type': 'INTEGER', 'primary_key': False, 'comment': 'DPI（每英寸点数）', 'examples': ['16000', '20000', '18000', '8000', '12000']}], 'mouse.sensor_data': [{'column': 'Max_Dpi'}, {'column': 'Tracking_Speed_Ips'}]}}\nA hypothetical reasoning question is as follows:\nAssuming the use of a Razer DeathAdder V2 while moving at the cosmic expansion rate (H0=70km/s/Mpc) within the observable universe's horizon (Hubble radius of 4.4e26 meters), calculate the effective DPI in a quantum entangled state (with the Planck length of 1.6e-35 meters as the minimum displacement unit).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT m.Dpi * (1 + 1100) / (70 * 4.4e26 / 3.086e19) * LN(1.6e-35/1.6e-35) AS Effective_DPI FROM mice m WHERE m.Model = 'DeathAdder V2' AND m.Manufacturer_Id = (SELECT Manufacturer_Id FROM manufacturers WHERE Manufacturer_Name = 'Razer');",
        "db_id": "mouse"
    },
    {
        "id": 5,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['wireless mice', '2.4GHz frequency band', 'Friis transmission formula', '2dBi antenna gain', '1m transmission distance', 'Polling_Rate_Hz column', 'Battery_Life_Hours column'], 'relations': ['frequency_band_to_formula (2.4GHz → Friis transmission formula)', 'antenna_gain_to_formula (2dBi → Friis transmission formula)', 'distance_to_formula (1m → Friis transmission formula)', 'column_to_table (Polling_Rate_Hz → sensor_data)', 'column_to_table (Battery_Life_Hours → mice)'], 'intent': 'calculate_free_space_path_loss', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [2.4, 2, 1], 'units': {'frequency': 'GHz', 'antenna_gain': 'dBi', 'distance': 'meters', 'path_loss': 'dB (implied by Friis formula)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'sensor_data', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'sensor_data', 'pk_column': 'Sensor_Id'}], 'tableinfo': {'mouse.sensor_data': [{'column': 'Polling_Rate_Hz'}], 'mouse.mice': [{'column': 'Battery_Life_Hours', 'type': 'INTEGER', 'primary_key': False, 'comment': '电池续航时间（小时）', 'examples': ['50', '60', '80', '70']}]}}\nA physical knowledge question is as follows:\nBased on the Polling_Rate_Hz column from the sensor_data table and the Battery_Life_Hours column from the mice table, calculate the free space path loss for wireless mice in the 2.4GHz frequency band (using the Friis transmission formula with 2dBi antenna gain and 1m transmission distance).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 20*(LOG(10, 4*PI()*1*(2.4e9/3e8)))/LOG(10) - 2 - 2 AS Path_Loss_dB FROM mice m JOIN sensor_data sd ON m.Mouse_Id = sd.Mouse_Id WHERE m.Is_Wireless = 1;",
        "db_id": "mouse"
    },
    {
        "id": 6,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Dpi', 'Price_Usd', 'Market_Share_Percent'], 'relations': ['mouse_parameter_to_market_share (Dpi,Price_Usd → Market_Share_Percent)'], 'intent': 'predict_market_share_with_regression', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['mouse.Dpi', 'mouse.Price_Usd', 'manufacturers.Market_Share_Percent'], 'units': {'Dpi': 'dots per inch', 'Price': 'USD (United States Dollars)', 'Market_Share': 'Percent (%)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_Id'}, {'pk_table': 'mice', 'pk_column': 'Mouse_Id'}], 'tableinfo': {'mouse.mice': [{'column': 'Dpi', 'type': 'INTEGER', 'primary_key': False, 'comment': 'DPI（每英寸点数）', 'examples': ['16000', '20000', '18000', '8000', '12000']}, {'column': 'Price_Usd', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '价格（美元）', 'examples': ['79.99', '69.99', '99.99', '89.99', '129.99']}], 'mouse.manufacturers': [{'column': 'Market_Share_Percent'}]}}\nA mathematical logic question is as follows:\nBased on mouse parameters (Dpi, Price_Usd) to predict market share (Market_Share_Percent), establish a multiple linear regression model and calculate the coefficient of determination R².\nyour response just have a SQL without anything.\n",
        "solution": "CREATE TEMPORARY TABLE BaseData AS SELECT mf.Market_Share_Percent AS Y, md.Dpi AS X1, md.Price_Usd AS X2 FROM mice md JOIN manufacturers mf ON md.Manufacturer_Id = mf.Manufacturer_Id; CREATE TEMPORARY TABLE Stats AS SELECT AVG(Y) AS y_bar, AVG(X1) AS x1_bar, AVG(X2) AS x2_bar, AVG(Y * X1) - AVG(Y) * AVG(X1) AS cov_yx1, AVG(Y * X2) - AVG(Y) * AVG(X2) AS cov_yx2, AVG(X1 * X1) - AVG(X1) * AVG(X1) AS var_x1, AVG(X2 * X2) - AVG(X2) * AVG(X2) AS var_x2, AVG(X1 * X2) - AVG(X1) * AVG(X2) AS cov_x1x2 FROM BaseData; CREATE TEMPORARY TABLE Coefficients AS SELECT (cov_yx1 * var_x2 - cov_yx2 * cov_x1x2) / (var_x1 * var_x2 - POWER(cov_x1x2, 2)) AS beta1, (cov_yx2 * var_x1 - cov_yx1 * cov_x1x2) / (var_x1 * var_x2 - POWER(cov_x1x2, 2)) AS beta2, y_bar - ( (cov_yx1 * var_x2 - cov_yx2 * cov_x1x2) / (var_x1 * var_x2 - POWER(cov_x1x2, 2)) ) * x1_bar - ( (cov_yx2 * var_x1 - cov_yx1 * cov_x1x2) / (var_x1 * var_x2 - POWER(cov_x1x2, 2)) ) * x2_bar AS beta0 FROM Stats; CREATE TEMPORARY TABLE Predicted AS SELECT b.Y, c.beta0 + c.beta1 * b.X1 + c.beta2 * b.X2 AS Y_hat FROM BaseData b CROSS JOIN Coefficients c; SELECT 1 - SUM(POWER(Y - Y_hat, 2)) / SUM(POWER(Y - (SELECT y_bar FROM Stats), 2)) AS R_squared FROM Predicted;",
        "db_id": "mouse"
    },
    {
        "id": 7,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['EU ErP directive', 'standby power >0.5W', '0.85kg CO₂/kWh', '18 hours daily standby', 'wireless mice'], 'relations': ['directive_to_compliance (EU ErP → power limit)', 'power_to_emissions (standby power → carbon footprint)', 'time_factor (18h/day × 365 days)'], 'intent': 'identify_non_compliant_wireless_mice_and_calculate_annual_carbon_emissions', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [0.5, 0.85, 18], 'units': {'power': 'W (Watts)', 'emission_factor': 'kg CO₂/kWh', 'time': 'hours/day', 'conversion': '1kWh = 3.6×10⁶J, annual_hours = 18×365'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'usage_records', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'usage_records', 'pk_column': 'Record_ID'}], 'tableinfo': {'mouse.mice': [{'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '鼠标型号', 'examples': ['G502 HERO', 'DeathAdder V2', 'Dark Core RGB Pro', 'Wireless Eco', 'Rival 800X']}, {'column': 'Is_Wireless', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否无线', 'examples': ['0', '1']}], 'mouse.usage_records': [{'column': 'Energy_Consumed_Joules'}, {'column': 'Usage_Duration_Minutes'}]}}\nA common sense reasoning question is as follows:\nIdentify wireless mouse models that violate the EU ErP directive (standby power consumption >0.5W) and calculate their annual carbon emissions (based on a grid emission factor of 0.85kg CO₂/kWh and 18 hours of daily standby time).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT m.Model, (ur.Energy_Consumed_Joules/(3600*1000)) * 18 * 365 * 0.85 AS Annual_CO2_kg FROM mice m JOIN usage_records ur ON m.Mouse_Id = ur.Mouse_Id WHERE m.Is_Wireless = 1 AND (ur.Energy_Consumed_Joules/(3600*ur.Usage_Duration_Minutes*60)) > 0.5;",
        "db_id": "mouse"
    },
    {
        "id": 8,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Logitech G502 HERO', 'Bose-Einstein condensate temperature 1e-7K', 'trap frequency ω=100Hz', 'quantum vortex spacing formula a=√(h/(mω))'], 'relations': ['mouse_model_to_sensor_specs (Logitech G502 HERO → sensor_data)', 'quantum_vortex_effect_on_DPI (ΔDPI = f(a, sensor resolution))', 'physics_formula_dependency (a ∝ h,m,ω)'], 'intent': 'calculate_DPI_error_from_quantum_vortices', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1e-07, 100], 'units': {'temperature': 'K (Kelvin)', 'frequency': 'Hz (Hertz)', 'vortex_spacing': 'm (meters, derived from formula)', 'planck_constant': 'J·s (h=6.626e-34 J·s)', 'atomic_mass': 'kg (Rubidium-87 mass ~1.4e-25 kg)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'sensor_data', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'sensor_data', 'pk_column': 'Sensor_Id'}], 'tableinfo': {'mouse.mice': [{'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '鼠标型号', 'examples': ['G502 HERO', 'DeathAdder V2', 'Dark Core RGB Pro', 'Wireless Eco', 'Rival 800X']}, {'column': 'Sensor_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '传感器类型（如光学、激光）', 'examples': ['Optical', 'Laser']}, {'column': 'Dpi', 'type': 'INTEGER', 'primary_key': False, 'comment': 'DPI（每英寸点数）', 'examples': ['16000', '20000', '18000', '8000', '12000']}], 'mouse.sensor_data': [{'column': 'Max_Dpi'}, {'column': 'Tracking_Speed_Ips'}, {'column': 'Lift_Off_Distance_Mm'}]}}\nA hypothetical reasoning question is as follows:\nAssuming the use of a Logitech G502 HERO in a Bose-Einstein condensate (temperature 1e-7K), calculate the DPI measurement error caused by quantum vortices (using the vortex spacing formula a=√(h/(mω)), with trap frequency ω=100Hz).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT m.Dpi * POWER(SQRT(1.0545718e-34/(m.Weight_Grams/1000 * 100))/(1e-6), 2) * LN(1e-4/(PI()*POWER(SQRT(1.0545718e-34/(m.Weight_Grams/1000 * 100)),2))) AS DPI_Error FROM mice m WHERE m.Model = 'G502 HERO';",
        "db_id": "mouse"
    },
    {
        "id": 9,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\n    \"Corsair Dark Core RGB Pro mouse\",\n    \"user 103\",\n    \"Acceleration_G (from sensor_data)\",\n    \"Distance_Moved_Meters (from usage_records)\",\n    \"Weight_Grams (from mice table)\"\n  ],\n  \"relations\": [\n    \"mouse_to_sensor_data (Corsair Dark Core RGB Pro → sensor_data via Mouse_Id)\",\n    \"mouse_to_usage_records (Corsair Dark Core RGB Pro → usage_records via Mouse_Id)\",\n    \"mouse_to_weight (Corsair Dark Core RGB Pro → mice table for Weight_Grams)\",\n    \"kinetic_energy_formula_components (μ=0.2, θ=15°, mass, distance, acceleration)\"\n  ],\n  \"intent\": \"calculate_kinetic_energy_change_with_friction_and_angle\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [\n    0.2,  // friction coefficient μ\n    15,   // angle θ in degrees\n    103   // user ID\n  ],\n  \"units\": {\n    \"friction_coefficient\": \"dimensionless (μ=0.2)\",\n    \"angle\": \"degrees (converted to radians for cos(θ))\",\n    \"weight\": \"grams (converted to kg: Weight_Grams/1000)\",\n    \"distance\": \"meters (Distance_Moved_Meters)\",\n    \"acceleration\": \"G-force (converted to m/s²: Acceleration_G * 9.81)\",\n    \"kinetic_energy\": \"Joules (calculated via ΔKE = μ * m * g * cos(θ) * distance)\"\n  },\n  \"required_tables\": [\n    \"sensor_data\",\n    \"usage_records\",\n    \"mice\"\n  ],\n  \"required_fields\": [\n    \"sensor_data.Mouse_Id\",\n    \"sensor_data.Acceleration_G\",\n    \"usage_records.Mouse_Id\",\n    \"usage_records.User_ID\",\n    \"usage_records.Distance_Moved_Meters\",\n    \"mice.Mouse_Id\",\n    \"mice.Model\",\n    \"mice.Weight_Grams\"\n  ]\n}\nA physical knowledge question is as follows:\nBased on the **Acceleration_G** from the **sensor_data** table and the **Distance_Moved_Meters** from the **usage_records** table, calculate the kinetic energy change produced by the **Corsair Dark Core RGB Pro** during usage by user **103** (assuming a friction coefficient μ=0.2 and a movement angle θ=15° relative to the horizontal plane, combined with the **Weight_Grams** from the **mice** table).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ROUND( (0.5 * (m.Weight_Grams / 1000) * POWER(s.Tracking_Speed_Ips * 0.0254, 2) - 0.2 * (m.Weight_Grams / 1000) * 9.8 * u.Distance_Moved_Meters * SIN(RADIANS(15))) / (u.Usage_Duration_Minutes * 60), 6 ) AS Kinetic_Energy_Change FROM usage_records u JOIN mice m ON u.Mouse_ID = m.Mouse_Id JOIN sensor_data s ON m.Mouse_Id = s.Mouse_Id WHERE m.Model = 'Dark Core RGB Pro' AND u.User_ID = 103",
        "db_id": "mouse"
    },
    {
        "id": 10,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mouse price-to-weight ratio (Price_Usd/Weight_Grams)', 'coefficient of variation', 'piecewise linear regression', 'market share breakpoint (25%)'], 'relations': ['manufacturer_to_mice (manufacturers → mice)', 'price_to_weight_ratio (Price_Usd/Weight_Grams)', 'market_share_breakpoint (25%)'], 'intent': 'calculate_coefficient_of_variation_and_piecewise_regression', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [25], 'units': {'price': 'USD (Price_Usd)', 'weight': 'grams (Weight_Grams)', 'price_weight_ratio': 'USD/gram', 'market_share': 'percent (%)', 'breakpoint': '25% (threshold for regression split)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_Id'}, {'pk_table': 'mice', 'pk_column': 'Mouse_Id'}], 'tableinfo': {'mouse.mice': [{'column': 'Manufacturer_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '制造商ID（外键）', 'examples': ['1', '2', '3', '4', '6']}, {'column': 'Price_Usd', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '价格（美元）', 'examples': ['79.99', '69.99', '99.99', '89.99', '129.99']}, {'column': 'Weight_Grams', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '重量（克）', 'examples': ['121.0', '82.0', '133.0', '101.0', '105.0']}], 'mouse.manufacturers': [{'column': 'Market_Share_Percent'}]}}\nA mathematical logic question is as follows:\nCompute the coefficient of variation (standard deviation/mean) for the price-to-weight ratio (Price_Usd/Weight_Grams) of mice by manufacturer, and perform a piecewise linear regression analysis with market share (breakpoint at 25%).\nyour response just have a SQL without anything.\n",
        "solution": "WITH PriceWeightRatio AS ( SELECT man.Manufacturer_Name, m.Price_Usd / m.Weight_Grams AS Ratio, man.Market_Share_Percent FROM mice m JOIN manufacturers man ON m.Manufacturer_Id = man.Manufacturer_Id ), Stats AS ( SELECT Manufacturer_Name, STDDEV(Ratio) AS StdDev, AVG(Ratio) AS Mean, Market_Share_Percent FROM PriceWeightRatio GROUP BY Manufacturer_Name, Market_Share_Percent ) SELECT Manufacturer_Name, ROUND(StdDev / Mean, 4) AS CV, CASE WHEN Market_Share_Percent > 25 THEN 1 ELSE 0 END AS Segment FROM Stats ORDER BY CV DESC",
        "db_id": "mouse"
    },
    {
        "id": 11,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mouse models', 'sensor lifespan', 'working hours', '90% threshold', 'daily use 8 hours'], 'relations': ['mouse_model_to_sensor (mice.Model → sensor_data.Sensor_Type)', 'working_hours_to_lifespan_ratio (used_hours / sensor_lifespan ≥ 90%)', 'usage_records_aggregation (sum(Usage_Duration_Minutes))'], 'intent': 'identify_mouse_models_with_high_sensor_utilization', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [90, 8], 'units': {'sensor_lifespan': 'hours (Sensor_Life_Hours)', 'working_hours': 'hours (calculated from Usage_Duration_Minutes)', 'daily_use': 'hours/day (8 hours)', 'conversion': 'minutes_to_hours (divided by 60)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'sensor_data', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}, {'fk_table': 'usage_records', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'sensor_data', 'pk_column': 'Sensor_Id'}, {'pk_table': 'usage_records', 'pk_column': 'Record_ID'}], 'tableinfo': {'mouse.mice': [{'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '鼠标型号', 'examples': ['G502 HERO', 'DeathAdder V2', 'Dark Core RGB Pro', 'Wireless Eco', 'Rival 800X']}], 'mouse.sensor_data': [{'column': 'Sensor_Life_Hours'}], 'mouse.usage_records': [{'column': 'Usage_Duration_Minutes'}]}}\nA common sense reasoning question is as follows:\nIdentify mouse models with working hours exceeding 90% of the sensor's lifespan (assuming 8 hours of daily use, Sensor_Life_Hours unit is in hours).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT DISTINCT m.Model FROM usage_records u JOIN mice m ON u.Mouse_ID = m.Mouse_Id JOIN sensor_data s ON m.Mouse_Id = s.Mouse_Id WHERE (u.Usage_Duration_Minutes / 60) / 8 / s.Sensor_Life_Hours > 0.9",
        "db_id": "mouse"
    },
    {
        "id": 12,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Logitech G502 HERO', 'magnetic flux density B=10T', 'movement speed v=2m/s', 'charge accumulation Q=1e-12C'], 'relations': ['mouse_to_specs (Logitech G502 HERO → mice/sensor_data tables)', 'Lorentz_force (F = Q*v*B = 2e-11 N)'], 'intent': 'calculate_trajectory_offset_cased_by_Lorentz_force', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [10, 2, 1e-12], 'units': {'magnetic_flux_density': 'T (Tesla)', 'velocity': 'm/s (meters per second)', 'charge': 'C (Coulombs)', 'force': 'N (Newtons, derived from F=QvB)', 'trajectory_offset': 'm (meters, derived from kinematic equations)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'sensor_data', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'sensor_data', 'pk_column': 'Sensor_Id'}], 'tableinfo': {'mouse.mice': [{'column': 'Sensor_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '传感器类型（如光学、激光）', 'examples': ['Optical', 'Laser']}, {'column': 'Tracking_Speed_Ips', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '追踪速度（英寸/秒）', 'examples': ['400.0', '450.0', '200.0', '350.0', '420.0']}, {'column': 'Acceleration_G', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '加速度（重力加速度 g）', 'examples': ['10.0', '50.0', '40.0', '20.0', '35.0']}], 'mouse.sensor_data': [{'column': 'Tracking_Speed_Ips'}, {'column': 'Acceleration_G'}, {'column': 'Lift_Off_Distance_Mm'}]}}\nA hypothetical reasoning question is as follows:\nAssuming the use of a Logitech G502 HERO in a strong magnetic field environment (magnetic flux density B=10T), calculate the trajectory offset caused by the Lorentz force (assuming movement speed v=2m/s and charge accumulation Q=1e-12C).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ROUND(0.5 * (1e-12 * 2 * 10 / (m.Weight_Grams / 1000)) * POWER(1 / 1000, 2), 12) AS Trajectory_Offset FROM mice m WHERE m.Model = 'G502 HERO'",
        "db_id": "mouse"
    },
    {
        "id": 13,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Logitech G502 HERO', '2023-10-01', 'mouse weight 121 grams', 'kinetic friction coefficient 0.3', 'gravitational acceleration 9.81 m/s²'], 'relations': ['mouse_model_to_weight (Logitech G502 HERO → 121 grams)', 'date_to_usage_records (2023-10-01 → usage_records)', 'friction_force_calculation (F_friction = μ_kinetic * m_mouse * g)', 'velocity_from_distance_and_time (v_avg = total_distance / total_time)', 'power_calculation (P_avg = F_friction * v_avg)'], 'intent': 'calculate_average_moving_power', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [121, 0.3, 9.81], 'units': {'mass': 'grams → kg (÷1000)', 'acceleration': 'm/s²', 'velocity': 'm/s (distance_moved ÷ time_seconds)', 'force': 'Newtons (kg·m/s²)', 'power': 'Watts → milliwatts (×1000)', 'time': 'minutes → seconds (×60)', 'distance': 'meters'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'usage_records', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'usage_records', 'pk_column': 'Record_ID'}], 'tableinfo': {'mouse.mice': [{'column': 'Mouse_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '鼠标唯一标识', 'examples': ['1', '2', '4', '6', '7']}, {'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '鼠标型号', 'examples': ['G502 HERO', 'DeathAdder V2', 'Dark Core RGB Pro', 'Wireless Eco', 'Rival 800X']}, {'column': 'Weight_Grams', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '重量（克）', 'examples': ['121.0', '82.0', '133.0', '101.0', '105.0']}], 'mouse.usage_records': [{'column': 'Record_ID'}, {'column': 'Mouse_ID'}, {'column': 'Start_Time'}, {'column': 'End_Time'}, {'column': 'Distance_Moved_Meters'}, {'column': 'Usage_Duration_Minutes'}]}}\nA physical knowledge question is as follows:\nCalculate the average moving power (in milliwatts) of the Logitech G502 HERO during usage on 2023-10-01, given the mouse weight is 121 grams, the coefficient of kinetic friction is 0.3, and the gravitational acceleration is taken as 9.81 m/s².\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (0.3 * (m.Weight_Grams/1000) * 9.81 * u.Distance_Moved_Meters + 0.5 * (m.Weight_Grams/1000) * POW(u.Distance_Moved_Meters/(u.Usage_Duration_Minutes*60), 2)) / (u.Usage_Duration_Minutes*60) * 1000 AS power_mw FROM usage_records u JOIN mice m ON u.Mouse_Id = m.Mouse_Id WHERE m.Model = 'G502 HERO' AND DATE(u.Start_Time) = '2023-10-01';",
        "db_id": "mouse"
    },
    {
        "id": 14,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mouse', 'manufacturer', 'energy efficiency cost-performance index', 'average lifespan', 'DPI', 'price', 'weight'], 'relations': ['mouse_to_manufacturer (mice.Manufacturer_Id → manufacturers.Manufacturer_Id)', 'mouse_to_usage (mice.Mouse_Id → usage_records.Mouse_Id)', 'index_formula_components (lifespan × DPI / price × weight)'], 'intent': 'calculate_energy_efficiency_index_and_rank_models', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'lifespan': 'minutes (from usage_records.Usage_Duration_Minutes)', 'DPI': 'unitless (from mice.Dpi)', 'price': 'USD (from mice.Price_Usd)', 'weight': 'grams (from mice.Weight_Grams)', 'index_unit': '(minutes × DPI) / (USD × grams)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'usage_records', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_Id'}, {'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'usage_records', 'pk_column': 'Record_ID'}], 'tableinfo': {'mouse.manufacturers': [{'column': 'Manufacturer_Id'}, {'column': 'Manufacturer_Name'}], 'mouse.mice': [{'column': 'Mouse_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '鼠标唯一标识', 'examples': ['1', '2', '4', '6', '7']}, {'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '鼠标型号', 'examples': ['G502 HERO', 'DeathAdder V2', 'Dark Core RGB Pro', 'Wireless Eco', 'Rival 800X']}, {'column': 'Manufacturer_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '制造商ID（外键）', 'examples': ['1', '2', '3', '4', '6']}, {'column': 'Dpi', 'type': 'INTEGER', 'primary_key': False, 'comment': 'DPI（每英寸点数）', 'examples': ['16000', '20000', '18000', '8000', '12000']}, {'column': 'Price_Usd', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '价格（美元）', 'examples': ['79.99', '69.99', '99.99', '89.99', '129.99']}, {'column': 'Weight_Grams', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '重量（克）', 'examples': ['121.0', '82.0', '133.0', '101.0', '105.0']}], 'mouse.usage_records': [{'column': 'Mouse_Id'}, {'column': 'Usage_Duration_Minutes'}]}}\nA mathematical logic question is as follows:\nCalculate the 'energy efficiency cost-performance index' for each manufacturer's mouse: (average lifespan × DPI) / (price × weight), and filter the top 3 models.\nyour response just have a SQL without anything.\n",
        "solution": "WITH IndexCalc AS (SELECT m.Model, (AVG(s.Sensor_Life_Hours) * m.Dpi) / (m.Price_Usd * m.Weight_Grams) AS efficacy_index FROM mice m JOIN sensor_data s ON m.Mouse_Id = s.Mouse_Id GROUP BY m.Model, m.Dpi, m.Price_Usd, m.Weight_Grams) SELECT Model, efficacy_index FROM IndexCalc ORDER BY efficacy_index DESC LIMIT 3;",
        "db_id": "mouse"
    },
    {
        "id": 15,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mouse models', 'lift distance < 2mm', 'daily average clicks > 1000 times', 'calibration interval > 90 days'], 'relations': ['mouse_to_lift_distance (mouse models → sensor_data.Lift_Off_Distance_Mm)', 'mouse_to_daily_clicks (mouse models → usage_records.Clicks)', 'mouse_to_calibration_interval (mouse models → sensor_data.Last_Calibration_Date)'], 'intent': 'identify_mouse_models_meeting_criteria', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2, 1000, 90], 'units': {'lift_distance': 'mm', 'daily_clicks': 'times', 'calibration_interval': 'days'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'sensor_data', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}, {'fk_table': 'usage_records', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'sensor_data', 'pk_column': 'Sensor_Id'}, {'pk_table': 'usage_records', 'pk_column': 'Record_ID'}], 'tableinfo': {'mouse.mice': [{'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '鼠标型号', 'examples': ['G502 HERO', 'DeathAdder V2', 'Dark Core RGB Pro', 'Wireless Eco', 'Rival 800X']}], 'mouse.sensor_data': [{'column': 'Lift_Off_Distance_Mm'}, {'column': 'Last_Calibration_Date'}], 'mouse.usage_records': [{'column': 'Clicks'}, {'column': 'Start_Time'}]}}\nA common sense reasoning question is as follows:\nIdentify the mouse models that meet all the following criteria:  \n① Lift distance < 2mm  \n② Daily average clicks > 1000 times  \n③ Calibration interval > 90 days\nyour response just have a SQL without anything.\n",
        "solution": "SELECT m.Model, MAX(s.Lift_Off_Distance_Mm) AS current_lift, SUM(u.Clicks)/COUNT(DISTINCT DATE(u.Start_Time)) AS daily_clicks, DATEDIFF(CURDATE(), MAX(s.Last_Calibration_Date)) AS days_since_calib FROM mice m JOIN sensor_data s ON m.Mouse_Id = s.Mouse_Id JOIN usage_records u ON m.Mouse_Id = u.Mouse_Id GROUP BY m.Model HAVING current_lift < 2 AND daily_clicks > 1000 AND days_since_calib > 90;",
        "db_id": "mouse"
    },
    {
        "id": 16,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['quantum sensor', 'superconducting material mouse', '-100℃ environment', '1,000,000 DPI', 'current maximum DPI 20,000', 'photon count', 'quantum limit'], 'relations': ['sensor_to_mouse (quantum sensor → superconducting material mouse)', 'dpi_comparison (1,000,000 DPI > 20,000 DPI)', 'temperature_impact (-100℃ environment → quantum sensor performance)', 'photon_count_to_quantum_limit (photon count → quantum limit verification)'], 'intent': 'calculate_photon_count_and_verify_quantum_limit_under_extreme_conditions', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1000000, 20000, -100], 'units': {'dpi': 'Dots Per Inch (DPI)', 'temperature': '°C (Celsius)', 'photon_count': 'unitless (photons)', 'quantum_limit': 'Joule-seconds (J·s) or Hz (depending on context)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'sensor_data', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'sensor_data', 'pk_column': 'Sensor_Id'}], 'tableinfo': {'mouse.mice': [{'column': 'Sensor_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '传感器类型（如光学、激光）', 'examples': ['Optical', 'Laser']}, {'column': 'Dpi', 'type': 'INTEGER', 'primary_key': False, 'comment': 'DPI（每英寸点数）', 'examples': ['16000', '20000', '18000', '8000', '12000']}], 'mouse.sensor_data': [{'column': 'Max_Dpi'}, {'column': 'Sensor_Type'}]}}\nA hypothetical reasoning question is as follows:\nAssuming the quantum sensor achieves 1,000,000 DPI (currently a maximum of 20,000), powers a superconducting material mouse in a -100℃ environment, calculates the photon count, and verifies the quantum limit.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (6.626e-34 * 3e8) / (500e-9 * POWER(1e6/m.Dpi, 2)) AS photons_per_pixel, CASE WHEN (1e6/m.Dpi) < (6.626e-34/(2*PI())) THEN '突破海森堡极限' ELSE '理论可行' END AS quantum_status FROM mice m CROSS JOIN (SELECT 1e6 AS target_dpi) params WHERE m.Is_Wireless = 1;",
        "db_id": "mouse"
    },
    {
        "id": 17,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Corsair Dark Core RGB Pro', 'weight 133 grams', 'tracking speed 400 IPS', 'acceleration time 0.1 seconds'], 'relations': ['model_to_specs (Corsair Dark Core RGB Pro → mice table)', 'weight_to_kinetic_energy (mass component)', 'speed_to_kinetic_energy (velocity component)'], 'intent': 'calculate_kinetic_energy_change', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [133, 400, 0.1], 'units': {'mass': 'grams → kilograms (divided by 1000)', 'velocity': 'IPS (inches per second) → meters per second (×0.0254)', 'time': 'seconds (used for acceleration hypothesis)', 'kinetic_energy': 'Joules (kg·m²/s²)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}], 'tableinfo': {'mouse.mice': [{'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '鼠标型号', 'examples': ['G502 HERO', 'DeathAdder V2', 'Dark Core RGB Pro', 'Wireless Eco', 'Rival 800X']}, {'column': 'Weight_Grams', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '重量（克）', 'examples': ['121.0', '82.0', '133.0', '101.0', '105.0']}, {'column': 'Tracking_Speed_Ips', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '追踪速度（英寸/秒）', 'examples': ['400.0', '450.0', '200.0', '350.0', '420.0']}]}}\nA physical knowledge question is as follows:\nBased on the Corsair Dark Core RGB Pro's weight of 133 grams and tracking speed of 400 IPS, calculate its kinetic energy change during full-load operation (assuming it accelerates from rest to maximum speed in 0.1 seconds).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 0.5 * (Weight_Grams / 1000.0) * POWER((400 * 0.0254), 2) AS Kinetic_Energy_Joules FROM mice WHERE Model = 'Dark Core RGB Pro';",
        "db_id": "mouse"
    },
    {
        "id": 18,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturers', 'countries', 'market share variance', 'per capita profit', 'employees', 'enterprises established for more than 30 years'], 'relations': ['manufacturer_to_country (manufacturers.Country)', 'market_share_variance_per_country', 'profit_per_employee (Profit_Usd / Employees)', 'exclusion_condition (Founded_year < 1993 for 30-year threshold)'], 'intent': 'calculate_covariance_between_market_share_variance_and_per_capita_profit', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [30], 'units': {'market_share': '% (percentage)', 'profit': 'USD', 'employees': 'individual_count', 'covariance': 'unitless_statistical_measure (implied)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_Id'}], 'tableinfo': {'mouse.manufacturers': [{'column': 'Country'}, {'column': 'Market_Share_Percent'}, {'column': 'Profit_Usd'}, {'column': 'Employees'}, {'column': 'Founded_year'}]}}\nA mathematical logic question is as follows:\nCalculate the covariance between the market share variance of manufacturers in each country and the per capita profit of employees, excluding enterprises established for more than 30 years.\nyour response just have a SQL without anything.\n",
        "solution": "WITH FilteredData AS (SELECT Country, Market_Share_Percent, Profit_Usd / Employees AS Profit_Per_Employee FROM manufacturers WHERE Founded_year > 1993) SELECT Country, VARIANCE(Market_Share_Percent) AS Market_Share_Variance, (AVG(Market_Share_Percent * Profit_Per_Employee) - AVG(Market_Share_Percent) * AVG(Profit_Per_Employee)) AS Covariance FROM FilteredData GROUP BY Country ORDER BY Covariance DESC;",
        "db_id": "mouse"
    },
    {
        "id": 19,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['wireless mouse models', 'battery life (hours)', 'price (USD)'], 'relations': ['battery_life_gt_price (Battery_Life_Hours > Price_Usd)', 'battery_life_per_dollar (Battery_Life_Hours / Price_Usd)'], 'intent': 'filter_wireless_mice_with_battery_life_exceeding_price_and_calculate_efficiency', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['Battery_Life_Hours', 'Price_Usd'], 'units': {'battery_life': 'hours', 'price': 'USD (United States Dollar)', 'efficiency_ratio': 'hours/USD'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}], 'tableinfo': {'mouse.mice': [{'column': 'Mouse_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '鼠标唯一标识', 'examples': ['1', '2', '4', '6', '7']}, {'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '鼠标型号', 'examples': ['G502 HERO', 'DeathAdder V2', 'Dark Core RGB Pro', 'Wireless Eco', 'Rival 800X']}, {'column': 'Is_Wireless', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否无线', 'examples': ['0', '1']}, {'column': 'Battery_Life_Hours', 'type': 'INTEGER', 'primary_key': False, 'comment': '电池续航时间（小时）', 'examples': ['50', '60', '80', '70']}, {'column': 'Price_Usd', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '价格（美元）', 'examples': ['79.99', '69.99', '99.99', '89.99', '129.99']}]}}\nA common sense reasoning question is as follows:\nFind wireless mouse models with battery life longer than their price (USD) and calculate their battery life per dollar value (hours/USD)\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Model, Battery_Life_Hours, Price_Usd, Battery_Life_Hours / Price_Usd AS Value_Per_USD FROM mice WHERE Is_Wireless = 1 AND Battery_Life_Hours > Price_Usd;",
        "db_id": "mouse"
    },
    {
        "id": 20,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mouse moving at 1% speed of light (2,997,924.58 m/s)', '16,000 DPI', 'displacement ≥1 pixel'], 'relations': ['speed_to_pixels_conversion (m/s → pixels/s)', 'dpi_definition (pixels/inch)'], 'intent': 'calculate_data_packets_per_second', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [2997924.58, 16000], 'units': {'speed': 'm/s (meters per second)', 'dpi': 'pixels/inch', 'conversion': '1 inch = 0.0254 meters, packets per second = (speed_in_m/s ÷ 0.0254 m/inch) × DPI'}, 'foreign_keys': [], 'primary_keys': [], 'tableinfo': 'This sql query does not need table and columns information as it is about mathematical calculations.'}\nA hypothetical reasoning question is as follows:\nAssuming a mouse moves at 1% of the speed of light (2,997,924.58 m/s), calculate the number of data packets generated per second at 16,000 DPI (assuming a packet is reported for every displacement ≥1 pixel).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (2997924.58 / 0.0254) * 16000 / 1e6 AS Packets_Per_Second;",
        "db_id": "mouse"
    },
    {
        "id": 21,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Logitech G502 HERO mouse', 'user ID=101', 'distance 1500.5 meters', 'energy consumption 5000 joules', 'usage time 120 minutes'], 'relations': ['mouse_model_to_mouse_id (Logitech G502 HERO → Mouse_Id)', 'user_usage_filter (User_ID=101 → usage_records)', 'energy_to_power_conversion (5000J / 120min → watts)'], 'intent': 'calculate_average_power', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1500.5, 5000, 120, 60], 'units': {'distance': 'meters', 'energy': 'joules (J)', 'time': 'minutes (to be converted to seconds)', 'power': 'watts (W = J/s)', 'conversion': '60 seconds/minute'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'usage_records', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'usage_records', 'pk_column': 'Record_ID'}], 'tableinfo': {'mouse.mice': [{'column': 'Mouse_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '鼠标唯一标识', 'examples': ['1', '2', '4', '6', '7']}, {'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '鼠标型号', 'examples': ['G502 HERO', 'DeathAdder V2', 'Dark Core RGB Pro', 'Wireless Eco', 'Rival 800X']}], 'mouse.usage_records': [{'column': 'Mouse_ID'}, {'column': 'User_ID'}, {'column': 'Distance_Moved_Meters'}, {'column': 'Energy_Consumed_Joules'}, {'column': 'Usage_Duration_Minutes'}]}}\nA physical knowledge question is as follows:\nCalculate the average power (in watts) consumed by the Logitech G502 HERO mouse for moving 1500.5 meters in the usage records of user ID=101, given that the energy consumption is 5000 joules and the usage time is 120 minutes.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Energy_Consumed_Joules / (Usage_Duration_Minutes * 60) AS power_watts FROM usage_records WHERE User_Id = 101 AND Mouse_Id = (SELECT Mouse_Id FROM mice WHERE Model = 'G502 HERO') AND Distance_Moved_Meters = 1500.5 AND Energy_Consumed_Joules = 5000 AND Usage_Duration_Minutes = 120;",
        "db_id": "mouse"
    },
    {
        "id": 22,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturers', 'profit contribution per employee', 'comprehensive metric'], 'relations': ['manufacturer_to_profit_per_employee (manufacturer → profit_contribution_per_employee)', 'profit_contribution_per_employee_to_comprehensive_metric (profit_contribution_per_employee → comprehensive_metric)'], 'intent': 'calculate_profit_contribution_per_employee_and_sort_by_comprehensive_metric', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.3, 0.4, 2, 0.1, 1000, 3], 'units': {'weight_coefficients': 'dimensionless coefficients applied to metrics', 'comprehensive_metric': 'unitless score (normalized by /1000)', 'rounding': '3 decimal places'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_Id'}], 'tableinfo': {'mouse.manufacturers': [{'column': 'Manufacturer_Name'}, {'column': 'Revenue_Usd'}, {'column': 'Profit_Usd'}, {'column': 'Market_Share_Percent'}, {'column': 'Employees'}]}}\nA mathematical logic question is as follows:\nCalculate the 'profit contribution per employee' for each manufacturer and sort them in descending order based on a comprehensive metric. The comprehensive metric = (Revenue_Usd * 0.3 + Profit_Usd * 0.4 + Market_Share_Percent * 2 + Employees * 0.1) / 1000, rounded to 3 decimal places.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Manufacturer_Name, ROUND((Revenue_Usd*0.3 + Profit_Usd*0.4 + Market_Share_Percent*2 + Employees*0.1)/1000, 3) AS composite_score FROM manufacturers ORDER BY composite_score DESC;",
        "db_id": "mouse"
    },
    {
        "id": 23,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['wireless mice', 'battery life', 'usage records'], 'relations': ['mouse_to_usage_records (Mouse_Id)', 'battery_life_comparison (Battery_Life_Hours < MAX(Usage_Duration_Minutes)/60)'], 'intent': 'identify_abnormal_wireless_mice', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [60], 'units': {'time_conversion': 'minutes to hours (divided by 60)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'usage_records', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'usage_records', 'pk_column': 'Record_ID'}], 'tableinfo': {'mouse.mice': [{'column': 'Mouse_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '鼠标唯一标识', 'examples': ['1', '2', '4', '6', '7']}, {'column': 'Battery_Life_Hours', 'type': 'INTEGER', 'primary_key': False, 'comment': '电池续航时间（小时）', 'examples': ['50', '60', '80', '70']}, {'column': 'Is_Wireless', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否无线', 'examples': ['0', '1']}], 'mouse.usage_records': [{'column': 'Mouse_Id'}, {'column': 'Usage_Duration_Minutes'}]}}\nA common sense reasoning question is as follows:\nFind all abnormal products among wireless mice where the nominal battery life in hours is less than the maximum recorded single usage duration for that model in minutes divided by 60. Requirement: Battery_Life_Hours < MAX(Usage_Duration_Minutes)/60\nyour response just have a SQL without anything.\n",
        "solution": "SELECT m.Model, m.Battery_Life_Hours, (SELECT MAX(u.Usage_Duration_Minutes)/60 FROM usage_records u WHERE u.Mouse_Id = m.Mouse_Id) AS max_usage_hours FROM mice m WHERE m.Is_Wireless = 1 AND m.Battery_Life_Hours < (SELECT MAX(u.Usage_Duration_Minutes)/60 FROM usage_records u WHERE u.Mouse_Id = m.Mouse_Id);",
        "db_id": "mouse"
    },
    {
        "id": 24,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mouse sensor', 'acceleration 1000G', 'tracking speed 450 IPS', '3 light-years'], 'relations': ['speed_to_distance (time = distance/speed)', 'unit_conversion (IPS to m/s, light-years to meters)'], 'intent': 'calculate_time_for_mouse_sensor_travel', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1000, 450, 3], 'units': {'acceleration': 'G (gravitational acceleration)', 'speed': 'IPS (inches per second) → 11.43 m/s (converted)', 'distance': 'light-years → 2.8383e+16 meters (converted)', 'time': 'years (calculated)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'sensor_data', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'sensor_data', 'pk_column': 'Sensor_Id'}], 'tableinfo': {'mouse.mice': [{'column': 'Tracking_Speed_Ips', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '追踪速度（英寸/秒）', 'examples': ['400.0', '450.0', '200.0', '350.0', '420.0']}], 'mouse.sensor_data': [{'column': 'Tracking_Speed_Ips'}]}}\nA hypothetical reasoning question is as follows:\nAssuming a laboratory mouse sensor has an acceleration of 1000G and moves continuously at the maximum tracking speed of 450 IPS for 3 light-years, calculate how many years it would theoretically take. (1 inch = 0.0254 meters, 1 light-year ≈ 9.461e+15 meters, neglecting relativistic effects)\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (3 * 9.461e15) / (450 * 0.0254) / (365*24*3600) AS time_years FROM dual;",
        "db_id": "mouse"
    },
    {
        "id": 25,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Razer DeathAdder V2 mouse', 'weight 82 grams', 'maximum acceleration 50G'], 'relations': ['model_to_weight (Razer DeathAdder V2 → weight 82 grams)', 'model_to_acceleration (Razer DeathAdder V2 → maximum acceleration 50G)'], 'intent': 'calculate_force', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [82, 50], 'units': {'mass': 'kg (converted from grams: 82g = 0.082kg)', 'acceleration': 'm/s² (50G = 50 × 9.81 m/s²)', 'force': 'N (Newtons, calculated as kg·m/s²)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}], 'tableinfo': {'mouse.mice': [{'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '鼠标型号', 'examples': ['G502 HERO', 'DeathAdder V2', 'Dark Core RGB Pro', 'Wireless Eco', 'Rival 800X']}, {'column': 'Weight_Grams', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '重量（克）', 'examples': ['121.0', '82.0', '133.0', '101.0', '105.0']}, {'column': 'Acceleration_G', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '加速度（重力加速度 g）', 'examples': ['10.0', '50.0', '40.0', '20.0', '35.0']}]}}\nA physical knowledge question is as follows:\nCalculate the force (in newtons) generated when the Razer DeathAdder V2 mouse moves with a maximum acceleration of 50G, given that the mouse weighs 82 grams.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (m.Weight_Grams/1000) * (50 * 9.8) AS force_newton FROM mice m WHERE m.Model = 'DeathAdder V2';",
        "db_id": "mouse"
    },
    {
        "id": 26,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['DPI cost-performance index', 'mouse', 'manufacturer', 'sensor_data'], 'relations': ['mouse_to_manufacturer (Manufacturer_Id)', 'mouse_to_sensor_data (Mouse_Id)', 'formula_components (Max_Dpi / Price_Usd * 1000)'], 'intent': 'calculate_dpi_cost_performance_index_and_rank_top_three', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000], 'units': {'dpi': 'DPI (dots per inch)', 'price': 'USD (United States Dollars)', 'index_unit': '(DPI / USD) * 1000'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'sensor_data', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_Id'}, {'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'sensor_data', 'pk_column': 'Sensor_Id'}], 'tableinfo': {'mouse.manufacturers': [{'column': 'Manufacturer_Id'}, {'column': 'Manufacturer_Name'}], 'mouse.mice': [{'column': 'Mouse_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '鼠标唯一标识', 'examples': ['1', '2', '4', '6', '7']}, {'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '鼠标型号', 'examples': ['G502 HERO', 'DeathAdder V2', 'Dark Core RGB Pro', 'Wireless Eco', 'Rival 800X']}, {'column': 'Manufacturer_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '制造商ID（外键）', 'examples': ['1', '2', '3', '4', '6']}, {'column': 'Price_Usd', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '价格（美元）', 'examples': ['79.99', '69.99', '99.99', '89.99', '129.99']}], 'mouse.sensor_data': [{'column': 'Mouse_Id'}, {'column': 'Max_Dpi'}]}}\nA mathematical logic question is as follows:\nCalculate the 'DPI cost-performance index' for each manufacturer's mouse, where the formula is (maximum DPI / price) * 1000, and rank the top three by index in descending order.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ma.Manufacturer_Name, (MAX(m.Dpi)/m.Price_Usd)*1000 AS dpi_ratio FROM mice m JOIN manufacturers ma ON m.Manufacturer_Id = ma.Manufacturer_Id GROUP BY ma.Manufacturer_Name, m.Price_Usd ORDER BY dpi_ratio DESC LIMIT 3;",
        "db_id": "mouse"
    },
    {
        "id": 27,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['wired mice', 'lift distance >2mm', 'cable length <1.5 meters'], 'relations': ['mice_to_sensor_data (Mouse_Id → Sensor_Data.Mouse_Id)', 'specifications (Cable_Length_Meters, Lift_Off_Distance_Mm)'], 'intent': 'find_abnormal_products', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [2, 1.5], 'units': {'lift_distance': 'mm (millimeters)', 'cable_length': 'meters', 'threshold_comparison': '2mm < lift_distance, 1.5m > cable_length'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'sensor_data', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'sensor_data', 'pk_column': 'Sensor_Id'}], 'tableinfo': {'mouse.mice': [{'column': 'Is_Wireless', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否无线', 'examples': ['0', '1']}, {'column': 'Cable_Length_Meters', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '线缆长度（米）', 'examples': ['2.1', '1.8', '0.0', '2.0']}, {'column': 'Mouse_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '鼠标唯一标识', 'examples': ['1', '2', '4', '6', '7']}], 'mouse.sensor_data': [{'column': 'Lift_Off_Distance_Mm'}]}}\nA common sense reasoning question is as follows:\nFind all abnormal products among wired mice with a lift distance >2mm and cable length <1.5 meters.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT m.Model, s.Lift_Off_Distance_Mm, m.Cable_Length_Meters FROM mice m JOIN sensor_data s ON m.Mouse_Id = s.Mouse_Id WHERE m.Is_Wireless = 0 AND s.Lift_Off_Distance_Mm > 2 AND m.Cable_Length_Meters < 1.5;",
        "db_id": "mouse"
    },
    {
        "id": 28,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['speed of light (299792458 m/s)', 'acceleration (10000 G)', 'displacement per second (PB)'], 'relations': ['speed_to_acceleration (extreme kinematic relationship)', 'unit_conversion_conflict (meters → petabytes)'], 'intent': 'calculate_displacement_with_non_standard_unit_conversion', 'reasoning_type': 'physical_knowledge_reasoning', 'numerical_values': [299792458, 10000], 'units': {'speed': 'm/s (meters per second)', 'acceleration': 'G (gravitational acceleration, 1G ≈ 9.8m/s²)', 'displacement': 'PB (petabytes, which has no standard physical correlation to meters)', 'conversion': 'No direct conversion exists between meters and petabytes; database schema lacks required parameters for data storage calculations'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'sensor_data', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'sensor_data', 'pk_column': 'Sensor_Id'}], 'tableinfo': {'mouse.mice': [{'column': 'Polling_Rate_Hz', 'type': 'INTEGER', 'primary_key': False, 'comment': '轮询率（Hz）', 'examples': ['1000', '2000', '500', '4000', '1001']}], 'mouse.sensor_data': [{'column': 'Sensor_Type'}, {'column': 'Sensor_Life_Hours'}]}}\nA hypothetical reasoning question is as follows:\nGiven that a mouse moves at the speed of light (299792458 m/s) with an acceleration of 10000 G, calculate the displacement data per second (in PB).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (299792458 / 0.0254) * 8 / 1e15 AS data_pb FROM dual;",
        "db_id": "mouse"
    },
    {
        "id": 29,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Logitech G502 HERO mouse', 'User ID 101', 'distance moved 1500.5 meters', 'average speed 0.8 m/s', 'weight 121 grams'], 'relations': ['mouse_to_weight (Logitech G502 HERO → Weight_Grams=121g)', 'user_to_mouse (User ID 101 → usage_records.Mouse_ID → mice.Mouse_Id)'], 'intent': 'calculate_kinetic_energy', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1500.5, 0.8, 121], 'units': {'mass': 'grams → kilograms (121g = 0.121kg)', 'velocity': 'm/s', 'energy': 'joules (J) = 0.5 * mass * velocity²'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'usage_records', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'usage_records', 'pk_column': 'Record_ID'}], 'tableinfo': {'mouse.mice': [{'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '鼠标型号', 'examples': ['G502 HERO', 'DeathAdder V2', 'Dark Core RGB Pro', 'Wireless Eco', 'Rival 800X']}, {'column': 'Weight_Grams', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '重量（克）', 'examples': ['121.0', '82.0', '133.0', '101.0', '105.0']}, {'column': 'Mouse_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '鼠标唯一标识', 'examples': ['1', '2', '4', '6', '7']}], 'mouse.usage_records': [{'column': 'Mouse_Id'}, {'column': 'User_ID'}]}}\nA physical knowledge question is as follows:\nCalculate the kinetic energy (in joules) of the Logitech G502 HERO mouse when the user with ID=101 moves it 1500.5 meters at an average speed of 0.8 m/s, given its weight of 121 grams.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 0.5 * (m.Weight_Grams/1000) * POWER(0.8, 2) AS kinetic_energy_joules FROM mice m JOIN usage_records u ON m.Mouse_Id = u.Mouse_Id WHERE m.Model = 'G502 HERO' AND u.User_Id = 101 AND u.Distance_Moved_Meters = 1500.5;",
        "db_id": "mouse"
    },
    {
        "id": 30,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturers', 'Profit_Usd', 'Employees', 'Profit per Employee Multiple'], 'relations': ['manufacturer_to_profit (Manufacturer → Profit_Usd)', 'manufacturer_to_employees (Manufacturer → Employees)', 'profit_per_employee_ratio (Profit_Usd/Employees)', 'average_profit_per_employee (global average of profit/employee)', 'multiple_calculation (individual_ratio / average_ratio)'], 'intent': 'calculate_profit_per_employee_multiple_by_manufacturer', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'profit': 'USD (United States Dollars)', 'employees': 'count (unitless)', 'profit_per_employee_ratio': 'USD/employee', 'multiple': 'unitless ratio (ratio of individual ratio to average ratio)', 'rounding': '2 decimal places'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_Id'}], 'tableinfo': {'mouse.manufacturers': [{'column': 'Manufacturer_Id'}, {'column': 'Manufacturer_Name'}, {'column': 'Profit_Usd'}, {'column': 'Employees'}]}}\nA mathematical logic question is as follows:\nStatistics on the 'Profit per Employee Multiple' by manufacturer, calculated as: (Profit_Usd/Employees)/(SELECT AVG(Profit_Usd/Employees) FROM manufacturers), rounded to two decimal places and sorted in descending order by the multiple.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Manufacturer_Name, ROUND((Profit_Usd/Employees)/(SELECT AVG(Profit_Usd/Employees) FROM manufacturers), 2) AS profit_ratio FROM manufacturers ORDER BY profit_ratio DESC;",
        "db_id": "mouse"
    },
    {
        "id": 31,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['sensor_data', 'usage_records'], 'relations': ['sensor_data.Mouse_Id → usage_records.Mouse_Id (join condition)'], 'intent': 'detect_abnormal_sensor_lifespan', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'usage_duration': 'Minutes (Usage_Duration_Minutes)', 'sensor_life': 'Hours (Sensor_Life_Hours)', 'conversion': 'SUM(Usage_Duration_Minutes)/60 → convert minutes to hours'}, 'foreign_keys': [{'fk_table': 'sensor_data', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}, {'fk_table': 'usage_records', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'sensor_data', 'pk_column': 'Sensor_Id'}, {'pk_table': 'usage_records', 'pk_column': 'Record_ID'}], 'tableinfo': {'mouse.sensor_data': [{'column': 'Sensor_Id'}, {'column': 'Mouse_Id'}, {'column': 'Sensor_Life_Hours'}], 'mouse.usage_records': [{'column': 'Mouse_Id'}, {'column': 'Usage_Duration_Minutes'}]}}\nA common sense reasoning question is as follows:\nDetect abnormal data where 'sensor lifespan is less than actual cumulative usage time', requiring association between the sensor_data and usage_records tables, with calculation SUM(Usage_Duration_Minutes)/60 > Sensor_Life_Hours.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT s.*, t.total_hours FROM sensor_data s JOIN (SELECT Mouse_Id, SUM(Usage_Duration_Minutes)/60 AS total_hours FROM usage_records GROUP BY Mouse_Id) t ON s.Mouse_Id = t.Mouse_Id WHERE s.Sensor_Life_Hours < t.total_hours;",
        "db_id": "mouse"
    },
    {
        "id": 32,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Razer mouse', 'target speed 0.9c', 'constant acceleration 20,000G', 'speed of light 3e8 m/s', '1 year ≈ 3.15e7 seconds'], 'relations': ['mouse_to_acceleration (Razer mouse → acceleration 20,000G)', 'acceleration_time_relation (time = velocity / acceleration)'], 'intent': 'calculate_time_required_for_acceleration', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [0.9, 300000000.0, 20000, 31500000.0], 'units': {'acceleration': 'G (gravitational acceleration, 1G = 9.8 m/s²)', 'speed': 'm/s (meters per second)', 'time': 'years (converted from seconds)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_Id'}, {'pk_table': 'mice', 'pk_column': 'Mouse_Id'}], 'tableinfo': {'mouse.manufacturers': [{'column': 'Manufacturer_Name'}], 'mouse.mice': [{'column': 'Acceleration_G', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '加速度（重力加速度 g）', 'examples': ['10.0', '50.0', '40.0', '20.0', '35.0']}]}}\nA hypothetical reasoning question is as follows:\nAssume a certain space station uses a Razer mouse moving at 0.9 times the speed of light, maintaining a constant acceleration of 20,000G. Calculate the time required (in years) to accelerate from rest to the target speed. Given: speed of light = 3e8 m/s, 1 year ≈ 3.15e7 seconds.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (0.9*3e8) / (20000*9.8) / 3.15e7 AS time_years FROM dual;",
        "db_id": "mouse"
    },
    {
        "id": 33,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Logitech G502 HERO', 'user ID=101', 'sensor acceleration 40G', 'weight 121 grams', 'average speed 1500.5 meters per 120 minutes'], 'relations': ['model_to_specs (Logitech G502 HERO → mice table)', 'user_to_usage (User 101 → usage_records)', 'acceleration_to_force (40G → force calculation)', 'weight_to_mass (121g → kg conversion)', 'speed_to_velocity (1500.5m/120min → m/s)'], 'intent': 'calculate_instantaneous_power_consumption', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [40, 121, 1500.5, 120], 'units': {'acceleration': 'G (1G=9.81m/s²)', 'mass': 'grams → kg (0.121kg)', 'velocity': 'meters per minute → m/s (0.2084m/s)', 'power': 'watts (W=J/s)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'sensor_data', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}, {'fk_table': 'usage_records', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'sensor_data', 'pk_column': 'Sensor_Id'}, {'pk_table': 'usage_records', 'pk_column': 'Record_ID'}], 'tableinfo': {'mouse.mice': [{'column': 'Mouse_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '鼠标唯一标识', 'examples': ['1', '2', '4', '6', '7']}, {'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '鼠标型号', 'examples': ['G502 HERO', 'DeathAdder V2', 'Dark Core RGB Pro', 'Wireless Eco', 'Rival 800X']}, {'column': 'Weight_Grams', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '重量（克）', 'examples': ['121.0', '82.0', '133.0', '101.0', '105.0']}, {'column': 'Acceleration_G', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '加速度（重力加速度 g）', 'examples': ['10.0', '50.0', '40.0', '20.0', '35.0']}], 'mouse.usage_records': [{'column': 'Record_ID'}, {'column': 'User_ID'}, {'column': 'Distance_Moved_Meters'}, {'column': 'Usage_Duration_Minutes'}], 'mouse.sensor_data': [{'column': 'Sensor_Id'}, {'column': 'Acceleration_G'}]}}\nA physical knowledge question is as follows:\nCalculate the instantaneous power (in watts) generated by the Logitech G502 HERO mouse when used by user ID=101, based on a sensor acceleration of 40G during movement. The known weight is 121 grams, and the average speed is calculated as 1500.5 meters per 120 minutes.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ROUND((0.121 * 40 * 9.8) * (1500.5 / (120 * 60)), 4) AS Instantaneous_Power FROM manufacturers m JOIN mice mc ON m.Manufacturer_Id = mc.Manufacturer_Id JOIN usage_records ur ON mc.Mouse_Id = ur.Mouse_ID WHERE m.Manufacturer_Name = 'Logitech' AND mc.Model = 'G502 HERO' AND ur.User_ID = 101;",
        "db_id": "mouse"
    },
    {
        "id": 34,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturer', 'mouse', 'price dispersion', 'market share'], 'relations': ['manufacturer_to_mice (Manufacturer_Id → mice.Manufacturer_Id)', 'price_dispersion_formula (highest_price - lowest_price / AVG(Price_Usd))', 'joint_ranking (price_dispersion + Market_Share_Percent)'], 'intent': 'calculate_and_rank_price_dispersion_with_market_share', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3], 'units': {'price': 'USD (Price_Usd column)', 'market_share': 'Percent (Market_Share_Percent column)', 'decimal_places': '3'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_Id'}, {'pk_table': 'mice', 'pk_column': 'Mouse_Id'}], 'tableinfo': {'mouse.manufacturers': [{'column': 'Manufacturer_Id'}, {'column': 'Manufacturer_Name'}, {'column': 'Market_Share_Percent'}], 'mouse.mice': [{'column': 'Manufacturer_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '制造商ID（外键）', 'examples': ['1', '2', '3', '4', '6']}, {'column': 'Price_Usd', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '价格（美元）', 'examples': ['79.99', '69.99', '99.99', '89.99', '129.99']}]}}\nA mathematical logic question is as follows:\nCalculate the 'price dispersion' for each manufacturer's mice, where the formula is (highest price - lowest price) / AVG(Price_Usd), and rank it jointly with market share, keeping three decimal places.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT mf.Manufacturer_Name, ROUND((MAX(mc.Price_Usd) - MIN(mc.Price_Usd)) / AVG(mc.Price_Usd), 3) AS price_dispersion, mf.Market_Share_Percent FROM manufacturers mf JOIN mice mc ON mf.Manufacturer_Id = mc.Manufacturer_Id GROUP BY mf.Manufacturer_Id ORDER BY price_dispersion DESC, mf.Market_Share_Percent DESC;",
        "db_id": "mouse"
    },
    {
        "id": 35,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['sensors', 'calibration frequency', 'sensor life hours'], 'relations': ['sensor_to_calibration_count (Sensor_Id → Calibration_Count)', 'sensor_to_life_hours (Sensor_Id → Sensor_Life_Hours)', 'calibration_condition (Calibration_Count > Sensor_Life_Hours/100)'], 'intent': 'identify_sensors_with_abnormal_calibration_frequency', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100], 'units': {'sensor_life_hours': 'hours', 'calibration_count': 'unitless (count)', 'threshold': '1 calibration per 100 hours (unit ratio)'}, 'foreign_keys': [{'fk_table': 'sensor_data', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'sensor_data', 'pk_column': 'Sensor_Id'}], 'tableinfo': {'mouse.sensor_data': [{'column': 'Sensor_Id'}, {'column': 'Calibration_Count'}, {'column': 'Sensor_Life_Hours'}]}}\nA common sense reasoning question is as follows:\nIdentify sensors with 'abnormal calibration frequency', where Calibration_Count > Sensor_Life_Hours/100 (assuming 1 calibration is allowed per 100 hours of sensor life)\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM sensor_data WHERE Calibration_Count > (Sensor_Life_Hours / 100);",
        "db_id": "mouse"
    },
    {
        "id": 36,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Corsair mouse', '10^18 DPI', '8.8e26 meters (observable universe diameter)', '1 millennium', '1MB per movement', '1YB = 1e24 GB'], 'relations': ['mouse_to_dpi (Corsair mouse → technical specification DPI = 1e18)', 'distance_to_universe (8.8e26 meters = observable universe diameter)', 'movement_to_data (1 movement = 1MB)', 'time_to_millennium (1 millennium = 1000 years)', 'unit_conversion (Yottabyte = 1e24 GB)'], 'intent': 'calculate_mouse_movement_count_and_data_volume', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1e+18, 8.8e+26, 1, 1000, 1e+24], 'units': {'dpi': 'dots per inch (DPI)', 'distance': 'meters (m)', 'data_per_movement': 'MB (Megabytes)', 'time': 'years (millennium = 1000 years)', 'data_volume': 'Yottabytes (YB), where 1YB = 1e24 GB'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}], 'tableinfo': {'mouse.mice': [{'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '鼠标型号', 'examples': ['G502 HERO', 'DeathAdder V2', 'Dark Core RGB Pro', 'Wireless Eco', 'Rival 800X']}, {'column': 'Dpi', 'type': 'INTEGER', 'primary_key': False, 'comment': 'DPI（每英寸点数）', 'examples': ['16000', '20000', '18000', '8000', '12000']}]}}\nA hypothetical reasoning question is as follows:\nAssuming an observatory uses a Corsair mouse with 10^18 DPI to observe galaxies, calculate the minimum number of movements required to precisely position across the diameter of the observable universe (8.8e26 meters). If each movement generates 1MB of logs, find the total data volume over a millennium (in Yottabytes, where 1YB = 1e24GB).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (8.8e26 / (0.0254 / 1e18)) AS movement_times, ROUND(( (8.8e26 / (0.0254 / 1e18)) * 1 * 1000 * 3.154e7 * 1000 ) / 1e24, 3) AS data_yb;",
        "db_id": "mouse"
    },
    {
        "id": 37,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Razer DeathAdder V2 mouse', 'weight 82 grams', 'maximum tracking speed 450 IPS', 'usage record 2000.75 meters/150 minutes'], 'relations': ['model_to_specs (Razer DeathAdder V2 → mice specs)', 'weight_conversion (82 grams → 0.082 kg)', 'speed_conversion (450 IPS → 11.43 m/s)', 'usage_speed_analysis (2000.75 m/150 min → average speed calculation)'], 'intent': 'calculate_change_in_momentum', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [82, 450, 2000.75, 150], 'units': {'mass': 'grams → kilograms (82g = 0.082kg)', 'velocity': 'inches per second → meters per second (1 IPS = 0.0254 m/s → 450 IPS = 11.43 m/s)', 'usage_speed': 'meters per minute to meters per second (2000.75 m/150 min = ~0.222 m/s)', 'momentum': 'kg·m/s (implied units for result)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'usage_records', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'usage_records', 'pk_column': 'Record_ID'}], 'tableinfo': {'mouse.mice': [{'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '鼠标型号', 'examples': ['G502 HERO', 'DeathAdder V2', 'Dark Core RGB Pro', 'Wireless Eco', 'Rival 800X']}, {'column': 'Weight_Grams', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '重量（克）', 'examples': ['121.0', '82.0', '133.0', '101.0', '105.0']}, {'column': 'Tracking_Speed_Ips', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '追踪速度（英寸/秒）', 'examples': ['400.0', '450.0', '200.0', '350.0', '420.0']}], 'mouse.usage_records': [{'column': 'Distance_Moved_Meters'}, {'column': 'Usage_Duration_Minutes'}]}}\nA physical knowledge question is as follows:\nCalculate the change in momentum (in kg·m/s) when the Razer DeathAdder V2 mouse decelerates from its maximum tracking speed of 450 IPS to a complete stop, given its weight of 82 grams and an actual average speed calculated from usage records as 2000.75 meters per 150 minutes.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ROUND((82/1000) * (450*0.0254), 4) AS Momentum_Change FROM manufacturers m JOIN mice mc ON m.Manufacturer_Id = mc.Manufacturer_Id JOIN usage_records ur ON mc.Mouse_Id = ur.Mouse_ID WHERE m.Manufacturer_Name = 'Razer' AND mc.Model = 'DeathAdder V2';",
        "db_id": "mouse"
    },
    {
        "id": 38,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n```json\n{\n  \"entities\": [\"manufacturers\", \"Profit_Usd\", \"Founded_year\", \"2023\"],\n  \"relations\": [\"manufacturer_to_profit (Manufacturer_Id → Profit_Usd)\", \"manufacturer_to_founded_year (Manufacturer_Id → Founded_year)\"],\n  \"intent\": \"calculate_cagr_of_profits\",\n  \"reasoning_type\": \"mathematical logic reasoning\",\n  \"numerical_values\": [2023],\n  \"units\": {\n    \"profit\": \"USD\",\n    \"year\": \"calendar year\",\n    \"cagr\": \"percentage (%) with two decimal places\"\n  },\n  \"required_tables\": [\"manufacturers\"],\n  \"required_fields\": [\n    \"manufacturers.Manufacturer_Name\",\n    \"manufacturers.Profit_Usd\",\n    \"manufacturers.Founded_year\"\n  ]\n}\n```\nA mathematical logic question is as follows:\nCalculate the compound annual growth rate (CAGR) of profits for each manufacturer since its founding, using the formula: ((Profit_Usd/1)^(1/(2023-Founded_year)) -1)*100. Retain two decimal places for the percentage result and sort in descending order by the growth rate.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Manufacturer_Name, ROUND((POWER(Profit_Usd, 1/(2023-Founded_year)) -1)*100, 2) AS CAGR FROM manufacturers ORDER BY CAGR DESC;",
        "db_id": "mouse"
    },
    {
        "id": 39,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['wireless mice', 'wired mice', 'battery data violations'], 'relations': ['wireless_mouse_with_missing_battery (Is_Wireless=TRUE ∧ Battery_Life_Hours IS NULL)', 'wired_mouse_with_battery_data (Is_Wireless=FALSE ∧ Battery_Life_Hours IS NOT NULL)'], 'intent': 'identify_battery_data_violations', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}], 'tableinfo': {'mouse.mice': [{'column': 'Mouse_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '鼠标唯一标识', 'examples': ['1', '2', '4', '6', '7']}, {'column': 'Is_Wireless', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否无线', 'examples': ['0', '1']}, {'column': 'Battery_Life_Hours', 'type': 'INTEGER', 'primary_key': False, 'comment': '电池续航时间（小时）', 'examples': ['50', '60', '80', '70']}]}}\nA common sense reasoning question is as follows:\nIdentify violation records where wireless mice lack battery data (Battery_Life_Hours is null) or wired mice have battery data (Battery_Life_Hours is not null)\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM mice WHERE (Is_Wireless=1 AND Battery_Life_Hours IS NULL) OR (Is_Wireless=0 AND Battery_Life_Hours IS NOT NULL);",
        "db_id": "mouse"
    },
    {
        "id": 40,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['quantum mouse', 'DPI 1e12', '32K resolution screen (30720×17280)', 'single pixel offset', '16 hours daily usage', '1000 movements per second'], 'relations': ['DPI_to_distance (1e12 DPI → meters per pixel)', 'usage_parameters_to_annual_data (16 hours/day + 1000 movements/sec → annual data volume)'], 'intent': 'calculate_minimum_movement_distance_and_annual_displacement_data_volume', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1000000000000.0, 16, 1000], 'units': {'dpi': 'dots per inch (DPI)', 'distance': 'meters per pixel (m)', 'movements_rate': 'movements per second', 'data_volume': 'exabytes (EB, 1 EB = 1e18 bytes)', 'time_conversion': 'hours/day, seconds/hour, days/year'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}], 'tableinfo': {'mouse.mice': [{'column': 'Dpi', 'type': 'INTEGER', 'primary_key': False, 'comment': 'DPI（每英寸点数）', 'examples': ['16000', '20000', '18000', '8000', '12000']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a quantum mouse has a DPI of 1e12, on a 32K resolution screen (30720×17280), to achieve precise control of a single pixel offset, calculate the minimum movement distance (in meters) and the annual displacement data volume (in EB) generated, given 16 hours of daily usage and 1000 movements per second.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (0.0254/1e6) AS Min_Movement_Distance, ROUND((30720*17280*10*6*3600*365*8 / 1e8), 2) AS Annual_Data_Volume_EB;",
        "db_id": "mouse"
    },
    {
        "id": 41,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Corsair Dark Core RGB Pro mouse', 'user ID=103', 'movement distance 1000.25 meters', 'usage duration 120 minutes', \"sensor's maximum tracking speed 400 IPS\"], 'relations': ['mouse_model_to_sensor (Corsair Dark Core RGB Pro → sensor_data)', 'usage_record_link (user ID=103 → usage_records)', 'speed_calculation (distance/time → actual IPS)', 'comparison (actual IPS vs 400 IPS)'], 'intent': 'determine_if_actual_movement_speed_exceeds_sensor_limit', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000.25, 120, 400], 'units': {'distance': 'meters', 'time': 'minutes', 'speed': 'IPS (inches per second)', 'conversion': 'meters_to_inches (1000.25m × 39.37) and minutes_to_seconds (120 × 60)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'sensor_data', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}, {'fk_table': 'usage_records', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'sensor_data', 'pk_column': 'Sensor_Id'}, {'pk_table': 'usage_records', 'pk_column': 'Record_ID'}], 'tableinfo': {'mouse.mice': [{'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '鼠标型号', 'examples': ['G502 HERO', 'DeathAdder V2', 'Dark Core RGB Pro', 'Wireless Eco', 'Rival 800X']}, {'column': 'Mouse_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '鼠标唯一标识', 'examples': ['1', '2', '4', '6', '7']}], 'mouse.sensor_data': [{'column': 'Sensor_Id'}, {'column': 'Tracking_Speed_Ips'}], 'mouse.usage_records': [{'column': 'Mouse_ID'}, {'column': 'User_ID'}, {'column': 'Distance_Moved_Meters'}, {'column': 'Usage_Duration_Minutes'}]}}\nA physical knowledge question is as follows:\nCalculate whether the actual movement speed of the Corsair Dark Core RGB Pro mouse for user ID=103 exceeds the sensor's maximum tracking speed (400 IPS), given a movement distance of 1000.25 meters and a usage duration of 120 minutes.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (1000.25 / (120 * 60)) / 0.0254 AS Actual_IPS, CASE WHEN (1000.25 / (120 * 60)) / 0.0254 > 400 THEN 'Exceeds Max Tracking Speed' ELSE 'Within Max Tracking Speed' END AS Speed_Status FROM usage_records ur JOIN mice mc ON ur.Mouse_ID = mc.Mouse_Id JOIN manufacturers mf ON mc.Manufacturer_Id = mf.Manufacturer_Id WHERE mf.Manufacturer_Name = 'Corsair' AND mc.Model = 'Dark Core RGB Pro' AND ur.User_ID = 103;",
        "db_id": "mouse"
    },
    {
        "id": 42,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturer', 'Market_Share_Percent', 'Profit_Usd', 'Employees'], 'relations': ['manufacturer_metric_calculation', 'formula_components (Market_Share_Percent → Profit_Usd → Employees)'], 'intent': 'calculate_market_performance_index_and_sort', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100], 'units': {'Market_Share_Percent': '% (percentage)', 'Profit_Usd': '$ (USD)', 'Employees': 'count', 'Market_Performance_Index': '$ per employee (USD/Employees)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_Id'}], 'tableinfo': {'mouse.manufacturers': [{'column': 'Manufacturer_Name'}, {'column': 'Market_Share_Percent'}, {'column': 'Profit_Usd'}, {'column': 'Employees'}]}}\nA mathematical logic question is as follows:\nCalculate the 'Market Performance Index' for each manufacturer, formula: (Market_Share_Percent/100)*Profit_Usd/Employees, sort the results in descending order by the index and retain four decimal places.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Manufacturer_Name, ROUND((Market_Share_Percent / 100) * (Profit_Usd / Employees), 4) AS efficiency_index FROM manufacturers ORDER BY efficiency_index DESC;",
        "db_id": "mouse"
    },
    {
        "id": 43,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mouse', 'DPI', 'Polling Rate'], 'relations': ['high_dpi_threshold (DPI > 15000)', 'low_polling_rate_threshold (Polling_Rate_Hz < 1000)'], 'intent': 'detect_products_with_design_flaw', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [15000, 1000], 'units': {'dpi': 'DPI (dots per inch)', 'polling_rate': 'Hz (Hertz)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}], 'tableinfo': {'mouse.mice': [{'column': 'Mouse_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '鼠标唯一标识', 'examples': ['1', '2', '4', '6', '7']}, {'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '鼠标型号', 'examples': ['G502 HERO', 'DeathAdder V2', 'Dark Core RGB Pro', 'Wireless Eco', 'Rival 800X']}, {'column': 'Dpi', 'type': 'INTEGER', 'primary_key': False, 'comment': 'DPI（每英寸点数）', 'examples': ['16000', '20000', '18000', '8000', '12000']}, {'column': 'Polling_Rate_Hz', 'type': 'INTEGER', 'primary_key': False, 'comment': '轮询率（Hz）', 'examples': ['1000', '2000', '500', '4000', '1001']}]}}\nA common sense reasoning question is as follows:\nDetect products with the design flaw of 'high DPI low polling rate' (DPI > 15000 and Polling_Rate_Hz < 1000).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM sensor_data WHERE Max_Dpi > 15000 AND Polling_Rate_Hz < 1000;",
        "db_id": "mouse"
    },
    {
        "id": 44,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['scientific research mouse', 'DPI 1e15', '8K screen 7680×4320', '1000 micro-movements per second', 'millennium duration', '16 bytes per record'], 'relations': ['mouse_to_dpi (mouse → DPI 1e15)', 'resolution_to_movement (8K screen → micro-movements)', 'movement_to_storage (micro-movements → data storage)'], 'intent': 'calculate_data_storage_capacity_over_timespan', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000000000000000.0, 1000, 7680, 4320, 16, 1000], 'units': {'dpi': 'DPI (dots per inch)', 'resolution': 'pixels (X=7680, Y=4320)', 'movement_rate': 'micro-movements/second', 'storage_per_record': 'bytes (16)', 'timespan': 'years (1000)', 'conversion': 'BB = 1e30 bytes, time conversion (1 millennium = 3.1536e10 seconds)'}, 'foreign_keys': [{'fk_table': 'mice', 'fk_column': 'Manufacturer_Id', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_Id'}, {'fk_table': 'usage_records', 'fk_column': 'Mouse_Id', 'ref_table': 'mice', 'ref_column': 'Mouse_Id'}], 'primary_keys': [{'pk_table': 'mice', 'pk_column': 'Mouse_Id'}, {'pk_table': 'usage_records', 'pk_column': 'Record_ID'}], 'tableinfo': {'mouse.mice': [{'column': 'Dpi', 'type': 'INTEGER', 'primary_key': False, 'comment': 'DPI（每英寸点数）', 'examples': ['16000', '20000', '18000', '8000', '12000']}], 'mouse.usage_records': [{'column': 'Record_ID'}, {'column': 'Mouse_ID'}, {'column': 'Usage_Duration_Minutes'}]}}\nA hypothetical reasoning question is as follows:\nAssuming a scientific research mouse has a DPI of 1e15, performs 1000 micro-movements per second on an 8K screen (7680×4320), calculate the data storage capacity over a millennium (unit: BB, 1BB=1e30 bytes), with each record occupying 16 bytes.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (7680 * 4320 * 10 * 6 * 31536000 * 10) / 1e30 AS Data_Volume_BB;",
        "db_id": "mouse"
    },
    {
        "id": 45,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"energy efficiency threshold 4 km/kWh\", \"average speed threshold 60 km/h\"],\n  \"relations\": [\n    \"efficiency_calculation (Distance_Km / Energy_Consumed_Kwh)\",\n    \"speed_filter_condition (Average_Speed_Kmh > 60 km/h)\",\n    \"efficiency_filter_condition (Energy_Efficiency < 4 km/kWh)\"\n  ],\n  \"intent\": \"calculate_vehicle_energy_efficiency_and_apply_filters\",\n  \"reasoning_type\": \"mathematical logic reasoning\",\n  \"numerical_values\": [4, 60],\n  \"units\": {\n    \"distance\": \"km\",\n    \"power_consumed\": \"kWh\",\n    \"energy_efficiency\": \"km/kWh (Distance_Km / Energy_Consumed_Kwh)\",\n    \"average_speed\": \"km/h\"\n  },\n  \"required_tables\": [\"driving_records\"],\n  \"required_fields\": [\n    \"driving_records.Vehicle_Id\",\n    \"driving_records.Distance_Km\",\n    \"driving_records.Energy_Consumed_Kwh\",\n    \"driving_records.A\nA physical knowledge question is as follows:\nCalculate the energy efficiency (distance driven/power consumed) of each vehicle in the driving records, and return vehicles with energy efficiency <4 km/kWh and average speed >60 km/h, sorted in ascending order of energy efficiency.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT v.Vehicle_Id, v.Model, ROUND(dr.Distance_Km / dr.Energy_Consumed_Kwh, 2) AS energy_efficiency, dr.Average_Speed_Kmh FROM driving_records dr JOIN vehicles v ON dr.Vehicle_Id = v.Vehicle_Id WHERE dr.Average_Speed_Kmh > 60 HAVING energy_efficiency < 4 ORDER BY energy_efficiency ASC;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 46,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging station', 'average daily revenue', 'number of charging piles', '$500 per day threshold', '5 charging piles threshold'], 'relations': ['station_to_records (charging_stations.Station_Id → charging_records.Station_Id)', 'revenue_calculation (SUM(charging_records.Cost_Usd) / COUNT(DISTINCT DATE(charging_records.Start_Time)))', 'charger_filter (charging_stations.Number_Of_Chargers > 5)'], 'intent': 'calculate_ranked_charging_station_revenue', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [500, 5], 'units': {'revenue': 'USD/day (calculated from Cost_Usd / operating days)', 'chargers': 'unitless count (Number_Of_Chargers)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电站ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Cost_Usd', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '充电费用（美元）', 'examples': ['15.0', '8.0', '8.4', '4.4', '500.0']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}], 'new_energy_vehicles.charging_stations': [{'column': 'Number_Of_Chargers', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电桩数量', 'examples': ['10', '8', '12', '6', '4']}]}}\nA mathematical logic question is as follows:\nCalculate the average daily revenue (total charging fees divided by operating days) for each charging station. Return the top 3 stations with revenue exceeding $500 per day and more than 5 charging piles, sorted in descending order by revenue.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT cs.Station_Name, ROUND(SUM(cr.Cost_Usd) / GREATEST(DATEDIFF(MAX(cr.End_Time), MIN(cr.Start_Time)), 1), 2) AS daily_revenue, cs.Number_Of_Chargers FROM charging_stations cs JOIN charging_records cr ON cs.Station_Id = cr.Station_Id GROUP BY cs.Station_Id HAVING daily_revenue > 500 AND cs.Number_Of_Chargers > 5 ORDER BY daily_revenue DESC LIMIT 3;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 47,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicles', 'battery_capacity > 100kWh', 'single_charging_session < 20kWh'], 'relations': ['vehicles_to_battery_capacity (Vehicles → Battery_Capacity_Kwh)', 'charging_records_to_energy_consumed (Charging_Records → Energy_Consumed_Kwh)', 'vehicle_to_charging_records (Vehicles.Vehicle_Id → Charging_Records.Vehicle_Id)'], 'intent': 'filter_vehicles_with_battery_threshold_and_low_charging_session_and_get_last_record', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100, 20], 'units': {'battery_capacity': 'kWh', 'charging_session_energy': 'kWh', 'time': 'datetime (Start_Time/End_Time)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}], 'new_energy_vehicles.charging_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}, {'column': 'Charging_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电类型（如：快充、慢充）', 'examples': ['Fast', 'Ultra-Fast', 'Standard']}]}}\nA common sense reasoning question is as follows:\nIdentify vehicles with a battery capacity >100kWh but a single charging session <20kWh, and return the last charging record date and charging type for these vehicles.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT v.Vehicle_Id, v.Model, (SELECT MAX(cr.End_Time) FROM charging_records cr WHERE cr.Vehicle_Id = v.Vehicle_Id) AS last_charge_date, (SELECT cr.Charging_Type FROM charging_records cr WHERE cr.Vehicle_Id = v.Vehicle_Id ORDER BY cr.End_Time DESC LIMIT 1) AS last_charge_type FROM vehicles v WHERE v.Battery_Capacity_Kwh > 100 AND EXISTS (SELECT 1 FROM charging_records cr WHERE cr.Vehicle_Id = v.Vehicle_Id AND cr.Energy_Consumed_Kwh < 20);",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 48,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Model S (100kWh battery)', '10% to 80% charge', '500% charging power increase', 'Q_loss=0.1×A×(T+273)^3', 'A=2m²'], 'relations': ['model_to_battery_capacity (Model S → 100kWh)', 'charge_range (80% - 10% = 70% → 70kWh energy required)', 'power_increase (500% → 5× original charging power)', 'heat_loss_dependency (Q_loss depends on temperature T and area A)'], 'intent': 'calculate_charging_time_with_adjusted_power_and_heat_loss', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [100, 10, 80, 500, 0.1, 2], 'units': {'battery_capacity': 'kWh', 'charging_power': 'kW (implied by Charging_Speed_Kw field)', 'time': 'hours', 'heat_loss_coefficient': 'unitless (0.1)', 'area': 'm² (square meters)', 'temperature': \"°C (Celsius, though Mars' T is unspecified)\"}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}, {'column': 'Charging_Time_Hours', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时间（小时）', 'examples': ['8.5', '10.0', '9.0', '8.0', '6.0']}], 'new_energy_vehicles.charging_records': [{'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}, {'column': 'Initial_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电开始时的电池百分比', 'examples': ['20.0', '15.0', '10.0', '25.0', '30.0']}, {'column': 'Final_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电结束时的电池百分比', 'examples': ['80.0', '85.0', '70.0', '75.0', '30.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the Model S (100kWh battery) is used on the surface of Mars, calculate the time required to charge from 10% to 80% (assuming the charging power is increased to 500%, with the heat loss formula: Q_loss=0.1×A×(T+273)^3, where A=2m²).\nyour response just have a SQL without anything.\n",
        "solution": "WITH RECURSIVE charging_sim AS (SELECT 10.0 AS soc, CAST(0.0 AS DECIMAL(30,6)) AS elapsed_time, 1 AS phase UNION ALL SELECT CASE phase WHEN 1 THEN LEAST(soc + 5.0, 50.0) ELSE LEAST(soc + 0.5, 80.0) END, elapsed_time + (100 * CASE phase WHEN 1 THEN 5.0 ELSE 0.5 END) / GREATEST(600 - 0.2 * POW((-60 + 273), 3), 1), CASE WHEN soc >= 50.0 THEN 2 ELSE phase END FROM charging_sim WHERE soc < 80.0 ) SELECT MAX(elapsed_time) AS total_hours, CONCAT(FLOOR(MAX(elapsed_time)), '小时', ROUND((MAX(elapsed_time)%1)*60) , '分钟') AS formatted_time FROM charging_sim;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 49,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging station', 'charging type', 'average efficiency', 'charging count'], 'relations': ['charging_records_to_vehicles (Vehicle_Id → Battery_Capacity_Kwh)', 'charging_station_to_records (Station_Id → Charging_Type → Efficiency)'], 'intent': 'calculate_average_charging_efficiency_and_filter', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [85, 10], 'units': {'efficiency': '% (percentage)', 'charging_count': 'count (unitless)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电站ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Charging_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电类型（如：快充、慢充）', 'examples': ['Fast', 'Ultra-Fast', 'Standard']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}, {'column': 'Initial_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电开始时的电池百分比', 'examples': ['20.0', '15.0', '10.0', '25.0', '30.0']}, {'column': 'Final_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电结束时的电池百分比', 'examples': ['80.0', '85.0', '70.0', '75.0', '30.0']}], 'new_energy_vehicles.vehicles': [{'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}]}}\nA physical knowledge question is as follows:\nCalculate the average charging efficiency for each charging station under different charging types, and return charging stations with efficiency <85% and charging count >10.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT cs.Station_Name, cr.Charging_Type, ROUND(AVG(cr.Energy_Consumed_Kwh / (cs.Charging_Speed_Kw * TIME_TO_SEC(TIMEDIFF(cr.End_Time, cr.Start_Time))/3600)) * 100, 2) AS efficiency_rate, COUNT(*) AS charge_count FROM charging_records cr JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id GROUP BY cs.Station_Id, cr.Charging_Type HAVING efficiency_rate < 85 AND charge_count > 10 ORDER BY efficiency_rate ASC;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 50,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturer', 'average_daily_mileage', 'vehicle_count'], 'relations': ['manufacturer_to_vehicles (1:N)', 'vehicle_to_driving_records (1:N)'], 'intent': 'calculate_average_daily_mileage_with_filters', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [150, 3], 'units': {'distance': 'km (kilometers)', 'count': 'unitless (vehicle count)'}, 'foreign_keys': [{'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Manufacturer', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '制造商', 'examples': ['Tesla', 'NIO', 'BYD', 'Xpeng', 'Li Auto']}, {'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}], 'new_energy_vehicles.driving_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Distance_Km', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '行驶距离（公里）', 'examples': ['150.0', '120.0', '100.0', '80.0', '60.0']}]}}\nA mathematical logic question is as follows:\nCalculate the average daily mileage of vehicles for each manufacturer, and filter for manufacturers with average daily mileage >150km and vehicle count ≥3.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT v.Manufacturer, ROUND(SUM(dr.Distance_Km) / COUNT(DISTINCT DATE(dr.Start_Time)), 2) AS daily_avg_km, COUNT(DISTINCT v.Vehicle_Id) AS vehicle_count FROM vehicles v JOIN driving_records dr ON v.Vehicle_Id = dr.Vehicle_Id GROUP BY v.Manufacturer HAVING daily_avg_km > 150 AND vehicle_count >= 3 ORDER BY daily_avg_km DESC;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 51,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicles', 'ultrafast charging', 'high-temperature environments', 'maintenance records', 'abnormal battery health'], 'relations': ['vehicle_to_charging_records (vehicles.Vehicle_Id → charging_records.Vehicle_Id)', 'charging_to_temperature (charging_records.Temperature_Celsius → environmental condition)', 'vehicle_to_battery_health (vehicles.Battery_Health → diagnostic metric)'], 'intent': 'identify_vehicles_with_ultrafast_charging_and_abnormal_battery_health', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [35, 80], 'units': {'temperature': '°C (Celsius, high temperature inferred as >35°C)', 'battery_health': '% (percentage, abnormal health inferred as <80%)', 'charging_speed': 'kW (for ultrafast charging, typically >150 kW)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Battery_Health', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['100.0', '88.0', '85.0', '90.0', '95.0']}, {'column': 'Manufacturer', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '制造商', 'examples': ['Tesla', 'NIO', 'BYD', 'Xpeng', 'Li Auto']}, {'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '车型', 'examples': ['Model S', 'ET7', 'Han EV', 'P7', 'Li ONE']}], 'new_energy_vehicles.charging_records': [{'column': 'Charging_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电类型（如：快充、慢充）', 'examples': ['Fast', 'Ultra-Fast', 'Standard']}, {'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}], 'new_energy_vehicles.charging_stations': [{'column': 'Charging_Speed_Kw', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '充电速度（千瓦）', 'examples': ['120.0', '150.0', '100.0', '90.0', '80.0']}]}}\nA common sense reasoning question is as follows:\nIdentify vehicles that perform ultrafast charging in high-temperature environments and return recent maintenance records with abnormal battery health.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT v.Vehicle_Id, v.Model, MAX(cr.End_Time) AS last_charge_date, v.Battery_Health FROM vehicles v JOIN charging_records cr ON v.Vehicle_Id = cr.Vehicle_Id WHERE cr.Temperature_Celsius > 30 AND cr.Charging_Type = 'Ultra-Fast' AND v.Battery_Health < 90 GROUP BY v.Vehicle_Id;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 52,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Model S', '100kWh battery', 'Arctic conditions'], 'relations': ['model_to_battery_capacity (Model S → Battery_Capacity_Kwh)', 'temperature_impact_on_charging (Arctic conditions → Charging_Speed_Kw adjustment)'], 'intent': 'calculate_charging_time', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [100], 'units': {'battery_capacity': 'kWh', 'charging_speed': 'kW', 'time': 'Hours (calculated as kWh / kW)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}, {'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '车型', 'examples': ['Model S', 'ET7', 'Han EV', 'P7', 'Li ONE']}], 'new_energy_vehicles.charging_stations': [{'column': 'Charging_Speed_Kw', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '充电速度（千瓦）', 'examples': ['120.0', '150.0', '100.0', '90.0', '80.0']}], 'new_energy_vehicles.charging_records': [{'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}, {'column': 'Weather_Conditions', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '天气情况', 'examples': ['Sunny', 'Cloudy', 'Rainy', 'Clear', 'Foggy']}]}}\nA hypothetical reasoning question is as follows:\nCalculate the time required to fully charge a 100kWh battery for Model S in Arctic conditions.\nyour response just have a SQL without anything.\n",
        "solution": "WITH RECURSIVE polar_charging AS (SELECT 0 AS soc, CAST(0.0 AS DECIMAL(30,6)) AS elapsed_time, 120 * 0.2 * 0.6 AS actual_power, 0.2 * 5 * POW(-50 + 50, 2) AS heat_loss UNION ALL SELECT soc + 5, elapsed_time + (100 * 5) / GREATEST(actual_power - (heat_loss / 1000), 1), actual_power, 0.2 * 5 * POW((-50 + (soc/100)*130) + 50, 2) FROM polar_charging WHERE soc < 100 ) SELECT MAX(elapsed_time) AS total_hours, CONCAT(FLOOR(MAX(elapsed_time)), '小时', ROUND((MAX(elapsed_time) - FLOOR(MAX(elapsed_time))) * 60), '分钟') AS formatted_time FROM polar_charging;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 53,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicle model', 'extreme temperature driving records', 'normal temperature driving records', 'energy efficiency degradation rate'], 'relations': ['vehicle_to_driving_records (Vehicle_Id → driving_records)', 'temperature_classification (normal 20-30°C vs extreme <-10°C or >40°C)', 'efficiency_comparison (normal_efficiency vs extreme_efficiency)', 'degradation_rate_threshold (15% filter)'], 'intent': 'calculate_energy_efficiency_degradation_and_filter_models', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [-10, 40, 20, 30, 15], 'units': {'temperature': '°C (Celsius)', 'efficiency': 'kWh/km (energy consumed per kilometer)', 'degradation_rate': '% (percentage calculated from efficiency difference)'}, 'foreign_keys': [{'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '车型', 'examples': ['Model S', 'ET7', 'Han EV', 'P7', 'Li ONE']}], 'new_energy_vehicles.driving_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Temperature_Celsius'}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['30.0', '25.0', '20.0', '15.0', '10.0']}, {'column': 'Distance_Km', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '行驶距离（公里）', 'examples': ['150.0', '120.0', '100.0', '80.0', '60.0']}]}}\nA physical knowledge question is as follows:\nCalculate the energy efficiency degradation rate for each vehicle when driving under extreme temperatures (<-10℃ or >40℃), using the formula: (normal temperature efficiency - extreme temperature efficiency) / normal temperature efficiency × 100%. Return the vehicle models with a degradation rate >15%. Note: Normal temperature efficiency is the average of driving records between 20-30℃.\nyour response just have a SQL without anything.\n",
        "solution": "WITH normal_efficiency AS (SELECT dr.Vehicle_Id, AVG(dr.Distance_Km / dr.Energy_Consumed_Kwh) AS normal_eff FROM driving_records dr WHERE dr.Weather_Conditions IN ('Sunny', 'Cloudy') GROUP BY dr.Vehicle_Id), extreme_efficiency AS (SELECT dr.Vehicle_Id, AVG(dr.Distance_Km / dr.Energy_Consumed_Kwh) AS extreme_eff FROM driving_records dr WHERE dr.Weather_Conditions IN ('Snow', 'Heatwave') GROUP BY dr.Vehicle_Id) SELECT v.Model, ROUND((ne.normal_eff - ee.extreme_eff) / ne.normal_eff * 100, 2) AS efficiency_decay_rate FROM vehicles v JOIN normal_efficiency ne ON v.Vehicle_Id = ne.Vehicle_Id JOIN extreme_efficiency ee ON v.Vehicle_Id = ee.Vehicle_Id WHERE (ne.normal_eff - ee.extreme_eff) / ne.normal_eff * 100 > 15 ORDER BY efficiency_decay_rate DESC;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 54,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging station', 'actual charging duration', 'maximum possible charging duration', 'week', 'utilization rate'], 'relations': ['station_to_actual_duration (charging station → actual charging duration)', 'station_to_max_duration (charging station → maximum possible duration)', 'week_to_utilization (week → utilization rate)'], 'intent': 'calculate_charging_station_utilization_rates_with_consecutive_week_filter', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [80], 'units': {'duration': 'hours (calculated from timestamp differences)', 'utilization_rate': '% (threshold >80%)', 'opening_hours': 'hours per day (charging_stations.Opening_Hours)', 'max_duration': 'hours (calculated as opening_hours × 7 × charging_piles)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电站ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'End_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电结束时间', 'examples': ['2023-10-01 12:30:00']}], 'new_energy_vehicles.charging_stations': [{'column': 'Number_Of_Chargers', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电桩数量', 'examples': ['10', '8', '12', '6', '4']}, {'column': 'Opening_Hours', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '开放时间', 'examples': ['24/7', '06:00-22:00', '07:00-23:00', '08:00-20:00', '09:00-21:00']}]}}\nA mathematical logic question is as follows:\nCalculate the time slot utilization rate for each charging station (total actual charging duration/maximum possible charging duration). Group by week using window functions (WEEK(Start_Time)) and return charging stations with utilization rates >80% for two consecutive weeks. Maximum possible duration = operating hours × number of charging piles.\nyour response just have a SQL without anything.\n",
        "solution": "WITH weekly_utilization AS (SELECT cs.Station_Id, WEEK(cr.Start_Time) AS week_num, SUM(TIME_TO_SEC(TIMEDIFF(cr.End_Time, cr.Start_Time))) / (cs.Number_Of_Chargers * CASE WHEN cs.Is_24_Hours = 1 THEN 604800 ELSE TIME_TO_SEC(TIMEDIFF(cs.Opening_Hours, '00:00:00')) * 7 END) AS utilization_rate FROM charging_stations cs JOIN charging_records cr ON cs.Station_Id = cr.Station_Id GROUP BY cs.Station_Id, week_num), consecutive_weeks AS (SELECT Station_Id, week_num, utilization_rate, LAG(utilization_rate) OVER (PARTITION BY Station_Id ORDER BY week_num) AS prev_week_rate FROM weekly_utilization) SELECT DISTINCT cs.Station_Name FROM consecutive_weeks cw JOIN charging_stations cs ON cw.Station_Id = cs.Station_Id WHERE cw.utilization_rate > 0.8 AND cw.prev_week_rate > 0.8;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 55,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['driving routes with elevation gain/loss >500m', 'theoretical energy consumption (Battery_Capacity × (End_Battery - Start_Battery) / 100)', '20% excess actual energy consumption', 'geographic locations', 'weather conditions'], 'relations': ['route_to_vehicle (driving_record → vehicles)', 'elevation_variation (Elevation_Gain_M + Elevation_Loss_M > 500m)', 'actual_vs_theoretical_energy (Energy_Consumed_Kwh > 1.2 × theoretical_value)'], 'intent': 'identify_energy_inefficient_routes_by_altitude_and_weather', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [500, 20, 100, 0.5], 'units': {'altitude': 'meters (Elevation_Gain_M/Elevation_Loss_M)', 'energy': 'kWh (Energy_Consumed_Kwh, Battery_Capacity_Kwh)', 'battery': 'percentage (Start/End_Battery_Percentage)', 'conversion': 'Battery_Capacity_Kwh × (ΔBattery%/100) = theoretical consumption'}, 'foreign_keys': [{'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.driving_records': [{'column': 'Record_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '驾驶记录唯一标识', 'examples': ['1', '2', '55', '3', '4']}, {'column': 'Elevation_Gain_M', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '海拔上升高度（米）', 'examples': ['200.0', '150.0', '100.0', '50.0', '20.0']}, {'column': 'Elevation_Loss_M', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '海拔下降高度（米）', 'examples': ['100.0', '80.0', '50.0', '30.0', '10.0']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['30.0', '25.0', '20.0', '15.0', '10.0']}, {'column': 'Weather_Conditions', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '天气情况', 'examples': ['Sunny', 'Cloudy', 'Rainy', 'Clear', 'Foggy']}, {'column': 'Road_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '道路类型（如：高速、城市道路）', 'examples': ['Highway', 'City', 'Rural', 'Mountain']}, {'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '驾驶开始时的电池百分比', 'examples': ['90.0', '85.0', '70.0', '75.0', '80.0']}, {'column': 'End_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '驾驶结束时的电池百分比', 'examples': ['60.0', '65.0', '50.0', '70.0', '20.0']}], 'new_energy_vehicles.vehicles': [{'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}]}}\nA common sense reasoning question is as follows:\nIdentify driving routes with altitude variations exceeding 500 meters where the actual energy consumption surpasses the theoretical value (Battery_Capacity × (End_Battery - Start_Battery) / 100) by more than 20%, and return the geographic locations and weather conditions associated with these records. Common knowledge basis: every 100 meters of altitude change affects energy consumption by 0.5 kWh.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT dr.Record_Id, CONCAT('起点海拔变化:', dr.Elevation_Gain_M, '米; 终点海拔变化:', dr.Elevation_Loss_M, '米') AS elevation_change, dr.Weather_Conditions, v.Battery_Capacity_Kwh * (dr.End_Battery_Percentage - dr.Start_Battery_Percentage) / 100 AS theoretical_energy, dr.Energy_Consumed_Kwh AS actual_energy FROM driving_records dr JOIN vehicles v ON dr.Vehicle_Id = v.Vehicle_Id WHERE (dr.Elevation_Gain_M + dr.Elevation_Loss_M) > 500 AND dr.Energy_Consumed_Kwh > 1.2 * (v.Battery_Capacity_Kwh * (dr.End_Battery_Percentage - dr.Start_Battery_Percentage) / 100);",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 56,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['autonomous vehicles (Is_Autonomous=1)', 'camera failure rate 50% per hour', '10-hour trip', 'at least 8 hours camera availability', 'λ=5 (Poisson parameter)'], 'relations': ['vehicle_to_autonomy (Is_Autonomous=1)', 'failure_rate_and_trip_duration_to_lambda (λ=5 = 0.5 failures/hour × 10 hours)', 'lambda_to_probability_calculation (Poisson cumulative distribution)'], 'intent': 'calculate_probability_of_camera_availability', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50, 10, 8, 5], 'units': {'failure_rate': 'failures per hour', 'trip_duration': 'hours', 'availability_requirement': 'hours', 'lambda': 'expected failures (unitless)', 'probability': 'unitless'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Is_Autonomous', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否支持自动驾驶', 'examples': ['1', '0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming that during a coronal mass ejection event (with cosmic radiation intensity 100 times the normal level), the failure rate of cameras in autonomous vehicles (Is_Autonomous=1) increases to 50% per hour, calculate the probability of having at least 8 hours of camera availability during a 10-hour trip (using the Poisson distribution for simulation). Formula: P(X≥8)=1-Σ(e^(-λ)*(λ^k)/k!), k=0 to 7, where λ=5.\nyour response just have a SQL without anything.\n",
        "solution": "WITH RECURSIVE poisson_cdf AS (SELECT 0 AS k, EXP(-5) * POWER(5, 0) / 1 AS prob, EXP(-5) * POWER(5, 0) / 1 AS cdf UNION ALL SELECT k + 1, EXP(-5) * POWER(5, k + 1) / (k + 1), cdf + EXP(-5) * POWER(5, k + 1) / (k + 1) FROM poisson_cdf WHERE k < 7 ) SELECT ROUND(1 - MAX(cdf), 3) AS probability_at_least_8_hours FROM poisson_cdf;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 57,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicle', 'driving_record', 'energy_recovery_efficiency', 'elevation_loss', 'theoretical_potential_energy', 'recovered_energy', 'battery_efficiency', 'gravity_constant'], 'relations': ['vehicle_to_driving_records (Vehicle_Id)', 'mass_to_weight (Weight_Kg)', 'energy_calculation (theoretical_potential_energy = mgh)', 'recovered_energy (Energy_Consumed_Kwh × 0.9)', 'efficiency_definition (recovered_energy / theoretical_potential_energy)', 'filter_condition (efficiency < 0.5)', 'filter_condition (elevation_loss > 200m)'], 'intent': 'calculate_energy_recovery_efficiency_and_filter_records', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [9.8, 0.9, 0.5, 200], 'units': {'mass': 'kg', 'elevation': 'meters', 'energy': 'kWh (recovered_energy) and theoretical potential energy in joules (conversion needed)', 'gravity': 'm/s²', 'efficiency': 'dimensionless ratio', 'conversion': '1 kWh = 3.6×10^6 J (for potential energy calculation)'}, 'foreign_keys': [{'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.driving_records': [{'column': 'Record_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '驾驶记录唯一标识', 'examples': ['1', '2', '55', '3', '4']}, {'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['30.0', '25.0', '20.0', '15.0', '10.0']}, {'column': 'Elevation_Loss_M', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '海拔下降高度（米）', 'examples': ['100.0', '80.0', '50.0', '30.0', '10.0']}], 'new_energy_vehicles.vehicles': [{'column': 'Weight_Kg', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '车辆重量（千克）', 'examples': ['2100.0', '2200.0', '2000.0', '1900.0', '2300.0']}]}}\nA physical knowledge question is as follows:\nCalculate the potential energy recovery efficiency (recovered energy/theoretical potential energy) for each vehicle during braking, and return driving records where the efficiency is <50% and the altitude drop is >200m. Formula: Theoretical potential energy = mgh = Weight_Kg × 9.8 × Elevation_Loss_M, Recovered energy = Energy_Consumed_Kwh × battery efficiency coefficient (assumed to be 0.9).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT dr.Record_Id, v.Model, ROUND(v.Weight_Kg * 9.8 * dr.Elevation_Loss_M, 2) AS theoretical_energy, ROUND(dr.Energy_Consumed_Kwh * 0.9 * 3.6e6, 2) AS recovered_energy, ROUND((dr.Energy_Consumed_Kwh * 0.9 * 3.6e6) / (v.Weight_Kg * 9.8 * dr.Elevation_Loss_M) * 100, 2) AS efficiency_rate FROM driving_records dr JOIN vehicles v ON dr.Vehicle_Id = v.Vehicle_Id WHERE dr.Elevation_Loss_M > 200 AND (dr.Energy_Consumed_Kwh * 0.9 * 3.6e6) / (v.Weight_Kg * 9.8 * dr.Elevation_Loss_M) * 100 < 50 ORDER BY efficiency_rate ASC;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 58,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging_stations', 'charging_records', 'peak_stacking_intervals'], 'relations': ['station_usage (charging_stations ← charging_records via Station_Id)', 'interval_analysis (recursive_CTE_on_time_gaps)'], 'intent': 'detect_peak_stacking_utilization_in_charging_stations', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [90, 3, 2], 'units': {'utilization': '% (percentage)', 'time_interval': 'hours', 'thresholds': '3-hour_consecutive, 2-hour_gap'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电站ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'End_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电结束时间', 'examples': ['2023-10-01 12:30:00']}], 'new_energy_vehicles.charging_stations': [{'column': 'Station_Name', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电站名称', 'examples': ['SuperCharge Station 1', 'NIO Power Station 1', 'BYD Charging Hub', 'Xpeng Charging Point', 'Li Auto Charging Station']}]}}\nA mathematical logic question is as follows:\nIdentify charging stations where the utilization rate exhibits a 'peak stacking' phenomenon (with consecutive 3-hour utilization >90% and intervals <2 hours), and return the names of such charging stations along with the dates of occurrence. Use recursive CTE to analyze the time intervals.\nyour response just have a SQL without anything.\n",
        "solution": "WITH hourly_usage AS (SELECT cs.Station_Id, HOUR(cr.Start_Time) AS hour_slot, COUNT(*) / cs.Number_Of_Chargers AS utilization_rate, DATE(cr.Start_Time) AS date FROM charging_records cr JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id GROUP BY cs.Station_Id, date, hour_slot HAVING utilization_rate > 0.9), peak_groups AS (SELECT *, hour_slot - ROW_NUMBER() OVER (PARTITION BY Station_Id, date ORDER BY hour_slot) AS grp FROM hourly_usage) SELECT cs.Station_Name, MIN(date) AS start_date, MAX(date) AS end_date FROM peak_groups pg JOIN charging_stations cs ON pg.Station_Id = cs.Station_Id GROUP BY pg.Station_Id, pg.grp HAVING COUNT(*) >= 3 AND MAX(hour_slot) - MIN(hour_slot) < 5;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 59,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['low-temperature environment (<5°C)', 'Ultra-Fast charging', 'Battery health decline >2%', 'Vehicle model', 'Charging station operator'], 'relations': ['record_to_vehicle (charging_records.Vehicle_Id → vehicles.Vehicle_Id)', 'record_to_station (charging_records.Station_Id → charging_stations.Station_Id)', 'battery_health_decline (Battery_Health field in vehicles)'], 'intent': 'retrieve_records_with_conditions', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [5, 2], 'units': {'temperature': '°C (Celsius)', 'battery_health': '% (percentage)', 'threshold_conversion': 'Battery_Health decline >2% implies Battery_Health < 98%'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}, {'column': 'Charging_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电类型（如：快充、慢充）', 'examples': ['Fast', 'Ultra-Fast', 'Standard']}], 'new_energy_vehicles.vehicles': [{'column': 'Battery_Health', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['100.0', '88.0', '85.0', '90.0', '95.0']}, {'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '车型', 'examples': ['Model S', 'ET7', 'Han EV', 'P7', 'Li ONE']}], 'new_energy_vehicles.charging_stations': [{'column': 'Operator', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '运营商', 'examples': ['Tesla', 'NIO', 'BYD', 'Xpeng', 'Li Auto']}]}}\nA common sense reasoning question is as follows:\nIdentify records where vehicles are used in low-temperature environments (Temperature_Celsius < 5°C) with ultra-fast charging (Charging_Type='Ultra-Fast') and exhibit a battery health decline (assuming Battery_Health field) of more than 2%. Return the vehicle model and charging station operator.\nyour response just have a SQL without anything.\n",
        "solution": "WITH health_change AS (SELECT cr.Vehicle_Id, cr.End_Time, v.Battery_Health - LAG(v.Battery_Health) OVER (PARTITION BY cr.Vehicle_Id ORDER BY cr.End_Time) AS health_drop FROM charging_records cr JOIN vehicles v ON cr.Vehicle_Id = v.Vehicle_Id WHERE cr.Temperature_Celsius < 5 AND cr.Charging_Type = 'Ultra-Fast') SELECT v.Model, cs.Operator, hc.health_drop, cr.End_Time AS charge_time FROM health_change hc JOIN charging_records cr ON hc.Vehicle_Id = cr.Vehicle_Id AND hc.End_Time = cr.End_Time JOIN vehicles v ON hc.Vehicle_Id = v.Vehicle_Id JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id WHERE hc.health_drop > 2;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 60,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Model S (100kWh)', 'external temperature -270℃', 'heat loss Q=εσA(T^4-T_env^4)', 'T_limit=60℃', 'ε=0.95', 'σ=5.67e-8', 'A=3m²'], 'relations': ['model_to_battery_capacity (Model S → 100kWh)', 'thermal_balance (Q = εσA(T^4-T_env^4) → charging_power_max)'], 'intent': 'calculate_maximum_safe_charging_power_with_thermal_limits', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [-270, 60, 0.95, 5.67e-08, 3], 'units': {'temperature': '℃ (converted to Kelvin for calculation)', 'power': 'Watts (W)', 'heat_loss': 'Watts (Q = εσAΔT⁴)', 'emissivity': 'unitless (ε=0.95)', 'stefan_boltzmann_constant': 'W/(m²·K⁴)', 'surface_area': 'm² (A=3m²)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '车型', 'examples': ['Model S', 'ET7', 'Han EV', 'P7', 'Li ONE']}, {'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a zero-gravity environment in a space station (cooling only by radiation), design a charging solution for the Model S (100kWh): calculate the maximum safe charging power when the external temperature is -270℃ (heat loss Q=εσA(T^4-T_env^4), ε=0.95, σ=5.67e-8, A=3m², T_limit=60℃).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 0.95 * 5.67e-8 * 3 * (POW(60+273, 4) - POW(3, 4)) / 0.9 AS max_power_kw;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 61,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicle', 'charging process', 'energy storage efficiency', 'Fast charging', 'Ultra-Fast charging', 'Battery_Capacity_Kwh'], 'relations': ['vehicle_to_charging_records (Vehicle_Id → charging_records)', 'vehicle_to_battery_capacity (Vehicle_Id → Battery_Capacity_Kwh)', \"charging_type_filter (Charging_Type ∈ ['Fast', 'Ultra-Fast'])\", 'efficiency_formula (Theoretical stored energy = Battery_Capacity_Kwh × (Final_Battery_Percentage - Initial_Battery_Percentage)/100)'], 'intent': 'calculate_energy_storage_efficiency_and_filter_records', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [90], 'units': {'energy': 'kWh (Kilowatt-hour)', 'battery_percentage': '% (Percentage)', 'efficiency': '% (Percentage) calculated as (theoretical_stored_energy / actual_consumed_electricity) × 100'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Initial_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电开始时的电池百分比', 'examples': ['20.0', '15.0', '10.0', '25.0', '30.0']}, {'column': 'Final_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电结束时的电池百分比', 'examples': ['80.0', '85.0', '70.0', '75.0', '30.0']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}, {'column': 'Charging_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电类型（如：快充、慢充）', 'examples': ['Fast', 'Ultra-Fast', 'Standard']}], 'new_energy_vehicles.vehicles': [{'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}]}}\nA physical knowledge question is as follows:\nCalculate the actual energy storage efficiency during the charging process for each vehicle (theoretical stored energy / actual consumed electricity), and return records with efficiency <90% and charging type as fast charging ('Fast' or 'Ultra-Fast'). Formula: Theoretical stored energy = Battery_Capacity_Kwh × (Final_Battery_Percentage - Initial_Battery_Percentage) / 100.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT cr.Record_Id, v.Model, ROUND((v.Battery_Capacity_Kwh * (cr.Final_Battery_Percentage - cr.Initial_Battery_Percentage) / 100) / cr.Energy_Consumed_Kwh * 100, 2) AS efficiency_rate FROM charging_records cr JOIN vehicles v ON cr.Vehicle_Id = v.Vehicle_Id WHERE cr.Charging_Type IN ('Fast', 'Ultra-Fast') AND (v.Battery_Capacity_Kwh * (cr.Final_Battery_Percentage - cr.Initial_Battery_Percentage) / 100) / cr.Energy_Consumed_Kwh * 100 < 90 ORDER BY efficiency_rate ASC;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 62,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging peak overlap', 'charging stations', 'utilization rate >95%', 'date'], 'relations': ['station_to_usage (station → utilization_time)', 'date_to_stations (date → high_utilization_stations)', 'threshold_condition (95% utilization)'], 'intent': 'identify_dates_with_charging_peak_overlap', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [95, 3], 'units': {'utilization_rate': '% (percentage)', 'count': 'unitless (number of stations)', 'time': 'hourly intervals'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电站ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'End_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电结束时间', 'examples': ['2023-10-01 12:30:00']}], 'new_energy_vehicles.charging_stations': [{'column': 'Number_Of_Chargers', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电桩数量', 'examples': ['10', '8', '12', '6', '4']}]}}\nA mathematical logic question is as follows:\nIdentify the dates with the phenomenon of 'charging peak overlap' (where at least 3 charging stations within the same day experience a utilization rate > 95% within one hour), and return these dates along with the number of involved charging stations.\nyour response just have a SQL without anything.\n",
        "solution": "WITH hourly_peak AS (SELECT cs.Station_Id, DATE(cr.Start_Time) AS date, HOUR(cr.Start_Time) AS hour_slot, COUNT(*) / cs.Number_Of_Chargers AS utilization_rate FROM charging_records cr JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id GROUP BY cs.Station_Id, date, hour_slot HAVING utilization_rate > 0.95), peak_dates AS (SELECT date, COUNT(DISTINCT Station_Id) AS peak_station_count FROM hourly_peak GROUP BY date HAVING COUNT(DISTINCT Station_Id) >= 3) SELECT date, peak_station_count FROM peak_dates ORDER BY date DESC;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 63,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': [\"Fast charging (Charging_Type='Fast')\", 'charging efficiency less than 85%', \"rainy weather (Weather_Conditions='Rainy')\"], 'relations': ['record_to_station (charging_records.Station_Id → charging_stations.Station_Id)', 'efficiency_derivation (Final_Battery_Percentage - Initial_Battery_Percentage → derived energy efficiency)'], 'intent': 'retrieve_charging_records_with_conditions', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [85], 'units': {'efficiency': '% (percentage)', 'calculation': 'efficiency = [(Final_Battery_Percentage - Initial_Battery_Percentage) * Battery_Capacity_Kwh / 100] / Energy_Consumed_Kwh * 100'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Charging_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电类型（如：快充、慢充）', 'examples': ['Fast', 'Ultra-Fast', 'Standard']}, {'column': 'Weather_Conditions', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '天气情况', 'examples': ['Sunny', 'Cloudy', 'Rainy', 'Clear', 'Foggy']}, {'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电站ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Initial_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电开始时的电池百分比', 'examples': ['20.0', '15.0', '10.0', '25.0', '30.0']}, {'column': 'Final_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电结束时的电池百分比', 'examples': ['80.0', '85.0', '70.0', '75.0', '30.0']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}], 'new_energy_vehicles.charging_stations': [{'column': 'Operator', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '运营商', 'examples': ['Tesla', 'NIO', 'BYD', 'Xpeng', 'Li Auto']}, {'column': 'Location', 'type': 'NULL', 'primary_key': False, 'comment': '充电站地理位置（经纬度）', 'examples': [\"b'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00\\\\xf4lV}\\\\xae\\\\x06A@A\\\\x82\\\\xe2\\\\xc7\\\\x98\\\\x8f]\\\\xc0'\", \"b'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00\\\\x97\\\\xff\\\\x90~\\\\xfb:?@_\\\\x07\\\\xce\\\\x19Q^^@'\", 'b\\'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00h\"lxze6@^\\\\xbaI\\\\x0c\\\\x02\\\\x87\\\\\\\\@\\'', \"b'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00\\\\xe2\\\\xe9\\\\x95\\\\xb2\\\\x0c!7@\\\\xfeC\\\\xfa\\\\xed\\\\xebP\\\\\\\\@'\", \"b'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00\\\\x88\\\\x85Z\\\\xd3\\\\xbc\\\\xf3C@\\\\xfc\\\\x18s\\\\xd7\\\\x12\\\\x1a]@'\"]}], 'new_energy_vehicles.vehicles': [{'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}]}}\nA common sense reasoning question is as follows:\nFind records of fast charging (Charging_Type='Fast') with charging efficiency less than 85% during rainy weather (Weather_Conditions='Rainy'), and return the operators and geographical locations of these charging stations.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT cs.Operator, cs.Location, ROUND((v.Battery_Capacity_Kwh * (cr.Final_Battery_Percentage - cr.Initial_Battery_Percentage) / 100) / cr.Energy_Consumed_Kwh * 100, 2) AS efficiency_rate FROM charging_records cr JOIN vehicles v ON cr.Vehicle_Id = v.Vehicle_Id JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id WHERE cr.Weather_Conditions = 'Rainy' AND cr.Charging_Type = 'Fast' AND (v.Battery_Capacity_Kwh * (cr.Final_Battery_Percentage - cr.Initial_Battery_Percentage) / 100) / cr.Energy_Consumed_Kwh * 100 < 85;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 64,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Model S', '100kWh battery', 'solar flare eruption', 'charging power fluctuation ±50%', '10% to 80% charge'], 'relations': ['vehicle_model_to_battery_capacity (Model S → 100kWh)', 'power_fluctuation_to_charging_speed (±50% → adjusted charging speed)', 'battery_percentage_range_to_energy_required (Δ70% → 70kWh needed)'], 'intent': 'calculate_probability_distribution_of_charging_time_under_power_fluctuation', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100, 10, 80, 50], 'units': {'battery_capacity': 'kWh', 'charging_power': 'kW (adjusted by ±50%)', 'time': 'hours (derived from energy/power)', 'fluctuation': '±50% (multiplicative factor)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '车型', 'examples': ['Model S', 'ET7', 'Han EV', 'P7', 'Li ONE']}, {'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}], 'new_energy_vehicles.charging_stations': [{'column': 'Charging_Speed_Kw', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '充电速度（千瓦）', 'examples': ['120.0', '150.0', '100.0', '90.0', '80.0']}], 'new_energy_vehicles.charging_records': [{'column': 'Initial_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电开始时的电池百分比', 'examples': ['20.0', '15.0', '10.0', '25.0', '30.0']}, {'column': 'Final_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电结束时的电池百分比', 'examples': ['80.0', '85.0', '70.0', '75.0', '30.0']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'End_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电结束时间', 'examples': ['2023-10-01 12:30:00']}]}}\nA hypothetical reasoning question is as follows:\nAssuming during a solar flare eruption (when the electromagnetic shielding of the charging station fails), the charging power fluctuation rate is ±50%, calculate the probability distribution of the time required for a Model S (100kWh) to charge from 10% to 80%.\nyour response just have a SQL without anything.\n",
        "solution": "WITH RECURSIVE monte_carlo AS (SELECT 1 AS iter, ROUND(70 / ((SELECT AVG(Charging_Speed_Kw) FROM charging_stations) * (1 + (RAND() - 0.5) * 1)), 2) AS charge_time UNION ALL SELECT iter + 1, ROUND(70 / ((SELECT AVG(Charging_Speed_Kw) FROM charging_stations) * (1 + (RAND() - 0.5) * 1)), 2) FROM monte_carlo WHERE iter < 1000) SELECT COUNT(*) * 100.0 / 1000 AS probability_over_1_5t FROM monte_carlo WHERE charge_time > 1.5 * (70 / (SELECT AVG(Charging_Speed_Kw) FROM charging_stations));",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 65,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicle', 'Weight_Kg', 'Elevation_Loss_M', 'Energy_Consumed_Kwh', 'recovery_rate_threshold 45%', 'elevation_threshold 300m'], 'relations': ['vehicle_to_weight (Vehicle_Id → Weight_Kg)', 'record_to_elevation_loss (Record_Id → Elevation_Loss_M)', 'record_to_energy_consumed (Record_Id → Energy_Consumed_Kwh)', 'recovery_rate_formula (Recovered electricity / Theoretical potential energy)', 'threshold_comparison (recovery_rate < 0.45 ∧ Elevation_Loss_M > 300)'], 'intent': 'calculate_energy_recovery_efficiency_with_filters', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [45, 300, 9.8, 0.93, 3600000.0], 'units': {'weight': 'Kg (from vehicles.Weight_Kg)', 'elevation': 'Meters (from driving_records.Elevation_Loss_M)', 'energy': 'Kilowatt-hours (from driving_records.Energy_Consumed_Kwh)', 'conversion': '9.8 m/s² (gravity) + 3.6e6 J/kWh + 93% efficiency (0.93)'}, 'foreign_keys': [{'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Weight_Kg', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '车辆重量（千克）', 'examples': ['2100.0', '2200.0', '2000.0', '1900.0', '2300.0']}], 'new_energy_vehicles.driving_records': [{'column': 'Record_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '驾驶记录唯一标识', 'examples': ['1', '2', '55', '3', '4']}, {'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Elevation_Loss_M', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '海拔下降高度（米）', 'examples': ['100.0', '80.0', '50.0', '30.0', '10.0']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['30.0', '25.0', '20.0', '15.0', '10.0']}]}}\nA physical knowledge question is as follows:\nCalculate the potential energy recovery rate (recovered electricity / theoretical potential energy) during downhill driving for each vehicle, and return records with a recovery rate < 45% and an elevation drop > 300m. Formula: Theoretical potential energy = Weight_Kg × 9.8 × Elevation_Loss_M, Recovered electricity = Energy_Consumed_Kwh × 0.93 × 3.6e6 (assuming 93% conversion efficiency).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT dr.Record_Id, v.Model, ROUND((dr.Energy_Consumed_Kwh * 0.93 * 3.6e6) / (v.Weight_Kg * 9.8 * dr.Elevation_Loss_M) * 100, 2) AS recovery_rate FROM driving_records dr JOIN vehicles v ON dr.Vehicle_Id = v.Vehicle_Id WHERE dr.Elevation_Loss_M > 300 AND (dr.Energy_Consumed_Kwh * 0.93 * 3.6e6) / (v.Weight_Kg * 9.8 * dr.Elevation_Loss_M) * 100 < 45 ORDER BY recovery_rate ASC;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 66,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicle', 'charging_records', 'continuous_3_day_growth', 'last_charging_location', 'growth_slope'], 'relations': ['vehicle_to_charging_records (Vehicle_Id)', 'chronological_records (Start_Time)', 'energy_growth_sequence (Energy_Consumed_Kwh)', 'location_lookup (Station_Id → Location)'], 'intent': 'identify_vehicles_with_continuous_3_day_charging_growth_and_return_last_location_and_slope', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['Energy_Consumed_Kwh (Day N)', 'Energy_Consumed_Kwh (Day N+1)', 'Energy_Consumed_Kwh (Day N+2)'], 'units': {'energy': 'Kwh', 'slope': 'Kwh/day (calculated as (Energy_N+2 - Energy_N)/2)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}, {'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电站ID（外键）', 'examples': ['1', '2', '3', '4', '5']}], 'new_energy_vehicles.charging_stations': [{'column': 'Location', 'type': 'NULL', 'primary_key': False, 'comment': '充电站地理位置（经纬度）', 'examples': [\"b'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00\\\\xf4lV}\\\\xae\\\\x06A@A\\\\x82\\\\xe2\\\\xc7\\\\x98\\\\x8f]\\\\xc0'\", \"b'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00\\\\x97\\\\xff\\\\x90~\\\\xfb:?@_\\\\x07\\\\xce\\\\x19Q^^@'\", 'b\\'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00h\"lxze6@^\\\\xbaI\\\\x0c\\\\x02\\\\x87\\\\\\\\@\\'', \"b'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00\\\\xe2\\\\xe9\\\\x95\\\\xb2\\\\x0c!7@\\\\xfeC\\\\xfa\\\\xed\\\\xebP\\\\\\\\@'\", \"b'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00\\\\x88\\\\x85Z\\\\xd3\\\\xbc\\\\xf3C@\\\\xfc\\\\x18s\\\\xd7\\\\x12\\\\x1a]@'\"]}]}}\nA mathematical logic question is as follows:\nIdentify vehicles with continuous 3-day growth in charging volume (Energy_Consumed_Kwh Day N < Day N+1 < Day N+2), and return their last charging location and the growth slope.\nyour response just have a SQL without anything.\n",
        "solution": "WITH daily_charge AS (SELECT cr.Vehicle_Id, DATE(cr.Start_Time) AS charge_date, SUM(cr.Energy_Consumed_Kwh) AS daily_energy, MAX(cs.Station_Id) AS last_station_id FROM charging_records cr JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id GROUP BY cr.Vehicle_Id, charge_date), growth_trend AS (SELECT Vehicle_Id, charge_date, daily_energy, last_station_id, LAG(daily_energy, 2) OVER (PARTITION BY Vehicle_Id ORDER BY charge_date) AS day_n, LAG(daily_energy, 1) OVER (PARTITION BY Vehicle_Id ORDER BY charge_date) AS day_n_plus_1, daily_energy AS day_n_plus_2 FROM daily_charge), valid_growth AS (SELECT Vehicle_Id, MAX(last_station_id) AS last_station_id, (MAX(day_n_plus_2) - MIN(day_n)) / 2 AS slope FROM growth_trend WHERE day_n < day_n_plus_1 AND day_n_plus_1 < day_n_plus_2 GROUP BY Vehicle_Id) SELECT v.Model, cs.Location AS last_location, vg.slope FROM valid_growth vg JOIN vehicles v ON vg.Vehicle_Id = v.Vehicle_Id JOIN charging_stations cs ON vg.last_station_id = cs.Station_Id;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 67,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging_records', 'charging_stations', 'vehicles', 'ultra-fast charging', 'high-temperature environments', 'charging efficiency'], 'relations': ['charging_records_to_stations (foreign key: Station_Id)', 'charging_records_to_vehicles (foreign key: Vehicle_Id)', 'temperature_filter (Temperature_Celsius > 35°C)', 'efficiency_filter (calculated as (Energy_Consumed_Kwh / ((Final_Battery_Percentage - Initial_Battery_Percentage) / 100 * Battery_Capacity_Kwh)) * 100 < 80%)'], 'intent': 'filter_charging_records_and_retrieve_station_operating_hours', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [35, 80], 'units': {'temperature': '°C (Celsius)', 'efficiency': '% (percentage)', 'battery_capacity': 'Kwh (kilowatt-hours)', 'energy_consumed': 'Kwh (kilowatt-hours)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电站ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Charging_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电类型（如：快充、慢充）', 'examples': ['Fast', 'Ultra-Fast', 'Standard']}, {'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}, {'column': 'Initial_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电开始时的电池百分比', 'examples': ['20.0', '15.0', '10.0', '25.0', '30.0']}, {'column': 'Final_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电结束时的电池百分比', 'examples': ['80.0', '85.0', '70.0', '75.0', '30.0']}], 'new_energy_vehicles.vehicles': [{'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}], 'new_energy_vehicles.charging_stations': [{'column': 'Opening_Hours', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '开放时间', 'examples': ['24/7', '06:00-22:00', '07:00-23:00', '08:00-20:00', '09:00-21:00']}, {'column': 'Is_Covered', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否有顶棚', 'examples': ['1', '0']}]}}\nA common sense reasoning question is as follows:\nFind records of ultra-fast charging (Ultra-Fast) conducted in high-temperature environments (Temperature_Celsius > 35°C) with charging efficiency < 80%, and return the operating hours of these charging stations and whether they have a canopy.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT cs.Station_Name, cs.Opening_Hours, cs.Is_Covered, ROUND((v.Battery_Capacity_Kwh * (cr.Final_Battery_Percentage - cr.Initial_Battery_Percentage) / 100) / cr.Energy_Consumed_Kwh * 100, 2) AS efficiency_rate FROM charging_records cr JOIN vehicles v ON cr.Vehicle_Id = v.Vehicle_Id JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id WHERE cr.Temperature_Celsius > 35 AND cr.Charging_Type = 'Ultra-Fast' AND (v.Battery_Capacity_Kwh * (cr.Final_Battery_Percentage - cr.Initial_Battery_Percentage) / 100) / cr.Energy_Consumed_Kwh * 100 < 80;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 68,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Tesla Model S', '100kWh battery', '10% to 50% charging', '-238°C lunar temperature', 'Moon-based charging station'], 'relations': ['model_to_battery_capacity (Model S → 100kWh)', 'charging_range (ΔSOC=40%)', 'thermal_constraint (temperature → charging power)', 'charging_station_to_location (Moon → extreme temperature)'], 'intent': 'calculate_max_safe_charging_power_under_extreme_temperature', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [100, 10, 50, -238], 'units': {'battery_capacity': 'kWh', 'charging_power': 'kW (target output)', 'temperature': '°C', 'soc_change': '40% (absolute ΔSOC)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}, {'column': 'Charging_Time_Hours', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时间（小时）', 'examples': ['8.5', '10.0', '9.0', '8.0', '6.0']}], 'new_energy_vehicles.charging_stations': [{'column': 'Charging_Speed_Kw', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '充电速度（千瓦）', 'examples': ['120.0', '150.0', '100.0', '90.0', '80.0']}, {'column': 'Temperature_Celsius'}]}}\nA hypothetical reasoning question is as follows:\nAssuming the construction of a charging station in the permanently shadowed regions of the Moon (temperature -238°C), calculate the maximum safe charging power for a Model S (100kWh) to charge from 10% to 50%.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ROUND((0.85 * 5.67e-8 * 2.5 * (POW(283, 4) - POW(35, 4))) / 0.9, 2) AS max_power_kw;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 69,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging station', 'charging session', 'high-temperature environment (Temperature_Celsius > 35°C)', 'charging efficiency loss rate (theoretical charging capacity / actual power consumption)', '20% loss rate threshold', 'charging sessions count >5'], 'relations': ['charging_station_to_records (Station_Id → charging_records)', 'charging_record_to_vehicle (Vehicle_Id → vehicles)', 'theoretical_energy_calculation (Initial/Final_Battery_Percentage × Battery_Capacity_Kwh)', 'loss_rate_computation (theoretical_energy_sum / actual_energy_sum)', 'filter_by_temperature (Temperature_Celsius > 35°C)', 'filter_by_loss_rate (loss_rate > 20%)', 'filter_by_session_count (session_count > 5)'], 'intent': 'compute_charging_efficiency_loss_rate_and_filter_stations', 'reasoning_type': 'physical knowledge reasoning AND mathematical logic reasoning', 'numerical_values': [35, 20, 5], 'units': {'temperature': '°C (Celsius)', 'energy': 'kWh (kilowatt-hours)', 'loss_rate': 'percentage (%)', 'charging_speed': 'kW (kilowatts)', 'conversion': 'theoretical_energy = (Final_Battery_% - Initial_Battery_%) / 100 × Battery_Capacity_Kwh'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电站ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}, {'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}, {'column': 'Initial_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电开始时的电池百分比', 'examples': ['20.0', '15.0', '10.0', '25.0', '30.0']}, {'column': 'Final_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电结束时的电池百分比', 'examples': ['80.0', '85.0', '70.0', '75.0', '30.0']}, {'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}], 'new_energy_vehicles.vehicles': [{'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}], 'new_energy_vehicles.charging_stations': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '充电站唯一标识', 'examples': ['1', '2', '3', '4', '5']}]}}\nA physical knowledge question is as follows:\nCompute the charging efficiency loss rate (theoretical charging capacity / actual power consumption) for each charging station in a high-temperature environment (Temperature_Celsius > 35°C), and return stations with a loss rate exceeding 20% and charging sessions count greater than 5.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT cs.Station_Name, ROUND((1 - AVG(cr.Energy_Consumed_Kwh / (cs.Charging_Speed_Kw * TIME_TO_SEC(TIMEDIFF(cr.End_Time, cr.Start_Time)) / 3600))) * 100, 2) AS loss_rate, COUNT(*) AS charge_count FROM charging_records cr JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id WHERE cr.Temperature_Celsius > 35 GROUP BY cs.Station_Id HAVING loss_rate > 20 AND charge_count > 5 ORDER BY loss_rate DESC;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 70,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicle', 'weekend charging volume', 'weekday charging volume', '30% increase threshold'], 'relations': ['vehicle_to_charging_records (Vehicle_Id → charging_records)', 'date_classification (Start_Time → weekend/weekday)', 'charging_volume_comparison (weekend_avg / weekday_avg > 1.3)'], 'intent': 'identify_vehicles_with_weekend_charging_increase', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [30], 'units': {'charging_volume': 'kWh (Energy_Consumed_Kwh)', 'ratio': 'unitless (weekend_avg / weekday_avg)', 'threshold': '30% (1.3 ratio)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}], 'new_energy_vehicles.vehicles': [{'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '车型', 'examples': ['Model S', 'ET7', 'Han EV', 'P7', 'Li ONE']}]}}\nA mathematical logic question is as follows:\nIdentify vehicles exhibiting a 'weekend effect' in charging volume (where the average daily charging volume on weekends increases by more than 30% compared to weekdays), and return the vehicle model along with the ratio of weekend to weekday charging volume.\nyour response just have a SQL without anything.\n",
        "solution": "WITH low_efficiency_records AS (SELECT cr.Station_Id, ROUND((v.Battery_Capacity_Kwh * (cr.Final_Battery_Percentage - cr.Initial_Battery_Percentage) / 100) / cr.Energy_Consumed_Kwh * 100, 2) AS efficiency_rate FROM charging_records cr JOIN vehicles v ON cr.Vehicle_Id = v.Vehicle_Id WHERE (v.Battery_Capacity_Kwh * (cr.Final_Battery_Percentage - cr.Initial_Battery_Percentage) / 100) / cr.Energy_Consumed_Kwh * 100 < 75) SELECT cs.Operator, cs.Is_Covered, COUNT(*) AS record_count FROM charging_stations cs JOIN low_efficiency_records ler ON cs.Station_Id = ler.Station_Id WHERE cs.Location IN (SELECT Location FROM charging_stations WHERE ST_Y(Location) > 2000) GROUP BY cs.Operator, cs.Is_Covered;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 71,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\nthere is nothing I can give you about this question.\nA common sense reasoning question is as follows:\nFind records of charging at altitudes above 2000 meters with efficiency below 75%, and return the operators of these charging stations and whether they have a roof.\nyour response just have a SQL without anything.\n",
        "solution": "WITH high_altitude_stations AS (SELECT cs.Station_Id, cs.Operator, cs.Is_Covered FROM charging_stations cs WHERE EXISTS (SELECT 1 FROM (SELECT ST_GeomFromText('POINT(0 0)') AS Location, 2500 AS Altitude UNION ALL SELECT ST_GeomFromText('POINT(1 1)') AS Location, 1500 AS Altitude) AS ad WHERE ST_Distance_Sphere(cs.Location, ad.Location) < 1000 AND ad.Altitude > 2000 AND ST_Y(cs.Location) BETWEEN -90 AND 90 AND ST_X(cs.Location) BETWEEN -180 AND 180)), low_efficiency_records AS (SELECT cr.Station_Id, ROUND((v.Battery_Capacity_Kwh * (cr.Final_Battery_Percentage - cr.Initial_Battery_Percentage) / 100 / cr.Energy_Consumed_Kwh * 100), 2) AS efficiency_rate FROM charging_records cr JOIN vehicles v ON cr.Vehicle_Id = v.Vehicle_Id WHERE (v.Battery_Capacity_Kwh * (cr.Final_Battery_Percentage - cr.Initial_Battery_Percentage) / 100) / cr.Energy_Consumed_Kwh * 100 < 75) SELECT has.Operator, has.Is_Covered, COUNT(*) AS record_count FROM high_altitude_stations has JOIN low_efficiency_records ler ON has.Station_Id = ler.Station_Id GROUP BY has.Operator, has.Is_Covered",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 72,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['ET7', '150kWh battery', 'undersea laboratory', 'pressure 100atm', 'temperature 4℃', '20% charge', '90% charge'], 'relations': ['vehicle_to_battery_capacity (ET7 → 150kWh)', 'charging_range (20% to 90%)', 'environmental_conditions (pressure 100atm, temperature 4℃)'], 'intent': 'calculate_max_safe_charging_power', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [150, 20, 90, 100, 4], 'units': {'battery_capacity': 'kWh', 'pressure': 'atm (atmospheric pressure)', 'temperature': '℃ (Celsius)', 'power': 'kW (implied by charging speed)', 'conversion': 'charge_energy = 150kWh × (0.9 - 0.2) = 105kWh'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}, {'column': 'Charging_Time_Hours', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时间（小时）', 'examples': ['8.5', '10.0', '9.0', '8.0', '6.0']}, {'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '车型', 'examples': ['Model S', 'ET7', 'Han EV', 'P7', 'Li ONE']}], 'new_energy_vehicles.charging_stations': [{'column': 'Charging_Speed_Kw', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '充电速度（千瓦）', 'examples': ['120.0', '150.0', '100.0', '90.0', '80.0']}, {'column': 'Location', 'type': 'NULL', 'primary_key': False, 'comment': '充电站地理位置（经纬度）', 'examples': [\"b'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00\\\\xf4lV}\\\\xae\\\\x06A@A\\\\x82\\\\xe2\\\\xc7\\\\x98\\\\x8f]\\\\xc0'\", \"b'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00\\\\x97\\\\xff\\\\x90~\\\\xfb:?@_\\\\x07\\\\xce\\\\x19Q^^@'\", 'b\\'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00h\"lxze6@^\\\\xbaI\\\\x0c\\\\x02\\\\x87\\\\\\\\@\\'', \"b'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00\\\\xe2\\\\xe9\\\\x95\\\\xb2\\\\x0c!7@\\\\xfeC\\\\xfa\\\\xed\\\\xebP\\\\\\\\@'\", \"b'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00\\\\x88\\\\x85Z\\\\xd3\\\\xbc\\\\xf3C@\\\\xfc\\\\x18s\\\\xd7\\\\x12\\\\x1a]@'\"]}]}}\nA hypothetical reasoning question is as follows:\nAssuming charging the ET7 (150kWh) in an undersea laboratory (pressure 100atm, temperature 4℃), calculate the maximum safe power from 20% to 90% charge.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ROUND(0.2 * 3 * POW(50 - 4, 1.5), 2) AS max_power_kw;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 73,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicle', 'energy density', 'acceleration time', 'battery health decline'], 'relations': ['vehicle_to_driving_records (Vehicle_Id → driving_records)', 'acceleration_time_filter (vehicles.Acceleration_0_To_100_Sec < 2s)', 'energy_density_calculation (Energy_Consumed_Kwh / Acceleration_0_To_100_Sec)', 'battery_health_decline_filter (Battery_Health_degradation > 5%)'], 'intent': 'calculate_and_filter_energy_density_with_battery_health', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2, 500, 5], 'units': {'acceleration_time': 'seconds (s)', 'energy_density': 'kWh/s (kilowatt-hours per second)', 'battery_health_decline': 'percentage (%)'}, 'foreign_keys': [{'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Acceleration_0_To_100_Sec', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '0-100公里/小时加速时间（秒）', 'examples': ['2.3', '3.8', '3.9', '4.3', '6.5']}, {'column': 'Battery_Health', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['100.0', '88.0', '85.0', '90.0', '95.0']}], 'new_energy_vehicles.driving_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['30.0', '25.0', '20.0', '15.0', '10.0']}, {'column': 'Start_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '驾驶开始时的电池百分比', 'examples': ['90.0', '85.0', '70.0', '75.0', '80.0']}, {'column': 'End_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '驾驶结束时的电池百分比', 'examples': ['60.0', '65.0', '50.0', '70.0', '20.0']}]}}\nA physical knowledge question is as follows:\nCalculate the energy density (consumed electricity/acceleration time) of each vehicle during extreme acceleration (0-100 km/h in less than 2 seconds), and return records where the density is greater than 500 kWh/s and the battery health (assumed field) has declined by more than 5%.\nyour response just have a SQL without anything.\n",
        "solution": "WITH health_change AS (SELECT dr.Vehicle_Id, dr.End_Time, v.Battery_Health - LAG(v.Battery_Health) OVER (PARTITION BY dr.Vehicle_Id ORDER BY dr.End_Time) AS health_drop FROM driving_records dr JOIN vehicles v ON dr.Vehicle_Id = v.Vehicle_Id) SELECT dr.Record_Id, v.Model, ROUND(dr.Energy_Consumed_Kwh / (v.Acceleration_0_To_100_Sec / 3600), 2) AS energy_density, hc.health_drop FROM driving_records dr JOIN vehicles v ON dr.Vehicle_Id = v.Vehicle_Id JOIN health_change hc ON dr.Vehicle_Id = hc.Vehicle_Id AND dr.End_Time = hc.End_Time WHERE v.Acceleration_0_To_100_Sec < 2 AND dr.Energy_Consumed_Kwh / (v.Acceleration_0_To_100_Sec / 3600) > 500 AND hc.health_drop > 5;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 74,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phantom charging', 'charging volume', 'battery capacity', 'driving record', 'vehicle', 'date'], 'relations': ['charging_to_vehicle (charging_records.Vehicle_Id → vehicles.Vehicle_Id)', 'charging_to_battery_capacity (vehicles.Battery_Capacity_Kwh × 300% < charging_records.Energy_Consumed_Kwh)', 'no_driving_record (NOT EXISTS driving_records.Vehicle_Id on same date)'], 'intent': 'identify_phantom_charging_dates_and_vehicles', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [300], 'units': {'energy': 'kWh (kilowatt-hour)', 'percentage': '300% (3x multiplier)', 'date_format': 'YYYY-MM-DD extracted from Start_Time'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}, {'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}], 'new_energy_vehicles.vehicles': [{'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}], 'new_energy_vehicles.driving_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '驾驶开始时间', 'examples': ['2023-10-01 08:00:00']}]}}\nA mathematical logic question is as follows:\nIdentify dates with the phenomenon of 'phantom charging' (charging volume > battery capacity × 300% and no corresponding driving record), and return these dates along with vehicle IDs.\nyour response just have a SQL without anything.\n",
        "solution": "WITH abnormal_charge AS (SELECT cr.Vehicle_Id, DATE(cr.Start_Time) AS charge_date, cr.Energy_Consumed_Kwh FROM charging_records cr JOIN vehicles v ON cr.Vehicle_Id = v.Vehicle_Id WHERE cr.Energy_Consumed_Kwh > 3 * v.Battery_Capacity_Kwh), no_driving_records AS (SELECT ac.Vehicle_Id, ac.charge_date FROM abnormal_charge ac LEFT JOIN driving_records dr ON ac.Vehicle_Id = dr.Vehicle_Id AND DATE(dr.Start_Time) = ac.charge_date WHERE dr.Record_Id IS NULL) SELECT Vehicle_Id, charge_date FROM no_driving_records;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 75,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['autonomous vehicles', 'blizzard weather', 'average speed >100 km/h', 'charging stations with roof'], 'relations': ['vehicle_to_driving_record (Vehicle_Id)', 'vehicle_to_manufacturer (Manufacturer)', 'vehicle_to_charging_record (Vehicle_Id)', 'charging_record_to_charging_station (Station_Id)'], 'intent': 'retrieve_vehicle_manufacturer_and_charging_station_coverage', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [100], 'units': {'speed': 'km/h'}, 'foreign_keys': [{'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}, {'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.driving_records': [{'column': 'Weather_Conditions', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '天气情况', 'examples': ['Sunny', 'Cloudy', 'Rainy', 'Clear', 'Foggy']}, {'column': 'Average_Speed_Kmh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '平均速度（公里/小时）', 'examples': ['75.0', '60.0', '50.0', '40.0', '30.0']}], 'new_energy_vehicles.vehicles': [{'column': 'Is_Autonomous', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否支持自动驾驶', 'examples': ['1', '0']}, {'column': 'Manufacturer', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '制造商', 'examples': ['Tesla', 'NIO', 'BYD', 'Xpeng', 'Li Auto']}], 'new_energy_vehicles.charging_stations': [{'column': 'Is_Covered', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否有顶棚', 'examples': ['1', '0']}]}}\nA common sense reasoning question is as follows:\nFind records where the vehicles used autonomous driving (Is_Autonomous=1) during blizzard weather (Weather_Conditions='Blizzard') with an average speed >100 km/h, and return the manufacturers of these vehicles and whether the charging stations have a roof.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT v.Manufacturer, cs.Is_Covered, COUNT(*) AS record_count FROM driving_records dr JOIN vehicles v ON dr.Vehicle_Id = v.Vehicle_Id JOIN charging_records cr ON dr.Vehicle_Id = cr.Vehicle_Id JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id WHERE dr.Weather_Conditions = 'Blizzard' AND v.Is_Autonomous = 1 AND dr.Average_Speed_Kmh > 100 GROUP BY v.Manufacturer, cs.Is_Covered;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 76,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"Model S\", \"event horizon of Milky Way black hole\", \"Earth reference frame\"],\n  \"relations\": [\"vehicle_to_charging_time (Model S → Charging_Time_Hours)\", \"relativistic_time_dilation (black hole → Earth)\"],\n  \"intent\": \"calculate_relative_charging_time_ratio_under_gravitational_time_dilation\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [10],  // Assumed Model S charging time (~10 hours based on typical 75kWh battery at 7kW)\n  \"units\": {\n    \"time\": \"hours\",\n    \"relativity\": \"Lorentz factor (γ) calculation using Schwarzschild metric\",\n    \"distance\": \"Schwarzschild radius (r = 2GM/c²)\"\n  },\n  \"required_tables\": [\"vehicles\", \"charging_stations\"],\n  \"required_fields\": [\n    \"vehicles.Model\", \n    \"vehicles.Charging_Time_Hours\",\n    \"charging_stations.Location\",  // Would need hypothetical relativistic coordinates\n    \"charging_stations.Charging_Speed_Kw\"  // Would require relativistic frame adjustment\n  ]\n}\nA hypothetical reasoning question is as follows:\nAssuming a charging station is built at the edge of the event horizon of the central black hole in the Milky Way, calculate the subjective time ratio for a Model S to fully charge compared to the Earth's reference frame time.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT v.Model, v.Charging_Time_Hours / 707 AS subjective_time_hours, v.Charging_Time_Hours AS earth_time_hours FROM vehicles v WHERE v.Model = 'Model S';",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 77,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Tesla Model S', 'charging record 1', '5% battery charging loss rate'], 'relations': ['vehicle_to_charging (Tesla Model S → charging_records.Record_Id=1)', 'efficiency_calculation (Energy_Consumed_Kwh → Battery_Capacity_Kwh)'], 'intent': 'calculate_charging_efficiency', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [5, 1], 'units': {'energy': 'kWh (from both tables)', 'efficiency': '% (calculated with loss adjustment)', 'loss_rate': '% (5% charging loss)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Record_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '充电记录唯一标识', 'examples': ['1', '134', '135', '2', '3']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}], 'new_energy_vehicles.vehicles': [{'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}, {'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '车型', 'examples': ['Model S', 'ET7', 'Han EV', 'P7', 'Li ONE']}]}}\nA physical knowledge question is as follows:\nBased on the Energy_Consumed_Kwh from the charging_records table and the Battery_Capacity_Kwh from the vehicles table, calculate the charging efficiency of Tesla Model S in charging record 1 (assuming a battery charging loss rate of 5%).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ROUND((v.Battery_Capacity_Kwh * (c.Final_Battery_Percentage - c.Initial_Battery_Percentage) * (1 - 0.05)) / NULLIF(c.Energy_Consumed_Kwh, 0) * 100, 2) AS Charging_Efficiency FROM charging_records c JOIN vehicles v ON c.Vehicle_Id = v.Vehicle_Id WHERE c.Record_Id = 1 AND v.Model = 'Model S' AND c.Final_Battery_Percentage IS NOT NULL AND c.Initial_Battery_Percentage IS NOT NULL AND c.Energy_Consumed_Kwh IS NOT NULL;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 78,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Pearson correlation coefficient', 'revenue per kilowatt-hour (Cost_Per_Kwh)', 'charging speed (Charging_Speed_Kw)'], 'relations': ['statistical_relationship (Cost_Per_Kwh ↔ Charging_Speed_Kw)'], 'intent': 'calculate_pearson_correlation_and_sort', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'revenue': 'USD/kWh (Cost_Per_Kwh)', 'speed': 'kW (Charging_Speed_Kw)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}], 'tableinfo': {'new_energy_vehicles.charging_stations': [{'column': 'Cost_Per_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '每千瓦时费用', 'examples': ['0.3', '0.25', '0.2', '0.28', '0.22']}, {'column': 'Charging_Speed_Kw', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '充电速度（千瓦）', 'examples': ['120.0', '150.0', '100.0', '90.0', '80.0']}]}}\nA mathematical logic question is as follows:\nCalculate the Pearson correlation coefficient between the revenue per kilowatt-hour (Cost_Per_Kwh) and charging speed (Charging_Speed_Kw) for each charging station, then sort in descending order by the absolute value of the correlation coefficient.\nyour response just have a SQL without anything.\n",
        "solution": "WITH StationStats AS ( SELECT Cost_Per_Kwh, Charging_Speed_Kw, (Cost_Per_Kwh - AVG(Cost_Per_Kwh) OVER ()) * (Charging_Speed_Kw - AVG(Charging_Speed_Kw) OVER ()) AS Covariance, POWER(Cost_Per_Kwh - AVG(Cost_Per_Kwh) OVER (), 2) AS VarX, POWER(Charging_Speed_Kw - AVG(Charging_Speed_Kw) OVER (), 2) AS VarY FROM charging_stations ) SELECT ROUND(SUM(Covariance) / (SQRT(SUM(VarX)) * SQRT(SUM(VarY))), 4) AS Pearson_Correlation FROM StationStats ORDER BY ABS(Pearson_Correlation) DESC",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 79,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging stations with cost > $0.25/kWh', 'charging speed < 100kW'], 'relations': ['cost_threshold ($0.25/kWh)', 'speed_threshold (100kW)', 'revenue_formula (Charging_Speed × Number_Of_Chargers × 8h)'], 'intent': 'identify_stations_and_calculate_daily_revenue', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.25, 100, 8], 'units': {'cost': '$/kWh', 'power': 'kW', 'time': 'hours', 'revenue': '$ (calculated as kW × chargers × 8h × $/kWh)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}], 'tableinfo': {'new_energy_vehicles.charging_stations': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '充电站唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Charging_Speed_Kw', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '充电速度（千瓦）', 'examples': ['120.0', '150.0', '100.0', '90.0', '80.0']}, {'column': 'Number_Of_Chargers', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电桩数量', 'examples': ['10', '8', '12', '6', '4']}, {'column': 'Cost_Per_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '每千瓦时费用', 'examples': ['0.3', '0.25', '0.2', '0.28', '0.22']}]}}\nA common sense reasoning question is as follows:\nIdentify charging stations where the charging cost exceeds $0.25 per kWh and the charging speed is below 100kW, and calculate their average daily revenue (assuming the daily charging volume per station = Charging_Speed × Number_Of_Chargers × 8h).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Station_Id, ROUND(Cost_Per_Kwh * Charging_Speed_Kw * Number_Of_Chargers * 8, 2) AS Daily_Revenue FROM charging_stations WHERE Cost_Per_Kwh > 0.25 AND Charging_Speed_Kw < 100",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 80,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['solar-powered charging station', 'energy storage efficiency 90%', 'sunlight hours 6 hours/day', 'solar panel efficiency 20%'], 'relations': ['charging_station_to_solar_specs (hypothetical relationship)', 'efficiency_factor (0.9 * 0.2 = 0.18)', 'daily_energy_input (sunlight_hours → energy calculation)'], 'intent': 'calculate_theoretically_max_charge_capacity', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [90, 6, 20], 'units': {'energy_efficiency': '% (percentages)', 'sunlight': 'hours/day', 'energy': 'kWh (required output unit)', 'conversion': 'Energy = Solar_Irradiance * Area * Efficiency * Sunlight_Hours * Storage_Efficiency (implied formula)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}], 'tableinfo': {'new_energy_vehicles.charging_stations': [{'column': 'Is_Solar_Powered', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否使用太阳能供电', 'examples': ['0', '1']}], 'new_energy_vehicles.hypothetical': [{'column': 'solar_panel_efficiency_percent'}, {'column': 'energy_storage_efficiency_percent'}, {'column': 'daily_sunlight_hours'}]}}\nA hypothetical reasoning question is as follows:\nAssuming a charging station is powered entirely by solar energy with an energy storage efficiency of 90%, calculate the theoretically maximum charge it can support (assuming an average of 6 hours of sunlight per day and solar panel efficiency of 20%).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Station_Id, ROUND(Charging_Speed_Kw * 6 * 0.2 * 0.9, 2) AS Max_Charging_Capacity FROM charging_stations",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 81,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['ET7 (model)', 'driving record 2', 'elevation gain 0.5kWh/100m'], 'relations': ['record_to_vehicle (driving_records.Record_Id → vehicles.Vehicle_Id)', 'elevation_impact (ΔEnergy = Elevation_Gain_M × 0.5kWh/100m)'], 'intent': 'calculate_energy_efficiency_with_elevation_adjustment', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2, 0.5, 100], 'units': {'energy': 'kWh', 'distance': 'km', 'elevation': 'meters', 'efficiency': 'km/kWh', 'conversion': '0.5kWh per 100m elevation gain'}, 'foreign_keys': [{'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.driving_records': [{'column': 'Record_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '驾驶记录唯一标识', 'examples': ['1', '2', '55', '3', '4']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['30.0', '25.0', '20.0', '15.0', '10.0']}, {'column': 'Distance_Km', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '行驶距离（公里）', 'examples': ['150.0', '120.0', '100.0', '80.0', '60.0']}, {'column': 'Elevation_Gain_M', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '海拔上升高度（米）', 'examples': ['200.0', '150.0', '100.0', '50.0', '20.0']}], 'new_energy_vehicles.vehicles': [{'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '车型', 'examples': ['Model S', 'ET7', 'Han EV', 'P7', 'Li ONE']}]}}\nA physical knowledge question is as follows:\nBased on the Energy_Consumed_Kwh in the driving_records table and Battery_Capacity_Kwh in the vehicles table, calculate the energy efficiency of ET7 in driving record 2 (unit: km/kWh), taking into account the impact of elevation changes (increasing energy consumption by 0.5kWh for every 100 meters of elevation gain).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ROUND(d.Distance_Km / (d.Energy_Consumed_Kwh + (d.Elevation_Gain_M/100*0.5)), 2) AS Energy_Efficiency FROM driving_records d JOIN vehicles v ON d.Vehicle_Id = v.Vehicle_Id WHERE d.Record_Id = 2 AND v.Model = 'ET7'",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 82,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"charging_stations\", \"operational_efficiency\", \"charging_speed\", \"operator\", \"polynomial_regression\", \"standard_deviation\"],\n  \"relations\": [\n    \"operator_to_charging_stations (Operator → Station_Id)\",\n    \"charging_station_to_revenue (Station_Id → Cost_Usd from charging_records)\",\n    \"efficiency_indicator_definition (Revenue / Number_Of_Chargers)\",\n    \"regression_dependency (Charging_Speed_Kw + Charging_Speed_Kw^2 → Efficiency_Indicator)\"\n  ],\n  \"intent\": \"calculate_operational_efficiency_metrics_and_regression\",\n  \"reasoning_type\": \"mathematical logic reasoning\",\n  \"numerical_values\": [2],  // Degree of polynomial regression (quadratic)\n  \"units\": {\n    \"revenue\": \"USD\",\n    \"chargers\": \"unitless count\",\n    \"efficiency_indicator\": \"USD/charger\",\n    \"charging_speed\": \"kW\",\n    \"regression_coefficients\": \"implied units for polynomial terms\"\n  },\n  \"required_tables\": [\"charging_stations\", \"charging_records\"],\n  \"required_fields\": [\n    \"charging_stations.Station_Id\",\n    \"charging_stations.Number_Of_Chargers\",\n    \"charging_stations.Operator\",\n    \"charging_stations.Charging_Speed_Kw\",\n    \"charging_records.Cost_Usd\"\n  ]\n}\nA mathematical logic question is as follows:\nEstablish operational efficiency indicators for charging stations (total revenue/number of charging piles), calculate the standard deviation of this indicator by operator, and build a polynomial regression model (quadratic term) with charging speed.\nyour response just have a SQL without anything.\n",
        "solution": "WITH Efficiency AS ( SELECT Operator, SUM(Cost_Per_Kwh * Charging_Speed_Kw * Number_Of_Chargers * 24)/SUM(Number_Of_Chargers) AS Operational_Efficiency, AVG(Charging_Speed_Kw) AS Avg_Charging_Speed FROM charging_stations GROUP BY Operator ) SELECT Operator, STDDEV(Operational_Efficiency) OVER() AS Std_Efficiency, Operational_Efficiency, POWER(Operational_Efficiency, 2) AS Efficiency_Squared, Avg_Charging_Speed, POWER(Avg_Charging_Speed, 2) AS Speed_Squared FROM Efficiency ORDER BY Operator;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 83,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging records violating safety regulations', 'charging stations without 24/7 operation', 'charging stations without canopy', 'rainy day charging events', 'charging amount > 50kWh'], 'relations': ['charging_record_to_station (charging_records.Station_Id → charging_stations.Station_Id)', 'safety_violation_criteria (non-24/7, uncovered, rainy weather, >50kWh)', 'risk_coefficient_formula (charging amount × temperature / 100)'], 'intent': 'identify_violating_charging_records_and_calculate_risk_coefficient', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50, 100], 'units': {'energy': 'kWh', 'temperature': '°C (Celsius)', 'risk_coefficient': '(kWh × °C) / 100'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Record_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '充电记录唯一标识', 'examples': ['1', '134', '135', '2', '3']}, {'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电站ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}, {'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}, {'column': 'Weather_Conditions', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '天气情况', 'examples': ['Sunny', 'Cloudy', 'Rainy', 'Clear', 'Foggy']}], 'new_energy_vehicles.charging_stations': [{'column': 'Is_24_Hours', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否24小时开放', 'examples': ['1', '0']}, {'column': 'Is_Covered', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否有顶棚', 'examples': ['1', '0']}]}}\nA common sense reasoning question is as follows:\nIdentify charging records that violate safety regulations for charging facilities (charging stations that do not operate 24/7 with no canopy and have charging amounts exceeding 50kWh on rainy days), and calculate their risk coefficient (risk coefficient = charging amount × temperature / 100).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT c.Record_Id, ROUND(c.Energy_Consumed_Kwh * c.Temperature_Celsius / 100, 2) AS Risk_Factor FROM charging_records c JOIN charging_stations s ON c.Station_Id = s.Station_Id WHERE s.Is_24_Hours = 0 AND s.Is_Covered = 0 AND c.Weather_Conditions = 'Rainy' AND c.Energy_Consumed_Kwh > 50",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 84,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['supercharging station charging speed 1000kW', 'simultaneous usage rate 80%', 'power factor 0.9'], 'relations': ['station_to_specs (charging_stations.Charging_Speed_Kw → technical specifications)', 'usage_rate_calculation (Number_Of_Chargers × 80%)', 'power_factor_adjustment (impact load = (charging_speed × usage_rate) × power_factor)'], 'intent': 'calculate_impact_load_on_power_grid', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000, 80, 0.9], 'units': {'charging_speed': 'kW (kilowatts)', 'usage_rate': '% (percentage)', 'power_factor': 'unitless', 'impact_load': 'kW (kilowatts)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}], 'tableinfo': {'new_energy_vehicles.charging_stations': [{'column': 'Charging_Speed_Kw', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '充电速度（千瓦）', 'examples': ['120.0', '150.0', '100.0', '90.0', '80.0']}, {'column': 'Number_Of_Chargers', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电桩数量', 'examples': ['10', '8', '12', '6', '4']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a supercharging station has a charging speed of 1MW (1000kW), calculate its impact load on the regional power grid (assuming a simultaneous usage rate = number of charging piles × 80%, with a power factor of 0.9).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Station_Id, ROUND(1000 * Number_Of_Chargers * 0.8 / 0.9, 2) AS Grid_Impact FROM charging_stations",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 85,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['BYD Han EV', 'driving record 3', 'Energy_Consumed_Kwh', 'Motor_Power_Kw', 'Elevation_Gain_M', 'Elevation_Loss_M', 'g=9.8m/s²'], 'relations': ['driving_record_to_vehicle (record 3 → BYD Han EV)', 'energy_consumption_to_motor_power (Energy_Consumed_Kwh ↔ Motor_Power_Kw)', 'elevation_effect (Elevation_Gain/Loss + Weight_Kg * g)'], 'intent': 'calculate_kinetic_energy_conversion_efficiency_with_altitude_variation', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [9.8], 'units': {'energy': 'kWh (driving_records.Energy_Consumed_Kwh) → joules (1 kWh = 3.6e6 J)', 'power': 'kW (vehicles.Motor_Power_Kw)', 'elevation': 'meters (driving_records.Elevation_Gain/Loss)', 'weight': 'kg (vehicles.Weight_Kg)', 'acceleration': 'm/s² (g=9.8)', 'conversion': 'kWh→J = 3.6e6, gravitational potential energy = mgh'}, 'foreign_keys': [{'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.driving_records': [{'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['30.0', '25.0', '20.0', '15.0', '10.0']}, {'column': 'Elevation_Gain_M', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '海拔上升高度（米）', 'examples': ['200.0', '150.0', '100.0', '50.0', '20.0']}, {'column': 'Elevation_Loss_M', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '海拔下降高度（米）', 'examples': ['100.0', '80.0', '50.0', '30.0', '10.0']}], 'new_energy_vehicles.vehicles': [{'column': 'Motor_Power_Kw', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电机功率（千瓦）', 'examples': ['500.0', '480.0', '360.0', '300.0', '240.0']}, {'column': 'Weight_Kg', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '车辆重量（千克）', 'examples': ['2100.0', '2200.0', '2000.0', '1900.0', '2300.0']}]}}\nA physical knowledge question is as follows:\nBased on the Energy_Consumed_Kwh from the driving_records table and the Motor_Power_Kw from the vehicles table, calculate the kinetic energy conversion efficiency of BYD Han EV in driving record 3 (considering the change in gravitational potential energy due to altitude variation, g=9.8m/s²).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ROUND( ( (0.5 * v.Weight_Kg * POWER((d.Distance_Km/(TIMESTAMPDIFF(HOUR, d.Start_Time, d.End_Time))/3.6), 2)) + (v.Weight_Kg * 9.8 * d.Elevation_Gain_M/1000) ) / (d.Energy_Consumed_Kwh * 3600000) * 100, 2 ) AS Efficiency FROM driving_records d JOIN vehicles v ON d.Vehicle_Id = v.Vehicle_Id WHERE d.Record_Id = 3 AND v.Manufacturer = 'BYD' AND v.Model = 'Han EV'",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 86,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Operator', 'Number_Of_Chargers', 'Charging_Speed_Kw'], 'relations': ['operator_to_chargers (Operator → Number_Of_Chargers)', 'operator_to_charging_speed (Operator → Charging_Speed_Kw)'], 'intent': 'calculate_spearman_rank_correlation_and_sort', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'chargers': 'unitless (count)', 'charging_speed': 'kW (kilowatts)', 'correlation_coefficient': 'unitless (ranging from -1 to 1)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}], 'tableinfo': {'new_energy_vehicles.charging_stations': [{'column': 'Operator', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '运营商', 'examples': ['Tesla', 'NIO', 'BYD', 'Xpeng', 'Li Auto']}, {'column': 'Number_Of_Chargers', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电桩数量', 'examples': ['10', '8', '12', '6', '4']}, {'column': 'Charging_Speed_Kw', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '充电速度（千瓦）', 'examples': ['120.0', '150.0', '100.0', '90.0', '80.0']}]}}\nA mathematical logic question is as follows:\nCalculate the Spearman rank correlation coefficient between the number of chargers (Number_Of_Chargers) and charging speed (Charging_Speed_Kw) for each operator (Operator), and sort the results in descending order by the absolute value of the correlation coefficient.\nyour response just have a SQL without anything.\n",
        "solution": "WITH ranked_data AS ( SELECT Operator, Number_Of_Chargers, Charging_Speed_Kw, RANK() OVER (PARTITION BY Operator ORDER BY Number_Of_Chargers) AS rank_chargers, RANK() OVER (PARTITION BY Operator ORDER BY Charging_Speed_Kw) AS rank_speed FROM charging_stations WHERE Number_Of_Chargers IS NOT NULL AND Charging_Speed_Kw IS NOT NULL ), diff_data AS ( SELECT Operator, POWER(rank_chargers - rank_speed, 2) AS d_squared FROM ranked_data ), correlation_data AS ( SELECT Operator, 1 - (6 * SUM(d_squared)) / (COUNT(*) * (POWER(COUNT(*), 2) - 1)) AS spearman_correlation FROM diff_data GROUP BY Operator ) SELECT Operator, spearman_correlation FROM correlation_data ORDER BY ABS(spearman_correlation) DESC;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 87,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging_records', 'GB/T 27930 standard', 'battery temperature >40°C', 'charging amount >80% of battery capacity', 'risk index'], 'relations': ['charging_records_to_vehicles (Vehicle_Id → Battery_Capacity_Kwh)', 'temperature_condition (Temperature_Celsius > 40°C)', \"fast_charging_condition (Charging_Type = 'Fast Charging')\", 'charge_amount_condition (Energy_Consumed_Kwh > 80% of Battery_Capacity_Kwh)'], 'intent': 'identify_violations_and_calculate_risk', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [40, 80], 'units': {'temperature': '°C (Celsius)', 'charge_amount': '% (percentage)', 'energy': 'Kwh (kilowatt-hour)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Record_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '充电记录唯一标识', 'examples': ['1', '134', '135', '2', '3']}, {'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Charging_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电类型（如：快充、慢充）', 'examples': ['Fast', 'Ultra-Fast', 'Standard']}, {'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}], 'new_energy_vehicles.vehicles': [{'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}]}}\nA common sense reasoning question is as follows:\nIdentify charging records that violate the GB/T 27930 standard (battery temperature >40°C during fast charging and charging amount >80% of battery capacity), and calculate their risk index.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT c.Record_Id, ROUND( ((c.Final_Battery_Percentage - c.Initial_Battery_Percentage)/100 * v.Battery_Capacity_Kwh * c.Temperature_Celsius) / v.Battery_Capacity_Kwh, 2 ) AS Risk_Index FROM charging_records c JOIN vehicles v ON c.Vehicle_Id = v.Vehicle_Id WHERE c.Charging_Type = 'Fast' AND c.Temperature_Celsius > 40 AND (c.Final_Battery_Percentage - c.Initial_Battery_Percentage) > 80",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 88,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['wireless charging roadway', 'dynamic charging', '1000kW', 'vehicle range'], 'relations': ['dynamic_charging_to_power (wireless charging roadway → 1000kW)', 'vehicle_to_battery_capacity (vehicle → Battery_Capacity_Kwh)', 'vehicle_to_range (vehicle → Range_Km)'], 'intent': 'calculate_theoretical_multiple_of_range_improvement', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1000], 'units': {'power': 'kW (kilowatts)', 'energy_storage': 'kWh (kilowatt-hours)', 'range': 'km (kilometers)', 'conversion': 'Power (kW) → Energy (kWh) via time integration'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}, {'column': 'Range_Km', 'type': 'INTEGER', 'primary_key': False, 'comment': '续航里程（公里）', 'examples': ['600', '700', '550', '500', '180']}, {'column': 'Motor_Power_Kw', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电机功率（千瓦）', 'examples': ['500.0', '480.0', '360.0', '300.0', '240.0']}], 'new_energy_vehicles.charging_stations': [{'column': 'Charging_Speed_Kw', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '充电速度（千瓦）', 'examples': ['120.0', '150.0', '100.0', '90.0', '80.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a wireless charging roadway achieves 1000kW dynamic charging, calculate the theoretical multiple of improvement in vehicle range.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT v.Vehicle_Id, ROUND( (v.Range_Km + (1000*0.95*1)/(d.Energy_Consumed_Kwh/d.Distance_Km)) / v.Range_Km, 2 ) AS Range_Boost FROM vehicles v JOIN driving_records d ON v.Vehicle_Id = d.Vehicle_Id WHERE d.Record_Id = 3",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 89,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Tesla vehicles', 'fast charging records', 'battery internal resistance', 'temperature_Celsius'], 'relations': ['vehicle_to_charging_records (Vehicle_Id → charging_records)', 'temperature_to_resistance (Temperature_Celsius → R = 0.05Ω·(25/Temperature_Celsius))', 'energy_consumption_to_efficiency (Energy_Consumed_Kwh → charging_efficiency)'], 'intent': 'calculate_average_power_and_charging_efficiency', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.05, 25], 'units': {'temperature': '°C (Celsius)', 'resistance': 'Ω (Ohm)', 'power': 'kW (Kilowatts)', 'energy': 'kWh (Kilowatt-hours)', 'efficiency': 'dimensionless ratio (actual/theoretical)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Manufacturer', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '制造商', 'examples': ['Tesla', 'NIO', 'BYD', 'Xpeng', 'Li Auto']}, {'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}], 'new_energy_vehicles.charging_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Charging_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电类型（如：快充、慢充）', 'examples': ['Fast', 'Ultra-Fast', 'Standard']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'End_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电结束时间', 'examples': ['2023-10-01 12:30:00']}, {'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}]}}\nA physical knowledge question is as follows:\nCalculate the average power of Tesla vehicles during fast charging and derive the charging efficiency (actual charging energy/theoretical maximum energy), incorporating the impact of temperature on battery internal resistance (assuming internal resistance R=0.05Ω·(25/Temperature_Celsius)).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT cr.Vehicle_Id, ROUND(cr.Energy_Consumed_Kwh / TIMESTAMPDIFF(HOUR, cr.Start_Time, cr.End_Time), 2) AS P_avg_kW, ROUND((cr.Energy_Consumed_Kwh * 3600000) / (POWER(400,2) * TIMESTAMPDIFF(SECOND, cr.Start_Time, cr.End_Time) * 0.05*(25/cr.Temperature_Celsius)/3600), 4) AS Efficiency_Rate FROM charging_records cr JOIN vehicles v ON cr.Vehicle_Id = v.Vehicle_Id WHERE v.Manufacturer = 'Tesla' AND cr.Charging_Type = 'Fast';",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 90,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\nthere is nothing I can give you about this question.\nA mathematical logic question is as follows:\nCalculate the energy cost-efficiency ratio ((Range_Km/Energy_Consumed_Kwh)×(1/Cost_Usd)) of vehicles from each manufacturer under sunny conditions, and filter the top 3 models with the highest ratios.\nyour response just have a SQL without anything.\n",
        "solution": "WITH CostBenefit AS (SELECT v.Manufacturer, v.Model, SUM(dr.Distance_Km * v.Range_Km) / SUM(cr.Energy_Consumed_Kwh * cr.Cost_Usd) AS Benefit_Ratio FROM driving_records dr JOIN charging_records cr ON dr.Vehicle_Id = cr.Vehicle_Id JOIN vehicles v ON cr.Vehicle_Id = v.Vehicle_Id WHERE dr.Weather_Conditions = 'Sunny' GROUP BY v.Manufacturer, v.Model) SELECT * FROM (SELECT *, RANK() OVER(ORDER BY Benefit_Ratio DESC) AS Ranking FROM CostBenefit) sub WHERE Ranking <= 3;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 91,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging_records', 'charging_stations', 'non-24-hour charging stations'], 'relations': ['charging_records.Station_Id → charging_stations.Station_Id', 'charging_records.Start_Time < charging_stations.Opening_Hours', 'charging_stations.Is_24_Hours = FALSE (filter condition)'], 'intent': 'identify_abnormal_records_with_invalid_time', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'time': 'datetime or time format (implicit in Start_Time and Opening_Hours fields)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Record_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '充电记录唯一标识', 'examples': ['1', '134', '135', '2', '3']}, {'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电站ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}], 'new_energy_vehicles.charging_stations': [{'column': 'Opening_Hours', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '开放时间', 'examples': ['24/7', '06:00-22:00', '07:00-23:00', '08:00-20:00', '09:00-21:00']}, {'column': 'Is_24_Hours', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否24小时开放', 'examples': ['1', '0']}]}}\nA common sense reasoning question is as follows:\nIdentify abnormal records where the charging start time is earlier than the opening time in non-24-hour charging stations.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT cr.Record_Id, cs.Station_Name, cs.Opening_Hours, cr.Start_Time FROM charging_records cr JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id WHERE cs.Opening_Hours != '00:00-23:59' AND (TIME(cr.Start_Time) < STR_TO_DATE(SUBSTRING_INDEX(cs.Opening_Hours, '-', 1), '%H:%i') OR TIME(cr.End_Time) > STR_TO_DATE(SUBSTRING_INDEX(cs.Opening_Hours, '-', -1), '%H:%i'));",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 92,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging station with power 10,000 kW', '50-ton vehicle', 'speed of light (0.1c)'], 'relations': ['power_to_energy (charging power → energy delivery rate)', 'mass_to_energy (vehicle mass → relativistic energy requirement)', 'speed_ratio (target speed = 0.1 × speed_of_light)'], 'intent': 'calculate_acceleration_time_and_verify_mass_energy_conservation', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [10000, 150, 50, 0.1], 'units': {'power': 'kW (kilowatts)', 'mass': 'tons → kg (1 ton = 1000 kg)', 'speed': 'fraction of speed_of_light (c = 3×10^8 m/s)', 'energy_conversion': '1 kWh = 3.6×10^6 J'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Weight_Kg', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '车辆重量（千克）', 'examples': ['2100.0', '2200.0', '2000.0', '1900.0', '2300.0']}], 'new_energy_vehicles.charging_stations': [{'column': 'Charging_Speed_Kw', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '充电速度（千瓦）', 'examples': ['120.0', '150.0', '100.0', '90.0', '80.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a charging station charges at a power of 10,000 kW (which is 66 times the current maximum of 150 kW), calculate the time required to accelerate a 50-ton vehicle to 0.1 times the speed of light, and verify whether this violates the law of mass-energy conservation.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ROUND((0.5 * 50000 * POW(29979245.8,2)) / (10000000), 2) AS Time_Seconds, ROUND((0.5 * 50000 * POW(29979245.8,2)) / (50000 * POW(299792458,2)), 12) AS MassEnergy_Ratio FROM DUAL;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 93,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"vehicle altitude changes\", \"potential energy difference\", \"actual energy consumption\", \"rainy conditions\", \"gravitational acceleration\", \"mechanical energy losses\"],\n  \"relations\": [\n    \"vehicle_to_driving_records (Vehicle_Id → driving_records)\",\n    \"elevation_to_energy (Elevation_Gain_M/Loss_M → potential energy calculation)\",\n    \"energy_conversion (Potential_Energy → Actual_Energy_Consumption_Kwh * efficiency)\",\n    \"mechanical_loss_factor (1 - efficiency_reduction_ratio)\"\n  ],\n  \"intent\": \"calculate_energy_conversion_efficiency\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [9.81 /* gravitational acceleration m/s² */],\n  \"units\": {\n    \"elevation\": \"meters (m)\",\n    \"mass\": \"kilograms (kg) from vehicles.Weight_Kg\",\n    \"energy\": \"kWh from driving_records.Energy_Consumed_Kwh\",\n    \"conversion\": \"Potential_Energy(J) = mass(kg)*g(m/s²)*Δh(m), Efficiency(%) = (Potential_Energy(J) / Actual_Energy(J)) * 100\"\n  },\n  \"required_tables\": [\"driving_records\", \"vehicles\"],\n  \"required_fields\": [\n    \"driving_records.Vehicle_Id\",\n    \"driving_records.Elevation_Gain_M\",\n    \"driving_records.Elevation_Loss_M\",\n    \"driving_records.Energy_Consumed_Kwh\",\n    \"driving_records.Weather_Conditions\",\n    \"vehicles.Vehicle_Id\",\n    \"vehicles.Weight_Kg\"\n  ]\n}\nA physical knowledge question is as follows:\nCalculate the conversion efficiency of potential energy difference caused by altitude changes into actual energy consumption for vehicles driving in rainy conditions (considering gravitational acceleration and mechanical energy losses).\nyour response just have a SQL without anything.\n",
        "solution": "WITH RainyDrives AS ( SELECT dr.Record_Id, v.Weight_Kg, dr.Elevation_Gain_M - dr.Elevation_Loss_M AS elevation_diff_m, dr.Energy_Consumed_Kwh FROM driving_records dr JOIN vehicles v ON dr.Vehicle_Id = v.Vehicle_Id WHERE dr.Weather_Conditions = 'Rainy' ) SELECT Record_Id, ROUND( (Weight_Kg * 9.8 * elevation_diff_m / 1000) / (Energy_Consumed_Kwh * 3600000) * 100, 2 ) AS efficiency_percent FROM RainyDrives WHERE Energy_Consumed_Kwh > 0;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 94,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging station', 'operator', 'peak hours (18:00-22:00)'], 'relations': ['station_to_operator (Station_Id → Operator)', 'charging_record_to_station (Record_Id → Station_Id)', 'time_filter (18:00-22:00)'], 'intent': 'calculate_operational_efficiency_ratio', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [18, 22, 4], 'units': {'energy': 'kWh (Energy_Consumed_Kwh)', 'cost': 'USD (Cost_Usd, Cost_Per_Kwh)', 'duration': 'hours (Operating duration = 4 hours)', 'chargers': 'unit count (Number_Of_Chargers)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电站ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}], 'new_energy_vehicles.charging_stations': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '充电站唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Operator', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '运营商', 'examples': ['Tesla', 'NIO', 'BYD', 'Xpeng', 'Li Auto']}, {'column': 'Cost_Per_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '每千瓦时费用', 'examples': ['0.3', '0.25', '0.2', '0.28', '0.22']}, {'column': 'Number_Of_Chargers', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电桩数量', 'examples': ['10', '8', '12', '6', '4']}]}}\nA mathematical logic question is as follows:\nCalculate the operational efficiency ratio of each operator's fast charging stations during peak hours (18:00-22:00): (Total charging volume × Unit price) / (Number of charging piles × Operating duration)\nyour response just have a SQL without anything.\n",
        "solution": "WITH PeakHours AS ( SELECT cs.Operator, cs.Number_Of_Chargers, SUM(cr.Energy_Consumed_Kwh * cs.Cost_Per_Kwh) AS total_revenue, SUM(TIMESTAMPDIFF(HOUR, cr.Start_Time, cr.End_Time)) AS total_hours FROM charging_records cr JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id WHERE cr.Charging_Type = 'Fast' AND HOUR(cr.Start_Time) BETWEEN 18 AND 22 GROUP BY cs.Operator, cs.Number_Of_Chargers ) SELECT Operator, ROUND(total_revenue / (Number_Of_Chargers * total_hours), 2) AS efficiency_ratio, RANK() OVER(ORDER BY (total_revenue / (Number_Of_Chargers * total_hours)) DESC) AS efficiency_rank FROM PeakHours;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 95,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['battery_capacity_to_range_ratio', 'industry_standard_range_per_kwh (5 km/kWh)'], 'relations': ['vehicle_battery_capacity_to_range_ratio (Range_Km < Battery_Capacity_Kwh × 5)'], 'intent': 'identify_vehicles_with_abnormal_battery_to_range_ratio', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5], 'units': {'battery_capacity': 'Kwh (Kilowatt-hour)', 'range': 'Km (Kilometers)', 'ratio': 'km/kWh (Kilometers per Kilowatt-hour)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}, {'column': 'Range_Km', 'type': 'INTEGER', 'primary_key': False, 'comment': '续航里程（公里）', 'examples': ['600', '700', '550', '500', '180']}]}}\nA common sense reasoning question is as follows:\nIdentify vehicles with abnormal battery capacity to range ratio (Industry standard should meet Range_Km ≥ Battery_Capacity_Kwh × 5)\nyour response just have a SQL without anything.\n",
        "solution": "WITH RangeAnalysis AS ( SELECT v.Vehicle_Id, v.Manufacturer, v.Model, v.Battery_Capacity_Kwh, v.Range_Km, dr.End_Battery_Percentage FROM vehicles v LEFT JOIN driving_records dr ON v.Vehicle_Id = dr.Vehicle_Id WHERE v.Range_Km < v.Battery_Capacity_Kwh * 5 ) SELECT Vehicle_Id, Manufacturer, Model, Battery_Capacity_Kwh, Range_Km, ROUND(Range_Km / Battery_Capacity_Kwh, 2) AS actual_range_factor, End_Battery_Percentage FROM RangeAnalysis;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 96,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicle traveling at 900 km/h', \"total energy of the vehicle's battery\", 'air resistance power consumption'], 'relations': ['speed_to_air_resistance (900 km/h → drag power calculation)', 'battery_capacity_comparison (battery energy vs calculated power)'], 'intent': 'compare_power_consumption_with_battery_capacity', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [900, 6], 'units': {'speed': 'km/h (converted to m/s for physics formulas)', 'energy': 'kWh (battery capacity)', 'power': 'kW (calculated from drag force * velocity)', 'conversion': '900 km/h = 250 m/s; 1 kWh = 3.6×10^6 J'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}, {'column': 'Top_Speed_Kmh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '最高时速（公里/小时）', 'examples': ['250.0', '240.0', '230.0', '220.0', '180.0']}, {'column': 'Weight_Kg', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '车辆重量（千克）', 'examples': ['2100.0', '2200.0', '2000.0', '1900.0', '2300.0']}, {'column': 'Motor_Power_Kw', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电机功率（千瓦）', 'examples': ['500.0', '480.0', '360.0', '300.0', '240.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a vehicle travels continuously at 900 km/h (which is 6 times the current maximum speed), calculate whether the power consumption due to air resistance exceeds the total energy of the vehicle's battery.\nyour response just have a SQL without anything.\n",
        "solution": "WITH PhysicsConstants AS ( SELECT 1.225 AS air_density, 2.5 AS frontal_area, 900 / 3.6 AS speed_mps ), VehicleEnergy AS ( SELECT Battery_Capacity_Kwh * 1000 AS battery_joules FROM vehicles WHERE Model = 'Model S' LIMIT 1 ), AirResistance AS ( SELECT 0.5 * air_density * frontal_area * POWER(speed_mps, 3) AS power_watts FROM PhysicsConstants ) SELECT power_watts, battery_joules / (power_watts * 3600) AS endurance_hours, CASE WHEN battery_joules / (power_watts * 3600) < 1 THEN '突破' ELSE '安全' END AS status FROM AirResistance, VehicleEnergy;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 97,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"four-wheel-drive vehicles\", \"motors\", \"snowy terrain\", \"vehicle weight distribution\", \"motor efficiency differences\"],\n  \"relations\": [\"vehicle_to_drivetrain (4WD system)\", \"motor_to_power_distribution (power split ratio)\", \"terrain_to_efficiency (snowy driving impact)\", \"weight_to_torque (weight distribution effect on torque)\"],\n  \"intent\": \"calculate_power_and_torque_distribution_differences\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [4],  // \"four-wheel-drive\" indicates 4 motors/axles\n  \"units\": {\n    \"power\": \"kW (Kilowatts)\",\n    \"torque\": \"Nm (Newton-meters) (implied by calculation)\",\n    \"weight\": \"kg (Kilograms)\",\n    \"efficiency\": \"% (percentage) (implied by database schema)\"\n  },\n  \"required_tables\": [\"vehicles\", \"driving_records\"],\n  \"required_fields\": [\n    \"vehicles.Drivetrain\",                // Confirm 4WD configuration\n    \"vehicles.Motor_Power_Kw\",           // Motor power specifications\n    \"vehicles.Weight_Kg\",                // Total vehicle weight\n    \"driving_records.Road_Type\",         // Filter for snowy terrain\n    \"driving_records.Weather_Conditions\",// Confirm snow-related conditions\n    \"driving_records.Energy_Consumed_Kwh\"// Efficiency/energy usage data\n  ]\n}\nA physical knowledge question is as follows:\nCalculate the power distribution differences of motors in four-wheel-drive vehicles driving on snowy terrain, and derive the torque distribution ratio (taking into account the vehicle's weight distribution and motor efficiency differences).\nyour response just have a SQL without anything.\n",
        "solution": "WITH SnowDrives AS ( SELECT dr.Record_Id, v.Weight_Kg, dr.Elevation_Gain_M, dr.Average_Speed_Kmh, 0.6 * v.Weight_Kg * 9.8 * 0.3 * 0.3 / 0.9 AS torque_front, 0.4 * v.Weight_Kg * 9.8 * 0.3 * 0.3 / 0.85 AS torque_rear FROM driving_records dr JOIN vehicles v ON dr.Vehicle_Id = v.Vehicle_Id WHERE v.Drivetrain = 'AWD' AND dr.Weather_Conditions = 'Snow' ) SELECT Record_Id, ROUND(torque_front / torque_rear, 2) AS torque_ratio FROM SnowDrives;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 98,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging station', 'charging volume', 'solar power supply coefficient', 'charging piles', 'parking fee', 'quarter'], 'relations': ['station_to_records (charging_stations → charging_records)', 'time_to_quarter (Start_Time → quarter)'], 'intent': 'calculate_service_efficiency_per_unit_area_with_formula_and_sort_by_quarter', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['sum(Energy_Consumed_Kwh)', 'Number_Of_Chargers', 'Parking_Fee_Usd', 'Is_Solar_Powered (as coefficient)'], 'units': {'energy_consumed': 'Kwh (Kilowatt-hour)', 'solar_coefficient': 'unitless (1 if solar, 0 otherwise)', 'parking_fee': 'USD (United States Dollar)', 'chargers': 'count (unitless)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电站ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}], 'new_energy_vehicles.charging_stations': [{'column': 'Number_Of_Chargers', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电桩数量', 'examples': ['10', '8', '12', '6', '4']}, {'column': 'Parking_Fee_Usd', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '停车费用（美元）', 'examples': ['5.0', '3.0', '2.5', '4.0', '3.5']}, {'column': 'Is_Solar_Powered', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否使用太阳能供电', 'examples': ['0', '1']}]}}\nA mathematical logic question is as follows:\nCalculate the service efficiency per unit area for each charging station: (charging volume × solar power supply coefficient) / (number of charging piles × parking fee), and sort by quarter.\nyour response just have a SQL without anything.\n",
        "solution": "WITH ServiceEfficiency AS ( SELECT cs.Station_Id, cs.Number_Of_Chargers, cs.Parking_Fee_Usd, cs.Is_Solar_Powered, QUARTER(cr.Start_Time) AS quarter, SUM(cr.Energy_Consumed_Kwh * IF(cs.Is_Solar_Powered, 1.2, 1)) AS adjusted_energy FROM charging_records cr JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id GROUP BY cs.Station_Id, cs.Number_Of_Chargers, cs.Parking_Fee_Usd, cs.Is_Solar_Powered, quarter ) SELECT Station_Id, quarter, ROUND(adjusted_energy / (Number_Of_Chargers * Parking_Fee_Usd), 2) AS efficiency_ratio, RANK() OVER(PARTITION BY quarter ORDER BY adjusted_energy / (Number_Of_Chargers * Parking_Fee_Usd) DESC) AS efficiency_rank FROM ServiceEfficiency;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 99,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['fast charging records', 'ΔSOC% (rate of state-of-charge change)', 'battery temperature 40℃'], 'relations': ['record_to_vehicle (Vehicle_Id → vehicles.Vehicle_Id)', 'soc_rate_calculation (ΔSOC% = (Final_Battery_Percentage - Initial_Battery_Percentage) / (End_Time - Start_Time in hours))', 'temperature_threshold_check (Temperature_Celsius > 40℃)'], 'intent': 'detect_abnormal_battery_health_conditions', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [70, 40], 'units': {'soc_rate': '% per hour', 'temperature': '℃ (Celsius)', 'time': 'hours (calculated from Start_Time/End_Time)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Record_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '充电记录唯一标识', 'examples': ['1', '134', '135', '2', '3']}, {'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'End_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电结束时间', 'examples': ['2023-10-01 12:30:00']}, {'column': 'Initial_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电开始时的电池百分比', 'examples': ['20.0', '15.0', '10.0', '25.0', '30.0']}, {'column': 'Final_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电结束时的电池百分比', 'examples': ['80.0', '85.0', '70.0', '75.0', '30.0']}, {'column': 'Charging_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电类型（如：快充、慢充）', 'examples': ['Fast', 'Ultra-Fast', 'Standard']}, {'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}]}}\nA common sense reasoning question is as follows:\nDetect abnormal battery health conditions in fast charging records (normal fast charging should meet ΔSOC% ≤ 70%/hour, battery temperature ≤ 40℃).\nyour response just have a SQL without anything.\n",
        "solution": "WITH FastChargeAnalysis AS ( SELECT cr.Record_Id, cr.Temperature_Celsius, (cr.Final_Battery_Percentage - cr.Initial_Battery_Percentage) / TIMESTAMPDIFF(HOUR, cr.Start_Time, cr.End_Time) AS soc_rate FROM charging_records cr WHERE cr.Charging_Type = 'Fast' ) SELECT Record_Id, soc_rate, Temperature_Celsius, CASE WHEN soc_rate > 70 OR Temperature_Celsius > 40 THEN '异常' ELSE '正常' END AS health_status FROM FastChargeAnalysis;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 100,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"absolute zero environment (-273°C)\", \"quantum tunneling effects\", \"energy loss rate\"],\n  \"relations\": [\"environment_to_physics_effects (absolute zero → quantum tunneling)\", \"effect_to_measurement (quantum tunneling → energy loss rate)\"],\n  \"intent\": \"calculate_energy_loss_rate_from_quantum_tunneling\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [-273],\n  \"units\": {\n    \"temperature\": \"°C (Celsius) converted to Kelvin (K) for physics calculations\",\n    \"energy_loss_rate\": \"unit not explicitly defined in database, potentially W/m² or J/s\"\n  },\n  \"required_tables\": [\"charging_records\", \"vehicles\", \"charging_stations\"],\n  \"required_fields\": [\n    \"charging_records.Temperature_Celsius\", \n    \"vehicles.Battery_Capacity_Kwh\",\n    \"vehicles.Charging_Time_Hours\"\n  ]\n}\n\nNote: The database schema does not contain explicit fields for quantum tunneling effects, energy loss rate calculations, or low-temperature physics parameters. This response assumes hypothetical relationships between available environmental/charging data and theoretical physics phenomena, but actual implementation would require domain-specific scientific models not present in the provided database structure.\nA hypothetical reasoning question is as follows:\nAssuming charging in an absolute zero (-273°C) environment, calculate the energy loss rate due to quantum tunneling effects.\nyour response just have a SQL without anything.\n",
        "solution": "WITH QuantumConstants AS ( SELECT 1.0545718e-34 AS h_bar, 1e-9 AS barrier_thickness, 5 * 1.6e-19 AS barrier_energy ), TunnelingProbability AS ( SELECT EXP(-2 * barrier_thickness * SQRT(2 * 9.11e-31 * barrier_energy) / h_bar) AS p_tunnel FROM QuantumConstants ), EnergyLoss AS ( SELECT cr.Record_Id, cr.Energy_Consumed_Kwh * 1000 * p_tunnel AS energy_loss_joules FROM charging_records cr, TunnelingProbability ) SELECT Record_Id, energy_loss_joules, CASE WHEN energy_loss_joules > 100 THEN '超过量子极限' ELSE '安全' END AS quantum_status FROM EnergyLoss;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 101,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Joule heat loss rate', 'temperature rise', 'conductor resistivity', 'fast charging'], 'relations': ['temperature_to_resistivity (resistivity increases with temperature)', 'resistivity_to_resistance (R = ρL/A, where L/A is conductor geometry)', 'current_to_power_loss (P_loss = I²R)'], 'intent': 'calculate_joule_heating_impact_on_charging_efficiency', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['temperature coefficient of resistivity (α)', 'initial resistivity (ρ₀)', 'current (I)', 'conductor length/area ratio (L/A)'], 'units': {'temperature': '°C (Celsius)', 'resistivity': 'Ω·m (ohm-meters)', 'power_loss': 'W (watts)', 'current': 'A (amperes)', 'resistance': 'Ω (ohms)', 'conversion': 'ρ(T) = ρ₀[1 + αΔT] for resistivity-temperature relationship'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'End_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电结束时间', 'examples': ['2023-10-01 12:30:00']}], 'new_energy_vehicles.charging_stations': [{'column': 'Charging_Speed_Kw', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '充电速度（千瓦）', 'examples': ['120.0', '150.0', '100.0', '90.0', '80.0']}], 'new_energy_vehicles.vehicles': [{'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}, {'column': 'Charging_Time_Hours', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时间（小时）', 'examples': ['8.5', '10.0', '9.0', '8.0', '6.0']}]}}\nA physical knowledge question is as follows:\nCalculate the rate of Joule heat loss during fast charging, and derive the impact of temperature rise on charging efficiency (requires using the conductor resistivity formula).\nyour response just have a SQL without anything.\n",
        "solution": "WITH ChargingPhysics AS (SELECT cr.Record_Id, cr.Energy_Consumed_Kwh, cs.Charging_Speed_Kw, cr.Temperature_Celsius, (cs.Charging_Speed_Kw * 1000 / 400) AS I, (1.68e-8 * 5) / (PI() * POW(0.005, 2)) AS R, (POW(cs.Charging_Speed_Kw * 1000 / 400, 2) * (1.68e-8 * 5) / (PI() * POW(0.005, 2)) * TIMESTAMPDIFF(SECOND, cr.Start_Time, cr.End_Time)) / 3.6e6 AS Q, ((POW(cs.Charging_Speed_Kw * 1000 / 400, 2) * (1.68e-8 * 5) / (PI() * POW(0.005, 2)) * TIMESTAMPDIFF(SECOND, cr.Start_Time, cr.End_Time)) / 3.6e6 * 3.6e6) / (100 * 385) AS ΔT FROM charging_records cr JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id WHERE cr.Charging_Type = 'fast') SELECT Record_Id, ΔT AS Temperature_Rise, (Energy_Consumed_Kwh - Q) / Energy_Consumed_Kwh * 100 AS Efficiency_Loss_Percent FROM ChargingPhysics",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 102,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicle model', 'manufacturer', 'range achievement rate', 'rainy weather', 'snowy weather', 'standard deviation', 'volatility 20%'], 'relations': ['model_to_manufacturer (Model → Manufacturer)', 'weather_filtered_records (Rainy/Snowy driving records)', 'achievement_rate (Distance_Km / Range_Km)', 'volatility_threshold (Standard deviation > 20%)'], 'intent': 'calculate_range_achievement_volatility_and_identify_manufacturers', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20], 'units': {'range_achievement_rate': 'unitless ratio (calculated as Distance_Km / Range_Km)', 'volatility_threshold': '% (20% → 0.20 in decimal)'}, 'foreign_keys': [{'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.driving_records': [{'column': 'Record_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '驾驶记录唯一标识', 'examples': ['1', '2', '55', '3', '4']}, {'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Distance_Km', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '行驶距离（公里）', 'examples': ['150.0', '120.0', '100.0', '80.0', '60.0']}, {'column': 'Weather_Conditions', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '天气情况', 'examples': ['Sunny', 'Cloudy', 'Rainy', 'Clear', 'Foggy']}], 'new_energy_vehicles.vehicles': [{'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '车型', 'examples': ['Model S', 'ET7', 'Han EV', 'P7', 'Li ONE']}, {'column': 'Range_Km', 'type': 'INTEGER', 'primary_key': False, 'comment': '续航里程（公里）', 'examples': ['600', '700', '550', '500', '180']}, {'column': 'Manufacturer', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '制造商', 'examples': ['Tesla', 'NIO', 'BYD', 'Xpeng', 'Li Auto']}]}}\nA mathematical logic question is as follows:\nCalculate the standard deviation of the range achievement rate for each vehicle model in rainy and snowy weather, and identify manufacturers with a volatility exceeding 20%.\nyour response just have a SQL without anything.\n",
        "solution": "WITH RangeAnalysis AS (SELECT dr.Vehicle_Id, v.Manufacturer, dr.Distance_Km / (v.Range_Km * (dr.Start_Battery_Percentage - dr.End_Battery_Percentage) / 100) AS Range_Ratio FROM driving_records dr JOIN vehicles v ON dr.Vehicle_Id = v.Vehicle_Id WHERE dr.Weather_Conditions IN ('Rainy','Snow')) SELECT Manufacturer, STDDEV(Range_Ratio) / AVG(Range_Ratio) AS Volatility_Rate FROM RangeAnalysis GROUP BY Manufacturer HAVING STDDEV(Range_Ratio) / AVG(Range_Ratio) > 0.2",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 103,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging_piles', 'continuous_operation_over_72_hours', 'mandatory_cooling_intervals_≤24_hours'], 'relations': ['station_to_records (Station_Id links charging_stations to charging_records)', 'session_duration (Start_Time to End_Time)', 'gap_between_sessions (End_Time to next Start_Time)'], 'intent': 'identify_charging_stations_with_continuous_operation_violating_cooling_regulations', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [72, 24], 'units': {'duration': 'hours', 'cooling_interval': 'hours (mandatory ≤24 hours)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电站ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'End_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电结束时间', 'examples': ['2023-10-01 12:30:00']}], 'new_energy_vehicles.charging_stations': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '充电站唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Station_Name', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电站名称', 'examples': ['SuperCharge Station 1', 'NIO Power Station 1', 'BYD Charging Hub', 'Xpeng Charging Point', 'Li Auto Charging Station']}]}}\nA common sense reasoning question is as follows:\nIdentify charging piles that have been continuously operating for over 72 hours (industry regulations require mandatory cooling intervals of ≤24 hours).\nyour response just have a SQL without anything.\n",
        "solution": "WITH StationSessions AS (SELECT Station_Id, Start_Time, End_Time, TIMESTAMPDIFF(HOUR, LAG(End_Time) OVER (PARTITION BY Station_Id ORDER BY Start_Time), Start_Time) AS Rest_Hours FROM charging_records) SELECT Station_Id, SUM(TIMESTAMPDIFF(HOUR, Start_Time, End_Time)) AS Total_Operating_Hours FROM StationSessions WHERE Rest_Hours > 24 AND Station_Id NOT IN (SELECT Station_Id FROM charging_stations WHERE Is_24_Hours = 1) GROUP BY Station_Id HAVING SUM(TIMESTAMPDIFF(HOUR, Start_Time, End_Time)) > 72",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 104,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['lunar gravity 1.625 m/s²', 'centripetal force equation (F = mω²r)', 'centrifuge rotation speed (ω)'], 'relations': ['force_equilibrium (ω²r ≥ lunar gravity)', 'equation_to_angular_velocity (ω = √(g/r))'], 'intent': 'calculate_angular_velocity_for_centrifuge', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1.625], 'units': {'gravity': 'm/s²', 'angular_velocity': 'rad/s (derived from formula ω = √(g/r))', 'radius': 'meters (required for explicit calculation)'}, 'foreign_keys': [], 'primary_keys': [], 'tableinfo': 'This sql query does not need table and columns information as it is about mathematical calculations.'}\nA hypothetical reasoning question is as follows:\nAssuming the construction of a lunar charging station (gravity 1.625 m/s²), calculate the required centrifuge rotation speed for stable storage of liquid electrolyte (centripetal force F=mω²r ≥ lunar gravity).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SQRT(1.625 / 2) AS ω_min_rads, SQRT(1.625 / 2) * 60 / (2 * PI()) AS Critical_RPM, (1200 * (1.625 / 2) * POW(2, 3)) / 3 AS Material_Stress, CASE WHEN (1200 * (1.625 / 2) * POW(2, 3)) / 3 > 500e6 THEN '超限' ELSE '安全' END AS Safety_Status",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 105,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Tesla Model S', 'vehicle ID 1', '2023-10-01', 'battery charged from 20% to 80%', 'battery capacity 100kWh'], 'relations': ['vehicle_id_to_charging_record (1 → charging_records)', 'battery_capacity_to_efficiency (100kWh → theoretical energy calculation)', 'percentage_difference (ΔSOC=60%)'], 'intent': 'calculate_energy_conversion_efficiency', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [20, 80, 100], 'units': {'battery_capacity': 'kWh', 'percentages': '% (battery state-of-charge)', 'efficiency': 'unitless ratio (actual/theoretical)', 'conversion': 'ΔSOC = 60% (80-20), theoretical_energy = 100kWh * 0.6 = 60kWh'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}], 'new_energy_vehicles.charging_records': [{'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}, {'column': 'Initial_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电开始时的电池百分比', 'examples': ['20.0', '15.0', '10.0', '25.0', '30.0']}, {'column': 'Final_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电结束时的电池百分比', 'examples': ['80.0', '85.0', '70.0', '75.0', '30.0']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}]}}\nA physical knowledge question is as follows:\nCompute the energy conversion efficiency (actual energy charged / theoretical energy charged) for the Tesla Model S with vehicle ID 1 during its charging process on 2023-10-01, where the battery was charged from 20% to 80%, given that the battery capacity is 100kWh.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Energy_Consumed_Kwh / (100 * (Final_Battery_Percentage - Initial_Battery_Percentage) / 100) AS efficiency FROM charging_records WHERE Vehicle_Id = 1 AND DATE(Start_Time) = '2023-10-01';",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 106,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging stations', 'charging efficiency', 'charging records'], 'relations': ['station_to_records (Station_Id → charging_records)', 'efficiency_calculation (total_energy / total_time)'], 'intent': 'calculate_and_rank_charging_efficiency', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5], 'units': {'energy': 'kWh (kilowatt-hour)', 'time': 'hours (calculated from Start_Time/End_Time timestamps)', 'efficiency': 'kWh/hour (implied by calculation)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电站ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'End_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电结束时间', 'examples': ['2023-10-01 12:30:00']}]}}\nA mathematical logic question is as follows:\nCalculate the charging efficiency (total charging amount / total charging time) for each charging station, and rank the top 5 by efficiency from highest to lowest.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT cs.Station_Name, SUM(cr.Energy_Consumed_Kwh) / SUM(TIMESTAMPDIFF(HOUR, cr.Start_Time, cr.End_Time)) AS efficiency FROM charging_records cr JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id GROUP BY cs.Station_Id ORDER BY efficiency DESC LIMIT 5;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 107,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicle', 'charging station', 'rainy weather', 'fast charging'], 'relations': ['charging_record_to_vehicle (charging_records.Vehicle_Id → vehicles.Vehicle_Id)', 'charging_record_to_station (charging_records.Station_Id → charging_stations.Station_Id)', \"weather_condition_filter (Weather_Conditions = 'rainy')\", \"charging_type_filter (Charging_Type = 'fast charging')\"], 'intent': 'find_vehicle_station_pairs_with_conditions', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'weather': 'categorical (rainy/other)', 'charging_type': 'categorical (fast charging/other)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电站ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Weather_Conditions', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '天气情况', 'examples': ['Sunny', 'Cloudy', 'Rainy', 'Clear', 'Foggy']}, {'column': 'Charging_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电类型（如：快充、慢充）', 'examples': ['Fast', 'Ultra-Fast', 'Standard']}], 'new_energy_vehicles.charging_stations': [{'column': 'Station_Name', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电站名称', 'examples': ['SuperCharge Station 1', 'NIO Power Station 1', 'BYD Charging Hub', 'Xpeng Charging Point', 'Li Auto Charging Station']}]}}\nA common sense reasoning question is as follows:\nFind the vehicle IDs and their corresponding charging station names where the vehicles were charged in rainy weather and the charging type was 'fast charging'.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT cr.Vehicle_Id, cs.Station_Name FROM charging_records cr JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id WHERE cr.Weather_Conditions = 'Rainy' AND cr.Charging_Type = 'Fast';",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 108,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging station with 1000 kW speed', '150 kWh battery', '5 minutes charging time', 'current intensity (A)'], 'relations': ['power_to_energy (1000 kW × time → energy)', 'battery_capacity_requirement (150 kWh)', 'current_calculation (I = P / V)'], 'intent': 'calculate_required_current_and_feasibility', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1000, 150, 5], 'units': {'power': 'kW (kilowatts)', 'energy': 'kWh (kilowatt-hours)', 'time': 'minutes → hours (conversion: 5 minutes = 0.0833 hours)', 'current': 'A (Amperes, requires voltage assumption)', 'voltage_assumption': '800 V (typical for high-speed EV systems)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}], 'new_energy_vehicles.charging_stations': [{'column': 'Charging_Speed_Kw', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '充电速度（千瓦）', 'examples': ['120.0', '150.0', '100.0', '90.0', '80.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a charging station has a charging speed of 1000 kW (far exceeding the normal value), calculate the required current intensity to charge a vehicle with a battery capacity of 150 kWh from 0% to 100% in 5 minutes, and discuss the physical feasibility of this assumption.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1000 * 1000 / 400 AS current_strength;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 109,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicle ID 5 (Li ONE)', 'descent of 30 meters', 'energy recovery efficiency 70%', 'gravitational acceleration 9.81 m/s²', 'actual energy consumption', '15% threshold'], 'relations': ['vehicle_to_weight (vehicle ID 5 → vehicles.Weight_Kg)', 'elevation_to_potential_energy (30m → mgh calculation)', 'regenerative_energy (70% efficiency → energy recovery)', 'threshold_comparison (regenerative_energy → 15% of actual energy consumption)'], 'intent': 'calculate_regenerative_braking_energy_and_compare_to_threshold', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [30, 70, 9.81, 15], 'units': {'altitude': 'm (meters)', 'weight': 'kg (kilograms)', 'acceleration': 'm/s² (meters per second squared)', 'energy': 'kWh (kilowatt-hours)', 'efficiency': '% (percentage)'}, 'foreign_keys': [{'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Weight_Kg', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '车辆重量（千克）', 'examples': ['2100.0', '2200.0', '2000.0', '1900.0', '2300.0']}], 'new_energy_vehicles.driving_records': [{'column': 'Record_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '驾驶记录唯一标识', 'examples': ['1', '2', '55', '3', '4']}, {'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Elevation_Loss_M', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '海拔下降高度（米）', 'examples': ['100.0', '80.0', '50.0', '30.0', '10.0']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['30.0', '25.0', '20.0', '15.0', '10.0']}, {'column': 'End_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '驾驶结束时间', 'examples': ['2023-10-01 10:00:00']}]}}\nA physical knowledge question is as follows:\nCalculate the regenerative braking energy generated during the descent of 30 meters in altitude for vehicle ID 5 (Li ONE) on October 5, 2023, assuming an energy recovery efficiency of 70% and gravitational acceleration of 9.81 m/s². Then verify whether this value exceeds 15% of its actual energy consumption.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (0.7 * (2300 * 9.81 * 30) / 3600000) AS regenerative_energy_kwh, Energy_Consumed_Kwh, CASE WHEN (0.7 * (2300 * 9.81 * 30) / 3600000) > Energy_Consumed_Kwh * 0.15 THEN 1 ELSE 0 END AS is_over_15percent FROM driving_records dr JOIN vehicles v ON dr.Vehicle_Id = v.Vehicle_Id WHERE dr.Vehicle_Id = 5 AND DATE(dr.Start_Time) = '2023-10-05';",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 110,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"charging stations\", \"operators\", \"charging records\", \"nighttime period (20:00-06:00)\"],\n  \"relations\": [\n    \"station_to_operator (charging_stations.Station_Id → charging_stations.Operator)\",\n    \"record_to_station (charging_records.Station_Id → charging_stations.Station_Id)\",\n    \"charging_time_to_period (Start_Time/End_Time ∈ nighttime period)\"\n  ],\n  \"intent\": \"calculate_efficiency_index_and_rank_operators\",\n  \"reasoning_type\": \"mathematical logic reasoning\",\n  \"numerical_values\": [20, 6],  // Start (20:00) and end (06:00) of nighttime period\n  \"units\": {\n    \"energy\": \"kWh\",\n    \"time\": \"hours\",\n    \"coefficient\": \"unitless (proportion of nighttime charging)\",\n    \"formula_units\": \"Efficiency Index = (kWh / charging_piles) * (1 + unitless)\"\n  },\n  \"required_tables\": [\"charging_records\", \"charging_stations\"],\n  \"required_fields\": [\n    \"charging_stations.Station_Id\",\n    \"charging_stations.Operator\",\n    \"charging_stations.Number_Of_Chargers\",\n    \"charging_records.Station_Id\",\n    \"charging_records.Start_Time\",\n    \"charging_records.End_Time\",\n    \"charging_records.Energy_Consumed_Kwh\"\n  ]\n}\nA mathematical logic question is as follows:\nCalculate the efficiency index of charging stations for each operator ((total charging volume / number of charging piles) * (1 + nighttime operation coefficient)), where the nighttime operation period is defined as 20:00-06:00, and rank the top 3 in descending order by the index value.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Operator, (SUM(Energy_Consumed_Kwh)/MAX(Number_Of_Chargers)) * (1 + SUM(CASE WHEN HOUR(Start_Time) >=20 OR HOUR(Start_Time) <6 THEN Energy_Consumed_Kwh ELSE 0 END)/SUM(Energy_Consumed_Kwh)) AS efficiency_index FROM charging_records cr JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id GROUP BY Operator ORDER BY efficiency_index DESC LIMIT 3;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 111,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicle models', 'four-wheel drive system', 'autonomous driving', 'rainy weather', 'charging stations', 'canopies'], 'relations': ['vehicle_to_drivetrain (models → four-wheel drive)', 'vehicle_to_autonomy (models → autonomous support)', 'vehicle_to_driving_records (models → driving performance)', 'vehicle_to_charging_stations (models → charging infrastructure)', 'charging_station_to_canopy (stations → Is_Covered)'], 'intent': 'filter_vehicle_models_with_technical_conditions_and_infrastructure_association', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [500, 80], 'units': {'distance': 'km (kilometers)', 'speed': 'km/h (kilometers per hour)', 'weather_condition': 'rainy (filter criteria)'}, 'foreign_keys': [{'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}, {'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '车型', 'examples': ['Model S', 'ET7', 'Han EV', 'P7', 'Li ONE']}, {'column': 'Drivetrain', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '驱动类型（如：前驱、后驱、四驱）', 'examples': ['AWD', 'RWD', 'FWD', 'PHEV']}, {'column': 'Is_Autonomous', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否支持自动驾驶', 'examples': ['1', '0']}, {'column': 'Range_Km', 'type': 'INTEGER', 'primary_key': False, 'comment': '续航里程（公里）', 'examples': ['600', '700', '550', '500', '180']}], 'new_energy_vehicles.driving_records': [{'column': 'Weather_Conditions', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '天气情况', 'examples': ['Sunny', 'Cloudy', 'Rainy', 'Clear', 'Foggy']}, {'column': 'Average_Speed_Kmh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '平均速度（公里/小时）', 'examples': ['75.0', '60.0', '50.0', '40.0', '30.0']}], 'new_energy_vehicles.charging_stations': [{'column': 'Is_Covered', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否有顶棚', 'examples': ['1', '0']}]}}\nA common sense reasoning question is as follows:\nFind vehicle models that meet all of the following conditions: \n1. Mileage > 500km  \n2. Equipped with a four-wheel drive system  \n3. Supports autonomous driving  \n4. Average speed in rainy weather > 80km/h  \nand associate them with whether their charging stations are equipped with canopies.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT v.Model, MAX(cs.Is_Covered) AS has_covered FROM vehicles v JOIN driving_records dr ON v.Vehicle_Id = dr.Vehicle_Id JOIN charging_records cr ON dr.Vehicle_Id = cr.Vehicle_Id JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id WHERE v.Range_Km > 500 AND v.Drivetrain = 'AWD' AND v.Is_Autonomous = 1 AND dr.Weather_Conditions IN ('Rainy','Cloudy') GROUP BY v.Model HAVING AVG(dr.Average_Speed_Kmh) > 80;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 112,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['supercharging station power capacity 50 MW', '100 vehicles', 'battery capacity 200 kWh per vehicle', 'charging time 3 minutes', 'ambient temperature -50°C'], 'relations': ['power_capacity_to_total_energy (50 MW → total energy for 3 minutes)', 'vehicle_count_to_total_energy (100 vehicles × 200 kWh = 20,000 kWh)', 'charging_time_to_power_requirement (20,000 kWh ÷ 0.05 hours = 400 MW)', 'temperature_to_cooling_load (-50°C ambient → thermal gradient for heat dissipation)', 'material_melting_point_to_cooling_system (material constraints at high ΔT)'], 'intent': 'calculate_cooling_system_heat_dissipation_and_material_constraints', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [50, 100, 200, 3, -50], 'units': {'power': 'MW (megawatts) / kW (kilowatts)', 'energy': 'kWh (kilowatt-hours)', 'time': 'minutes → hours (conversion: 3/60 = 0.05 hours)', 'temperature': '°C (Celsius)', 'conversion': '1 MW = 1000 kW; 1 vehicle battery = 200 kWh; ΔT = system temperature - (-50°C)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.charging_stations': [{'column': 'Charging_Speed_Kw', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '充电速度（千瓦）', 'examples': ['120.0', '150.0', '100.0', '90.0', '80.0']}, {'column': 'Number_Of_Chargers', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电桩数量', 'examples': ['10', '8', '12', '6', '4']}], 'new_energy_vehicles.vehicles': [{'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}], 'new_energy_vehicles.charging_records': [{'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a supercharging station has a power capacity of 50 MW (equivalent to a single nuclear power plant unit), and it simultaneously charges 100 vehicles with a battery capacity of 200 kWh each in an ambient temperature of -50°C, calculate the required heat dissipation by the cooling system to fully charge all vehicles within 3 minutes, and discuss the material melting point constraints.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (100 * 200 * 3600) / 180 - (100 * 200 * 2.1 * 50) AS required_cooling_kj",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 113,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"NIO ET7\", \"Vehicle ID 2\", \"2023-10-02\", \"65% regenerative braking efficiency\", \"2 m/s² mean deceleration\"],\n  \"relations\": [\n    \"vehicle_to_driving_records (Vehicle ID 2 → driving_records)\",\n    \"energy_recovery_to_range_extension (KERS contribution rate)\",\n    \"kinetic_energy_to_deceleration (ΔKE ∝ deceleration²)\",\n    \"charging_records_verification (energy conservation deviation correlation)\"\n  ],\n  \"intent\": \"calculate_kers_contribution_to_range_and_verify_with_charging_data\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [65, 2, 2023, 10, 02],\n  \"units\": {\n    \"regenerative_efficiency\": \"% (percentage)\",\n    \"deceleration\": \"m/s² (meters per second squared)\",\n    \"time\": \"YYYY-MM-DD (date format)\",\n    \"energy\": \"kWh (kilowatt-hours)\",\n    \"distance\": \"km (kilometers)\"\n  },\n  \"required_tables\": [\"driving_records\", \"charging_records\", \"vehicles\"],\n  \"required_fields\": [\n    \"driving_records.Vehicle_Id\",\n    \"driving_records.Record_Id\",\n    \"driving_records.Start_Time\",\n    \"driving_records.End_Time\",\n    \"driving_records.Distance_Km\",\n    \"driving_records.Energy_Consumed_Kwh\",\n    \"driving_records.Road_Type\",\n    \"driving_records.Weather_Conditions\",\n    \"charging_records.Vehicle_Id\",\n    \"charging_records.Record_Id\",\n    \"charging_records.Start_Battery_Percentage\",\n    \"charging_records.Final_Battery_Percentage\",\n    \"charging_records.Energy_Consumed_Kwh\",\n    \"vehicles.Vehicle_Id\",\n    \"vehicles.Battery_Capacity_Kwh\",\n    \"vehicles.Weight_Kg\"\n  ]\n}\nA physical knowledge question is as follows:\nCalculate the actual contribution rate of the kinetic energy recovery system to the range extension for the NIO ET7 with vehicle ID 2 during urban road driving on 2023-10-02 (given: regenerative braking efficiency of 65%, mean vehicle deceleration of 2 m/s²), and correlate with charging records to verify energy conservation deviation.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (0.65 * (2200 * POWER(60/3.6, 2) / 2) / 3600) AS regenerated_kwh, dr.Energy_Consumed_Kwh, cr.Energy_Consumed_Kwh AS charged_kwh, ((0.65 * (2200 * POWER(60/3.6, 2) / 2) / 3600) / dr.Energy_Consumed_Kwh) * 100 AS contribution_rate FROM driving_records dr JOIN vehicles v ON dr.Vehicle_Id = v.Vehicle_Id JOIN charging_records cr ON dr.Vehicle_Id = cr.Vehicle_Id AND DATE(cr.Start_Time) = '2023-10-02' WHERE dr.Vehicle_Id = 2 AND dr.Road_Type = 'City' AND DATE(dr.Start_Time) = '2023-10-02';",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 114,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging station operation health index', 'peak hours charging proportion', 'revenue per unit time', 'charging station'], 'relations': ['charging_station_to_records (Station_Id → charging_records)', 'peak_hours_volume (proportion calculation)', 'revenue_time_ratio (total revenue / total time)', 'health_index_formula (0.4 * peak_proportion + 0.6 * revenue_ratio)'], 'intent': 'calculate_charging_station_health_index_and_filter', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.4, 0.6, 0.7], 'units': {'energy': 'kWh', 'cost': 'USD', 'time': 'hours (from timestamp difference)', 'index': 'unitless'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电站ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'End_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电结束时间', 'examples': ['2023-10-01 12:30:00']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}, {'column': 'Cost_Usd', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '充电费用（美元）', 'examples': ['15.0', '8.0', '8.4', '4.4', '500.0']}], 'new_energy_vehicles.charging_stations': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '充电站唯一标识', 'examples': ['1', '2', '3', '4', '5']}]}}\nA mathematical logic question is as follows:\nBuild the charging station operation health index: ((Proportion of charging volume during peak hours × 0.4) + (Revenue per unit time × 0.6)), and filter stations with index values > 0.7.\nyour response just have a SQL without anything.\n",
        "solution": "WITH peak_energy AS (SELECT Station_Id, SUM(CASE WHEN HOUR(Start_Time) BETWEEN 7 AND 9 OR HOUR(Start_Time) BETWEEN 17 AND 19 THEN Energy_Consumed_Kwh ELSE 0 END) AS peak_energy, SUM(Energy_Consumed_Kwh) AS total_energy, SUM(Cost_Usd) AS total_revenue, SUM(TIMESTAMPDIFF(HOUR, Start_Time, End_Time)) AS total_hours FROM charging_records GROUP BY Station_Id) SELECT cs.Station_Name, (peak_energy/total_energy*0.4 + (total_revenue/total_hours)*0.6) AS health_index FROM peak_energy pe JOIN charging_stations cs ON pe.Station_Id = cs.Station_Id WHERE (peak_energy/total_energy*0.4 + (total_revenue/total_hours)*0.6) > 0.7;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 115,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicles', 'Battery_Health', 'Charging_Type', 'Temperature_Celsius'], 'relations': ['vehicle_to_battery_health (vehicles → Battery_Health)', 'vehicle_to_charging_records (vehicles ↔ charging_records)', 'charging_record_to_charging_type (charging_records → Charging_Type)', 'charging_record_to_temperature (charging_records → Temperature_Celsius)'], 'intent': 'identify_vehicles_with_high_battery_cycle_fast_charging_temperature', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [500, 70, 35], 'units': {'battery_cycle_count': 'cycles (inferred from Battery_Health field)', 'charging_proportion': '% (percentage of fast charging records)', 'temperature': '°C (Celsius)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Battery_Health', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['100.0', '88.0', '85.0', '90.0', '95.0']}], 'new_energy_vehicles.charging_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Charging_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电类型（如：快充、慢充）', 'examples': ['Fast', 'Ultra-Fast', 'Standard']}, {'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}]}}\nA common sense reasoning question is as follows:\nIdentify vehicles that meet the following criteria simultaneously:  \n① Battery cycle count > 500,  \n② Long-term use of fast charging (proportion > 70%),  \n③ Operating in regions with ambient temperature > 35°C\nyour response just have a SQL without anything.\n",
        "solution": "WITH charge_cycles AS (SELECT Vehicle_Id, SUM((Final_Battery_Percentage - Initial_Battery_Percentage)/100) AS cycles FROM charging_records GROUP BY Vehicle_Id), fast_charge_stats AS (SELECT Vehicle_Id, COUNT(CASE WHEN Charging_Type = 'Fast' THEN 1 END)*1.0/COUNT(*) AS fast_ratio FROM charging_records GROUP BY Vehicle_Id), high_temp_records AS (SELECT DISTINCT Vehicle_Id FROM charging_records WHERE Temperature_Celsius > 35) SELECT v.Vehicle_Id, v.Model FROM vehicles v JOIN charge_cycles cc ON v.Vehicle_Id = cc.Vehicle_Id JOIN fast_charge_stats fcs ON v.Vehicle_Id = fcs.Vehicle_Id JOIN high_temp_records htr ON v.Vehicle_Id = htr.Vehicle_Id WHERE cc.cycles > 500 AND fcs.fast_ratio > 0.7;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 116,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"wireless charging road\", \"power density 500kW/m²\", \"electromagnetic radiation intensity\", \"ICNIRP limit\"],\n  \"relations\": [\"power_density_to_radiation_intensity (500kW/m² → radiation intensity relationship)\", \"radiation_limit_comparision (radiation intensity > 100×ICNIRP limit)\", \"wavelength_calculation (frequency ↔ wavelength conversion)\"],\n  \"intent\": \"calculate_wavelength_range_from_radiation_threshold\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [500, 100],\n  \"units\": {\n    \"power_density\": \"kW/m² → W/m² conversion required\",\n    \"radiation_limit\": \"ICNIRP reference values (electric/magnetic field strength)\",\n    \"wavelength\": \"meters (λ = c/f formula)\",\n    \"conversion\": \"1 kW/m² = 1000 W/m²\"\n  },\n  \"required_tables\": [],\n  \"required_fields\": []\n}\n\nNote: The provided database (new_energy_vehicles) contains no tables/columns related to electromagnetic radiation physics, ICNIRP standards, or wavelength calculations. This query requires physical science domain knowledge beyond the available database schema.\nA hypothetical reasoning question is as follows:\nAssuming a wireless charging road achieves a power density of 500kW/m², calculate the wavelength range when the electromagnetic radiation intensity exceeds 100 times the ICNIRP limit.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 500000/(4*PI()*POWER(0.1,2)) AS radiation_intensity, CASE WHEN 500000/(4*PI()*POWER(0.1,2)) > 100*87 THEN '需讨论热效应' ELSE '安全' END AS safety_status;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 117,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Tesla Model S', 'driving records October 2023', 'summer air density 1.204 kg/m³', 'autumn air density 1.225 kg/m³', 'charging station elevation data'], 'relations': ['vehicle_to_driving_records (Tesla Model S → driving_records)', 'air_density_difference (Δρ=0.021 kg/m³)', 'elevation_correlation (driving elevation gain/loss ↔ charging station elevation)', 'time_filter (October 2023)'], 'intent': 'calculate_energy_difference_due_to_air_density', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1.204, 1.225, 2023, 10], 'units': {'air_density': 'kg/m³', 'energy_consumption': 'kWh (from driving_records.Energy_Consumed_Kwh)', 'elevation': 'meters (from driving_records.Elevation_Gain_M/Loss_M)', 'time': 'YYYY-MM format (October 2023)'}, 'foreign_keys': [{'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}, {'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Manufacturer', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '制造商', 'examples': ['Tesla', 'NIO', 'BYD', 'Xpeng', 'Li Auto']}, {'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '车型', 'examples': ['Model S', 'ET7', 'Han EV', 'P7', 'Li ONE']}], 'new_energy_vehicles.driving_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '驾驶开始时间', 'examples': ['2023-10-01 08:00:00']}, {'column': 'End_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '驾驶结束时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['30.0', '25.0', '20.0', '15.0', '10.0']}, {'column': 'Elevation_Gain_M', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '海拔上升高度（米）', 'examples': ['200.0', '150.0', '100.0', '50.0', '20.0']}, {'column': 'Elevation_Loss_M', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '海拔下降高度（米）', 'examples': ['100.0', '80.0', '50.0', '30.0', '10.0']}], 'new_energy_vehicles.charging_stations': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '充电站唯一标识', 'examples': ['1', '2', '3', '4', '5']}]}}\nA physical knowledge question is as follows:\nCalculate the energy consumption difference caused by air density variation in all driving records of Tesla Model S in October 2023 (summer air density 1.204 kg/m³, autumn 1.225 kg/m³), requiring correlation with charging station elevation data to validate the theoretical model.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT dr.Record_Id, 0.5 * (1.225 - 1.204) * 0.28 * 2.5 * POWER((dr.Average_Speed_Kmh / 3.6), 3) * (dr.Distance_Km / (dr.Average_Speed_Kmh / 3.6)) / 3600 AS energy_difference_kwh FROM driving_records dr JOIN vehicles v ON dr.Vehicle_Id = v.Vehicle_Id JOIN charging_records cr ON dr.Vehicle_Id = cr.Vehicle_Id JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id WHERE v.Model = 'Model S' AND YEAR(dr.Start_Time) = 2023 AND MONTH(dr.Start_Time) = 10;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 118,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicle battery health degradation', 'cubic spline interpolation', 'charging cycles', 'second derivative anomaly threshold 0.05'], 'relations': ['vehicle_to_charging_records (Vehicle_Id → charging_records)', 'battery_capacity_to_cycles (Battery_Capacity_Kwh → charging_cycle_count)', 'anomaly_detection (second_derivative > 0.05)'], 'intent': 'construct_battery_degradation_curve_with_anomaly_detection', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.05], 'units': {'battery_capacity': 'Kwh (Battery_Capacity_Kwh)', 'cycles': 'unitless (charging_cycle_count)', 'second_derivative': 'capacity/cycle² (threshold 0.05)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}], 'new_energy_vehicles.charging_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Record_Id (for cycle counting)'}]}}\nA mathematical logic question is as follows:\nConstruct a battery health degradation curve: use cubic spline interpolation to fit the variation of each vehicle's battery capacity with the number of charging cycles, and detect anomaly points where the second derivative is greater than 0.05.\nyour response just have a SQL without anything.\n",
        "solution": "WITH charge_cycles AS (SELECT cr.Vehicle_Id, SUM((cr.Final_Battery_Percentage - cr.Initial_Battery_Percentage) / 100) AS cycles, AVG(v.Battery_Capacity_Kwh - (cr.Energy_Consumed_Kwh / ((cr.Final_Battery_Percentage - cr.Initial_Battery_Percentage) / 100))) AS capacity FROM charging_records cr JOIN vehicles v ON cr.Vehicle_Id = v.Vehicle_Id GROUP BY cr.Vehicle_Id) SELECT Vehicle_Id, cycles, capacity FROM charge_cycles WHERE capacity > 0.05;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 119,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicles', 'regular tires', 'snowy conditions', 'winter tires', 'ABS system abnormal trigger records'], 'relations': ['vehicle_to_driving_record (Vehicle_Id)', \"driving_record_has_snowy_conditions (Weather_Conditions containing 'snow')\", \"vehicle_uses_regular_tires_in_snow (Tire_Type ≠ 'winter')\", 'vehicle_to_ABS_abnormal_triggers (Vehicle_Id)'], 'intent': 'find_vehicles_using_regular_tires_in_snowy_conditions_and_correlate_with_ABS_anomalies', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': [{'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Tire_Type (assumed missing field)'}], 'new_energy_vehicles.driving_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Weather_Conditions', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '天气情况', 'examples': ['Sunny', 'Cloudy', 'Rainy', 'Clear', 'Foggy']}, {'column': 'ABS_Trigger_Status (assumed missing field)'}]}}\nA common sense reasoning question is as follows:\nFind vehicles that use regular tires to drive in snowy conditions (weather identifier contains 'snow') without switching to winter tires, and correlate them with their ABS system abnormal trigger records.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT DISTINCT dr.Vehicle_Id FROM driving_records dr WHERE dr.Weather_Conditions LIKE '%snow%';",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 120,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['superconducting charging cable', '100 trucks', '400 kWh battery capacity', 'equatorial region at noon', 'geomagnetic field', 'superconductor quenching'], 'relations': ['cable_properties (zero resistance, critical temperature 200K)', 'vehicle_energy_capacity (100 trucks × 400 kWh)', 'eddy_current_magnetic_relation (geomagnetic field deflection → eddy current losses)', 'quenching_condition (critical temperature 200K → superconducting state collapse)'], 'intent': 'calculate_eddy_current_losses_and_evaluate_quenching_risk', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [100, 400, 200], 'units': {'energy': 'kWh (vehicles.Battery_Capacity_Kwh)', 'temperature': 'K (critical temperature 200K)', 'magnetic_field_strength': 'Tesla (external parameter, not in database)', 'eddy_current_loss': 'W (requires calculation with magnetic field strength and cable length)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}], 'new_energy_vehicles.charging_stations': [{'column': 'Location', 'type': 'NULL', 'primary_key': False, 'comment': '充电站地理位置（经纬度）', 'examples': [\"b'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00\\\\xf4lV}\\\\xae\\\\x06A@A\\\\x82\\\\xe2\\\\xc7\\\\x98\\\\x8f]\\\\xc0'\", \"b'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00\\\\x97\\\\xff\\\\x90~\\\\xfb:?@_\\\\x07\\\\xce\\\\x19Q^^@'\", 'b\\'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00h\"lxze6@^\\\\xbaI\\\\x0c\\\\x02\\\\x87\\\\\\\\@\\'', \"b'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00\\\\xe2\\\\xe9\\\\x95\\\\xb2\\\\x0c!7@\\\\xfeC\\\\xfa\\\\xed\\\\xebP\\\\\\\\@'\", \"b'\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x01\\\\x00\\\\x00\\\\x00\\\\x88\\\\x85Z\\\\xd3\\\\xbc\\\\xf3C@\\\\xfc\\\\x18s\\\\xd7\\\\x12\\\\x1a]@'\"]}]}}\nA hypothetical reasoning question is as follows:\nAssuming a superconducting charging cable achieves zero resistance (critical temperature of 200K), charging 100 trucks (each with 400 kWh) simultaneously at noon in the equatorial region, calculate the eddy current losses caused by geomagnetic field deflection and discuss the risk of superconductor quenching.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT '零电阻下理论涡流损耗为0，但地磁场变化可能导致超导体失超。' AS analysis_result;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 121,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['BYD Han EV', 'Vehicle ID 3', '2023-10-03', '2mm water film thickness', '6mm tire groove depth', '40% friction coefficient decrease'], 'relations': ['vehicle_to_driving_records (Vehicle ID 3 → driving_records)', 'hydroplaning_energy_calculation (water film thickness, tire groove depth, friction coefficient → energy loss)', 'deviation_verification (calculated_energy - actual_energy_consumption → deviation_rate)'], 'intent': 'calculate_hydroplaning_energy_impact_and_deviation_analysis', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [2, 6, 40], 'units': {'water_thickness': 'mm', 'tire_depth': 'mm', 'friction_decrease': '%', 'energy_consumption': 'kWh (from driving_records.Energy_Consumed_Kwh)', 'conversion': 'hydroplaning energy = base energy × (1 + friction_decrease_ratio)'}, 'foreign_keys': [{'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '车型', 'examples': ['Model S', 'ET7', 'Han EV', 'P7', 'Li ONE']}, {'column': 'Weight_Kg', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '车辆重量（千克）', 'examples': ['2100.0', '2200.0', '2000.0', '1900.0', '2300.0']}, {'column': 'Motor_Power_Kw', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电机功率（千瓦）', 'examples': ['500.0', '480.0', '360.0', '300.0', '240.0']}], 'new_energy_vehicles.driving_records': [{'column': 'Record_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '驾驶记录唯一标识', 'examples': ['1', '2', '55', '3', '4']}, {'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '驾驶开始时间', 'examples': ['2023-10-01 08:00:00']}, {'column': 'End_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '驾驶结束时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['30.0', '25.0', '20.0', '15.0', '10.0']}, {'column': 'Weather_Conditions', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '天气情况', 'examples': ['Sunny', 'Cloudy', 'Rainy', 'Clear', 'Foggy']}, {'column': 'Distance_Km', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '行驶距离（公里）', 'examples': ['150.0', '120.0', '100.0', '80.0', '60.0']}]}}\nA physical knowledge question is as follows:\nCalculate the additional energy consumption caused by tire hydroplaning effect for BYD Han EV with vehicle ID 3 during rainy weather on 2023-10-03 (with a 2mm water film thickness, 6mm tire groove depth, and a 40% decrease in friction coefficient), and verify the deviation rate from the actual energy consumption record.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT dr.Energy_Consumed_Kwh, (0.6*0.4*2000*9.81*dr.Distance_Km/3600) AS theoretical_loss, (dr.Energy_Consumed_Kwh - (0.6*0.4*2000*9.81*dr.Distance_Km/3600))/dr.Energy_Consumed_Kwh*100 AS deviation_rate FROM driving_records dr JOIN vehicles v ON dr.Vehicle_Id = v.Vehicle_Id WHERE dr.Vehicle_Id = 3 AND DATE(dr.Start_Time) = '2023-10-03' AND dr.Weather_Conditions = 'Rainy';",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 122,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging temperature >25°C', 'nighttime fast charging', 'risk value >0.4'], 'relations': ['station_to_records (Station_Id → charging_records)', 'risk_formula (0.4×temp_percentage + 0.6×night_fast_percentage)', 'threshold_filter (risk_value > 0.4)'], 'intent': 'calculate_and_filter_risk_values', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [25, 0.4, 0.6, 0.4], 'units': {'temperature': '°C (Celsius)', 'percentages': 'unitless (proportions)', 'weights': 'unitless coefficients', 'risk_value': 'unitless threshold'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'charging_stations', 'pk_column': 'Station_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '充电站ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}, {'column': 'Charging_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电类型（如：快充、慢充）', 'examples': ['Fast', 'Ultra-Fast', 'Standard']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}], 'new_energy_vehicles.charging_stations': [{'column': 'Station_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '充电站唯一标识', 'examples': ['1', '2', '3', '4', '5']}]}}\nA mathematical logic question is as follows:\nBuilding a charging station risk warning model: (percentage of charging temperatures >25°C × 0.4 + percentage of nighttime fast charging × 0.6), and filtering for stations with risk values >0.4.\nyour response just have a SQL without anything.\n",
        "solution": "WITH risk_data AS (SELECT cs.Station_Id, COUNT(CASE WHEN cr.Temperature_Celsius >25 THEN 1 END)*1.0/COUNT(*)*0.4 + COUNT(CASE WHEN HOUR(cr.Start_Time) BETWEEN 18 AND 23 THEN 1 END)*1.0/COUNT(*)*0.6 AS risk_score FROM charging_records cr JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id GROUP BY cs.Station_Id) SELECT Station_Id, risk_score FROM risk_data WHERE risk_score > 0.4;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 123,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicles', 'battery_health <80%', 'average_speed >80 km/h'], 'relations': ['vehicle_to_battery_health (Vehicle_Id → Battery_Health)', 'vehicle_to_driving_records (Vehicle_Id → driving_records)'], 'intent': 'identify_vehicles_with_battery_health_and_speed_conditions', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [80, 80], 'units': {'battery_health': '% (percentage)', 'average_speed': 'km/h (kilometers per hour)'}, 'foreign_keys': [{'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Battery_Health', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['100.0', '88.0', '85.0', '90.0', '95.0']}], 'new_energy_vehicles.driving_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Average_Speed_Kmh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '平均速度（公里/小时）', 'examples': ['75.0', '60.0', '50.0', '40.0', '30.0']}]}}\nA common sense reasoning question is as follows:\nIdentify vehicles with battery health <80% and average speed >80 km/h\nyour response just have a SQL without anything.\n",
        "solution": "WITH battery_health AS (SELECT cr.Vehicle_Id, (v.Battery_Capacity_Kwh - AVG(cr.Energy_Consumed_Kwh/((cr.Final_Battery_Percentage - cr.Initial_Battery_Percentage +1)/100)))/v.Battery_Capacity_Kwh*100 AS health FROM charging_records cr JOIN vehicles v ON cr.Vehicle_Id = v.Vehicle_Id GROUP BY cr.Vehicle_Id, v.Battery_Capacity_Kwh) SELECT bh.Vehicle_Id FROM battery_health bh JOIN (SELECT Vehicle_Id, AVG(Average_Speed_Kmh) AS avg_speed FROM driving_records GROUP BY Vehicle_Id HAVING avg_speed > 80) dr ON bh.Vehicle_Id = dr.Vehicle_Id WHERE bh.health < 80;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 124,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['quantum charging technology', 'power density 2000 kW/m²', 'thunderstorm weather'], 'relations': ['technology_to_power_density (quantum charging technology → 2000 kW/m²)', 'weather_to_dissipation_rate (thunderstorm weather → energy dissipation)'], 'intent': 'calculate_theoretical_energy_dissipation_rate', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [2000], 'units': {'power_density': 'kW/m² (kilowatts per square meter)', 'energy_dissipation_rate': 'kW (kilowatts) or kWh (kilowatt-hours) (implied by calculation)', 'conversion': 'power density × area = energy dissipation rate (requires area parameter not explicitly provided)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}, {'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'driving_records', 'pk_column': 'Record_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Weather_Conditions', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '天气情况', 'examples': ['Sunny', 'Cloudy', 'Rainy', 'Clear', 'Foggy']}, {'column': 'Charging_Speed_Kw'}, {'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}], 'new_energy_vehicles.driving_records': [{'column': 'Weather_Conditions', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '天气情况', 'examples': ['Sunny', 'Cloudy', 'Rainy', 'Clear', 'Foggy']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the quantum charging technology achieves a power density of 2000 kW/m², calculate the theoretical energy dissipation rate during thunderstorm weather.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (5E-3 * POWER(5E3,2) * 10 * 3600) / NULLIF(2000E3,0) AS energy_loss_rate;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 125,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Tesla Model S', 'highway drives', 'October 2023', 'aerodynamics impact coefficient'], 'relations': ['vehicle_to_driving_records (Model S → driving_records)', 'temporal_filter (October 2023 → driving_records)', 'aerodynamic_compensation (missing crosswind data adjustment)'], 'intent': 'calculate_aerodynamic_impact_on_range', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [10, 2023], 'units': {'distance': 'km (kilometers)', 'speed': 'km/h (kilometers per hour)', 'coefficient': 'unitless (drag coefficient adjustment factor)'}, 'foreign_keys': [{'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Manufacturer', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '制造商', 'examples': ['Tesla', 'NIO', 'BYD', 'Xpeng', 'Li Auto']}, {'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '车型', 'examples': ['Model S', 'ET7', 'Han EV', 'P7', 'Li ONE']}, {'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}], 'new_energy_vehicles.driving_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '驾驶开始时间', 'examples': ['2023-10-01 08:00:00']}, {'column': 'Road_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '道路类型（如：高速、城市道路）', 'examples': ['Highway', 'City', 'Rural', 'Mountain']}, {'column': 'Distance_Km', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '行驶距离（公里）', 'examples': ['150.0', '120.0', '100.0', '80.0', '60.0']}, {'column': 'Average_Speed_Kmh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '平均速度（公里/小时）', 'examples': ['75.0', '60.0', '50.0', '40.0', '30.0']}]}}\nA physical knowledge question is as follows:\nCalculate the actual impact coefficient of aerodynamics on the range mileage for all Tesla Model S highway drives in October 2023 (accounting for compensation due to missing crosswind data)\nyour response just have a SQL without anything.\n",
        "solution": "SELECT dr.Record_Id, 0.5 * 1.225 * 0.24 * 2.34 * (POWER(dr.Average_Speed_Kmh/3.6, 3) - POWER(100/3.6, 3)) * (dr.Distance_Km/(dr.Average_Speed_Kmh/3.6))/3600 AS energy_impact FROM driving_records dr JOIN vehicles v ON dr.Vehicle_Id = v.Vehicle_Id WHERE v.Model = 'Model S' AND dr.Road_Type = 'Highway' AND YEAR(dr.Start_Time) = 2023 AND MONTH(dr.Start_Time) = 10;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 126,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['battery aging model', 'Arrhenius equation', 'capacity decay rate', 'temperature acceleration factor', 'abnormally aging vehicles'], 'relations': ['battery_aging_model → arrhenius_equation (temperature-dependent modeling)', 'capacity_decay_rate ↔ temperature_acceleration_factor (Arrhenius relationship)', 'vehicle_battery_health → anomaly_detection (deviation threshold comparison)'], 'intent': 'battery_aging_model', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['activation_energy (Ea, kJ/mol)', 'temperature_celsius (from charging_records)', 'battery_health_percentage (from vehicles)', 'time_intervals (calculated from timestamps)'], 'units': {'temperature': '°C (Celsius)', 'decay_rate': 'percentage/year', 'activation_energy': 'kJ/mol', 'acceleration_factor': 'unitless', 'time': 'years (calculated from Start_Time/End_Time fields)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}, {'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Battery_Health', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['100.0', '88.0', '85.0', '90.0', '95.0']}, {'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}, {'column': 'Production_Year', 'type': 'YEAR', 'primary_key': False, 'comment': '生产年份', 'examples': ['2022', '2023', '2019', '2021', '2020']}], 'new_energy_vehicles.charging_records': [{'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}], 'new_energy_vehicles.driving_records': [{'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '驾驶开始时间', 'examples': ['2023-10-01 08:00:00']}, {'column': 'End_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '驾驶结束时间', 'examples': ['2023-10-01 10:00:00']}]}}\nA mathematical logic question is as follows:\nBuild a vehicle battery calendar aging model: Fit the capacity decay rate using the Arrhenius equation, calculate the temperature acceleration factor, and detect abnormally aging vehicles.\nyour response just have a SQL without anything.\n",
        "solution": "WITH temp_effect AS (SELECT Vehicle_Id, AVG(1.1*POWER(1.05,(Temperature_Celsius-25)/10)) AS temp_factor FROM charging_records WHERE Temperature_Celsius IS NOT NULL GROUP BY Vehicle_Id) SELECT v.Vehicle_Id, (v.Battery_Capacity_Kwh - AVG(cr.Energy_Consumed_Kwh/((cr.Final_Battery_Percentage - cr.Initial_Battery_Percentage)/100)))/v.Battery_Capacity_Kwh*100 AS capacity_loss FROM charging_records cr JOIN vehicles v ON cr.Vehicle_Id = v.Vehicle_Id JOIN temp_effect te ON v.Vehicle_Id = te.Vehicle_Id GROUP BY v.Vehicle_Id, v.Battery_Capacity_Kwh HAVING capacity_loss > 20;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 127,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['hybrid models', 'charging depth exceeding 90%', 'three consecutive months', 'battery balancing maintenance'], 'relations': ['vehicle_to_charging_records (Vehicle_Id → charging_records)', 'charging_depth_to_percentage (Final_Battery_Percentage > 90%)', 'time_constraint_to_months (3 consecutive months)'], 'intent': 'identify_hybrid_models_with_high_charging_depth_and_no_battery_maintenance', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [90, 3], 'units': {'battery_percentage': '% (percent)', 'time_period': 'months (calendar months)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '车型', 'examples': ['Model S', 'ET7', 'Han EV', 'P7', 'Li ONE']}, {'column': 'Drivetrain', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '驱动类型（如：前驱、后驱、四驱）', 'examples': ['AWD', 'RWD', 'FWD', 'PHEV']}], 'new_energy_vehicles.charging_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Final_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电结束时的电池百分比', 'examples': ['80.0', '85.0', '70.0', '75.0', '30.0']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}]}}\nA common sense reasoning question is as follows:\nIdentify hybrid models with charging depth exceeding 90% for three consecutive months without battery balancing maintenance\nyour response just have a SQL without anything.\n",
        "solution": "WITH deep_charge AS (SELECT Vehicle_Id FROM charging_records WHERE Final_Battery_Percentage > 90 AND Start_Time >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY Vehicle_Id HAVING COUNT(*) > 10) SELECT v.Vehicle_Id FROM vehicles v JOIN deep_charge dc ON v.Vehicle_Id = dc.Vehicle_Id WHERE v.Drivetrain = 'PHEV';",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 128,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"space-based charging station\", \"1 MW laser wireless transmission\", \"low Earth orbit satellite fleets\", \"relativistic effects\", \"Doppler shift compensation\"],\n  \"relations\": [\"laser_transmission_to_satellites\", \"doppler_shift_causality\", \"relativistic_compensation\"],\n  \"intent\": \"calculate_relativistic_doppler_shift_compensation\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [1, 0.1],\n  \"units\": {\n    \"power\": \"MW (megawatts)\",\n    \"loss\": \"% (percentage)\",\n    \"velocity\": \"km/s (kilometers per second, implied by orbital mechanics)\",\n    \"frequency_shift\": \"Hz (hertz, implied by Doppler effect equations)\"\n  },\n  \"required_tables\": [\"orbital_physics_data\", \"laser_transmission_parameters\", \"relativity_compensation_models\"],\n  \"required_fields\": [\n    \"orbital_physics_data.satellite_velocity\",\n    \"orbital_physics_data.earth_rotation_effect\",\n    \"laser_transmission_parameters.base_frequency\",\n    \"laser_transmission_parameters.atmospheric_refraction_index\",\n    \"relativity_compensation_models.gamma_factor\",\n    \"relativity_compensation_models.time_dilation_coefficient\"\n  ]\n}\n\nNote: The required tables and fields do not exist in the provided database schema, which only contains terrestrial electric vehicle charging data. This query requires access to space physics databases containing orbital mechanics parameters, relativistic physics models, and laser transmission characteristics that are not present in the new_energy_vehicles database.\nA hypothetical reasoning question is as follows:\nAssuming a space-based charging station achieves 1 MW laser wireless transmission (atmospheric loss < 0.1%), charging satellite fleets in low Earth orbit, calculate the Doppler shift compensation amount caused by relativistic effects.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 1E6 * 7.8E3 / 3E8 * COS(RADIANS(45)) * SQRT((1 + 7.8E3/3E8)/(1 - 7.8E3/3E8)) AS doppler_shift;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 129,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['NIO ET7', 'vehicle ID 2', 'October 2, 2023', 'heavy rain (15mm/h)', 'standard air density 1.225kg/m³', 'humidity correction factor 0.12'], 'relations': ['vehicle_to_model (vehicle ID 2 → NIO ET7)', 'date_to_weather (October 2, 2023 → heavy rain)', 'air_density_to_energy (air density/humidity → energy consumption)'], 'intent': 'calculate_energy_impact_from_air_density_changes', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [2, 15, 1.225, 0.12], 'units': {'rainfall': 'mm/h (millimeters per hour)', 'air_density': 'kg/m³ (kilograms per cubic meter)', 'energy_consumption': 'kWh (kilowatt-hour, from driving_records.Energy_Consumed_Kwh)', 'humidity_correction': 'dimensionless factor (0.12)'}, 'foreign_keys': [{'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '车型', 'examples': ['Model S', 'ET7', 'Han EV', 'P7', 'Li ONE']}], 'new_energy_vehicles.driving_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '驾驶开始时间', 'examples': ['2023-10-01 08:00:00']}, {'column': 'Weather_Conditions', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '天气情况', 'examples': ['Sunny', 'Cloudy', 'Rainy', 'Clear', 'Foggy']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['30.0', '25.0', '20.0', '15.0', '10.0']}]}}\nA physical knowledge question is as follows:\nCalculate the impact of changes in air density caused by raindrop impacts on energy consumption for the NIO ET7 with vehicle ID 2 while driving during heavy rain (rainfall 15mm/h) on October 2, 2023 (standard air density 1.225kg/m³, humidity correction factor 0.12).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 0.5 * (1.225*(1+0.12*1.5) - 1.225) * 0.28 * 2.5 * POWER(Average_Speed_Kmh/3.6, 3) * (Distance_Km/(Average_Speed_Kmh/3.6))/3600 AS energy_impact FROM driving_records WHERE Vehicle_Id = 2 AND DATE(Start_Time) = '2023-10-02' AND Weather_Conditions LIKE '%Rain%';",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 130,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Vehicle', 'high-temperature charging cycles', 'coolant replacement frequency', 'altitude variation', 'battery expansion records'], 'relations': ['vehicle_to_charging_cycles (Vehicle_Id → charging_records)', 'vehicle_to_altitude (Vehicle_Id → driving_records)', 'vehicle_to_battery_health (Vehicle_Id → vehicles.Battery_Health)', 'thermal_index_formula (index = (high_temp_cycles × coolant_frequency) / (altitude_variation × 0.1 + 1))'], 'intent': 'calculate_thermal_management_index_and_correlate_battery_health', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2.5, 0.1, 1], 'units': {'temperature': '°C (Celsius)', 'altitude_variation': 'meters', 'coolant_frequency': 'unknown_unit (assumed frequency per vehicle)', 'index_threshold': 'dimensionless'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}, {'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}], 'new_energy_vehicles.driving_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Elevation_Gain_M', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '海拔上升高度（米）', 'examples': ['200.0', '150.0', '100.0', '50.0', '20.0']}, {'column': 'Elevation_Loss_M', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '海拔下降高度（米）', 'examples': ['100.0', '80.0', '50.0', '30.0', '10.0']}], 'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Battery_Health', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['100.0', '88.0', '85.0', '90.0', '95.0']}]}}\nA mathematical logic question is as follows:\nConstruct the vehicle 'Thermal Management Performance Index': (Number of high-temperature charging cycles × Coolant replacement frequency) / (Altitude variation × 0.1 + 1), filter vehicles with an index < 2.5 and correlate their battery expansion records.\nyour response just have a SQL without anything.\n",
        "solution": "WITH heat_data AS (SELECT Vehicle_Id, COUNT(CASE WHEN Temperature_Celsius >35 THEN 1 END) AS heat_count, SUM(Elevation_Gain_M)/1000 AS total_elevation FROM charging_records JOIN driving_records USING (Vehicle_Id) GROUP BY Vehicle_Id) SELECT Vehicle_Id, heat_count / (total_elevation*0.1 + 1) AS thermal_index FROM heat_data WHERE heat_count / (total_elevation*0.1 + 1) < 2.5;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 131,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Tesla Model S', 'desert areas (>40°C)', 'initial liquid level 50mm', 'evaporation rate 0.3mm/°C·h'], 'relations': ['model_to_battery_specs (Tesla Model S → Battery_Capacity_Kwh)', 'temperature_to_charging_records (desert temperature → Charging_Records.Temperature_Celsius)', 'evaporation_calculation (50mm - (0.3mm/°C·h × ΔT × time))'], 'intent': 'calculate_electrolyte_evaporation_loss_and_correlate_with_battery_health', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [50, 0.3, 40], 'units': {'temperature': '°C (Celsius)', 'length': 'mm (millimeters)', 'evaporation_rate': 'mm/°C·h (millimeters per degree Celsius per hour)', 'conversion': 'ΔT = Temperature_Celsius - 25°C (standard reference temperature)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '车型', 'examples': ['Model S', 'ET7', 'Han EV', 'P7', 'Li ONE']}, {'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}, {'column': 'Battery_Health', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['100.0', '88.0', '85.0', '90.0', '95.0']}], 'new_energy_vehicles.charging_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}, {'column': 'Charging_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电类型（如：快充、慢充）', 'examples': ['Fast', 'Ultra-Fast', 'Standard']}]}}\nA common sense reasoning question is as follows:\nCalculate the electrolyte evaporation loss for Tesla Model S during consecutive fast charging in desert areas (daytime temperature >40°C), with an initial liquid level height of 50mm and an evaporation rate of 0.3mm/°C·h, and correlate it with abnormal internal resistance increase records.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Vehicle_Id, (0.3*(Temperature_Celsius-25)*TIME_TO_SEC(TIMEDIFF(End_Time, Start_Time))/3600 - 2.1e-4*(Temperature_Celsius-25)*50) AS evaporation_mm FROM charging_records JOIN vehicles USING (Vehicle_Id) WHERE Model = 'Model S' AND Temperature_Celsius >35 AND TIMEDIFF(End_Time, Start_Time) > 0;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 132,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"antimatter energy storage device\", \"energy density 1kg=9×10^17J\", \"Moon colonial base\", \"temperature -180°C\", \"diurnal temperature variations\", \"thermal expansion coefficient 24×10^6/°C\"],\n  \"relations\": [\"device_to_energy_density (storage device → energy density)\", \"temperature_to_expansion_coefficient (temperature variation → thermal expansion coefficient)\"],\n  \"intent\": \"calculate_stress_crack_propagation_rate\",\n  \"reasoning_type\": \"physical knowledge reasoning\",\n  \"numerical_values\": [9e17, -180, 24e6],\n  \"units\": {\n    \"energy_density\": \"J/kg (Joules per kilogram)\",\n    \"temperature\": \"°C (Celsius)\",\n    \"thermal_expansion\": \"/°C (per degree Celsius)\",\n    \"stress_crack_rate\": \"m/s (meters per second, implied by calculation)\"\n  },\n  \"required_tables\": [\"material_stress_properties\", \"thermal_environment_data\", \"structural_engineering_specs\"],\n  \"required_fields\": [\n    \"material_stress_properties.thermal_expansion_coefficient\",\n    \"material_stress_properties.youngs_modulus\",\n    \"material_stress_properties.fracture_toughness\",\n    \"thermal_environment_data.daily_temp_range\",\n    \"structural_engineering_specs.tank_thickness\",\n    \"structural_engineering_specs.safety_factor\"\n  ]\n}\n\nNote: The provided database schema (new_energy_vehicles) contains no relevant tables for this question about antimatter storage tank stress analysis. Required tables/fields for thermal stress calculations are entirely absent from the available database structure.\nA hypothetical reasoning question is as follows:\nAssuming an antimatter energy storage device achieves an energy density of 1kg=9×10^17J, powering a colonial base on the far side of the Moon (temperature -180°C), calculate the stress crack propagation rate in the storage tank caused by diurnal temperature variations (thermal expansion coefficient 24×10^6/°C).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 24e-6 * 200e9 * (ABS(-180 - 100)) * SQRT(PI()*0.01) AS crack_growth_rate;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 133,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['NIO ET7', 'Vehicle ID 2', 'October 2, 2023', 'deceleration 2 m/s²', 'braking duration 3 seconds', '80 daily start-stop cycles'], 'relations': ['vehicle_to_specs (Vehicle ID 2 → vehicles table)', 'date_filtered_records (October 2, 2023 → driving_records)', 'regenerative_energy_theoretical (calculated via physics formulas)', 'actual_charging_comparison (charging_records vs theoretical_value)'], 'intent': 'calculate_regenerative_energy_saved_and_verify_deviation', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [2, 3, 80], 'units': {'deceleration': 'm/s²', 'braking_duration': 'seconds', 'energy_saved': 'kWh (derived from database schema)', 'deviation_rate': '% difference (unitless)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}, {'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Manufacturer', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '制造商', 'examples': ['Tesla', 'NIO', 'BYD', 'Xpeng', 'Li Auto']}, {'column': 'Model', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '车型', 'examples': ['Model S', 'ET7', 'Han EV', 'P7', 'Li ONE']}, {'column': 'Motor_Power_Kw', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电机功率（千瓦）', 'examples': ['500.0', '480.0', '360.0', '300.0', '240.0']}, {'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}], 'new_energy_vehicles.driving_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '驾驶开始时间', 'examples': ['2023-10-01 08:00:00']}, {'column': 'End_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '驾驶结束时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['30.0', '25.0', '20.0', '15.0', '10.0']}, {'column': 'Distance_Km', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '行驶距离（公里）', 'examples': ['150.0', '120.0', '100.0', '80.0', '60.0']}], 'new_energy_vehicles.charging_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'End_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电结束时间', 'examples': ['2023-10-01 12:30:00']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}]}}\nA physical knowledge question is as follows:\nCalculate the regenerative energy saved by the start-stop system for the NIO ET7 with vehicle ID 2 during urban driving on October 2, 2023 (deceleration of 2 m/s², each braking duration of 3 seconds, 80 daily start-stop cycles), and verify the deviation rate from the actual charging amount.\nyour response just have a SQL without anything.\n",
        "solution": "WITH RegenerativeEnergy AS (SELECT 80 * 0.5 * v.Weight_Kg * POWER((d.Average_Speed_Kmh / 3.6), 2) * 0.65 / 3600 AS Regenerated_Energy_Kwh FROM driving_records d JOIN vehicles v ON d.Vehicle_Id = v.Vehicle_Id WHERE d.Vehicle_Id = 2 AND DATE(d.Start_Time) = '2023-10-02'), ChargingEnergy AS (SELECT SUM(c.Energy_Consumed_Kwh) AS Charged_Energy_Kwh FROM charging_records c WHERE c.Vehicle_Id = 2 AND DATE(c.Start_Time) = '2023-10-02') SELECT r.Regenerated_Energy_Kwh, c.Charged_Energy_Kwh, (r.Regenerated_Energy_Kwh - c.Charged_Energy_Kwh)/r.Regenerated_Energy_Kwh*100 AS Deviation_Percent FROM RegenerativeEnergy r, ChargingEnergy c;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 134,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\nthere is nothing I can give you about this question.\nA mathematical logic question is as follows:\nConstruct a comprehensive efficiency index for charging stations:  \n(Peak power utilization rate × 0.4) + (Charging volume between failures × 0.3) + (User rating × 0.3).  \nFilter stations with an efficiency value > 0.8 and associate their solar energy utilization rate.\nyour response just have a SQL without anything.\n",
        "solution": "WITH PeakPowerUtil AS (SELECT cs.Station_Id, SUM(cr.Energy_Consumed_Kwh)/(cs.Charging_Speed_Kw*3) AS Utilization FROM charging_records cr JOIN charging_stations cs ON cr.Station_Id = cs.Station_Id WHERE TIME(cr.Start_Time) BETWEEN '18:00:00' AND '21:00:00' GROUP BY cs.Station_Id) SELECT cs.Station_Id, (ppu.Utilization*0.7) AS Performance_Index, cs.Is_Solar_Powered FROM charging_stations cs JOIN PeakPowerUtil ppu ON cs.Station_Id = ppu.Station_Id WHERE (ppu.Utilization*0.7) > 0.8;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 135,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicles', 'battery calendar life >3 years', 'low-temperature environments (<5°C)', 'standard charging modes', 'abnormal charging efficiency declines'], 'relations': ['vehicle_to_charging_records (Vehicle_Id → charging_records)', 'battery_age (Release_Date → current date)', 'temperature_filter (Temperature_Celsius <5°C)', \"charging_mode (Charging_Type = 'Standard')\", 'health_correlation (Battery_Health → efficiency decline)'], 'intent': 'identify_vehicles_with_battery_degradation_risk', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3, 5], 'units': {'calendar_life': 'years', 'temperature': '°C (Celsius)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Release_Date', 'type': 'DATE', 'primary_key': False, 'comment': '发布日期', 'examples': ['2022-01-15']}, {'column': 'Battery_Health', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '', 'examples': ['100.0', '88.0', '85.0', '90.0', '95.0']}], 'new_energy_vehicles.charging_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}, {'column': 'Charging_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电类型（如：快充、慢充）', 'examples': ['Fast', 'Ultra-Fast', 'Standard']}, {'column': 'Initial_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电开始时的电池百分比', 'examples': ['20.0', '15.0', '10.0', '25.0', '30.0']}, {'column': 'Final_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电结束时的电池百分比', 'examples': ['80.0', '85.0', '70.0', '75.0', '30.0']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}]}}\nA common sense reasoning question is as follows:\nIdentify vehicles that simultaneously meet the following criteria: ① calendar life of the battery > 3 years, ② frequently charged in low-temperature environments (<5°C), and ③ using standard charging modes, and correlate them with records of abnormal declines in charging efficiency.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT v.Vehicle_Id, v.Production_Year, AVG(cr.Temperature_Celsius) AS Avg_Temp FROM vehicles v JOIN charging_records cr ON v.Vehicle_Id = cr.Vehicle_Id WHERE (YEAR(CURDATE()) - v.Production_Year) > 3 AND cr.Charging_Type = 'Standard' GROUP BY v.Vehicle_Id, v.Production_Year HAVING AVG(cr.Temperature_Celsius) < 5;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 136,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"nanowire battery\", \"energy density 5000 kW/kg\", \"drone swarm\", \"strong magnetic field 5T\", \"electrode displacement\", \"Lorentz force\", \"quantum locking solution\"],\n  \"relations\": [\"battery_to_energy_density (nanowire battery → 5000 kW/kg)\", \"magnetic_field_to_displacement (5T → Lorentz force calculation)\", \"displacement_to_solution (electrode displacement → quantum locking)\"],\n  \"intent\": \"calculate_electrode_displacement_and_evaluate_quantum_locking\",\n  \"reasoning_type\": \"physical knowledge reasoning (electromagnetism + material science)\",\n  \"numerical_values\": [5000, 5],\n  \"units\": {\n    \"energy_density\": \"kW/kg\",\n    \"magnetic_field\": \"T (Tesla)\",\n    \"displacement\": \"meters (implied by physics equations)\",\n    \"conversion\": \"Lorentz force formula: F = q(v × B)\"\n  },\n  \"required_tables\": [],\n  \"required_fields\": []\n}\n\nNote: The provided database focuses on electric vehicles, charging infrastructure, and driving records. It lacks any tables or fields related to nanowire batteries, magnetic fields, Lorentz forces, or quantum locking mechanisms. This query requires physics-based calculations and material science data outside the scope of the database schema.\nA hypothetical reasoning question is as follows:\nAssuming a nanowire battery achieves an energy density of 5000 kW/kg (currently <300 kW/kg), calculate the electrode displacement caused by Lorentz force when charging a drone swarm in a strong magnetic field environment (5T) and discuss the quantum locking solution.\nyour response just have a SQL without anything.\n",
        "solution": " SELECT v.Vehicle_Id, (POWER(5,2)*0.01)/(2*4*PI()*POWER(10,-7)) AS Lorentz_Force FROM vehicles v WHERE v.Weight_Kg > 0;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 137,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Li ONE vehicle ID 5', 'average road slope 2%', 'rolling resistance coefficient 0.015', 'rural road travel', 'date 2023-10-05'], 'relations': ['vehicle_to_driving_records (Li ONE → driving_records.Vehicle_Id)', 'slope_to_elevation_gain (2% slope → elevation gain calculation)', 'coefficient_to_rolling_resistance (0.015 coefficient → rolling resistance calculation)', 'calculated_energy_vs_actual (calculated energy → driving_records.Energy_Consumed_Kwh)'], 'intent': 'calculate_additional_energy_consumption_and_compare', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [2, 0.015, 5, 2023, 10, 5], 'units': {'slope': '% (percentage)', 'coefficient': 'unitless', 'elevation': 'meters', 'distance': 'km', 'weight': 'kg', 'energy': 'kWh', 'conversion': 'potential energy = mass * g * elevation_gain; rolling resistance = mass * g * coefficient * distance'}, 'foreign_keys': [{'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Weight_Kg', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '车辆重量（千克）', 'examples': ['2100.0', '2200.0', '2000.0', '1900.0', '2300.0']}], 'new_energy_vehicles.driving_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '驾驶开始时间', 'examples': ['2023-10-01 08:00:00']}, {'column': 'End_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '驾驶结束时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'Distance_Km', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '行驶距离（公里）', 'examples': ['150.0', '120.0', '100.0', '80.0', '60.0']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['30.0', '25.0', '20.0', '15.0', '10.0']}, {'column': 'Road_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '道路类型（如：高速、城市道路）', 'examples': ['Highway', 'City', 'Rural', 'Mountain']}]}}\nA physical knowledge question is as follows:\nCalculate the additional potential energy consumption caused by the average road slope of 2% (rolling resistance coefficient 0.015) for the Li ONE with vehicle ID 5 during rural road travel on 2023-10-05, and verify the deviation with the actual energy consumption records.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT dr.Distance_Km, dr.Elevation_Gain_M, (v.Weight_Kg * 9.81 * (0.02 + 0.015) * dr.Distance_Km * 1000) / 3600 AS theory_energy, dr.Energy_Consumed_Kwh AS actual_energy, (dr.Energy_Consumed_Kwh - (v.Weight_Kg * 9.81 * (0.02 + 0.015) * dr.Distance_Km * 1000)/3600) AS deviation FROM driving_records dr JOIN vehicles v USING(Vehicle_Id) WHERE dr.Vehicle_Id = 5 AND dr.Start_Time >= '2023-10-05' AND dr.End_Time < '2023-10-06' AND dr.Road_Type = 'Rural';",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 138,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['charging efficiency', 'vehicle brands', 'October 2023'], 'relations': ['vehicle_to_charging_records (Vehicle_Id → charging_records)', 'brand_to_efficiency (Manufacturer → charging efficiency)'], 'intent': 'calculate_standard_deviation_of_charging_efficiency_by_brand', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10, 2023], 'units': {'time': 'months (October 2023)', 'efficiency': 'unitless ratio (Energy_Consumed_Kwh / Battery_Change_Kwh)', 'standard_deviation': 'unitless (calculated from efficiency values)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Manufacturer', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '制造商', 'examples': ['Tesla', 'NIO', 'BYD', 'Xpeng', 'Li Auto']}, {'column': 'Battery_Capacity_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '电池容量（千瓦时）', 'examples': ['100.0', '150.0', '85.0', '80.0', '40.5']}], 'new_energy_vehicles.charging_records': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}, {'column': 'Initial_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电开始时的电池百分比', 'examples': ['20.0', '15.0', '10.0', '25.0', '30.0']}, {'column': 'Final_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电结束时的电池百分比', 'examples': ['80.0', '85.0', '70.0', '75.0', '30.0']}]}}\nA mathematical logic question is as follows:\nCalculate the standard deviation of charging efficiency for each brand of vehicles in October 2023.\nyour response just have a SQL without anything.\n",
        "solution": "WITH station_stats AS (SELECT v.Manufacturer, cs.Station_Id, AVG(cr.Energy_Consumed_Kwh/(cs.Charging_Speed_Kw * (UNIX_TIMESTAMP(cr.End_Time)-UNIX_TIMESTAMP(cr.Start_Time))/3600)) AS efficiency FROM charging_records cr JOIN vehicles v USING(Vehicle_Id) JOIN charging_stations cs USING(Station_Id) WHERE cr.Start_Time BETWEEN '2023-10-01' AND '2023-10-31' GROUP BY v.Manufacturer, cs.Station_Id) SELECT Manufacturer, STDDEV(efficiency)/AVG(efficiency) AS anomaly_index FROM station_stats GROUP BY Manufacturer HAVING anomaly_index > 0.15;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 139,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['fast charging', 'high-temperature charging records'], 'relations': ['correlation_between_fast_charging_frequency_and_temperature'], 'intent': 'analyze_correlation', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'temperature': '°C (Celsius)', 'charging_speed': 'kW (kilowatts)', 'frequency': 'count (implied by aggregation)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Charging_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电类型（如：快充、慢充）', 'examples': ['Fast', 'Ultra-Fast', 'Standard']}, {'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}, {'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': False, 'comment': '车辆ID（外键）', 'examples': ['1', '2', '3', '4', '5']}]}}\nA common sense reasoning question is as follows:\nAnalyze the correlation between fast charging frequency and high-temperature charging records.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT cr.Vehicle_Id, COUNT(CASE WHEN cr.Charging_Type = 'Fast' THEN 1 END)/COUNT(*) AS fast_charge_ratio, AVG(cr.Temperature_Celsius) AS avg_temp FROM charging_records cr WHERE cr.Start_Time BETWEEN '2023-07-01' AND '2023-10-31' GROUP BY cr.Vehicle_Id HAVING fast_charge_ratio > 0.5 AND avg_temp > 30;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 140,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['blizzard weather', 'charging efficiency'], 'relations': ['weather_to_charging_efficiency (blizzard → energy consumption metrics)', 'charging_records_to_weather (charging_records.Weather_Conditions → blizzard)'], 'intent': 'analyze_weather_impact_on_charging', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [], 'units': {'energy': 'kWh (Energy_Consumed_Kwh field)', 'time': 'hours (derived from Start_Time/End_Time)', 'weather': 'categorical variable in Weather_Conditions field'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}], 'tableinfo': {'new_energy_vehicles.charging_records': [{'column': 'Weather_Conditions', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '天气情况', 'examples': ['Sunny', 'Cloudy', 'Rainy', 'Clear', 'Foggy']}, {'column': 'Energy_Consumed_Kwh', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '消耗的电量（千瓦时）', 'examples': ['50.0', '60.0', '40.0', '30.0', '20.0']}, {'column': 'Start_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电开始时间', 'examples': ['2023-10-01 10:00:00']}, {'column': 'End_Time', 'type': 'DATETIME', 'primary_key': False, 'comment': '充电结束时间', 'examples': ['2023-10-01 12:30:00']}, {'column': 'Initial_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电开始时的电池百分比', 'examples': ['20.0', '15.0', '10.0', '25.0', '30.0']}, {'column': 'Final_Battery_Percentage', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电结束时的电池百分比', 'examples': ['80.0', '85.0', '70.0', '75.0', '30.0']}, {'column': 'Temperature_Celsius', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '充电时环境温度（摄氏度）', 'examples': ['25.0', '28.0', '22.0', '20.0', '18.0']}]}}\nA hypothetical reasoning question is as follows:\nAnalyze the impact of blizzard weather on charging efficiency\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN dr.Weather_Conditions = 'Snowstorm' THEN 1 ELSE 0 END AS is_snow, AVG(cr.Energy_Consumed_Kwh/(cs.Charging_Speed_Kw * (UNIX_TIMESTAMP(cr.End_Time)-UNIX_TIMESTAMP(cr.Start_Time))/3600)) AS efficiency FROM charging_records cr JOIN charging_stations cs USING(Station_Id) JOIN driving_records dr USING(Vehicle_Id) WHERE cr.Start_Time BETWEEN '2023-10-01' AND '2023-10-31' GROUP BY is_snow;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 141,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\nthere is nothing I can give you about this question.\nA physical knowledge question is as follows:\nCalculate the potential energy conversion efficiency ((regenerative charging + energy consumption)/theoretical potential energy change) for vehicles with a net altitude drop of >500 meters in October 2023, and display the battery capacities of the 3 lowest vehicles.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT dr.Vehicle_Id, (( (dr.End_Battery_Percentage - dr.Start_Battery_Percentage)/100 * v.Battery_Capacity_Kwh + dr.Energy_Consumed_Kwh ) / (v.Weight_Kg * 9.81 * (dr.Elevation_Loss_M - dr.Elevation_Gain_M))) * 100 AS efficiency, v.Battery_Capacity_Kwh FROM driving_records dr JOIN vehicles v USING(Vehicle_Id) WHERE (dr.Elevation_Loss_M - dr.Elevation_Gain_M) >= 500 AND dr.Start_Time BETWEEN '2023-10-01' AND '2023-10-31 23:59:59' ORDER BY efficiency ASC LIMIT 3;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 142,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n```json\n{\n  \"entities\": [\"brand\", \"charging station power characteristic\", \"highway unit energy consumption\", \"coefficient of variation (CV)\"],\n  \"relations\": [\n    \"vehicle_to_manufacturer (Vehicle_Id → Manufacturer)\",\n    \"vehicle_to_charging_station (Vehicle_Id → Charging_Station_Id)\",\n    \"energy_consumption_to_cv (Energy_Consumed_Kwh/Distance_Km → CV calculation)\",\n    \"cv_to_threshold (CV > 0.25)\"\n  ],\n  \"intent\": \"filter_brands_and_charging_power\",\n  \"reasoning_type\": \"mathematical logic reasoning\",\n  \"numerical_values\": [0.25],\n  \"units\": {\n    \"energy_consumption\": \"kWh/km (unit energy consumption)\",\n    \"cv\": \"dimensionless (standard deviation/mean)\",\n    \"charging_power\": \"kW (charging speed)\"\n  },\n  \"required_tables\": [\"vehicles\", \"driving_records\", \"charging_stations\"],\n  \"required_fields\": [\n    \"vehicles.Manufacturer\",\n    \"driving_records.Energy_Consumed_Kwh\",\n    \"driving_records.Distance_Km\",\n    \"driving_records.Road_Type\",\n    \"charging_stations.Charging_Speed_Kw\"\n  ]\n}\n```\nA mathematical logic question is as follows:\n筛选高速公路单位里程能耗离散系数(CV=标准差/均值)>0.25的品牌及其充电站功率特征  \n\nTranslation:  \nFilter brands with a coefficient of variation (CV = standard deviation/mean) of energy consumption per unit distance on highways > 0.25, along with their charging station power characteristics\nyour response just have a SQL without anything.\n",
        "solution": "WITH Stats AS (SELECT v.Manufacturer, STDDEV_POP(dr.Energy_Consumed_Kwh/dr.Distance_Km)/AVG(dr.Energy_Consumed_Kwh/dr.Distance_Km) AS cv, COUNT(*) AS cnt FROM driving_records dr JOIN vehicles v USING(Vehicle_Id) WHERE dr.Road_Type = 'Highway' AND dr.Distance_Km > 0 GROUP BY v.Manufacturer HAVING cv > 0.25 AND cnt >= 5) SELECT s.Manufacturer, MAX(cs.Charging_Speed_Kw) AS max_power, AVG(cs.Charging_Speed_Kw) AS avg_power FROM Stats s JOIN vehicles v USING(Manufacturer) JOIN charging_records cr USING(Vehicle_Id) JOIN charging_stations cs USING(Station_Id) GROUP BY s.Manufacturer;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 143,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['vehicles', 'fast-charging usage rate', 'rainy conditions'], 'relations': ['vehicle_to_charging_records (vehicles.Vehicle_Id → charging_records.Vehicle_Id)', 'vehicle_to_driving_records (vehicles.Vehicle_Id → driving_records.Vehicle_Id)', 'charging_record_weather (charging_records.Weather_Conditions → rainy)', 'driving_record_weather (driving_records.Weather_Conditions → rainy)'], 'intent': 'filter_vehicles_by_charging_and_weather_conditions', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50], 'units': {'usage_rate': '% (percentage)', 'weather_conditions': 'categorical (rainy/non-rainy)'}, 'foreign_keys': [{'fk_table': 'charging_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}, {'fk_table': 'charging_records', 'fk_column': 'Station_Id', 'ref_table': 'charging_stations', 'ref_column': 'Station_Id'}, {'fk_table': 'driving_records', 'fk_column': 'Vehicle_Id', 'ref_table': 'vehicles', 'ref_column': 'Vehicle_Id'}], 'primary_keys': [{'pk_table': 'charging_records', 'pk_column': 'Record_Id'}, {'pk_table': 'driving_records', 'pk_column': 'Record_Id'}, {'pk_table': 'vehicles', 'pk_column': 'Vehicle_Id'}], 'tableinfo': {'new_energy_vehicles.vehicles': [{'column': 'Vehicle_Id', 'type': 'INTEGER', 'primary_key': True, 'comment': '车辆唯一标识', 'examples': ['1', '2', '3', '4', '5']}], 'new_energy_vehicles.charging_records': [{'column': 'Charging_Type', 'type': 'VARCHAR(50) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '充电类型（如：快充、慢充）', 'examples': ['Fast', 'Ultra-Fast', 'Standard']}, {'column': 'Weather_Conditions', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '天气情况', 'examples': ['Sunny', 'Cloudy', 'Rainy', 'Clear', 'Foggy']}], 'new_energy_vehicles.driving_records': [{'column': 'Weather_Conditions', 'type': 'VARCHAR(255) COLLATE \"utf8mb4_0900_ai_ci\"', 'primary_key': False, 'comment': '天气情况', 'examples': ['Sunny', 'Cloudy', 'Rainy', 'Clear', 'Foggy']}]}}\nA common sense reasoning question is as follows:\nIdentify vehicles with a fast-charging usage rate >50% and records of driving/charging in rainy conditions.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT v.Vehicle_Id, COUNT(DISTINCT CASE WHEN cr.Charging_Type IN ('Fast','Ultra-Fast') THEN cr.Record_Id END)*1.0 / COUNT(DISTINCT cr.Record_Id) AS fast_ratio, COUNT(DISTINCT CASE WHEN dr.Weather_Conditions = 'Rainy' THEN dr.Record_Id END) AS rainy_count FROM vehicles v LEFT JOIN charging_records cr USING(Vehicle_Id) LEFT JOIN driving_records dr USING(Vehicle_Id) GROUP BY v.Vehicle_Id HAVING fast_ratio > 0.5 AND rainy_count >= 1;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 144,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phase jitter', 'quantum error correction', 'wireless charging system 1GW/m²', 'quantum magnetic storm (Kp=9)'], 'relations': ['quantum_storm_to_charging_system (Kp=9 → 1GW/m² wireless)', 'error_correction_dependency (quantum error correction → phase jitter)', 'power_density_specification (wireless charging system → 1GW/m²)'], 'intent': 'analyze_system_performance_under_quantum_stress', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [9, 1], 'units': {'kp_index': 'unitless (Kp scale 0-9)', 'power_density': 'GW/m² (gigawatts per square meter)', 'phase_jitter': 'radians (implied by quantum error analysis)', 'error_correction_threshold': 'qubits/bit error rate (domain-specific context)'}, 'foreign_keys': [], 'primary_keys': [], 'tableinfo': {'new_energy_vehicles.quantum_magnetic_environment': [{'column': 'storm_intensity_kp'}, {'column': 'magnetic_flux_density_tesla'}], 'new_energy_vehicles.wireless_charging_specs': [{'column': 'power_density_gw_per_m2'}, {'column': 'phase_stability_radians'}], 'new_energy_vehicles.error_correction_models': [{'column': 'threshold_qubit_count'}, {'column': 'error_rate_per_gate'}]}}\nA hypothetical reasoning question is as follows:\nAssuming analysis of phase jitter and quantum error correction requirements for a 1GW/m² wireless charging system under quantum magnetic storm conditions (Kp=9)\nyour response just have a SQL without anything.\n",
        "solution": "SELECT cs.Station_Id, POWER(500000/5, 3) AS power_factor, (2 * PI() * SQRT(POW((1.0003-1)*100000,2) + 2*100000*6371000)) / (300000000/(SELECT MAX(Charging_Speed_Kw)*1000 FROM charging_stations)) AS phase_jitter, CASE WHEN EXISTS(SELECT 1 FROM vehicles v JOIN charging_records cr USING(Vehicle_Id) WHERE v.Motor_Power_Kw > 500 AND cr.Station_Id = cs.Station_Id ) THEN 'Quantum' ELSE 'Classic' END AS qec_type FROM charging_stations cs WHERE EXISTS(SELECT 1 FROM charging_records WHERE Station_Id = cs.Station_Id AND Weather_Conditions = 'Magnetic_Storm' AND DAY(Start_Time) BETWEEN 20 AND 25 ) GROUP BY cs.Station_Id HAVING phase_jitter > PI()/2;",
        "db_id": "new_energy_vehicles"
    },
    {
        "id": 145,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['certain phone model', 'screen area', 'top 5 phones'], 'relations': ['phone_model_to_resolution (phone_id → screen_resolution_width, screen_resolution_height)', 'resolution_and_density_to_area (screen_resolution_width * screen_resolution_height / (pixel_density_ppi)^2)'], 'intent': 'calculate_screen_area_and_rank_top_phones', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'screen_area': 'square inches', 'conversion': 'screen_resolution_width (pixels) / pixel_density_ppi (ppi) → width in inches; screen_resolution_height (pixels) / pixel_density_ppi (ppi) → height in inches; area = width * height'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'screen_resolution_height', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2340', '3200', '2400', '3088', '2436']}, {'column': 'pixel_density_ppi', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['422', '515', '411', '496', '458']}, {'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}]}}\nA physical knowledge question is as follows:\nCalculate the screen area of a certain phone model, and identify the top 5 phones with the largest screen area.\nyour response just have a SQL without anything.\n",
        "solution": "WITH ScreenArea AS ( SELECT phone_id, (screen_resolution_width / pixel_density_ppi) * (screen_resolution_height / pixel_density_ppi) AS screen_area_sq_inches FROM phones ) SELECT p.phone_id, sa.screen_area_sq_inches FROM phones p JOIN ScreenArea sa ON p.phone_id = sa.phone_id ORDER BY sa.screen_area_sq_inches DESC LIMIT 5;",
        "db_id": "phone"
    },
    {
        "id": 146,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['specific mobile phone model', 'battery energy density', 'top 3 mobile phones'], 'relations': ['phone_to_battery_capacity (phone → battery_capacity_mAh)', 'phone_to_weight (phone → weight_grams)', 'energy_density_comparison (ranking phones by Wh/kg)'], 'intent': 'calculate_battery_energy_density_and_rank', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [], 'units': {'battery_capacity': 'mAh (from phones.battery_capacity_mAh)', 'weight': 'grams (from phones.weight_grams)', 'energy_density': 'Wh/kg (calculated via (mAh × voltage × 0.001) / (weight_grams × 0.001), assuming standard battery voltage of 3.7V)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}, {'column': 'weight_grams', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['189.0', '203.0', '196.0', '210.0', '174.0']}]}}\nA mathematical logic question is as follows:\nCalculate the battery energy density of a specific mobile phone model and identify the top 3 mobile phones with the highest battery energy density.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.weight_grams, p.battery_capacity_mAh, (p.battery_capacity_mAh * 3.7) / (p.weight_grams / 1000) AS energy_density_wh_per_kg FROM phones p ORDER BY energy_density_wh_per_kg DESC LIMIT 3;",
        "db_id": "phone"
    },
    {
        "id": 147,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phones', 'battery capacity 4000mAh', 'thickness 8mm'], 'relations': ['battery_capacity_filter (>4000mAh)', 'thickness_filter (<8mm)'], 'intent': 'filter_and_sort_phones_by_battery_and_thickness', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [4000, 8], 'units': {'battery_capacity': 'mAh (milliampere-hour)', 'thickness': 'mm (millimeters)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}, {'column': 'thickness_mm', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['7.65', '8.1', '8.3', '8.5', '7.4']}, {'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}]}}\nA common sense reasoning question is as follows:\nFind phones with a battery capacity greater than 4000mAh and a thickness less than 8mm, sorted in descending order by battery capacity.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM phones WHERE battery_capacity_mAh > 4000 AND thickness_mm < 8 ORDER BY battery_capacity_mAh DESC;",
        "db_id": "phone"
    },
    {
        "id": 148,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['smartphone', 'battery_capacity 100000mAh', 'battery_life threshold 1000 hours'], 'relations': ['phone_to_performance_metrics (phone_id → metric_id)', 'battery_capacity_to_battery_life (100000mAh → battery_life_video_playback_hours/battery_life_web_browsing_hours)'], 'intent': 'calculate_battery_life_and_filter', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [100000, 1000], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'battery_life': 'hours (video playback/web browsing)'}, 'foreign_keys': [{'fk_table': 'performance_metrics', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'performance_metrics', 'pk_column': 'metric_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.performance_metrics': [{'column': 'battery_life_video_playback_hours'}, {'column': 'battery_life_web_browsing_hours'}]}}\nA hypothetical reasoning question is as follows:\nAssuming a certain smartphone has a battery capacity of 100000mAh, calculate its battery life, and find smartphones with battery life exceeding 1000 hours.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, (battery_capacity_mAh * 3.7) / (0.5 * 1000) AS battery_life_hours FROM phones WHERE (battery_capacity_mAh * 3.7) / (0.5 * 1000) > 1000;",
        "db_id": "phone"
    },
    {
        "id": 149,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phones'], 'relations': ['resolution_to_pixel_density (screen_resolution → pixel_density)'], 'intent': 'calculate_screen_area_and_rank_top_phones', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'screen_resolution': 'pixels (width and height)', 'pixel_density': 'ppi (pixels per inch)', 'screen_area': 'square inches (in²)', 'calculation_formula': 'screen_area = (screen_resolution_width × screen_resolution_height) / (pixel_density_ppi²)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'screen_resolution_height', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2340', '3200', '2400', '3088', '2436']}, {'column': 'pixel_density_ppi', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['422', '515', '411', '496', '458']}]}}\nA physical knowledge question is as follows:\nPlease calculate the screen area (in square inches) for each mobile phone, and identify the top 5 mobile phones with the largest screen area.\nyour response just have a SQL without anything.\n",
        "solution": "WITH ScreenArea AS ( SELECT phone_id, (screen_size_inches * screen_resolution_width / SQRT(POWER(screen_resolution_width, 2) + POWER(screen_resolution_height, 2))) * (screen_size_inches * screen_resolution_height / SQRT(POWER(screen_resolution_width, 2) + POWER(screen_resolution_height, 2))) AS screen_area_sq_inches FROM phones ) SELECT sa.phone_id, sa.screen_area_sq_inches FROM ScreenArea sa ORDER BY sa.screen_area_sq_inches DESC LIMIT 5;",
        "db_id": "phone"
    },
    {
        "id": 150,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone model', 'battery capacity (mAh)', 'voltage (V)'], 'relations': ['phone_model_to_battery_capacity', 'capacity_to_energy_conversion'], 'intent': 'calculate_battery_energy_and_rank_models', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [3.7, 1000, 3600], 'units': {'capacity': 'mAh (milliampere-hours)', 'energy': 'J (joules)', 'voltage': 'V (volts, assumed standard at 3.7V)', 'conversion': '1 Ah = 3600 C, 1 J = 1 V × 1 C'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}]}}\nA mathematical logic question is as follows:\nPlease calculate the battery energy (in joules) for each mobile phone model and identify the top 5 phones with the highest battery energy.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh * 3.7 * 3.6 AS battery_energy_joules FROM phones p ORDER BY battery_energy_joules DESC LIMIT 5;",
        "db_id": "phone"
    },
    {
        "id": 151,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phones', 'battery life'], 'relations': ['phone_to_battery_life (phone_id → battery_life_hours)'], 'intent': 'find_top_5_phones_by_battery_life_and_calculate_average', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5], 'units': {'battery_life': 'hours'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}], 'tableinfo': {'phone.hardware_specs': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_life_hours', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['24.0', '30.0', '20.0', '36.0', '22.0']}]}}\nA common sense reasoning question is as follows:\nPlease find the top 5 mobile phones with the longest battery life and calculate the average battery life of these phones.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(battery_life_hours) AS average_battery_life FROM (SELECT battery_life_hours FROM hardware_specs ORDER BY battery_life_hours DESC LIMIT 5) AS top_5_battery_life;",
        "db_id": "phone"
    },
    {
        "id": 152,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phone with battery_capacity_mAh 1000000', 'other phones'], 'relations': ['phone_to_battery_capacity (phone_id → battery_capacity_mAh)', 'battery_energy_comparison (target_energy > other_energies)'], 'intent': 'calculate_battery_energy_and_compare', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1000000], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'energy': 'joules (calculated via conversion formula)', 'conversion': 'Energy (J) = Capacity (mAh) × Voltage (V) × 3.6 (assumes standard 3.7V Li-ion voltage)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}]}}\nA hypothetical reasoning question is as follows:\nAssuming there is a phone with a battery capacity of 1,000,000 mAh, calculate its battery energy (in joules) and find all phones whose battery energy exceeds this value.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh, (p.battery_capacity_mAh * 3.7 * 3.6) AS battery_energy_joules FROM phones p WHERE (p.battery_capacity_mAh * 3.7 * 3.6) > (1000000 * 3.7 * 3.6);",
        "db_id": "phone"
    },
    {
        "id": 153,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone model'], 'relations': ['phone_to_screen_resolution (width and height)', 'screen_resolution_to_pixel_density (for area calculation)'], 'intent': 'calculate_screen_area_and_identify_top_5_phones', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'screen_resolution': 'pixels', 'pixel_density': 'ppi (pixels per inch)', 'screen_area': 'square inches (in²)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'screen_resolution_height', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2340', '3200', '2400', '3088', '2436']}, {'column': 'pixel_density_ppi', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['422', '515', '411', '496', '458']}]}}\nA physical knowledge question is as follows:\nPlease calculate the screen area (in square inches) for each mobile phone model and identify the top 5 phones with the largest screen area.\nyour response just have a SQL without anything.\n",
        "solution": "WITH ScreenDimensions AS ( SELECT phone_id, screen_size_inches * (screen_resolution_width / SQRT(POWER(screen_resolution_width, 2) + POWER(screen_resolution_height, 2))) AS screen_width_inches, screen_size_inches * (screen_resolution_height / SQRT(POWER(screen_resolution_width, 2) + POWER(screen_resolution_height, 2))) AS screen_height_inches FROM phones ) SELECT p.phone_id, p.screen_size_inches, sd.screen_width_inches * sd.screen_height_inches AS screen_area_square_inches FROM phones p JOIN ScreenDimensions sd ON p.phone_id = sd.phone_id ORDER BY screen_area_square_inches DESC LIMIT 5;",
        "db_id": "phone"
    },
    {
        "id": 154,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone', 'pixel density (PPI)'], 'relations': ['screen_size_to_resolution (screen_size_inches ↔ screen_resolution_width × screen_resolution_height)', 'ranking (top 5 phones by PPI)'], 'intent': 'calculate_and_rank_pixel_density', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'screen_size': 'inches (diagonal display size)', 'resolution': 'pixels (width × height)', 'pixel_density': 'PPI (pixels per inch), calculated as √(width² + height²)/screen_size'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'screen_size_inches', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['6.1', '6.7', '6.4', '6.9', '5.8']}, {'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'screen_resolution_height', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2340', '3200', '2400', '3088', '2436']}]}}\nA mathematical logic question is as follows:\nPlease calculate the pixel density (PPI) for each mobile phone and identify the top 5 phones with the highest pixel density.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, SQRT(POWER(screen_resolution_width, 2) + POWER(screen_resolution_height, 2)) / screen_size_inches AS pixel_density_ppi FROM phones ORDER BY pixel_density_ppi DESC LIMIT 5;",
        "db_id": "phone"
    },
    {
        "id": 155,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phones', 'battery capacity 4000mAh', 'price $500', 'battery life video playback'], 'relations': ['phone_to_specs (phone_id → hardware_specs)', 'phone_to_performance (phone_id → performance_metrics)', 'filter_conditions (battery_capacity_mAh > 4000 ∧ price_usd < 500)', 'sort_criteria (battery_life_video_playback_hours DESC)'], 'intent': 'filter_and_sort_phones_by_battery_and_price', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [4000, 500], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'price': 'USD (US Dollars)', 'battery_life': 'hours (video playback)'}, 'foreign_keys': [{'fk_table': 'performance_metrics', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'performance_metrics', 'pk_column': 'metric_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}, {'column': 'price_usd', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['799.99', '1099.99', '699.99', '1299.99', '899.99']}], 'phone.performance_metrics': [{'column': 'battery_life_video_playback_hours'}]}}\nA common sense reasoning question is as follows:\nPlease find mobile phones with a battery capacity greater than 4000mAh and priced below $500, then sort them by battery life (video playback) from highest to lowest, returning the top 10 models.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh, p.price_usd, pm.battery_life_video_playback_hours FROM phones p JOIN performance_metrics pm ON p.phone_id = pm.phone_id WHERE p.battery_capacity_mAh > 4000 AND p.price_usd < 500 ORDER BY pm.battery_life_video_playback_hours DESC LIMIT 10;",
        "db_id": "phone"
    },
    {
        "id": 156,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phone with battery capacity 100000mAh', 'video playback duration', 'other phones with battery capacity < 100000mAh', 'longer video playback duration'], 'relations': ['phone_battery_capacity (phone_id → battery_capacity_mAh)', 'video_playback_link (phone_id → battery_life_video_playback_hours)', 'comparison_criteria (battery_capacity < 100000mAh AND playback_duration > assumed_phone_playback)'], 'intent': 'calculate_video_playback_duration_and_compare_phones', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100000], 'units': {'battery_capacity': 'mAh (milliampere-hour)', 'video_playback': 'hours'}, 'foreign_keys': [{'fk_table': 'performance_metrics', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'performance_metrics', 'pk_column': 'metric_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.performance_metrics': [{'column': 'phone_id'}, {'column': 'battery_life_video_playback_hours'}]}}\nA hypothetical reasoning question is as follows:\nAssuming a phone has a battery capacity of 100,000mAh, calculate its video playback duration (in hours) and find all phones with a battery capacity less than 100,000mAh but with a video playback duration longer than that of the assumed phone.\nyour response just have a SQL without anything.\n",
        "solution": "WITH hypothetical_phone AS ( SELECT (100000 * 3.7) / (screen_size_inches * screen_resolution_width * screen_resolution_height * 0.1) AS hypothetical_battery_life FROM phones WHERE battery_capacity_mAh = 100000 ) SELECT p.phone_id, p.battery_capacity_mAh, pm.battery_life_video_playback_hours FROM phones p JOIN performance_metrics pm ON p.phone_id = pm.phone_id CROSS JOIN hypothetical_phone hp WHERE p.battery_capacity_mAh < 100000 AND pm.battery_life_video_playback_hours > hp.hypothetical_battery_life;",
        "db_id": "phone"
    },
    {
        "id": 157,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phone with largest battery capacity sold in 2022', 'battery capacity in mAh', 'battery energy in joules'], 'relations': ['phone_to_sales (phone_id → sale_year=2022)', 'battery_capacity_to_energy (mAh → J)'], 'intent': 'calculate_battery_energy_and_find_max', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [2022], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'energy': 'J (joules, calculated via voltage assumption)', 'voltage_assumption': '3.7 V (standard lithium-ion battery voltage)', 'conversion_formula': 'Energy (J) = battery_capacity_mAh * 3.7 V * 3.6 (unit conversion factor)'}, 'foreign_keys': [{'fk_table': 'sales_data', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}, {'pk_table': 'sales_data', 'pk_column': 'sale_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.sales_data': [{'column': 'sale_year', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2022', '2023', '2021', '2020', '2024']}]}}\nA physical knowledge question is as follows:\nCalculate the battery energy (in joules) of the phone with the largest battery capacity sold in 2022, and return the model and battery energy of that phone, sorted in descending order of battery energy.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id AS model, (p.battery_capacity_mAh * 3.7 * 3.6) AS battery_energy_joules FROM phones p JOIN sales_data s ON p.phone_id = s.phone_id WHERE s.sale_year = 2022 ORDER BY battery_energy_joules DESC LIMIT 1;",
        "db_id": "phone"
    },
    {
        "id": 158,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phones sold in 2021', 'unit price (price_usd / units_sold)', 'customer satisfaction score (customer_satisfaction_score)'], 'relations': ['phone_to_sales (phones.phone_id → sales_data.phone_id)', 'unit_price_calculation (price_usd / units_sold)', 'product_calculation (unit_price * customer_satisfaction_score)'], 'intent': 'calculate_product_metric_and_rank_top_5', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2021, 5], 'units': {'price_usd': 'USD (United States Dollar)', 'units_sold': 'unitless (count)', 'customer_satisfaction_score': 'unitless (score)', 'product_value': 'USD * satisfaction_score / units_sold (derived unit)'}, 'foreign_keys': [{'fk_table': 'sales_data', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}, {'pk_table': 'sales_data', 'pk_column': 'sale_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'price_usd', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['799.99', '1099.99', '699.99', '1299.99', '899.99']}], 'phone.sales_data': [{'column': 'units_sold', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['50000', '30000', '80000', '20000', '60000']}, {'column': 'customer_satisfaction_score', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['4.5', '4.8', '4.2', '4.9', '4.6']}, {'column': 'sale_year', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2022', '2023', '2021', '2020', '2024']}]}}\nA mathematical logic question is as follows:\nCalculate the product of the unit price (price_usd / units_sold) and customer satisfaction score (customer_satisfaction_score) for each mobile phone sold in 2021, and return the top 5 phone models with the highest product values, sorted in descending order by the product value.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, (p.price_usd / s.units_sold) * s.customer_satisfaction_score AS product_value FROM phones p JOIN sales_data s ON p.phone_id = s.phone_id WHERE s.sale_year = 2021 ORDER BY product_value DESC LIMIT 5;",
        "db_id": "phone"
    },
    {
        "id": 159,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phone models sold in 2020', 'return rate percentage', 'average return rate'], 'relations': ['phone_model_to_return_rate (phone_id → return_rate_percentage)', 'return_rate_comparison (individual return rate > average return rate)'], 'intent': 'filter_phone_models_by_return_rate', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2020], 'units': {'return_rate': 'percentage (%)', 'year': 'YYYY (2020)'}, 'foreign_keys': [{'fk_table': 'sales_data', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}, {'pk_table': 'sales_data', 'pk_column': 'sale_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'release_year', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2022', '2023', '2021', '2024', '2025']}], 'phone.sales_data': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'return_rate_percentage', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['2.0', '1.5', '3.0', '1.0', '2.5']}, {'column': 'sale_year', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2022', '2023', '2021', '2020', '2024']}]}}\nA common sense reasoning question is as follows:\nFind the phone models sold in 2020 that have a return rate (return_rate_percentage) higher than the average return rate, and return the model names, return rates, and sales years for these phones, sorted by return rate in descending order.\nyour response just have a SQL without anything.\n",
        "solution": "WITH AvgReturnRate AS (SELECT AVG(return_rate_percentage) AS avg_return_rate FROM sales_data WHERE sale_year = 2020) SELECT p.phone_id, p.phone_id AS model, sd.return_rate_percentage, sd.sale_year FROM phones p JOIN sales_data sd ON p.phone_id = sd.phone_id CROSS JOIN AvgReturnRate arr WHERE sd.sale_year = 2020 AND sd.return_rate_percentage > arr.avg_return_rate ORDER BY sd.return_rate_percentage DESC;",
        "db_id": "phone"
    },
    {
        "id": 160,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['battery_capacity 1000000mAh', 'phone model', 'price_usd $1,000,000', 'customer_satisfaction_score'], 'relations': ['battery_capacity_to_energy (mAh → joules via voltage conversion)', 'unit_price (price_usd / units_sold)', 'product_with_satisfaction (unit_price × customer_satisfaction_score)'], 'intent': 'calculate_battery_energy_and_product_value', 'reasoning_type': 'physical knowledge reasoning (energy conversion), mathematical logic reasoning (unit price and product calculation)', 'numerical_values': [1000000, 1000000], 'units': {'battery_capacity': 'mAh → joules (conversion: 1,000,000mAh = 1000Ah; voltage assumption 3.7V → 1Ah×3.7V×3600s = 13320J)', 'energy': 'joules (J)', 'price': 'USD', 'unit_price': 'USD per unit_sold', 'product': 'unitless (USD × satisfaction score)'}, 'foreign_keys': [{'fk_table': 'sales_data', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}, {'pk_table': 'sales_data', 'pk_column': 'sale_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}, {'column': 'price_usd', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['799.99', '1099.99', '699.99', '1299.99', '899.99']}], 'phone.sales_data': [{'column': 'units_sold', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['50000', '30000', '80000', '20000', '60000']}, {'column': 'customer_satisfaction_score', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['4.5', '4.8', '4.2', '4.9', '4.6']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a mobile phone has a battery capacity of 1,000,000mAh, calculate its battery energy (unit: joules), and return the phone's model and battery energy, sorted in descending order by battery energy. Additionally, assuming the phone's price is $1,000,000, calculate the product of its unit price (price_usd / units_sold) and customer satisfaction score (customer_satisfaction_score), and return the resulting product value.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, (1000000 * 3.7 * 3.6) AS battery_energy_joules, ((1000000 / sd.units_sold) * sd.customer_satisfaction_score) AS unit_price_satisfaction_product FROM phones p JOIN sales_data sd ON p.phone_id = sd.phone_id WHERE p.battery_capacity_mAh = 1000000 AND p.price_usd = 1000000 ORDER BY battery_energy_joules DESC;",
        "db_id": "phone"
    },
    {
        "id": 161,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phones', 'download speed exceeding 1% of speed of light', 'signal strength in dBm'], 'relations': ['phone_to_network_performance (phone_id → network_performance)', 'speed_condition (download_speed_mbps > 1% of speed_of_light)', 'signal_strength_measurement (signal_strength_dbm)'], 'intent': 'list_fastest_phones_with_signal_strength', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1, 100, 299792458], 'units': {'speed_of_light': 'm/s (meters per second)', 'download_speed': 'Mbps (Megabits per second)', 'signal_strength': 'dBm (decibel-milliwatts)', 'percentage_condition': '1% of speed_of_light (299,792,458 m/s → 2,997,924.58 m/s)'}, 'foreign_keys': [{'fk_table': 'network_performance', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'network_performance', 'pk_column': 'network_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.network_performance': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'download_speed_mbps', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['120.0', '150.0', '100.0', '200.0', '110.0']}, {'column': 'signal_strength_dbm', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['-70.0', '-65.0', '-75.0', '-60.0', '-72.0']}], 'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}]}}\nA physical knowledge question is as follows:\nPlease calculate and list the 5 fastest phones in download speed, along with their signal strength (in dBm) when their download speed exceeds 1% of the speed of light.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, np.download_speed_mbps, np.signal_strength_dbm FROM phones p JOIN network_performance np ON p.phone_id = np.phone_id WHERE np.download_speed_mbps > 2000000 ORDER BY np.download_speed_mbps DESC LIMIT 5;",
        "db_id": "phone"
    },
    {
        "id": 162,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phones released in 2022', 'battery capacity (mAh)', 'battery life (hours)'], 'relations': ['phone_to_battery_capacity (phone_id → battery_capacity_mAh)', 'phone_to_battery_life (phone_id → battery_life_hours)', 'capacity_to_life_ratio (mAh/hours)'], 'intent': 'calculate_and_rank_battery_ratio', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2022], 'units': {'battery_capacity': 'mAh (milliampere-hour)', 'battery_life': 'hours', 'ratio_unit': 'mAh/hour (milliampere-hour per hour)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'release_year', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2022', '2023', '2021', '2024', '2025']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.hardware_specs': [{'column': 'battery_life_hours', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['24.0', '30.0', '20.0', '36.0', '22.0']}]}}\nA mathematical logic question is as follows:\nPlease calculate and list the top 3 mobile phones released in 2022 with the highest ratio of battery capacity (mAh) to battery life (hours), and sort them in descending order by this ratio.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, (p.battery_capacity_mAh / 1000 / hs.battery_life_hours) AS efficiency_ratio FROM phones p JOIN hardware_specs hs ON p.phone_id = hs.phone_id WHERE p.release_year = 2022 ORDER BY efficiency_ratio DESC LIMIT 3;",
        "db_id": "phone"
    },
    {
        "id": 163,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone models', '2021', 'customer satisfaction ratings above 8', 'return rates below 5%'], 'relations': ['phone_model_to_sales_data (phone_id → sales_data.phone_id)', 'sales_filter_criteria (sale_year=2021, satisfaction>8, return_rate<5%)'], 'intent': 'list_phone_models_with_criteria', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [2021, 8, 5], 'units': {'sale_year': 'years', 'customer_satisfaction': 'numerical scale (1-10)', 'return_rate': '% percentage', 'sales_volume': 'units_sold (from sales_data table)'}, 'foreign_keys': [{'fk_table': 'sales_data', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}, {'pk_table': 'sales_data', 'pk_column': 'sale_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'phone.sales_data': [{'column': 'sale_year', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2022', '2023', '2021', '2020', '2024']}, {'column': 'customer_satisfaction_score', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['4.5', '4.8', '4.2', '4.9', '4.6']}, {'column': 'return_rate_percentage', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['2.0', '1.5', '3.0', '1.0', '2.5']}, {'column': 'units_sold', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['50000', '30000', '80000', '20000', '60000']}]}}\nA common sense reasoning question is as follows:\nPlease list the mobile phone models sold in 2021 that have customer satisfaction ratings above 8 and return rates below 5%, sorted in descending order by sales volume.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id AS model, SUM(s.units_sold) AS total_units_sold FROM phones p JOIN sales_data s ON p.phone_id = s.phone_id WHERE s.sale_year = 2021 AND s.customer_satisfaction_score > 8 AND s.return_rate_percentage < 5 GROUP BY p.phone_id ORDER BY total_units_sold DESC;",
        "db_id": "phone"
    },
    {
        "id": 164,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['smartphone Wi-Fi speed 1 Tbps', 'signal strength -30dBm'], 'relations': ['device_to_wifi_speed (smartphone → 1 Tbps)', 'device_to_signal_strength (smartphone → -30dBm)'], 'intent': 'calculate_data_download', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1000000, 1], 'units': {'data_rate': 'GB/s', 'conversion': 'Data (GB) = (Speed (Mbps) × Time (s)) / 8 / 1000 (to convert MB to GB)', 'time': 'seconds'}, 'foreign_keys': [{'fk_table': 'network_performance', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'network_performance', 'pk_column': 'network_id'}], 'tableinfo': {'phone.network_performance': [{'column': 'wifi_speed_mbps', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['600.0', '800.0', '500.0', '1000.0', '550.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a smartphone has a Wi-Fi speed of 1Tbps (equivalent to 1,000,000 Mbps), calculate and list the amount of data (in GB) this phone can download in one second, while assuming its signal strength is -30dBm.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (1000000 * 1 / 8 / 1000) AS download_data_gb FROM network_performance WHERE signal_strength_dbm = -30;",
        "db_id": "phone"
    },
    {
        "id": 165,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone models', 'weight_grams', 'battery_capacity_mAh'], 'relations': ['phone_model_to_weight (phone_id → weight_grams)', 'phone_model_to_battery (phone_id → battery_capacity_mAh)'], 'intent': 'find_phone_models_with_min_weight_to_battery_ratio_and_sort', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'weight': 'grams', 'battery_capacity': 'mAh', 'ratio_unit': 'grams/mAh (calculated as weight_grams / battery_capacity_mAh)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'weight_grams', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['189.0', '203.0', '196.0', '210.0', '174.0']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}]}}\nA physical knowledge question is as follows:\nPlease find all mobile phone models with the smallest ratio of weight (weight_grams) to battery capacity (battery_capacity_mAh), and sort them in ascending order by weight.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, weight_grams, battery_capacity_mAh, (battery_capacity_mAh / weight_grams) AS energy_density FROM phones ORDER BY energy_density ASC, weight_grams ASC LIMIT 1;",
        "db_id": "phone"
    },
    {
        "id": 166,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone', 'screen area (screen_size_inches)', 'pixel density (pixel_density_ppi)'], 'relations': ['phone_to_screen_specs (phone_id → screen_size_inches + pixel_density_ppi)', 'product_relationship (screen_area × pixel_density = ranking_score)'], 'intent': 'calculate_ranking_score_and_top_results', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5], 'units': {'screen_size': 'inches', 'pixel_density': 'ppi (pixels per inch)', 'product_unit': 'inch-ppi (calculated score unit)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'screen_size_inches', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['6.1', '6.7', '6.4', '6.9', '5.8']}, {'column': 'pixel_density_ppi', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['422', '515', '411', '496', '458']}]}}\nA mathematical logic question is as follows:\nPlease calculate the product of the screen area (screen_size_inches) and pixel density (pixel_density_ppi) for each mobile phone, sort them in descending order by the product, and take the top 5.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, screen_size_inches, pixel_density_ppi, (PI() * POWER(screen_size_inches / 2, 2)) * pixel_density_ppi AS product FROM phones ORDER BY product DESC LIMIT 5;",
        "db_id": "phone"
    },
    {
        "id": 167,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone models', 'battery life', 'battery capacity'], 'relations': ['battery_life_to_capacity_ratio', 'phone_model_to_battery_life', 'phone_model_to_battery_capacity'], 'intent': 'calculate_and_sort_battery_life_to_capacity_ratio', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['battery_life_hours', 'battery_capacity_mAh'], 'units': {'battery_life': 'hours', 'battery_capacity': 'mAh (milliampere-hours)', 'ratio': 'hours per mAh (h/mAh)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.hardware_specs': [{'column': 'battery_life_hours', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['24.0', '30.0', '20.0', '36.0', '22.0']}]}}\nA common sense reasoning question is as follows:\nPlease find all mobile phone models with the highest ratio of battery life (battery_life_hours) to battery capacity (battery_capacity_mAh), and sort them in descending order by battery life.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, h.battery_life_hours, p.battery_capacity_mAh, (h.battery_life_hours / p.battery_capacity_mAh) AS efficiency_ratio FROM phones p JOIN hardware_specs h ON p.phone_id = h.phone_id ORDER BY efficiency_ratio DESC, h.battery_life_hours DESC;",
        "db_id": "phone"
    },
    {
        "id": 168,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone weight (grams)', 'battery capacity (mAh)', 'phone model', 'weight scaling factor (1000x)'], 'relations': ['weight_to_battery_ratio (scaled_weight / battery_capacity_mAh)', 'scaling_factor_application (weight_grams * 1000)'], 'intent': 'calculate_min_weight_to_battery_ratio_with_scaled_weight', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000], 'units': {'weight': 'grams (original) → scaled grams (x1000)', 'battery_capacity': 'mAh', 'ratio_unit': 'grams/mAh (scaled)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'weight_grams', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['189.0', '203.0', '196.0', '210.0', '174.0']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the weight (weight_grams) of all mobile phones increases by 1000 times, find the phone model with the smallest ratio of weight to battery capacity (battery_capacity_mAh), and sort the results by weight in ascending order.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.weight_grams * 1000 AS new_weight_grams, p.battery_capacity_mAh, (p.battery_capacity_mAh / (p.weight_grams * 1000)) AS energy_density FROM phones p ORDER BY energy_density ASC, new_weight_grams ASC LIMIT 1;",
        "db_id": "phone"
    },
    {
        "id": 169,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phones', 'screen_size_inches', 'screen_resolution_width', 'screen_resolution_height', 'pixel_density_ppi'], 'relations': ['phone_to_screen_specs (phones.phone_id → hardware specs relationships)', 'screen_dimensions_to_area (resolution width/height → area calculation)'], 'intent': 'calculate_screen_area_and_sort', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [6], 'units': {'screen_size': 'inches (diagonal)', 'screen_area': 'square inches (calculated via resolution width*height / ppi²)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'screen_size_inches', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['6.1', '6.7', '6.4', '6.9', '5.8']}, {'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'screen_resolution_height', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2340', '3200', '2400', '3088', '2436']}, {'column': 'pixel_density_ppi', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['422', '515', '411', '496', '458']}]}}\nA physical knowledge question is as follows:\nPlease calculate and return the screen area (in square inches) of phones with screen sizes larger than 6 inches, then sort them in ascending order by screen area and take the top 5.\nyour response just have a SQL without anything.\n",
        "solution": "WITH ScreenArea AS (SELECT phone_id, screen_size_inches, (screen_size_inches * COS(ATAN(9.0/16.0))) * (screen_size_inches * SIN(ATAN(9.0/16.0))) AS screen_area_sq_inches FROM phones WHERE screen_size_inches > 6) SELECT phone_id, screen_size_inches, screen_area_sq_inches FROM ScreenArea ORDER BY screen_area_sq_inches ASC LIMIT 5;",
        "db_id": "phone"
    },
    {
        "id": 170,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phones'], 'relations': ['screen_resolution_to_pixel_density (PPI = √(width² + height²)/screen_size)'], 'intent': 'calculate_pixel_density_and_sort', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'screen_resolution_width': 'pixels (px)', 'screen_resolution_height': 'pixels (px)', 'screen_size_inches': 'inches (in)', 'pixel_density_ppi': 'pixels per inch (PPI)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'screen_resolution_height', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2340', '3200', '2400', '3088', '2436']}, {'column': 'screen_size_inches', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['6.1', '6.7', '6.4', '6.9', '5.8']}]}}\nA mathematical logic question is as follows:\nPlease calculate and return the pixel density (PPI) for each mobile phone, then sort them in descending order by PPI and take the top 10.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, SQRT(POWER(screen_resolution_width, 2) + POWER(screen_resolution_height, 2)) / screen_size_inches AS pixel_density_ppi FROM phones ORDER BY pixel_density_ppi DESC LIMIT 10;",
        "db_id": "phone"
    },
    {
        "id": 171,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['battery capacity 4000mAh', 'screen size 6 inches', 'top 3 results'], 'relations': ['battery_capacity_filter (>4000mAh)', 'screen_size_filter (<6 inches)', 'sort_order (ascending battery capacity)', 'limit (top 3)'], 'intent': 'retrieve_phone_models_with_battery_and_screen_constraints', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [4000, 6, 3], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'screen_size': 'inches', 'top_n': '3 (quantity)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}, {'column': 'screen_size_inches', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['6.1', '6.7', '6.4', '6.9', '5.8']}]}}\nA common sense reasoning question is as follows:\nPlease return the mobile phone models with battery capacity greater than 4000mAh and screen size smaller than 6 inches, sorted by battery capacity in ascending order, and take the top 3.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id FROM phones WHERE battery_capacity_mAh > 4000 AND screen_size_inches < 6 ORDER BY battery_capacity_mAh ASC LIMIT 3;",
        "db_id": "phone"
    },
    {
        "id": 172,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\nthere is nothing I can give you about this question.\nA hypothetical reasoning question is as follows:\nAssuming a mobile phone has a screen size of 100 inches, calculate and return its screen area (in square inches). Then, find all phone models with a screen area smaller than this value, sorted in descending order of screen area, and take the top 5.\nyour response just have a SQL without anything.\n",
        "solution": "WITH HypotheticalScreen AS (SELECT 100 * COS(ATAN(9.0/16.0)) AS screen_width, 100 * SIN(ATAN(9.0/16.0)) AS screen_height), HypotheticalArea AS (SELECT screen_width * screen_height AS screen_area FROM HypotheticalScreen), PhoneScreenAreas AS (SELECT p.phone_id, p.screen_size_inches * COS(ATAN(p.screen_resolution_height * 1.0 / p.screen_resolution_width)) AS screen_width, p.screen_size_inches * SIN(ATAN(p.screen_resolution_height * 1.0 / p.screen_resolution_width)) AS screen_height, (p.screen_size_inches * COS(ATAN(p.screen_resolution_height * 1.0 / p.screen_resolution_width))) * (p.screen_size_inches * SIN(ATAN(p.screen_resolution_height * 1.0 / p.screen_resolution_width))) AS screen_area FROM phones p) SELECT p.phone_id, p.screen_area FROM PhoneScreenAreas p, HypotheticalArea h WHERE p.screen_area < h.screen_area ORDER BY p.screen_area DESC LIMIT 5;",
        "db_id": "phone"
    },
    {
        "id": 173,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phones', 'horizontal screen resolution greater than 1080 pixels', 'screen pixel density (PPI)'], 'relations': ['resolution_filter (screen_resolution_width > 1080)', 'sorted_by_pixel_density_descending', 'top_5_results'], 'intent': 'retrieve_and_sort_pixel_density', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1080], 'units': {'screen_resolution': 'pixels', 'pixel_density': 'ppi (pixels per inch)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'pixel_density_ppi', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['422', '515', '411', '496', '458']}]}}\nA physical knowledge question is as follows:\nCalculate and list the screen pixel density (PPI) of mobile phones with a horizontal screen resolution greater than 1080 pixels, sorted in descending order by pixel density, and take the top 5.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, SQRT(POWER(screen_resolution_width, 2) + POWER(screen_resolution_height, 2)) / screen_size_inches AS pixel_density_ppi FROM phones WHERE screen_resolution_width > 1080 ORDER BY pixel_density_ppi DESC LIMIT 5;",
        "db_id": "phone"
    },
    {
        "id": 174,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phones', 'battery capacity >4000mAh', 'battery life (hours)'], 'relations': ['phone_to_battery_capacity (phone_id → battery_capacity_mAh)', 'phone_to_battery_life (phone_id → battery_life_hours)', 'ratio_calculation (battery_life_hours / battery_capacity_mAh)'], 'intent': 'calculate_ratio_filter_sort_limit', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [4000], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'battery_life': 'hours', 'ratio': 'hours/mAh (implied by calculation)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.hardware_specs': [{'column': 'battery_life_hours', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['24.0', '30.0', '20.0', '36.0', '22.0']}]}}\nA mathematical logic question is as follows:\nCalculate and list the ratio of battery life (hours) to battery capacity (mAh) for mobile phones with a battery capacity above 4000mAh, sorted in ascending order by the ratio, and take the top 10.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh, h.battery_life_hours, (h.battery_life_hours / p.battery_capacity_mAh) AS efficiency_ratio FROM phones p JOIN hardware_specs h ON p.phone_id = h.phone_id WHERE p.battery_capacity_mAh > 4000 ORDER BY efficiency_ratio ASC LIMIT 10;",
        "db_id": "phone"
    },
    {
        "id": 175,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['smartphone', 'screen size 6 inches', 'price $500', 'pixel density'], 'relations': ['phone_to_screen_size (phone_id → screen_size_inches)', 'phone_to_price (phone_id → price_usd)', 'screen_size_filter (>6 inches)', 'price_filter (<$500)', 'pixel_density_aggregation (AVG(pixel_density_ppi))'], 'intent': 'filter_smartphones_by_screen_size_and_price_and_calculate_average_pixel_density', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [6, 500], 'units': {'screen_size': 'inches', 'price': 'USD', 'pixel_density': 'ppi (pixels per inch)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'screen_size_inches', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['6.1', '6.7', '6.4', '6.9', '5.8']}, {'column': 'price_usd', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['799.99', '1099.99', '699.99', '1299.99', '899.99']}, {'column': 'pixel_density_ppi', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['422', '515', '411', '496', '458']}]}}\nA common sense reasoning question is as follows:\nList smartphones with screen sizes larger than 6 inches and a selling price below $500, sorted by ascending screen size, and calculate the average pixel density of these devices.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.screen_size_inches, p.price_usd, p.pixel_density_ppi FROM phones p WHERE p.screen_size_inches > 6 AND p.price_usd < 500 ORDER BY p.screen_size_inches ASC; SELECT AVG(p.pixel_density_ppi) AS average_pixel_density FROM phones p WHERE p.screen_size_inches > 6 AND p.price_usd < 500;",
        "db_id": "phone"
    },
    {
        "id": 176,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['horizontal resolution 100000 pixels', 'vertical resolution 50000 pixels', 'screen size 100 inches', 'pixel density exceeding 10000 PPI'], 'relations': ['calculate_diagonal_pixels (sqrt(width^2 + height^2))', 'calculate_pixel_density (diagonal_pixels / screen_size_inches)', 'filter_by_pixel_density (pixel_density > 10000 PPI)'], 'intent': 'calculate_pixel_density_and_list_high_density_phones', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100000, 50000, 100, 10000], 'units': {'resolution': 'pixels', 'screen_size': 'inches', 'pixel_density': 'PPI (pixels per inch)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'pixel_density_ppi', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['422', '515', '411', '496', '458']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a smartphone has a horizontal resolution of 100,000 pixels, a vertical resolution of 50,000 pixels, and a screen size of 100 inches, calculate its pixel density and list all smartphones with a pixel density exceeding 10,000 PPI, sorted in descending order by pixel density.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, screen_resolution_width, screen_resolution_height, screen_size_inches, pixel_density_ppi FROM phones WHERE pixel_density_ppi > 10000 ORDER BY pixel_density_ppi DESC;",
        "db_id": "phone"
    },
    {
        "id": 177,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone', 'battery capacity 5000mAh', 'power 5W'], 'relations': ['battery_capacity_to_energy (5000mAh → energy in Wh)', 'power_to_time (5W → time in hours)'], 'intent': 'calculate_battery_life_hours', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [5000, 5], 'units': {'battery_capacity': 'mAh (milliampere-hour)', 'power': 'W (watts)', 'conversion': 'Assume standard Li-ion battery voltage of 3.7V for calculation: Energy (Wh) = (Capacity in mAh × Voltage) / 1000; Time (h) = Energy (Wh) / Power (W)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}]}}\nA physical knowledge question is as follows:\nPlease calculate how many hours a mobile phone with a battery capacity of 5000mAh can theoretically sustain continuous discharge at a power of 5W when fully charged.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (battery_capacity_mAh * 3.7) / (5 * 1000) AS discharge_time_hours FROM phones WHERE battery_capacity_mAh = 5000;",
        "db_id": "phone"
    },
    {
        "id": 178,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phones released in 2022', 'battery capacity (mAh)', 'battery life hours'], 'relations': ['phone_to_battery_capacity (phone → battery_capacity_mAh)', 'phone_to_battery_life (phone → battery_life_hours)'], 'intent': 'calculate_average_battery_life_of_top_phones_by_capacity', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2022, 5], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'battery_life': 'hours (implied by battery_life_hours field)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'release_year', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2022', '2023', '2021', '2024', '2025']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.hardware_specs': [{'column': 'battery_life_hours', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['24.0', '30.0', '20.0', '36.0', '22.0']}]}}\nA mathematical logic question is as follows:\nPlease calculate the average battery life (in hours) of the top 5 mobile phones released in 2022 based on battery capacity, ranked from longest to shortest battery life.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(hs.battery_life_hours) AS average_battery_life_hours FROM (SELECT p.phone_id, p.battery_capacity_mAh FROM phones p WHERE p.release_year = 2022 ORDER BY p.battery_capacity_mAh DESC LIMIT 5) AS top_phones JOIN hardware_specs hs ON top_phones.phone_id = hs.phone_id ORDER BY average_battery_life_hours DESC;",
        "db_id": "phone"
    },
    {
        "id": 179,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['battery capacity', 'screen size', 'phone models'], 'relations': ['battery_capacity_mAh > 4000', 'screen_size_inches < 6', 'sort_by_battery_capacity_desc'], 'intent': 'filter_and_sort_phones_by_hardware_specs', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [4000, 6], 'units': {'battery_capacity': 'mAh (milliampere-hour)', 'screen_size': 'inches'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}, {'column': 'screen_size_inches', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['6.1', '6.7', '6.4', '6.9', '5.8']}]}}\nA common sense reasoning question is as follows:\nPlease find the phone models with a battery capacity greater than 4000mAh and screen size smaller than 6 inches, then sort them by battery capacity in descending order.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM phones WHERE battery_capacity_mAh > 4000 AND screen_size_inches < 6 ORDER BY battery_capacity_mAh DESC;",
        "db_id": "phone"
    },
    {
        "id": 180,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phones', 'battery_capacity_mAh', 'charging_speed_watts'], 'relations': ['phones_to_hardware_specs (phones.phone_id → hardware_specs.phone_id)'], 'intent': 'find_phones_with_battery_and_charging_criteria', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10000, 50], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'charging_speed': 'W (Watts)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.hardware_specs': [{'column': 'charging_speed_watts', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '65.0', '18.0', '120.0', '30.0']}]}}\nA hypothetical reasoning question is as follows:\nFind the model names of phones in the `phones` table where the battery capacity is less than 10000mAh and the charging speed exceeds 50W.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh, hs.charging_speed_watts FROM phones p JOIN hardware_specs hs ON p.phone_id = hs.phone_id WHERE p.battery_capacity_mAh < 10000 AND hs.charging_speed_watts > 50;",
        "db_id": "phone"
    },
    {
        "id": 181,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phone model', 'battery energy', 'top 5 phone models'], 'relations': ['phone_model_to_battery_energy (phone_id → battery_capacity_mAh)', 'ranking_to_top_5 (ordered by calculated battery energy)'], 'intent': 'calculate_battery_energy_and_identify_top_5_models', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [3.7, 3600], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'voltage': 'V (volts, assumed as 3.7V for lithium-ion batteries)', 'energy_conversion': '1 mAh × 3.7V × 3600 = 13,320 J (Joules)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}, {'column': 'model'}]}}\nA physical knowledge question is as follows:\nCalculate the battery energy (in joules) of a certain phone model and identify the top 5 phone models with the highest battery energy.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, (battery_capacity_mAh * 3.7 * 3600) / 1000 AS battery_energy_joules FROM phones ORDER BY battery_energy_joules DESC LIMIT 5;",
        "db_id": "phone"
    },
    {
        "id": 182,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['smartphone model', 'screen resolution width', 'screen resolution height'], 'relations': ['model_to_screen_specs (phone_id → screen_resolution_width/height)', 'pixel_count_calculation (width × height = total pixels)'], 'intent': 'calculate_and_rank_screen_pixel_count', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['screen_resolution_width', 'screen_resolution_height'], 'units': {'screen_resolution': 'pixels (px)', 'total_pixels': 'pixels squared (px²)', 'calculation': 'total_pixel_count = screen_resolution_width × screen_resolution_height'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'screen_resolution_height', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2340', '3200', '2400', '3088', '2436']}]}}\nA mathematical logic question is as follows:\nCalculate the total screen pixel count for each smartphone model and identify the top 10 models with the highest total screen pixel count.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, (screen_resolution_width * screen_resolution_height) AS pixel_count FROM phones ORDER BY pixel_count DESC LIMIT 10;",
        "db_id": "phone"
    },
    {
        "id": 183,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone battery life 24 hours', 'mobile phone price 500 dollars'], 'relations': ['phone_to_battery_life (phone_id → hardware_specs)', 'price_filter (price_usd < 500)'], 'intent': 'filter_and_sort_phones_by_battery_and_price', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [24, 500], 'units': {'battery_life': 'hours (battery_life_hours)', 'price': 'USD (price_usd)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.hardware_specs': [{'column': 'battery_life_hours', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['24.0', '30.0', '20.0', '36.0', '22.0']}], 'phone.phones': [{'column': 'price_usd', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['799.99', '1099.99', '699.99', '1299.99', '899.99']}, {'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}]}}\nA common sense reasoning question is as follows:\nFind mobile phones with a battery life (battery_life_hours) exceeding 24 hours and a selling price (price_usd) under 500 dollars, sorted in descending order by battery life.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, h.battery_life_hours, p.price_usd FROM phones p JOIN hardware_specs h ON p.phone_id = h.phone_id WHERE h.battery_life_hours > 24 AND p.price_usd < 500 ORDER BY h.battery_life_hours DESC;",
        "db_id": "phone"
    },
    {
        "id": 184,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['battery capacity 1,000,000mAh'], 'relations': ['battery_capacity_to_energy (mAh → joules)', 'energy_comparison (>1,000,000mAh equivalent in joules)'], 'intent': 'calculate_battery_energy_and_compare', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1000000], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'energy': 'joules', 'conversion': 'Assumed 3.7V battery voltage (standard for Li-ion): 1mAh = 3.6/1000 joules. Formula: E(J) = (mAh × V) / 1000 × 3600'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a certain mobile phone has a battery capacity of 1,000,000mAh, calculate its battery energy (unit: joules) and identify phones with battery energy exceeding this value.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh, (p.battery_capacity_mAh * 3.7 * 3600) / 1000 AS battery_energy_joules FROM phones p WHERE (p.battery_capacity_mAh * 3.7 * 3600) / 1000 > (1000000 * 3.7 * 3600) / 1000;",
        "db_id": "phone"
    },
    {
        "id": 185,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phones', 'pixel density (PPI)', '3840x2160 resolution image', 'physical pixel size (micrometers)'], 'relations': ['phone_to_pixel_density (phone_id → pixel_density_ppi)', 'pixel_density_to_pixel_size (PPI → physical pixel size calculation)'], 'intent': 'calculate_top_phones_by_pixel_density_and_physical_pixel_size', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [3840, 2160, 25.4, 1000], 'units': {'pixel_density': 'PPI (pixels per inch)', 'pixel_size': 'micrometers (µm)', 'conversion': '1 inch = 25.4 mm = 25,400 µm, pixel size = 25400 / PPI'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'screen_size_inches', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['6.1', '6.7', '6.4', '6.9', '5.8']}, {'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'screen_resolution_height', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2340', '3200', '2400', '3088', '2436']}, {'column': 'pixel_density_ppi', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['422', '515', '411', '496', '458']}]}}\nA physical knowledge question is as follows:\nPlease calculate and list the top 5 mobile phones with the highest pixel density (PPI), and determine the actual physical size of each pixel (in micrometers) when these phones display an image with a resolution of 3840x2160.\nyour response just have a SQL without anything.\n",
        "solution": "WITH PixelDensity AS (SELECT phone_id, screen_resolution_width, screen_resolution_height, screen_size_inches, SQRT(POWER(screen_resolution_width, 2) + POWER(screen_resolution_height, 2)) / screen_size_inches AS PPI FROM phones) SELECT p.phone_id, p.screen_resolution_width, p.screen_resolution_height, p.screen_size_inches, pd.PPI, (25.4 / pd.PPI) * 1000 AS pixel_size_micrometers FROM phones p JOIN PixelDensity pd ON p.phone_id = pd.phone_id ORDER BY pd.PPI DESC LIMIT 5;",
        "db_id": "phone"
    },
    {
        "id": 186,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phones', 'battery capacity (mAh)', 'battery life (hours)'], 'relations': ['phone_to_battery_capacity (phone_id → battery_capacity_mAh)', 'phone_to_battery_life (phone_id → battery_life_hours)'], 'intent': 'calculate_battery_efficiency_ratio_and_consumption', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'battery_capacity': 'mAh (milliampere-hour)', 'battery_life': 'hours', 'consumption_rate': 'mAh/hour (calculated as battery_capacity_mAh / battery_life_hours)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.hardware_specs': [{'column': 'battery_life_hours', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['24.0', '30.0', '20.0', '36.0', '22.0']}]}}\nA mathematical logic question is as follows:\nPlease calculate and list the top 10 mobile phones with the highest ratio of battery capacity (mAh) to battery life (hours), and calculate the battery consumption per hour (mAh/hour) for these phones at full charge.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh, hs.battery_life_hours, (p.battery_capacity_mAh / hs.battery_life_hours) AS hourly_consumption_mAh_per_hour FROM phones p JOIN hardware_specs hs ON p.phone_id = hs.phone_id ORDER BY (p.battery_capacity_mAh / hs.battery_life_hours) DESC LIMIT 10;",
        "db_id": "phone"
    },
    {
        "id": 187,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phones', 'screen_size_inches', 'weight_grams'], 'relations': ['phone_to_screen_size (phones.phone_id → phones.screen_size_inches)', 'phone_to_weight (phones.phone_id → phones.weight_grams)', 'sort_by_screen_size (ascending)'], 'intent': 'filter_and_sort_phones_by_hardware_specs', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [6, 150], 'units': {'screen_size': 'inches', 'weight': 'grams'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'screen_size_inches', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['6.1', '6.7', '6.4', '6.9', '5.8']}, {'column': 'weight_grams', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['189.0', '203.0', '196.0', '210.0', '174.0']}]}}\nA common sense reasoning question is as follows:\nPlease list the phones with a screen size larger than 6 inches and weight less than 150 grams, sorted by screen size in ascending order.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM phones WHERE screen_size_inches > 6 AND weight_grams < 150 ORDER BY screen_size_inches ASC;",
        "db_id": "phone"
    },
    {
        "id": 188,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone', 'pixel density 10,000 PPI', 'image resolution 7680x4320', 'screen size 10 inches'], 'relations': ['pixel_density_to_physical_size (10,000 PPI → pixel size in nm)', 'screen_size_to_pixel_density (10 inches → pixel density calculation)'], 'intent': 'calculate_pixel_physical_size', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [10000, 7680, 4320, 10], 'units': {'pixel_density': 'PPI (pixels per inch)', 'screen_size': 'inches', 'resolution': 'pixels (width x height)', 'physical_pixel_size': 'nanometers', 'conversion': '1 inch = 25.4 mm = 25,400,000 nm'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'pixel_density_ppi', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['422', '515', '411', '496', '458']}, {'column': 'screen_size_inches', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['6.1', '6.7', '6.4', '6.9', '5.8']}, {'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'screen_resolution_height', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2340', '3200', '2400', '3088', '2436']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a mobile phone has a pixel density of 10,000 PPI, please calculate and list the actual physical size of each pixel (in nanometers) when displaying an image with a resolution of 7680x4320, and assume the screen size of this phone is 10 inches.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (25.4 / pixel_density_ppi) * 1000000 AS pixel_size_nm FROM phones WHERE pixel_density_ppi = 10000 AND screen_size_inches = 10;",
        "db_id": "phone"
    },
    {
        "id": 189,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone model', 'pixel density (PPI)'], 'relations': ['model_to_screen_specs (phone → screen_size_inches, screen_resolution_width, screen_resolution_height)', 'ppi_calculation_formula (PPI = √(width² + height²) / screen_size)'], 'intent': 'calculate_pixel_density_and_rank_models', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'screen_size': 'inches (diagonal measurement)', 'resolution': 'pixels (width x height)', 'ppi': 'pixels per inch (PPI)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'screen_size_inches', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['6.1', '6.7', '6.4', '6.9', '5.8']}, {'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'screen_resolution_height', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2340', '3200', '2400', '3088', '2436']}]}}\nA physical knowledge question is as follows:\nCalculate the pixel density (PPI) for each mobile phone model and identify the top 5 phones with the highest pixel density.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, SQRT(POWER(screen_resolution_width, 2) + POWER(screen_resolution_height, 2)) / screen_size_inches AS pixel_density_ppi FROM phones ORDER BY pixel_density_ppi DESC LIMIT 5;",
        "db_id": "phone"
    },
    {
        "id": 190,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['smartphone', 'battery energy', 'joules', 'battery_capacity_mAh', 'voltage (assumed standard value)'], 'relations': ['phone_to_battery_capacity (phone_id → battery_capacity_mAh)'], 'intent': 'calculate_battery_energy_and_rank_top_smartphones', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['battery_capacity_mAh (from phones table)'], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'voltage': 'V (volts, assumed standard value, e.g., 3.7V for Li-ion)', 'energy_conversion': 'J = (mAh / 1000) * V * 3600', 'final_energy_unit': 'joules'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}]}}\nA mathematical logic question is as follows:\nCalculate the battery energy (in joules) for each smartphone and identify the top 5 smartphones with the highest energy.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh * 3.7 * 3.6 AS battery_energy_joules FROM phones p ORDER BY battery_energy_joules DESC LIMIT 5;",
        "db_id": "phone"
    },
    {
        "id": 191,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phones', 'battery_capacity_mAh', 'battery_life_hours'], 'relations': ['phone_to_battery_capacity (phone_id → battery_capacity_mAh)', 'phone_to_battery_life (phone_id → battery_life_hours)'], 'intent': 'find_phones_with_proportional_battery_life_and_sort', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'battery_life': 'hours', 'conversion': 'direct proportionality (battery_life_hours ∝ battery_capacity_mAh)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.hardware_specs': [{'column': 'battery_life_hours', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['24.0', '30.0', '20.0', '36.0', '22.0']}]}}\nA common sense reasoning question is as follows:\nFind phones with a battery life (battery_life_hours) that is directly proportional to their battery capacity (battery_capacity_mAh), and sort them in descending order by battery life.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh, hs.battery_life_hours FROM phones p JOIN hardware_specs hs ON p.phone_id = hs.phone_id ORDER BY hs.battery_life_hours DESC;",
        "db_id": "phone"
    },
    {
        "id": 192,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['cpu_clock_speed_ghz', 'geekbench_multi_core_score'], 'relations': ['cpu_speed_to_performance (100GHz → multi-core score)'], 'intent': 'calculate_and_rank_geekbench_scores', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100], 'units': {'cpu_clock_speed': 'GHz (Gigahertz)', 'geekbench_score': 'unitless (database-defined metric)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}, {'fk_table': 'performance_metrics', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'performance_metrics', 'pk_column': 'metric_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.hardware_specs': [{'column': 'cpu_clock_speed_ghz', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['3.2', '3.8', '2.8', '4.0', '3.0']}], 'phone.performance_metrics': [{'column': 'geekbench_multi_core_score'}], 'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the processor's clock speed (cpu_clock_speed_ghz) reaches 100GHz, calculate the Geekbench multi-core score (geekbench_multi_core_score) for each smartphone and identify the top 5 smartphones with the highest scores.\nyour response just have a SQL without anything.\n",
        "solution": "WITH AdjustedScores AS (SELECT p.phone_id, (100 / hs.cpu_clock_speed_ghz) * pm.geekbench_multi_core_score AS adjusted_geekbench_multi_core_score FROM phones p JOIN hardware_specs hs ON p.phone_id = hs.phone_id JOIN performance_metrics pm ON p.phone_id = pm.phone_id) SELECT phone_id, adjusted_geekbench_multi_core_score FROM AdjustedScores ORDER BY adjusted_geekbench_multi_core_score DESC LIMIT 5;",
        "db_id": "phone"
    },
    {
        "id": 193,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['smartphone model with CPU 2.5 GHz', '8 GB RAM', '4000 mAh battery capacity'], 'relations': ['phone_to_hardware_specs (phone_id → hardware_specs)', 'spec_to_battery (battery_capacity_mAh → battery_life_hours)'], 'intent': 'calculate_power_consumption_and_battery_life', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [2.5, 8, 4000], 'units': {'cpu_clock_speed': 'GHz', 'ram': 'GB', 'battery_capacity': 'mAh', 'power_consumption': 'Watts (calculated)', 'battery_life': 'hours (theoretical)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.hardware_specs': [{'column': 'cpu_clock_speed_ghz', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['3.2', '3.8', '2.8', '4.0', '3.0']}, {'column': 'ram_gb', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['8', '12', '6', '16', '24']}]}}\nA physical knowledge question is as follows:\nCalculate the power consumption of a certain model of smartphone running at full load, assuming its CPU clock speed is 2.5 GHz, RAM is 8 GB, and battery capacity is 4000 mAh. Determine the theoretical battery life under full load operation.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh, h.cpu_clock_speed_ghz, h.ram_gb, (h.cpu_clock_speed_ghz * 2.5 + h.ram_gb * 0.5) AS total_power_watts, (p.battery_capacity_mAh / ((h.cpu_clock_speed_ghz * 2.5 + h.ram_gb * 0.5) * 1000 / 3.7)) AS battery_life_hours FROM phones p JOIN hardware_specs h ON p.phone_id = h.phone_id WHERE h.cpu_clock_speed_ghz = 2.5 AND h.ram_gb = 8 AND p.battery_capacity_mAh = 4000;",
        "db_id": "phone"
    },
    {
        "id": 194,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phone model', '12 GB RAM', 'storage read speed 500 MB/s', 'storage write speed 300 MB/s'], 'relations': ['model_to_hardware_specs (phone model → hardware_specs)', 'speed_to_data_volume (storage speeds → data volume calculation)'], 'intent': 'calculate_max_data_volume_processed', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [12, 500, 300], 'units': {'storage_speed': 'MB/s (user input) → Mbps (database) → conversion factor: 1 MB/s = 8 Mbps', 'time': '1 hour = 3600 seconds', 'data_volume': 'TB (terabytes) or PB (petabytes) depending on calculation'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}], 'tableinfo': {'phone.hardware_specs': [{'column': 'ram_gb', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['8', '12', '6', '16', '24']}, {'column': 'storage_read_speed_mbps', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2100', '3500', '1800', '5000', '2500']}, {'column': 'storage_write_speed_mbps', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1200', '2500', '900', '4000', '1500']}]}}\nA mathematical logic question is as follows:\nCalculate the maximum data volume that a certain model of phone can process within one hour when it has 12 GB of RAM, a storage device read speed of 500 MB/s, and a write speed of 300 MB/s.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ((storage_read_speed_mbps + storage_write_speed_mbps) * 3600 / 1024) AS max_data_volume_gb FROM hardware_specs WHERE ram_gb = 12 AND storage_read_speed_mbps = 500 AND storage_write_speed_mbps = 300;",
        "db_id": "phone"
    },
    {
        "id": 195,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone model', 'battery capacity 5000 mAh', 'screen size 6.5 inches', 'screen resolution 1080x2340', 'theoretical battery life in video playback mode'], 'relations': ['phone_to_performance_metrics (phone_id → performance_metrics)', 'screen_specs_to_battery_life (screen_size/resolution → battery consumption)'], 'intent': 'query_battery_life_for_video_playback', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [5000, 6.5, 1080, 2340], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'screen_size': 'inches (diagonal measurement)', 'resolution': 'pixels (width x height)', 'battery_life': 'hours (implied by column name)'}, 'foreign_keys': [{'fk_table': 'performance_metrics', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'performance_metrics', 'pk_column': 'metric_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}, {'column': 'screen_size_inches', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['6.1', '6.7', '6.4', '6.9', '5.8']}, {'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'screen_resolution_height', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2340', '3200', '2400', '3088', '2436']}], 'phone.performance_metrics': [{'column': 'battery_life_video_playback_hours'}]}}\nA common sense reasoning question is as follows:\nQuery the battery life of a certain model of mobile phone, assuming its battery capacity is 5000 mAh, screen size is 6.5 inches, screen resolution is 1080x2340, and find its theoretical battery life in video playback mode.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (5000 / ((6.5 * 1080 * 2340 * 0.000001) * 1000 / 3.7)) AS battery_life_hours FROM phones WHERE screen_size_inches = 6.5 AND screen_resolution_width = 1080 AND screen_resolution_height = 2340 AND battery_capacity_mAh = 5000;",
        "db_id": "phone"
    },
    {
        "id": 196,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['smartphone model', 'RAM capacity 1 TB', 'storage read speed 100 GB/s', 'storage write speed 50 GB/s', 'battery capacity 100000 mAh'], 'relations': ['phone_to_hardware_specs (phone_id → hardware_specs)', 'storage_speed_to_data_throughput (read/write speeds → data processed in 1s)', 'battery_capacity_to_battery_life (battery capacity → theoretical battery life)'], 'intent': 'calculate_data_throughput_and_battery_life', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1024, 100, 50, 100000], 'units': {'ram': 'GB (1 TB = 1024 GB)', 'storage_speed': 'GB/s (converted to Mbps for database: read=819200 Mbps, write=409600 Mbps)', 'battery': 'mAh (milliampere-hours)', 'throughput': 'GB/s (calculated as 150 GB/s total)', 'battery_life': 'hours (theoretical)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.hardware_specs': [{'column': 'ram_gb', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['8', '12', '6', '16', '24']}, {'column': 'storage_read_speed_mbps', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2100', '3500', '1800', '5000', '2500']}, {'column': 'storage_write_speed_mbps', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1200', '2500', '900', '4000', '1500']}], 'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a certain model of smartphone has 1 TB of RAM, with a storage device read speed of 100 GB/s and a write speed of 50 GB/s, calculate the maximum amount of data it can process in 1 second, and determine its theoretical battery life, assuming a battery capacity of 100000 mAh.\nyour response just have a SQL without anything.\n",
        "solution": "WITH max_data AS (SELECT (storage_read_speed_mbps / 1000 + storage_write_speed_mbps / 1000) * 1 AS max_data_processed_tb FROM hardware_specs WHERE ram_gb = 1024) SELECT max_data_processed_tb, (battery_capacity_mAh / (cpu_clock_speed_ghz * 10 + ram_gb * 0.1 + storage_gb * 0.05) * 1000 / 3.7) AS battery_life_hours FROM max_data, hardware_specs JOIN phones ON hardware_specs.phone_id = phones.phone_id WHERE hardware_specs.ram_gb = 1024;",
        "db_id": "phone"
    },
    {
        "id": 197,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phone model', 'battery capacity 0-100%', 'maximum wired charging speed'], 'relations': ['phone_model_to_battery_capacity (phone_id → battery_capacity_mAh)', 'phone_model_to_charging_speed (phone_id → charging_speed_watts)', 'time_formula (battery_capacity_mAh / charging_speed_watts)'], 'intent': 'calculate_and_rank_charging_time', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'charging_speed': 'watts (W)', 'time_calculation': 'hours (derived from mAh/W via assumed voltage normalization)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.hardware_specs': [{'column': 'charging_speed_watts', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '65.0', '18.0', '120.0', '30.0']}]}}\nA physical knowledge question is as follows:\nPlease query and calculate the time required for each phone model to fully charge (assuming charging from 0% to 100%) at its maximum wired charging speed, then sort the results in ascending order by charging time and return the top 5 phone models.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, (p.battery_capacity_mAh * 3.7) / (hs.charging_speed_watts * 1000) AS charging_time_hours FROM phones p JOIN hardware_specs hs ON p.phone_id = hs.phone_id ORDER BY charging_time_hours ASC LIMIT 5;",
        "db_id": "phone"
    },
    {
        "id": 198,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone model', 'screen_resolution_width', 'screen_resolution_height'], 'relations': ['phone_model_to_resolution (phone_id → screen_resolution_width/height)', 'pixel_count_calculation (total_pixels = width × height)'], 'intent': 'calculate_total_screen_pixels_and_rank_top_3_phones', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'resolution': 'pixels (implied by column names)', 'total_pixels': 'calculated unit (width × height)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'screen_resolution_height', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2340', '3200', '2400', '3088', '2436']}]}}\nA mathematical logic question is as follows:\nPlease calculate the total screen pixel count (horizontal resolution * vertical resolution) for each mobile phone model, and identify the top 3 phones with the highest total pixel count, sorted in descending order by total pixels.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, screen_resolution_width * screen_resolution_height AS total_pixels FROM phones ORDER BY total_pixels DESC LIMIT 3;",
        "db_id": "phone"
    },
    {
        "id": 199,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone models', 'battery capacity', 'price'], 'relations': ['battery_capacity_mAh > 4000', 'price_usd < 500', 'sorted_by_battery_capacity_desc'], 'intent': 'query_and_sort_phone_specs', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [4000, 500], 'units': {'battery_capacity': 'mAh (milliampere-hour)', 'price': 'USD (United States Dollar)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}, {'column': 'price_usd', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['799.99', '1099.99', '699.99', '1299.99', '899.99']}]}}\nA common sense reasoning question is as follows:\nPlease query and return the top 10 mobile phone models with battery capacities greater than 4000mAh and prices below $500, sorted in descending order by battery capacity.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, battery_capacity_mAh, price_usd FROM phones WHERE battery_capacity_mAh > 4000 AND price_usd < 500 ORDER BY battery_capacity_mAh DESC LIMIT 10;",
        "db_id": "phone"
    },
    {
        "id": 200,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phone with battery capacity 100000 mAh', 'charging speed 1000W'], 'relations': ['phone_to_specs (phone_id → hardware_specs)', 'charging_time (calculated using energy/power)'], 'intent': 'calculate_charging_time_and_model', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [100000, 1000], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'charging_power': 'W (Watts)', 'conversion': 'Wh = (mAh × voltage) / 1000 (assuming 3.7V battery for calculation)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.hardware_specs': [{'column': 'charging_speed_watts', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '65.0', '18.0', '120.0', '30.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming there is a phone with a battery capacity of 100,000 mAh and a wired charging speed of 1,000W, please calculate the time required to fully charge it and return the model of this phone (assuming it exists).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, (p.battery_capacity_mAh * 3.7) / (hs.charging_speed_watts * 1000) AS charging_time_hours FROM phones p JOIN hardware_specs hs ON p.phone_id = hs.phone_id WHERE p.battery_capacity_mAh = 100000 AND hs.charging_speed_watts = 1000;",
        "db_id": "phone"
    },
    {
        "id": 201,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['battery_capacity_mAh', 'screen_size_inches', 'energy_density_Wh_per_L'], 'relations': ['battery_capacity_threshold (4000mAh)', 'screen_size_threshold (6 inches)', 'volume_calculation (thickness_mm × width_mm × height_mm)', 'energy_density_formula (battery_capacity_mAh × 3.7V / 1000 ÷ volume_L)'], 'intent': 'calculate_and_rank_energy_density', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [4000, 6], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'screen_size': 'inches', 'volume': 'mm³ (cubic millimeters) → converted to L (Liters, 1L=1e6mm³)', 'energy_density': 'Wh/L (Watt-hours per Liter, calculated using assumed 3.7V nominal voltage)', 'calculation': 'Wh = (mAh × 3.7V) / 1000'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}, {'column': 'screen_size_inches', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['6.1', '6.7', '6.4', '6.9', '5.8']}, {'column': 'thickness_mm', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['7.65', '8.1', '8.3', '8.5', '7.4']}, {'column': 'width_mm', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['71.5', '75.9', '73.3', '77.2', '70.9']}, {'column': 'height_mm', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['146.7', '160.9', '159.8', '165.1', '143.6']}]}}\nA physical knowledge question is as follows:\nPlease calculate and list the battery energy density (in Wh/L) for phones with a battery capacity greater than 4000mAh and a screen size larger than 6 inches, then sort them in descending order by energy density and take the top 5.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, (battery_capacity_mAh * 3.7) / (thickness_mm * width_mm * height_mm * 0.001) AS energy_density_WhL FROM phones WHERE battery_capacity_mAh > 4000 AND screen_size_inches > 6 ORDER BY energy_density_WhL DESC LIMIT 5;",
        "db_id": "phone"
    },
    {
        "id": 202,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone'], 'relations': ['screen_resolution_width * screen_resolution_height = total_pixel_count'], 'intent': 'calculate_total_pixel_count_and_rank_top_3', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'resolution': 'pixels (px)', 'total_pixel_count': 'pixel count (width × height in px²)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'screen_resolution_height', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2340', '3200', '2400', '3088', '2436']}]}}\nA mathematical logic question is as follows:\nPlease calculate and list the total screen pixel count (horizontal resolution * vertical resolution) for each mobile phone, and identify the top 3 phones with the highest total pixel count, sorted in descending order by total pixel count.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, screen_resolution_width * screen_resolution_height AS total_pixels FROM phones ORDER BY total_pixels DESC LIMIT 3;",
        "db_id": "phone"
    },
    {
        "id": 203,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['battery_life_hours', 'price_usd', '24 hours', '$500'], 'relations': ['phone_model_to_battery_life (phones.phone_id → hardware_specs.battery_life_hours)', 'phone_model_to_price (phones.phone_id → phones.price_usd)'], 'intent': 'filter_and_rank_phone_models_by_battery_life_and_price', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [24, 500], 'units': {'battery_life': 'hours', 'price': 'USD (United States Dollar)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'price_usd', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['799.99', '1099.99', '699.99', '1299.99', '899.99']}], 'phone.hardware_specs': [{'column': 'battery_life_hours', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['24.0', '30.0', '20.0', '36.0', '22.0']}]}}\nA common sense reasoning question is as follows:\nPlease list the phone models where the battery life (battery_life_hours) is greater than 24 hours and the price is under $500, sorted in descending order by battery life, and limit the results to the top 10.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, h.battery_life_hours, p.price_usd FROM phones p JOIN hardware_specs h ON p.phone_id = h.phone_id WHERE h.battery_life_hours > 24 AND p.price_usd < 500 ORDER BY h.battery_life_hours DESC LIMIT 10;",
        "db_id": "phone"
    },
    {
        "id": 204,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone', 'battery capacity 100000 mAh', 'screen size 20 inches', 'thickness 100 mm', 'width 200 mm', 'height 300 mm'], 'relations': ['battery_capacity_to_energy_density (mAh → Wh/L)', 'volume_calculation (100×200×300 mm³ → 6L)', 'comparison_threshold (existing energy density ×10)'], 'intent': 'calculate_battery_energy_density_and_compare_to_existing_standard', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [100000, 20, 100, 200, 300, 10], 'units': {'battery_capacity': 'mAh (milliampere-hour)', 'energy': 'Wh (watt-hour) = mAh × voltage (V) / 1000 (assuming 3.7V standard)', 'volume': 'L (liter) = mm³ → 1L = 1,000,000 mm³', 'energy_density': 'Wh/L (calculated as 370Wh / 6L ≈ 61.67 Wh/L)', 'comparison': '10× existing standard (assumed median ~250 Wh/L, new value unlikely to exceed)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}, {'column': 'thickness_mm', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['7.65', '8.1', '8.3', '8.5', '7.4']}, {'column': 'width_mm', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['71.5', '75.9', '73.3', '77.2', '70.9']}, {'column': 'height_mm', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['146.7', '160.9', '159.8', '165.1', '143.6']}]}}\nA hypothetical reasoning question is as follows:\nSuppose there is a mobile phone with a battery capacity of 100,000 mAh, a screen size of 20 inches, a thickness of 100 mm, a width of 200 mm, and a height of 300 mm. Please calculate the battery energy density of this phone (in Wh/L) and determine whether it exceeds ten times the energy density of existing mobile phone batteries.\nyour response just have a SQL without anything.\n",
        "solution": "WITH phone_energy_density AS (SELECT phone_id, (battery_capacity_mAh * 3.7) / (thickness_mm * width_mm * height_mm * 0.001) AS energy_density_wh_per_l FROM phones), average_energy_density AS (SELECT AVG(energy_density_wh_per_l) AS avg_energy_density FROM phone_energy_density) SELECT CASE WHEN (100000 * 3.7) / (100 * 200 * 300 * 0.001) > (SELECT avg_energy_density FROM average_energy_density) * 10 THEN 'Yes' ELSE 'No' END AS is_10x_higher FROM dual;",
        "db_id": "phone"
    },
    {
        "id": 205,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['battery_capacity_mAh', 'battery_life_video_playback_hours'], 'relations': ['phone_id (linking phones → performance_metrics)', 'power_consumption_formula (mAh / hours → watts)'], 'intent': 'calculate_average_power_consumption_during_video_playback', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['battery_capacity_mAh', 'battery_life_video_playback_hours'], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'playback_time': 'hours', 'power_consumption': 'watts (W)', 'conversion': 'W = (mAh / 1000) * V / hours (assuming standard battery voltage V=3.7V for Li-ion)'}, 'foreign_keys': [{'fk_table': 'performance_metrics', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'performance_metrics', 'pk_column': 'metric_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.performance_metrics': [{'column': 'battery_life_video_playback_hours'}]}}\nA physical knowledge question is as follows:\nCalculate the average power consumption (in watts) of the mobile phone during video playback, based on battery capacity and video playback endurance time.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh, pm.battery_life_video_playback_hours, (p.battery_capacity_mAh * 3.7 * 3.6) / (pm.battery_life_video_playback_hours * 3600) AS average_power_consumption_watts FROM phones p JOIN performance_metrics pm ON p.phone_id = pm.phone_id;",
        "db_id": "phone"
    },
    {
        "id": 206,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone model', 'battery capacity mAh', 'weight grams'], 'relations': ['phone_model_to_battery_capacity (phone_id → battery_capacity_mAh)', 'phone_model_to_weight (phone_id → weight_grams)'], 'intent': ['calculate_battery_capacity_per_unit_weight', 'sort_asc_battery_density', 'identify_top_5_lowest_density'], 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'battery_capacity': 'mAh (milliampere-hour)', 'weight': 'g (grams)', 'density': 'mAh/g (milliampere-hour per gram)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}, {'column': 'weight_grams', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['189.0', '203.0', '196.0', '210.0', '174.0']}]}}\nA mathematical logic question is as follows:\nCalculate the battery capacity per unit weight (mAh/g) for each mobile phone model, sort them in ascending order, and identify the top 5 phones with the lowest battery capacity density.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, (battery_capacity_mAh / weight_grams) AS battery_density_mAh_g FROM phones ORDER BY battery_density_mAh_g ASC LIMIT 5;",
        "db_id": "phone"
    },
    {
        "id": 207,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['video playback battery life', 'selling price', 'mobile phone models'], 'relations': ['battery_life_filter (battery_life_video_playback_hours > 20)', 'price_filter (price_usd < 500)', 'descending_order (battery life)'], 'intent': 'retrieve_filtered_phone_models', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [20, 500], 'units': {'battery_life': 'hours', 'price': 'USD (United States Dollar)'}, 'foreign_keys': [{'fk_table': 'performance_metrics', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'performance_metrics', 'pk_column': 'metric_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'price_usd', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['799.99', '1099.99', '699.99', '1299.99', '899.99']}], 'phone.performance_metrics': [{'column': 'battery_life_video_playback_hours'}]}}\nA common sense reasoning question is as follows:\nFind the models of mobile phones with video playback battery life exceeding 20 hours and a selling price below $500, sorted in descending order by battery life.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, pm.battery_life_video_playback_hours, p.price_usd FROM phones p JOIN performance_metrics pm ON p.phone_id = pm.phone_id WHERE pm.battery_life_video_playback_hours > 20 AND p.price_usd < 500 ORDER BY pm.battery_life_video_playback_hours DESC;",
        "db_id": "phone"
    },
    {
        "id": 208,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['battery_capacity 1,000,000 mAh', 'video_playback_endurance 1,000 hours'], 'relations': ['battery_capacity_to_video_life (1,000,000 mAh → 1,000 hours)'], 'intent': 'calculate_average_power_consumption_and_verify_existence', 'reasoning_type': 'physical knowledge reasoning + mathematical logic reasoning', 'numerical_values': [1000000, 1000], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'video_playback_time': 'hours', 'power_consumption': 'W (watts, derived via voltage assumption 3.7V)', 'conversion': '1,000,000 mAh / 1,000 h = 1,000 mA → 1,000 mA * 3.7V = 3.7W (approximate calculation)'}, 'foreign_keys': [{'fk_table': 'performance_metrics', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'performance_metrics', 'pk_column': 'metric_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.performance_metrics': [{'column': 'battery_life_video_playback_hours'}]}}\nA hypothetical reasoning question is as follows:\nAssuming a certain mobile phone has a battery capacity of 1,000,000 mAh and a video playback endurance time of 1,000 hours, calculate its average power consumption and determine whether such a mobile phone exists.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (1000000 * 3.7 * 3.6) / (1000 * 3600) AS average_power_consumption_watts FROM phones WHERE battery_capacity_mAh = 1000000 AND EXISTS (SELECT 1 FROM performance_metrics WHERE performance_metrics.phone_id = phones.phone_id AND battery_life_video_playback_hours = 1000);",
        "db_id": "phone"
    },
    {
        "id": 209,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone model', 'battery_capacity_mAh', 'screen_resolution', 'maximum_screen_brightness', 'highest_resolution'], 'relations': ['phone_to_hardware_specs (phone_id → hardware_specs)', 'phone_to_performance_metrics (phone_id → performance_metrics)', 'battery_capacity_to_energy_conversion (mAh → Wh)', 'screen_power_consumption (brightness × resolution)'], 'intent': 'calculate_theoretical_battery_life', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['battery_capacity_mAh (e.g., 4000 mAh)', 'screen_resolution_width', 'screen_resolution_height'], 'units': {'battery_capacity': 'mAh (milliampere-hour)', 'energy': 'Wh (watt-hour, calculated as mAh × voltage / 1000, assuming standard 3.7V)', 'power': 'W (watts, screen power consumption, approximated from resolution and brightness)', 'time': 'hours (battery life, calculated as energy / power)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}, {'fk_table': 'performance_metrics', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'performance_metrics', 'pk_column': 'metric_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}, {'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'screen_resolution_height', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2340', '3200', '2400', '3088', '2436']}], 'phone.hardware_specs': [{'column': 'charging_speed_watts', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '65.0', '18.0', '120.0', '30.0']}], 'phone.performance_metrics': [{'column': 'battery_life_video_playback_hours'}]}}\nA physical knowledge question is as follows:\nCalculate the theoretical battery life of a certain model of mobile phone when continuously playing videos at maximum screen brightness and highest resolution under full charge conditions, assuming all battery energy is converted into screen energy consumption.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh * 3.7 * 3.6 / pm.gfxbench_fps AS theoretical_battery_life_hours FROM phones p JOIN performance_metrics pm ON p.phone_id = pm.phone_id WHERE p.phone_id = '1';",
        "db_id": "phone"
    },
    {
        "id": 210,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['specific phone model', 'maximum screen brightness', 'highest resolution', 'fully charged battery'], 'relations': ['phone_to_battery_capacity (phone_id → battery_capacity_mAh)', 'screen_power_consumption_dependency (resolution, brightness)'], 'intent': 'calculate_theoretical_battery_life', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [], 'units': {'battery_capacity': 'mAh (milliampere-hour)', 'power_consumption': 'W (Watts) (implied but not directly stored)', 'time': 'hours (calculated as battery_capacity_mAh / (power_consumption_W × 1000 / voltage_V))', 'conversion': 'mAh to Wh requires voltage (unknown in schema)'}, 'foreign_keys': [{'fk_table': 'performance_metrics', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'performance_metrics', 'pk_column': 'metric_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}, {'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'screen_resolution_height', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2340', '3200', '2400', '3088', '2436']}], 'phone.performance_metrics': [{'column': 'battery_life_video_playback_hours'}]}}\nA mathematical logic question is as follows:\nCalculate the theoretical battery life of a specific model phone when continuously playing videos at maximum screen brightness and highest resolution while fully charged, assuming all battery energy is converted into screen power consumption.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh * 3.7 * 3.6 / (pm.gfxbench_fps * pm.gfxbench_fps) AS theoretical_battery_life_hours FROM phones p JOIN performance_metrics pm ON p.phone_id = pm.phone_id WHERE p.phone_id = 'specific_phone_id';",
        "db_id": "phone"
    },
    {
        "id": 211,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phone battery capacity', 'charging speed'], 'relations': ['battery_capacity_to_charging_time (battery_capacity_mAh ÷ charging_speed_watts → time_hours)'], 'intent': 'calculate_charging_time_from_0_to_100_percent', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['battery_capacity_mAh', 'charging_speed_watts'], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'charging_speed': 'W (watts)', 'conversion': 'Time = Battery Capacity (mAh) / Charging Speed (W). Assuming standard battery voltage (e.g., 3.7V for lithium-ion), convert mAh to Wh: (mAh × V)/1000 = Wh. Final time unit: hours'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.hardware_specs': [{'column': 'charging_speed_watts', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '65.0', '18.0', '120.0', '30.0']}]}}\nA common sense reasoning question is as follows:\nBased on the phone's battery capacity and charging speed, calculate the time required to charge the phone from 0% to 100%.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh, h.charging_speed_watts, (p.battery_capacity_mAh / (h.charging_speed_watts * 1000 / 5)) AS charging_time_hours FROM phones p JOIN hardware_specs h ON p.phone_id = h.phone_id;",
        "db_id": "phone"
    },
    {
        "id": 212,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone', 'battery capacity 100,000mAh', 'charging speed 1000W'], 'relations': ['phone_to_battery (mobile phone → battery_capacity_mAh)', 'phone_to_charging (mobile phone → charging_speed_watts)'], 'intent': 'calculate_charging_time', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [100000, 1000], 'units': {'battery_capacity': 'mAh (milliampere-hour)', 'charging_speed': 'W (watts)', 'conversion': '3.7 V (standard lithium-ion battery voltage, assumed for calculation)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.hardware_specs': [{'column': 'charging_speed_watts', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '65.0', '18.0', '120.0', '30.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a certain model of mobile phone has a battery capacity of 100,000mAh and a charging speed of 1000W, calculate the time required to charge the phone from 0% to 100%.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.battery_capacity_mAh / (h.charging_speed_watts * 1000) AS charging_time_hours FROM phones p JOIN hardware_specs h ON p.phone_id = h.phone_id WHERE p.battery_capacity_mAh = 100000;",
        "db_id": "phone"
    },
    {
        "id": 213,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone model', 'power consumption at 50% brightness (2W)', 'maximum screen brightness (500 nits)', '50% brightness (250 nits)'], 'relations': ['brightness_to_power_ratio', 'linear_proportionality (250 nits → 2W, 500 nits → 4W)'], 'intent': 'calculate_power_consumption_at_max_brightness', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2, 250, 500], 'units': {'power_consumption': 'W (watts)', 'brightness': 'nits (candelas per square meter)', 'proportionality_factor': '1W per 125 nits'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'screen_brightness_nits'}], 'phone.hardware_specs': [{'column': 'power_consumption_watts'}, {'column': 'brightness_percentage_to_wattage'}]}}\nA physical knowledge question is as follows:\nCalculate the power consumption of a certain model of mobile phone when playing video at maximum brightness, assuming that screen brightness is directly proportional to power consumption. It is known that the phone consumes 2W of power at 50% brightness, with a maximum screen brightness of 500 nits and 50% brightness corresponding to 250 nits.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (2 * (500 / 250)) AS max_power_consumption_watts FROM phones WHERE phone_id = '1';",
        "db_id": "phone"
    },
    {
        "id": 214,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone model', 'battery capacity 4000mAh', 'battery voltage 3.7V', 'video playback endurance time 10 hours'], 'relations': ['model_to_battery_capacity (phone → 4000mAh)', 'battery_energy (4000mAh × 3.7V = 14.8Wh)', 'energy_consumption (14.8Wh total over 10 hours)'], 'intent': 'calculate_energy_consumption_during_video_playback', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [4000, 3.7, 10], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'voltage': 'V (volts)', 'energy': 'Wh (watt-hours, calculated as mAh × V / 1000)', 'time': 'hours'}, 'foreign_keys': [{'fk_table': 'performance_metrics', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'performance_metrics', 'pk_column': 'metric_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.performance_metrics': [{'column': 'battery_life_video_playback_hours'}]}}\nA mathematical logic question is as follows:\nCalculate the total energy consumption of a specific model of mobile phone during continuous video playback, assuming the video playback endurance time is 10 hours, the battery capacity is 4000mAh, and the battery voltage is 3.7V.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (battery_capacity_mAh * 3.7) / 1000 AS total_energy_Wh, ((battery_capacity_mAh * 3.7) / 1000) / 10 AS avg_power_consumption_W FROM phones WHERE phone_id = '1';",
        "db_id": "phone"
    },
    {
        "id": 215,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['battery_capacity_mAh', 'price_usd'], 'relations': ['battery_capacity_comparison (greater than 4000)', 'price_comparison (below 500)'], 'intent': 'filter_and_sort_phones_by_battery_and_price', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [4000, 500], 'units': {'battery_capacity': 'mAh', 'price': 'USD'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}, {'column': 'price_usd', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['799.99', '1099.99', '699.99', '1299.99', '899.99']}]}}\nA common sense reasoning question is as follows:\nFind the phone models with battery capacity greater than 4000mAh and price below $500, sorted in ascending order by battery capacity.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, battery_capacity_mAh FROM phones WHERE battery_capacity_mAh > 4000 AND price_usd < 500 ORDER BY battery_capacity_mAh ASC;",
        "db_id": "phone"
    },
    {
        "id": 216,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['thermal throttling percentage 200%', 'phone models', 'performance loss', '50% threshold'], 'relations': ['phone_model_to_metrics (phone_id → thermal_throttling_percentage)', 'performance_loss_calculation (thermal_throttling_percentage = performance_loss)'], 'intent': 'calculate_and_compare_performance_loss', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [200, 50], 'units': {'thermal_throttling': '% (percentage)', 'performance_loss': '% (percentage)'}, 'foreign_keys': [{'fk_table': 'performance_metrics', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'performance_metrics', 'pk_column': 'metric_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.performance_metrics': [{'column': 'thermal_throttling_percentage'}], 'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the thermal throttling percentage of a certain model of mobile phone is 200%, calculate its performance loss under extreme conditions, and identify the phone models with performance losses exceeding 50%.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT pm.phone_id, (pm.thermal_throttling_percentage - 100) AS performance_loss_percentage FROM performance_metrics pm WHERE pm.thermal_throttling_percentage > 150;",
        "db_id": "phone"
    },
    {
        "id": 217,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phone sold in 2022', 'largest battery capacity', 'fully charged state'], 'relations': ['phone_to_sales_year (phone_id → sale_year)', 'battery_capacity_to_energy (mAh → joules)'], 'intent': 'calculate_energy_output_in_joules', 'reasoning_type': 'physical knowledge reasoning + common sense understanding reasoning', 'numerical_values': [2022, 3.7, 3600], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'voltage': 'V (volts, assumed 3.7V for Li-ion batteries)', 'time': 'seconds (conversion factor 3600s/hour)', 'energy': 'joules (calculated using E = mAh * V * 3.6)'}, 'foreign_keys': [{'fk_table': 'sales_data', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}, {'pk_table': 'sales_data', 'pk_column': 'sale_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.sales_data': [{'column': 'sale_year', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2022', '2023', '2021', '2020', '2024']}]}}\nA physical knowledge question is as follows:\nCalculate the total energy, in joules, that the phone with the largest battery capacity among those sold in 2022 can provide when fully charged.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (MAX(p.battery_capacity_mAh) / 1000) * 3.7 * 3600 AS total_energy_joules FROM phones p JOIN sales_data s ON p.phone_id = s.phone_id WHERE s.sale_year = 2022;",
        "db_id": "phone"
    },
    {
        "id": 218,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['2021', '2022'], 'relations': ['sales_revenue_gross_over_years', 'revenue_growth_between_years'], 'intent': 'calculate_sales_revenue_growth_rate_and_identify_top_grossing_phone_model', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2021, 2022], 'units': {'revenue': 'USD (United States Dollar)', 'growth_rate': 'percentage (%)'}, 'foreign_keys': [{'fk_table': 'sales_data', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}, {'pk_table': 'sales_data', 'pk_column': 'sale_id'}], 'tableinfo': {'phone.sales_data': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'revenue_usd', 'type': 'DECIMAL(15, 2)', 'primary_key': False, 'comment': '', 'examples': ['39999500.0', '32999700.0', '55999200.0', '25999800.0', '53999400.0']}, {'column': 'sale_year', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2022', '2023', '2021', '2020', '2024']}], 'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}]}}\nA mathematical logic question is as follows:\nFind the highest-grossing mobile phone model in sales for 2021 and 2022, and calculate the sales revenue growth rate over these two years.\nyour response just have a SQL without anything.\n",
        "solution": "WITH yearly_revenue AS (SELECT p.phone_id, sd.sale_year, SUM(sd.revenue_usd) AS total_revenue FROM phones p JOIN sales_data sd ON p.phone_id = sd.phone_id WHERE sd.sale_year IN (2021, 2022) GROUP BY p.phone_id, sd.sale_year), max_revenue_per_year AS (SELECT sale_year, MAX(total_revenue) AS max_revenue FROM yearly_revenue GROUP BY sale_year), top_phones AS (SELECT yr.phone_id, yr.sale_year, yr.total_revenue FROM yearly_revenue yr JOIN max_revenue_per_year mrpy ON yr.sale_year = mrpy.sale_year AND yr.total_revenue = mrpy.max_revenue) SELECT tp2021.phone_id AS top_phone_2021, tp2021.total_revenue AS revenue_2021, tp2022.phone_id AS top_phone_2022, tp2022.total_revenue AS revenue_2022, ((tp2022.total_revenue - tp2021.total_revenue) / tp2021.total_revenue) * 100 AS growth_rate_percentage FROM top_phones tp2021 JOIN top_phones tp2022 ON tp2021.sale_year = 2021 AND tp2022.sale_year = 2022;",
        "db_id": "phone"
    },
    {
        "id": 219,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone model', '2022 sales data', 'battery life', 'customer satisfaction score'], 'relations': ['phone_model_to_sales (phones.phone_id → sales_data.phone_id)', 'phone_model_to_battery_life (phones.phone_id → hardware_specs.phone_id → battery_life_hours)', 'phone_model_to_performance_metrics (phones.phone_id → performance_metrics.phone_id → battery_life_video_playback_hours)', 'sales_year_filter (2022 in sales_data.sale_year)', 'satisfaction_analysis (battery_life_hours ↔ customer_satisfaction_score)'], 'intent': 'identify_top_selling_phone_and_analyze_battery_satisfaction_relationship', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [2022], 'units': {'battery_life': 'hours (battery_life_hours from hardware_specs)', 'customer_satisfaction': 'score (customer_satisfaction_score from sales_data)', 'sales_year': 'year (sale_year in sales_data)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}, {'fk_table': 'performance_metrics', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}, {'fk_table': 'sales_data', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'performance_metrics', 'pk_column': 'metric_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}, {'pk_table': 'sales_data', 'pk_column': 'sale_id'}], 'tableinfo': {'phone.phones': [{'column': 'model_name'}, {'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'phone.sales_data': [{'column': 'units_sold', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['50000', '30000', '80000', '20000', '60000']}, {'column': 'sale_year', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2022', '2023', '2021', '2020', '2024']}, {'column': 'customer_satisfaction_score', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['4.5', '4.8', '4.2', '4.9', '4.6']}], 'phone.hardware_specs': [{'column': 'battery_life_hours', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['24.0', '30.0', '20.0', '36.0', '22.0']}], 'phone.performance_metrics': [{'column': 'battery_life_video_playback_hours'}, {'column': 'battery_life_web_browsing_hours'}]}}\nA common sense reasoning question is as follows:\nFind the highest-selling mobile phone model in 2022 and analyze the relationship between its battery life and customer satisfaction.\nyour response just have a SQL without anything.\n",
        "solution": "WITH top_selling_phone_2022 AS (SELECT sd.phone_id, SUM(sd.units_sold) AS total_units_sold FROM sales_data sd WHERE sd.sale_year = 2022 GROUP BY sd.phone_id ORDER BY total_units_sold DESC LIMIT 1) SELECT p.phone_id, hs.battery_life_hours, AVG(sd.customer_satisfaction_score) AS avg_customer_satisfaction_score FROM phones p JOIN hardware_specs hs ON p.phone_id = hs.phone_id JOIN sales_data sd ON p.phone_id = sd.phone_id JOIN top_selling_phone_2022 tsp ON p.phone_id = tsp.phone_id GROUP BY p.phone_id, hs.battery_life_hours;",
        "db_id": "phone"
    },
    {
        "id": 220,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone', 'battery capacity 100,000mAh', 'video playback'], 'relations': ['phone_to_battery_capacity (phone → battery_capacity_mAh)', 'battery_capacity_to_video_battery_life (battery_capacity_mAh → battery_life_video_playback_hours)'], 'intent': 'calculate_battery_life_for_video_playback', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [100000], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'battery_life': 'hours (implied by database schema)'}, 'foreign_keys': [{'fk_table': 'performance_metrics', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'performance_metrics', 'pk_column': 'metric_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.performance_metrics': [{'column': 'battery_life_video_playback_hours'}]}}\nA hypothetical reasoning question is as follows:\nAssuming a mobile phone has a battery capacity of 100,000mAh, calculate how many hours the phone can continuously play videos on a full charge under ideal conditions?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (battery_capacity_mAh / 1000) * 3.7 / 5 AS video_playback_hours FROM phones WHERE battery_capacity_mAh = 100000;",
        "db_id": "phone"
    },
    {
        "id": 221,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['10GB movie', 'download_speed_mbps'], 'relations': ['movie_size_to_download_time (10GB → time calculation)', 'network_performance.download_speed_mbps (source of speed)'], 'intent': 'calculate_download_time', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10], 'units': {'file_size': 'GB (gigabytes)', 'download_speed': 'Mbps (megabits per second)', 'conversion': '10 GB = 81920 Mb (10 * 1024 * 8), time = 81920 Mb / download_speed_mbps'}, 'foreign_keys': [{'fk_table': 'network_performance', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'network_performance', 'pk_column': 'network_id'}], 'tableinfo': {'phone.network_performance': [{'column': 'download_speed_mbps', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['120.0', '150.0', '100.0', '200.0', '110.0']}]}}\nA physical knowledge question is as follows:\nCalculate the time required to download a 10GB movie at a specific download speed.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (10 * 1024) / (download_speed_mbps * 8) AS download_time_seconds FROM network_performance WHERE phone_id =2;",
        "db_id": "phone"
    },
    {
        "id": 222,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone', 'download speed', 'upload speed'], 'relations': ['phone_to_network_specs (phone_id → network_performance)', 'speed_to_data_transfer (Mbps → annual data)'], 'intent': 'calculate_annual_data_transfer_capacity', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [365, 24, 3600], 'units': {'speed': 'Mbps (from network_performance table)', 'time': 'year (converted to seconds: 365 days × 24 hours × 3600 seconds)', 'data_transfer': 'TB (terabytes, converted from bits: 1 TB = 8,000,000 Mb)', 'conversion': 'Total Data = (Download + Upload) * Time / 8,000,000'}, 'foreign_keys': [{'fk_table': 'network_performance', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'network_performance', 'pk_column': 'network_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.network_performance': [{'column': 'download_speed_mbps', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['120.0', '150.0', '100.0', '200.0', '110.0']}, {'column': 'upload_speed_mbps', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['50.0', '60.0', '40.0', '80.0', '45.0']}], 'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}]}}\nA mathematical logic question is as follows:\nCalculate the total amount of data a mobile phone can transfer in one year given its download and upload speeds.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT n.phone_id, ((n.download_speed_mbps + n.upload_speed_mbps) * 3600 * 24 * 365 / 8 / 1024) AS total_data_gb FROM network_performance n;",
        "db_id": "phone"
    },
    {
        "id": 223,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phone', 'battery capacity', 'download speed', 'continuous data downloading'], 'relations': ['phone_to_battery_capacity (phone → battery_capacity_mAh)', 'phone_to_download_speed (phone → network_performance.download_speed_mbps)'], 'intent': 'estimate_battery_life_during_download', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'download_speed': 'Mbps (megabits per second)', 'battery_life': 'hours (implied unit)'}, 'foreign_keys': [{'fk_table': 'network_performance', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'network_performance', 'pk_column': 'network_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.network_performance': [{'column': 'download_speed_mbps', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['120.0', '150.0', '100.0', '200.0', '110.0']}]}}\nA common sense reasoning question is as follows:\nBased on the phone's battery capacity and download speed, estimate how long the phone's battery can last during continuous data downloading.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh, np.download_speed_mbps, (p.battery_capacity_mAh * 3.7) / (np.download_speed_mbps * 0.1) AS battery_life_hours FROM phones p JOIN network_performance np ON p.phone_id = np.phone_id;",
        "db_id": "phone"
    },
    {
        "id": 224,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone with download speed 1 Tbps', 'time period of 1 year', 'global internet total data volume'], 'relations': ['speed_to_data_volume (1 Tbps → data volume over time)', 'time_period (1 year)'], 'intent': 'calculate_downloaded_data_and_compare_global_internet', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1, 1], 'units': {'speed': 'Tbps (terabits per second)', 'time': 'year (conversion to seconds required)', 'data_volume': 'exabytes (EB) or zettabytes (ZB) for global comparison', 'conversion_formulas': ['1 year = 31,536,000 seconds (365 days)', '1 terabit = 1e12 bits, 1 byte = 8 bits', '1 exabyte = 1e18 bytes']}, 'foreign_keys': [], 'primary_keys': [], 'tableinfo': 'This sql query does not need table and columns information as it is about mathematical calculations.'}\nA hypothetical reasoning question is as follows:\nAssuming a mobile phone has a download speed of 1 Tbps, calculate theoretically how much data such a phone could download in one year and compare it to the total data volume of the global internet.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (1000000 * 3600 * 24 * 365 / 8 / 1024 / 1024 / 1024) AS total_download_data_eb FROM dual;",
        "db_id": "phone"
    },
    {
        "id": 225,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['screen resolution', 'pixel density', 'physical pixel size'], 'relations': ['resolution_to_pixel_dimensions (width/height ratio)', 'pixel_density_to_pixel_size (1/pixel_density)'], 'intent': 'calculate_screen_area_and_physical_pixel_size', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1080, 1920, 400], 'units': {'resolution': 'pixels (width/height)', 'pixel_density': 'ppi (pixels per inch)', 'screen_area': 'square inches', 'pixel_size': 'inches per pixel (1/400 ≈ 0.0025 inches)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'screen_resolution_height', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2340', '3200', '2400', '3088', '2436']}, {'column': 'pixel_density_ppi', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['422', '515', '411', '496', '458']}]}}\nA physical knowledge question is as follows:\nCalculate the screen area of a certain mobile phone, and based on the screen resolution and pixel density, determine the physical size of each pixel.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, screen_size_inches, screen_resolution_width, screen_resolution_height, pixel_density_ppi, (POWER(screen_size_inches, 2) / (1 + POWER(screen_resolution_height / screen_resolution_width, 2)) * (screen_resolution_width / screen_resolution_height)) AS screen_area_square_inches, (25.4 / pixel_density_ppi) AS pixel_width_mm, (25.4 / pixel_density_ppi) AS pixel_height_mm FROM phones;",
        "db_id": "phone"
    },
    {
        "id": 226,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone model', 'battery life hours', 'charging speed watts', 'battery capacity mAh'], 'relations': ['model_to_specs (phone_id → hardware_specs)', 'model_to_battery_capacity (phone_id → phones.battery_capacity_mAh)', 'power_consumption_calculation (energy_joules / battery_life_seconds)', 'charging_efficiency (average_power_consumption / charging_speed_watts)'], 'intent': 'calculate_battery_energy_power_consumption_and_charging_efficiency', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['phones.battery_capacity_mAh', 'hardware_specs.battery_life_hours', 'hardware_specs.charging_speed_watts'], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'energy': 'joules (J) = (mAh * 3.7V * 3.6)', 'power_consumption': 'watts (W) = energy_joules / (battery_life_hours * 3600)', 'charging_efficiency': '% = (average_power_consumption / charging_speed_watts) * 100', 'time_conversion': '1 hour = 3600 seconds'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.hardware_specs': [{'column': 'battery_life_hours', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['24.0', '30.0', '20.0', '36.0', '22.0']}, {'column': 'charging_speed_watts', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '65.0', '18.0', '120.0', '30.0']}]}}\nA mathematical logic question is as follows:\nCalculate the battery energy (in joules) of a certain mobile phone model and, based on its battery life and charging speed, determine its average power consumption and charging efficiency.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh, hs.battery_life_hours, hs.charging_speed_watts, (p.battery_capacity_mAh * 3.7 * 3600 / 1000) AS battery_energy_joules, ((p.battery_capacity_mAh * 3.7 * 3600 / 1000) / (hs.battery_life_hours * 3600)) AS average_power_consumption_watts, ((p.battery_capacity_mAh / (hs.charging_speed_watts * 1000 / 3.7)) * 100) AS charging_efficiency_percentage FROM phones p JOIN hardware_specs hs ON p.phone_id = hs.phone_id;",
        "db_id": "phone"
    },
    {
        "id": 227,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone', 'weight', 'screen size'], 'relations': ['phone_to_weight (mobile phone → weight_grams)', 'phone_to_screen_size (mobile phone → screen_size_inches)'], 'intent': 'evaluate_ergonomic_design_suitability', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'weight': 'grams (g)', 'screen_size': 'inches (in)', 'ergonomic_thresholds': 'typically ≤ 180g weight and ≤ 6.5-inch screen for one-handed usability'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'weight_grams', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['189.0', '203.0', '196.0', '210.0', '174.0']}, {'column': 'screen_size_inches', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['6.1', '6.7', '6.4', '6.9', '5.8']}, {'column': 'width_mm', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['71.5', '75.9', '73.3', '77.2', '70.9']}, {'column': 'height_mm', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['146.7', '160.9', '159.8', '165.1', '143.6']}, {'column': 'thickness_mm', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['7.65', '8.1', '8.3', '8.5', '7.4']}]}}\nA common sense reasoning question is as follows:\nBased on the weight and size of the mobile phone, determine whether it conforms to ergonomic design and is suitable for one-handed operation.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, weight_grams, width_mm, thickness_mm, CASE WHEN weight_grams < 200 AND width_mm < 75 AND thickness_mm < 10 THEN '适合' ELSE '不适合' END AS 单手操作适合性 FROM phones;",
        "db_id": "phone"
    },
    {
        "id": 228,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phone', 'battery_capacity 1,000,000 mAh', 'charging_speed 100W', 'battery_voltage 3.7V', 'target_battery_life 100 years'], 'relations': ['battery_capacity_to_energy (mAh→Wh conversion)', 'charging_time (Wh/W=hours)', 'battery_life_threshold_conversion (years→hours)'], 'intent': 'calculate_charging_time_and_perpetual_device_feasibility', 'reasoning_type': 'physical knowledge reasoning AND mathematical logic reasoning', 'numerical_values': [1000000, 100, 3.7, 100], 'units': {'capacity': 'mAh (milliampere-hours)', 'voltage': 'V (volts)', 'power': 'W (watts)', 'energy_conversion': 'Wh = (mAh × V)/1000', 'time': 'hours = Wh/W', 'battery_life_conversion': '100 years = 876,000 hours'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.hardware_specs': [{'column': 'charging_speed_watts', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '65.0', '18.0', '120.0', '30.0']}, {'column': 'battery_life_hours', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['24.0', '30.0', '20.0', '36.0', '22.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a certain phone has a battery capacity of 1,000,000 mAh, calculate the time required to fully charge it, and based on its battery life, determine whether it can serve as a permanently self-sustaining device. Assuming a charging speed of 100 watts and a battery voltage of 3.7V, calculate the time needed for a full charge. Based on the battery life, assess whether it can function as a permanently self-sustaining device (i.e., with a battery life exceeding 100 years).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phones.phone_id, battery_capacity_mAh, charging_speed_watts, (battery_capacity_mAh * 3.7) / (charging_speed_watts * 1000) AS charge_time_hours, IF(battery_life_hours > 100 * 365 * 24, '是', '否') AS is_permanent_device FROM phones JOIN hardware_specs ON phones.phone_id = hardware_specs.phone_id WHERE battery_capacity_mAh = 1000000 AND charging_speed_watts = 100;",
        "db_id": "phone"
    },
    {
        "id": 229,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone model', 'screen resolution width', 'screen resolution height', 'screen size in inches'], 'relations': ['model_to_screen_specs (phone_id → screen specifications)', 'resolution_to_density (width/height → PPI)'], 'intent': 'calculate_screen_pixel_density_and_identify_highest', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'screen_resolution': 'pixels (width and height)', 'screen_size': 'inches (diagonal)', 'pixel_density': 'PPI (pixels per inch)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'screen_resolution_height', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2340', '3200', '2400', '3088', '2436']}, {'column': 'screen_size_inches', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['6.1', '6.7', '6.4', '6.9', '5.8']}]}}\nA physical knowledge question is as follows:\nCalculate the screen pixel density (PPI) of a certain mobile phone model and identify the model with the highest pixel density.\nyour response just have a SQL without anything.\n",
        "solution": "WITH PixelDensity AS (SELECT phone_id, SQRT(POWER(screen_resolution_width, 2) + POWER(screen_resolution_height, 2)) / screen_size_inches AS ppi FROM phones) SELECT phone_id, ppi FROM PixelDensity WHERE ppi = (SELECT MAX(ppi) FROM PixelDensity);",
        "db_id": "phone"
    },
    {
        "id": 230,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phone model', 'memory bandwidth'], 'relations': ['phone_model_to_memory_bandwidth (phone_model → memory_bandwidth)'], 'intent': 'calculate_and_compare_memory_bandwidth', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'memory_bandwidth': 'GB/s (gigabytes per second) - inferred intent', 'ram_capacity': 'GB (gigabytes) - actual available metric'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.hardware_specs': [{'column': 'ram_gb', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['8', '12', '6', '16', '24']}], 'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'release_year', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2022', '2023', '2021', '2024', '2025']}]}}\nA mathematical logic question is as follows:\nCalculate the total memory bandwidth of a specific phone model and identify the phone model with the highest memory bandwidth.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, (h.storage_read_speed_mbps + h.storage_write_speed_mbps) AS total_storage_bandwidth_mbps FROM phones p JOIN hardware_specs h ON p.phone_id = h.phone_id ORDER BY total_storage_bandwidth_mbps DESC LIMIT 1;",
        "db_id": "phone"
    },
    {
        "id": 231,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['battery_capacity_mAh', 'charging_speed_watts'], 'relations': ['phone_to_hardware_specs (phones.phone_id → hardware_specs.phone_id)'], 'intent': 'find_phone_with_max_battery_and_charging_speed', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'charging_speed': 'Watts (power unit)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.hardware_specs': [{'column': 'charging_speed_watts', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '65.0', '18.0', '120.0', '30.0']}]}}\nA common sense reasoning question is as follows:\nFind the phone model with the largest battery capacity and fastest charging speed.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh, h.charging_speed_watts FROM phones p JOIN hardware_specs h ON p.phone_id = h.phone_id ORDER BY p.battery_capacity_mAh DESC, h.charging_speed_watts DESC LIMIT 1;",
        "db_id": "phone"
    },
    {
        "id": 232,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mobile phone', 'battery capacity 100,000mAh', 'charging speed 1000W'], 'relations': ['phone_to_battery (phones.battery_capacity_mAh)', 'phone_to_charging_speed (hardware_specs.charging_speed_watts)', 'threshold_comparison (capacity>100000mAh, speed>1000W)'], 'intent': 'calculate_charging_time_and_find_higher_spec_phones', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [100000, 1000], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'charging_speed': 'W (watts)', 'time': 'hours (calculated via energy/power, assuming standard voltage)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}, {'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'phone.hardware_specs': [{'column': 'charging_speed_watts', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '65.0', '18.0', '120.0', '30.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a certain mobile phone has a battery capacity of 100,000mAh and a charging speed of 1000W, calculate the time required to fully charge it, and find all mobile phone models with a battery capacity exceeding 100,000mAh and a charging speed exceeding 1000W.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh, hs.charging_speed_watts, (p.battery_capacity_mAh / hs.charging_speed_watts) AS charging_time_hours FROM phones p JOIN hardware_specs hs ON p.phone_id = hs.phone_id WHERE p.battery_capacity_mAh > 100000 AND hs.charging_speed_watts > 1000;",
        "db_id": "phone"
    },
    {
        "id": 233,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['smartphone', 'battery_capacity_mAh', 'video_playback_power_consumption_W'], 'relations': ['phone_to_battery_capacity (phone_id → battery_capacity_mAh)', 'energy_conversion (battery_energy_Wh = battery_capacity_mAh × voltage_V / 1000)'], 'intent': 'calculate_theoretical_battery_life_during_video_playback', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [1, 1000], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'voltage': 'V (Volts, assumed standard 3.7V for smartphones)', 'power_consumption': 'W (Watts, missing from database but required for calculation)', 'time': 'hours (calculated as Energy_Wh / Power_W)'}, 'foreign_keys': [{'fk_table': 'performance_metrics', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'performance_metrics', 'pk_column': 'metric_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.performance_metrics': [{'column': 'battery_life_video_playback_hours'}]}}\nA physical knowledge question is as follows:\nCalculate the theoretical battery life when a particular smartphone is playing video at maximum brightness on a full charge, assuming the battery's energy is entirely converted to electrical power with no other losses.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (p.battery_capacity_mAh * 3.7) / (4 * 1000) AS battery_life_hours FROM phones p WHERE p.phone_id = 1;",
        "db_id": "phone"
    },
    {
        "id": 234,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['specific smartphone', 'CPU', 'GPU', 'screen', 'other components', 'time period'], 'relations': ['phone_to_hardware_specs (phone_id → hardware_specs)', 'component_power_summation (CPU_power + GPU_power + screen_power + other_power)'], 'intent': 'calculate_total_energy_consumption', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['CPU_power_watts', 'GPU_power_watts', 'screen_power_watts', 'other_power_watts', 'time_hours'], 'units': {'power': 'Watts (W)', 'time': 'Hours (h)', 'energy': 'Watt-hours (Wh) or Joules (J = W*s)', 'conversion': 'Energy = Power (W) × Time (h) × 3600 (to convert to Joules)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'phone.hardware_specs': [{'column': 'cpu_clock_speed_ghz', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['3.2', '3.8', '2.8', '4.0', '3.0']}, {'column': 'gpu_cores', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['6', '8', '4', '12', '5']}, {'column': 'storage_read_speed_mbps', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2100', '3500', '1800', '5000', '2500']}, {'column': 'battery_capacity_mAh'}]}}\nA mathematical logic question is as follows:\nCalculate the total energy consumption of a specific smartphone when running high-load applications, assuming the power consumption of the CPU, GPU, screen, and other components is known, and the total energy consumption over a certain period of time needs to be calculated.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, (h.cpu_clock_speed_ghz * 2.5 + h.gpu_cores * 1.2 + (p.screen_size_inches * 0.1) + 0.5) * h.battery_life_hours AS total_energy_consumption_wh FROM phones p JOIN hardware_specs h ON p.phone_id = h.phone_id WHERE p.phone_id = 'specific_phone_id';",
        "db_id": "phone"
    },
    {
        "id": 235,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['phone battery capacity', 'charging speed'], 'relations': ['phone_to_battery (phone_id → battery_capacity_mAh)', 'phone_to_charging_speed (phone_id → charging_speed_watts)'], 'intent': 'calculate_charging_time', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['battery_capacity_mAh', 'charging_speed_watts'], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'charging_speed': 'W (watts)', 'conversion': 'time_hours = battery_capacity_mAh / (charging_speed_watts * 1000) [assuming 1V equivalence for mAh-to-Wh conversion]'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.hardware_specs': [{'column': 'charging_speed_watts', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '65.0', '18.0', '120.0', '30.0']}]}}\nA common sense reasoning question is as follows:\nCalculate the time required to charge a phone from 0% to 100% based on its battery capacity and charging speed.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh, h.charging_speed_watts, (p.battery_capacity_mAh / (h.charging_speed_watts * 1000)) AS charging_time_hours FROM phones p JOIN hardware_specs h ON p.phone_id = h.phone_id;",
        "db_id": "phone"
    },
    {
        "id": 236,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['battery capacity 100,000 mAh', 'charging speed 1000W'], 'relations': ['charging_time = battery_capacity / charging_current (requires voltage assumption)', 'practicality_assessment (efficiency, heat, industry standards)'], 'intent': 'calculate_charging_time_and_practicality_discussion', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [100000, 1000], 'units': {'battery_capacity': 'mAh (milliampere-hour)', 'charging_speed': 'W (Watts)', 'time': 'hours (calculated via energy conversion)', 'conversion': 'Battery energy (Wh) = (mAh * V) / 1000, Charging time = Wh / W; assumed voltage ~3.7V'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.hardware_specs': [{'column': 'charging_speed_watts', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['25.0', '65.0', '18.0', '120.0', '30.0']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a certain mobile phone has a battery capacity of 100,000 mAh and a charging speed of 1000W, calculate the time required to charge it from 0% to 100%, and discuss the practicality of this assumption in reality.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (battery_capacity_mAh / (charging_speed_watts * 1000)) AS charging_time_hours FROM phones JOIN hardware_specs ON phones.phone_id = hardware_specs.phone_id WHERE battery_capacity_mAh = 100000 AND charging_speed_watts = 1000;",
        "db_id": "phone"
    },
    {
        "id": 237,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['specific smartphone', 'maximum brightness', 'full charge'], 'relations': ['smartphone_to_battery_capacity (phone_id → phones.battery_capacity_mAh)', 'battery_capacity_to_battery_life (battery_capacity_mAh → performance_metrics.battery_life_video_playback_hours)'], 'intent': 'calculate_theoretical_battery_life', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': ['phones.battery_capacity_mAh'], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'battery_life': 'hours (h)', 'power': 'W (watts, implied by calculation)'}, 'foreign_keys': [{'fk_table': 'performance_metrics', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'performance_metrics', 'pk_column': 'metric_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.performance_metrics': [{'column': 'battery_life_video_playback_hours'}]}}\nA physical knowledge question is as follows:\nCalculate the theoretical battery life of a specific smartphone when playing videos at maximum brightness with a full charge.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh / (pm.battery_life_video_playback_hours * 1000) AS theoretical_battery_life_hours FROM phones p JOIN performance_metrics pm ON p.phone_id = pm.phone_id;",
        "db_id": "phone"
    },
    {
        "id": 238,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['specific mobile phone model', 'given year'], 'relations': ['phone_model_to_sales_data (phone_id → sales_data)', 'year_to_monthly_sales (sale_year → monthly_records)', 'month_to_growth_rate (sale_month → rate_comparison)'], 'intent': 'calculate_sales_growth_rate_and_identify_peak_month', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['given_year'], 'units': {'sales_volume': 'units_sold (count)', 'growth_rate': '% (percentage change)', 'time': 'year/month granularity'}, 'foreign_keys': [{'fk_table': 'sales_data', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}, {'pk_table': 'sales_data', 'pk_column': 'sale_id'}], 'tableinfo': {'phone.phones': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'phone.sales_data': [{'column': 'phone_id', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'sale_year', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2022', '2023', '2021', '2020', '2024']}, {'column': 'sale_month', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['10', '3', '7', '5', '12']}, {'column': 'units_sold', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['50000', '30000', '80000', '20000', '60000']}, {'column': 'sale_year', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2022', '2023', '2021', '2020', '2024']}, {'column': 'sale_month', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['10', '3', '7', '5', '12']}]}}\nA mathematical logic question is as follows:\nCalculate the sales growth rate of a specific mobile phone model in a given year, and identify the month with the highest growth rate.\nyour response just have a SQL without anything.\n",
        "solution": "WITH MonthlySales AS (SELECT phone_id, sale_year, sale_month, SUM(units_sold) AS total_units_sold FROM sales_data WHERE phone_id = '1' AND sale_year = '2022' GROUP BY phone_id, sale_year, sale_month), GrowthRates AS (SELECT ms1.phone_id, ms1.sale_year, ms1.sale_month, ms1.total_units_sold AS current_month_sales, ms2.total_units_sold AS previous_month_sales, ((ms1.total_units_sold - ms2.total_units_sold) / ms2.total_units_sold) * 100 AS growth_rate FROM MonthlySales ms1 LEFT JOIN MonthlySales ms2 ON ms1.phone_id = ms2.phone_id AND ms1.sale_year = ms2.sale_year AND ms1.sale_month = ms2.sale_month + 1) SELECT sale_month, growth_rate FROM GrowthRates WHERE growth_rate IS NOT NULL ORDER BY growth_rate DESC LIMIT 1;",
        "db_id": "phone"
    },
    {
        "id": 239,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['screen resolution width', 'screen resolution height', 'screen size inches'], 'relations': ['resolution_to_ppi (width and height → diagonal pixels)', 'size_to_ppi (diagonal pixels / screen size)'], 'intent': 'calculate_pixel_density', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['screen_resolution_width', 'screen_resolution_height', 'screen_size_inches'], 'units': {'resolution': 'pixels (px)', 'screen_size': 'inches (diagonal measurement)', 'ppi': 'pixels per inch (PPI)', 'formula': 'PPI = √(width² + height²) / screen_size'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'screen_resolution_height', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2340', '3200', '2400', '3088', '2436']}, {'column': 'screen_size_inches', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['6.1', '6.7', '6.4', '6.9', '5.8']}]}}\nA common sense reasoning question is as follows:\nCalculate the pixel density (PPI) based on the screen resolution and size of a mobile phone.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, SQRT(POWER(screen_resolution_width, 2) + POWER(screen_resolution_height, 2)) / screen_size_inches AS pixel_density_ppi FROM phones;",
        "db_id": "phone"
    },
    {
        "id": 240,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['smartphone', 'battery capacity 100000mAh', 'power consumption 10000mW'], 'relations': ['phone_to_battery (smartphone → battery_capacity_100000mAh)', 'power_consumption_to_battery_life (10000mW → calculated_battery_life)'], 'intent': 'calculate_battery_life_under_extreme_conditions', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [100000, 10000], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'power_consumption': 'mW (milliwatts)', 'battery_life': 'hours (calculated via formula: battery_life = battery_capacity_mAh / (power_consumption_mW / voltage))', 'conversion': 'Assume standard Li-ion voltage of 3.7V for calculation'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a certain smartphone has a battery capacity of 100000mAh, calculate its battery life under extreme conditions, assuming its power consumption is 10000mW.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 100000 / (10000 / 1000) AS battery_life_hours;",
        "db_id": "phone"
    },
    {
        "id": 241,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['smartphone', 'battery capacity', 'maximum download speed'], 'relations': ['phone_to_battery_capacity (phone_id → battery_capacity_mAh)', 'phone_to_download_speed (phone_id → download_speed_mbps)'], 'intent': 'calculate_battery_life_during_continuous_download', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [''], 'units': {'battery_capacity': 'mAh (milliampere-hours)', 'download_speed': 'Mbps (megabits per second)', 'battery_life': 'hours (implied by calculation)'}, 'foreign_keys': [{'fk_table': 'network_performance', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}, {'fk_table': 'performance_metrics', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'network_performance', 'pk_column': 'network_id'}, {'pk_table': 'performance_metrics', 'pk_column': 'metric_id'}, {'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'battery_capacity_mAh', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['4000', '5000', '4500', '6000', '3200']}], 'phone.network_performance': [{'column': 'download_speed_mbps', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['120.0', '150.0', '100.0', '200.0', '110.0']}], 'phone.performance_metrics': [{'column': 'battery_life_web_browsing_hours'}]}}\nA physical knowledge question is as follows:\nCalculate how long the battery can last when a smartphone is fully charged and continuously downloading data at the maximum download speed.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.battery_capacity_mAh * 3.7 / 1000 AS battery_energy_Wh, np.download_speed_mbps * 0.1 AS download_power_W, (p.battery_capacity_mAh * 3.7 / 1000) / (np.download_speed_mbps * 0.1) AS discharge_time_hours FROM phones p JOIN network_performance np ON p.phone_id = np.phone_id;",
        "db_id": "phone"
    },
    {
        "id": 242,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['specific smartphone', 'screen resolution', 'other smartphones for comparison'], 'relations': ['phone_to_resolution (phone_id → screen_resolution_width × screen_resolution_height)', 'resolution_to_total_pixels (width × height = total pixels)', 'screen_size_to_resolution_for_density (screen_size_inches + resolution → pixel_density_ppi)'], 'intent': 'calculate_total_screen_pixels_and_compare_pixel_density', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'screen_resolution': 'pixels (width × height)', 'screen_size': 'inches (diagonal measurement)', 'pixel_density': 'ppi (pixels per inch)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'phones', 'pk_column': 'phone_id'}], 'tableinfo': {'phone.phones': [{'column': 'screen_resolution_width', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1080', '1440', '1125', '1200', '720']}, {'column': 'screen_resolution_height', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['2340', '3200', '2400', '3088', '2436']}, {'column': 'screen_size_inches', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['6.1', '6.7', '6.4', '6.9', '5.8']}, {'column': 'pixel_density_ppi', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['422', '515', '411', '496', '458']}]}}\nA mathematical logic question is as follows:\nCalculate the total number of screen pixels for a specific smartphone at a given resolution, and compare the pixel density across different phones.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT phone_id, screen_resolution_width * screen_resolution_height AS total_pixels, (screen_resolution_width * screen_resolution_height) / (screen_size_inches * screen_size_inches) AS pixel_density_ppi FROM phones ORDER BY pixel_density_ppi DESC;",
        "db_id": "phone"
    },
    {
        "id": 243,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n```json\n{\n  \"entities\": [\"battery life\", \"battery capacity\", \"screen size\", \"processor speed\"],\n  \"relations\": [\n    \"battery_capacity_to_battery_life (battery capacity → battery life)\",\n    \"screen_size_to_battery_life (screen size → battery life)\",\n    \"cpu_speed_to_battery_life (processor speed → battery life)\"\n  ],\n  \"intent\": \"analyze_battery_life_relationship_and_optimize\",\n  \"reasoning_type\": \"mathematical logic reasoning\",\n  \"numerical_values\": [],\n  \"units\": {\n    \"battery_capacity\": \"mAh (milliampere-hours)\",\n    \"screen_size\": \"inches\",\n    \"processor_speed\": \"GHz (gigahertz)\",\n    \"battery_life\": \"hours (from video playback/web browsing metrics)\"\n  },\n  \"required_tables\": [\"phones\", \"hardware_specs\", \"performance_metrics\"],\n  \"required_fields\": [\n    \"phones.phone_id\",\n    \"phones.battery_capacity_mAh\",\n    \"phones.screen_size_inches\",\n    \"hardware_specs.cpu_clock_speed_ghz\",\n    \"hardware_specs.battery_life_hours\",\n    \"performance_metrics.battery_life_video_playback_hours\",\n    \"performance_metrics.battery_life_web_browsing_hours\"\n  ]\n}\n```\nA common sense reasoning question is as follows:\nAnalyze the relationship between the battery life of a certain mobile phone and its battery capacity, screen size, and processor speed, and provide optimization recommendations.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.phone_id, p.screen_size_inches, h.cpu_clock_speed_ghz, p.battery_capacity_mAh, h.battery_life_hours, (p.battery_capacity_mAh / (p.screen_size_inches * h.cpu_clock_speed_ghz * 0.1)) AS calculated_battery_life_hours FROM phones p JOIN hardware_specs h ON p.phone_id = h.phone_id;",
        "db_id": "phone"
    },
    {
        "id": 244,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['smartphone', 'download speed 1000 Mbps', '30 days'], 'relations': ['speed_to_total_data (1000 Mbps × 30 days)', 'data_usage_to_battery_impact (download activity → battery drain)'], 'intent': 'calculate_total_data_downloaded_and_analyze_battery_impact', 'reasoning_type': 'mathematical logic reasoning (data calculation) + physical knowledge reasoning (battery impact)', 'numerical_values': [1000, 30], 'units': {'download_speed': 'Mbps (megabits per second)', 'time': 'days (30 days → converted to seconds for calculation)', 'data_volume': 'TB (terabytes, result of 1000 Mbps × 2592000 seconds)', 'battery_life': 'hours (from database battery specifications)'}, 'foreign_keys': [{'fk_table': 'hardware_specs', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}, {'fk_table': 'network_performance', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}, {'fk_table': 'performance_metrics', 'fk_column': 'phone_id', 'ref_table': 'phones', 'ref_column': 'phone_id'}], 'primary_keys': [{'pk_table': 'hardware_specs', 'pk_column': 'spec_id'}, {'pk_table': 'network_performance', 'pk_column': 'network_id'}, {'pk_table': 'performance_metrics', 'pk_column': 'metric_id'}], 'tableinfo': {'phone.network_performance': [{'column': 'download_speed_mbps', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['120.0', '150.0', '100.0', '200.0', '110.0']}], 'phone.hardware_specs': [{'column': 'battery_life_hours', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['24.0', '30.0', '20.0', '36.0', '22.0']}], 'phone.performance_metrics': [{'column': 'battery_life_video_playback_hours'}, {'column': 'battery_life_web_browsing_hours'}]}}\nA hypothetical reasoning question is as follows:\nAssuming a certain smartphone has a download speed of 1000 Mbps, calculate the total amount of data downloaded continuously over one month (30 days), and analyze its impact on battery life.\nyour response just have a SQL without anything.\n",
        "solution": "WITH phone_data AS (SELECT p.phone_id, p.battery_capacity_mAh, np.download_speed_mbps, hs.battery_life_hours, hs.charging_speed_watts FROM phones p JOIN hardware_specs hs ON p.phone_id = hs.phone_id JOIN network_performance np ON p.phone_id = np.phone_id WHERE np.download_speed_mbps = 1000) SELECT phone_id, (download_speed_mbps * 30 * 24 * 60 * 60) / (8 * 1024 * 1024) AS total_data_tb, (charging_speed_watts * 30 * 24) / (battery_capacity_mAh * 3.7 / 1000) * 100 AS battery_loss_percentage FROM phone_data;",
        "db_id": "phone"
    },
    {
        "id": 245,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['spectrometer', 'experiment', 'researcher'], 'relations': ['researcher_to_experiment (Researchers.researcherId → Experiments.researcherId)', 'experiment_to_device (Experiments.experimentId → ExperimentData.experimentId → ExperimentData.deviceId → Devices.deviceId)', 'device_to_type (Devices.deviceType → DeviceTypes.deviceType)'], 'intent': 'retrieve_and_rank_researchers_by_spectrometer_experiment_participation', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [5], 'units': {'participation_count': 'count (number of experiments)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}, {'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}, {'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}], 'primary_keys': [{'pk_table': 'DeviceTypes', 'pk_column': 'deviceType'}, {'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'ExperimentData', 'pk_column': 'dataId'}, {'pk_table': 'Experiments', 'pk_column': 'experimentId'}, {'pk_table': 'Researchers', 'pk_column': 'researcherId'}], 'tableinfo': {'PhysicsLabDB.Researchers': [{'column': 'researcherId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'researcherName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['张三', '李四', '王五', '赵六', '王研究员']}], 'PhysicsLabDB.Experiments': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1005', '1006', '1007', '1015', '1']}, {'column': 'researcherId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4']}], 'PhysicsLabDB.ExperimentData': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}, {'column': 'deviceId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '100']}], 'PhysicsLabDB.Devices': [{'column': 'deviceId'}, {'column': 'deviceType'}], 'PhysicsLabDB.DeviceTypes': [{'column': 'deviceType', 'type': 'VARCHAR(255)', 'primary_key': True, 'comment': '', 'examples': ['光设备', '光谱仪', '其他', '示波器']}]}}\nA physical knowledge question is as follows:\nQuery all researchers who have participated in experiments using a spectrometer, sorted in descending order by the number of experiments they participated in, and return the names of the top 5 researchers and the number of experiments they participated in.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT r.researcherName, COUNT(e.experimentId) AS experimentCount FROM Researchers r JOIN Experiments e ON r.researcherId = e.researcherId JOIN ExperimentData ed ON e.experimentId = ed.experimentId JOIN Devices d ON ed.deviceId = d.deviceId WHERE d.deviceType = '光谱仪' GROUP BY r.researcherId ORDER BY experimentCount DESC LIMIT 5;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 246,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['equipment count', 'laboratory', 'average equipment count'], 'relations': ['laboratory_to_equipment_count (Labs.labId → Devices.labId)', 'comparison_above_average (equipmentCount > average)'], 'intent': 'calculate_average_equipment_and_identify_higher_than_average_labs', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'equipment_count': 'count', 'average_calculation': 'arithmetic mean'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光学实验室', '量子物理实验室', '电磁学实验室', '热力学实验室', '高级物理实验室']}, {'column': 'equipmentCount', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['15', '8', '12', '10', '100']}]}}\nA mathematical logic question is as follows:\nCalculate the average number of equipment per laboratory, and identify laboratories with equipment numbers above the average. Return the names of these laboratories along with their equipment counts, sorted in descending order by equipment count.\nyour response just have a SQL without anything.\n",
        "solution": "WITH LabEquipmentAvg AS (SELECT AVG(equipmentCount) AS avgEquipmentCount FROM Labs) SELECT labName, equipmentCount FROM Labs, LabEquipmentAvg WHERE equipmentCount > avgEquipmentCount ORDER BY equipmentCount DESC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 247,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['researchers', '2023'], 'relations': ['researcher_join_date_filter (joinDate in 2023)', 'sort_by_join_date_asc'], 'intent': 'retrieve_and_sort_researchers_by_join_date', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [2023], 'units': {'date': 'YYYY-MM-DD (implied by joinDate column format)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'Researchers', 'pk_column': 'researcherId'}], 'tableinfo': {'PhysicsLabDB.Researchers': [{'column': 'researcherName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['张三', '李四', '王五', '赵六', '王研究员']}, {'column': 'joinDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-01-01 08:00:00']}]}}\nA common sense reasoning question is as follows:\nQuery all researchers who joined the lab in 2023, sort them in ascending order by their joining date, and return the names and joining dates of the top 10 researchers.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT researcherName, joinDate FROM Researchers WHERE YEAR(joinDate) = 2023 ORDER BY joinDate ASC LIMIT 10;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 248,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laboratory capacity', '1,000 people increase'], 'relations': ['aggregation (total capacity)', 'additive_increase (per laboratory)'], 'intent': 'calculate_new_total_capacity_after_increment', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000], 'units': {'capacity': 'people', 'calculation': 'total_capacity + (number_of_labs * 1000)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['20', '10', '15', '12', '50']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the laboratory's capacity can be expanded infinitely, query the total capacity of all laboratories and calculate the new total capacity if each laboratory's capacity is increased by 1,000 people. Return the new total capacity.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM(capacity) + (COUNT(labId) * 1000) AS new_total_capacity FROM Labs;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 249,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Laboratory', 'Equipment', 'Power Calculation'], 'relations': ['lab_to_equipment_count (labId → equipmentCount)', 'equipment_count_to_power (equipmentCount × 500W)'], 'intent': 'retrieve_and_calculate', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [500], 'units': {'power': 'W (Watts)', 'equipment_count': 'count'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '101']}, {'column': 'labName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光学实验室', '量子物理实验室', '电磁学实验室', '热力学实验室', '高级物理实验室']}, {'column': 'equipmentCount', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['15', '8', '12', '10', '100']}], 'PhysicsLabDB.Devices': [{'column': 'labId'}, {'column': 'power'}]}}\nA physical knowledge question is as follows:\nQuery the name of the laboratory with the highest number of equipment in the lab and its equipment count, and calculate the total power of these equipment (assuming the average power of each device is 500W).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT labName, equipmentCount, (equipmentCount * 500) AS totalPower FROM Labs WHERE equipmentCount = (SELECT MAX(equipmentCount) FROM Labs);",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 250,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['ExperimentData records', 'measured values'], 'relations': ['order_by (measurementValue DESC)', 'limit_to (top 10 records)'], 'intent': 'retrieve_top_records_and_calculate_statistics', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10], 'units': {'measured_values': 'unit (from ExperimentData.unit column)', 'statistical_operations': {'average': 'same_unit_as_input', 'variance': 'squared_unit', 'standard_deviation': 'same_unit_as_input'}}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}]}}\nA mathematical logic question is as follows:\nRetrieve the top 10 records with the highest measured values from the experimental data table, and calculate the average, variance, and standard deviation of these measured values.\nyour response just have a SQL without anything.\n",
        "solution": "WITH TopMeasurements AS (SELECT measurementValue FROM ExperimentData ORDER BY measurementValue DESC LIMIT 10) SELECT AVG(measurementValue) AS average_value, VARIANCE(measurementValue) AS variance_value, STDDEV(measurementValue) AS stddev_value FROM TopMeasurements;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 251,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laboratories', 'capacity', 'ongoing experiments'], 'relations': ['lab_to_capacity (labId → capacity)', 'lab_to_experiments (labId → experimentId)'], 'intent': 'retrieve_labs_and_experiments', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [100], 'units': {'capacity': 'people'}, 'foreign_keys': [{'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}], 'primary_keys': [{'pk_table': 'Experiments', 'pk_column': 'experimentId'}, {'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光学实验室', '量子物理实验室', '电磁学实验室', '热力学实验室', '高级物理实验室']}, {'column': 'location', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['物理楼101', '物理楼202', '物理楼303', '物理楼404', '科学楼5层']}, {'column': 'capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['20', '10', '15', '12', '50']}], 'PhysicsLabDB.Experiments': [{'column': 'experimentName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['双缝实验', '量子纠缠实验', '电磁感应实验', '热传导实验', '极端条件模拟实验']}, {'column': 'status', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['已完成', '进行中']}, {'column': 'labId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4']}]}}\nA common sense reasoning question is as follows:\nRetrieve the names and locations of laboratories with a capacity exceeding 100 people, and list the names of ongoing experiments in these laboratories.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT L.labName, L.location, E.experimentName FROM Labs L JOIN Experiments E ON L.labId = E.labId WHERE L.capacity > 100 AND E.status = '进行中';",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 252,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['experiments in progress', 'average measurement value'], 'relations': ['experiment_to_measurements (Experiments.experimentId → ExperimentData.experimentId)'], 'intent': 'calculate_average_measurement_by_ongoing_experiments_and_sort', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'measurement': 'unit (from ExperimentData.unit)'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}, {'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}, {'pk_table': 'Experiments', 'pk_column': 'experimentId'}], 'tableinfo': {'PhysicsLabDB.Experiments': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1005', '1006', '1007', '1015', '1']}, {'column': 'status', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['已完成', '进行中']}], 'PhysicsLabDB.ExperimentData': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}, {'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}]}}\nA physical knowledge question is as follows:\nQuery the experiments in progress, calculate the average value of measurements in each experiment, and sort them in ascending order.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT e.experimentId, e.experimentName, AVG(ed.measurementValue) AS averageMeasurementValue FROM Experiments e JOIN ExperimentData ed ON e.experimentId = ed.experimentId WHERE e.status = '进行中' GROUP BY e.experimentId, e.experimentName ORDER BY averageMeasurementValue ASC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 253,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['completed experiments', 'calculated results'], 'relations': ['experiment_to_result (Experiments.experimentId → Calculations.experimentId)'], 'intent': 'retrieve_top_results_by_value', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [5], 'units': {'result': 'varies (dependent on calculation context, stored in Calculations.unit)'}, 'foreign_keys': [{'fk_table': 'Calculations', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}], 'primary_keys': [{'pk_table': 'Calculations', 'pk_column': 'calculationId'}, {'pk_table': 'Experiments', 'pk_column': 'experimentId'}], 'tableinfo': {'PhysicsLabDB.Experiments': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1005', '1006', '1007', '1015', '1']}, {'column': 'status', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['已完成', '进行中']}], 'PhysicsLabDB.Calculations': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4']}, {'column': 'result', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.0', '0.0', '42000.0', '4.38', '49.05']}]}}\nA mathematical logic question is as follows:\nQuery the calculated results of completed experiments, sorted in descending order by the size of the results, and return the top 5 results.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT result FROM Calculations WHERE experimentId IN (SELECT experimentId FROM Experiments WHERE status = '已完成') ORDER BY result DESC LIMIT 5;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 254,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laboratory', 'capacity', 'equipment_count', 'equipment_density'], 'relations': ['lab_to_capacity (labId → capacity)', 'lab_to_equipment_count (labId → equipmentCount)', 'equipment_density_calculation (equipment_density = equipment_count / capacity)'], 'intent': 'calculate_equipment_density_and_sort_labs', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'capacity': 'unitless (assuming capacity is a count)', 'equipment_count': 'unitless (number of devices)', 'equipment_density': 'unitless (ratio)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光学实验室', '量子物理实验室', '电磁学实验室', '热力学实验室', '高级物理实验室']}, {'column': 'capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['20', '10', '15', '12', '50']}, {'column': 'equipmentCount', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['15', '8', '12', '10', '100']}]}}\nA common sense reasoning question is as follows:\nQuery the capacity and number of equipment for all laboratories, calculate the equipment density (number of equipment / capacity) for each laboratory, and sort them in descending order by equipment density.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT labId, labName, capacity, equipmentCount, (equipmentCount / capacity) AS equipmentDensity FROM Labs ORDER BY equipmentDensity DESC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 255,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['exaggerated measurements (measurementValue * 1000)', 'average of exaggerated measurements', 'difference set between two query results'], 'relations': ['measurement_to_exaggerated (measurementValue → multiplied by 1000)', 'average_per_group (exaggerated values → grouped average calculation)', 'set_difference (first_query_results - second_query_results)'], 'intent': 'calculate_modified_measurements_and_compare_query_results', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000], 'units': {'measurement': 'original unit of ExperimentData.measurementValue (e.g., volts, grams)', 'exaggerated_measurement': 'original unit × 1000', 'conversion': 'multiplication factor of 1000'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}, {'column': 'deviceId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '100']}]}}\nA hypothetical reasoning question is as follows:\nAssuming all experimental measurements are multiplied by 1000, query the average of these exaggerated measurements and sort them in ascending order. Additionally, return the rows from the first query result that are not present in the second query result (i.e., the difference set).\nyour response just have a SQL without anything.\n",
        "solution": "WITH ExaggeratedMeasurements AS (SELECT experimentId, AVG(measurementValue * 1000) AS exaggeratedAvg FROM ExperimentData GROUP BY experimentId ORDER BY exaggeratedAvg ASC) SELECT * FROM ExaggeratedMeasurements WHERE exaggeratedAvg NOT IN (SELECT exaggeratedAvg FROM ExaggeratedMeasurements);",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 256,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Devices', 'calibrationDate', 'calibration interval days'], 'relations': ['device_to_calibration_date (deviceId → calibrationDate)', 'interval_calculation (calibrationDate → calibration interval days)'], 'intent': 'query_and_sort_calibration_intervals', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5], 'units': {'interval': 'days', 'calculation': 'DATEDIFF(current_date, calibrationDate)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'deviceId'}, {'column': 'deviceName'}, {'column': 'calibrationDate'}]}}\nA physical knowledge question is as follows:\nPlease query the latest calibration date for all devices in the equipment table, calculate the calibration interval in days for each device, sort them in ascending order by the calibration interval days, and return the top 5 devices.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT deviceId, deviceName, calibrationDate, DATEDIFF(CURDATE(), calibrationDate) AS calibrationIntervalDays FROM Devices ORDER BY calibrationIntervalDays ASC LIMIT 5;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 257,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Labs', 'Devices'], 'relations': ['Devices.labId → Labs.labId (foreign key relationship)'], 'intent': 'calculate_device_to_capacity_ratio_and_rank_top_labs', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'ratio': 'unitless (device_count / capacity)', 'sorting': 'descending_order', 'result_limit': 'top 3'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '101']}, {'column': 'capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['20', '10', '15', '12', '50']}], 'PhysicsLabDB.Devices': [{'column': 'labId'}]}}\nA mathematical logic question is as follows:\nPlease calculate the ratio of the number of devices to the laboratory capacity for each lab in the equipment table, sort the results in descending order by this ratio, and return the top 3 labs with their respective device-to-capacity ratios.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT labId, labName, equipmentCount / capacity AS densityRatio FROM Labs ORDER BY densityRatio DESC LIMIT 3;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 258,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['faulty_devices', 'device_types'], 'relations': ['device_to_type (Devices.deviceType)', 'grouping_by_type (COUNT(faulty_devices))'], 'intent': 'query_and_aggregate_faulty_devices_by_type', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [], 'units': {}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'deviceType'}, {'column': 'status'}]}}\nA common sense reasoning question is as follows:\nPlease query all devices in the equipment table with a status of \"fault,\" group them by device type, and return the count of faulty devices for each device type.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT deviceType, COUNT(*) AS faultCount FROM Devices WHERE status = '故障' GROUP BY deviceType;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 259,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Devices', 'calibration dates', 'extended calibration dates (100 years)'], 'relations': ['device_to_calibration_date (Devices → calibrationDate)', 'date_extension (calibrationDate + 100 years)'], 'intent': 'query_devices_with_extended_calibration_dates', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100, 10], 'units': {'date_extension': 'years (indefinite extension)', 'output_format': 'sorted_by_extended_date_descending'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'deviceId'}, {'column': 'deviceName'}, {'column': 'calibrationDate'}]}}\nA hypothetical reasoning question is as follows:\nAssuming the calibration dates in the equipment table can be extended indefinitely, please query the calibration dates of all devices, calculate the date after extending the calibration date by 100 years, sort them in descending order by the extended date, and return the first 10 devices.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT deviceId, deviceName, calibrationDate, DATE_ADD(calibrationDate, INTERVAL 100 YEAR) AS extendedCalibrationDate FROM Devices ORDER BY extendedCalibrationDate DESC LIMIT 10;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 260,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['experimental data entries', 'light intensity measurements', 'spectrometer data'], 'relations': ['data_selection (top 5 entries with highest values)', 'statistical_calculation (average and standard deviation of selected values)'], 'intent': 'retrieve_top_5_and_calculate_stats', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5], 'units': {'measurement': 'lm (lumens)', 'conversion': '1 lm = 1 cd·sr (base unit conversion)'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}]}}\nA physical knowledge question is as follows:\nQuery the top 5 experimental data entries with the highest measured values from the experimental data table, and calculate the average value and standard deviation of these data. Assume this data represents light intensity measured by a spectrometer with the unit in lumens (lm).\nyour response just have a SQL without anything.\n",
        "solution": "WITH TopMeasurements AS (SELECT measurementValue FROM ExperimentData WHERE deviceId IN (SELECT deviceId FROM Devices WHERE deviceType = '光谱仪') ORDER BY measurementValue DESC LIMIT 5) SELECT AVG(measurementValue) AS average_value, SQRT(AVG(measurementValue * measurementValue) - AVG(measurementValue) * AVG(measurementValue)) AS standard_deviation FROM TopMeasurements;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 261,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['experimental data', 'voltage measurements in volts (V)', 'logarithmically transformed values', 'oscilloscope'], 'relations': ['measurement_to_experiment_data (voltage measurements → ExperimentData table)', 'logarithmic_transformation (raw_voltage → log_values)', 'statistical_aggregation (log_values → average, standard_deviation)'], 'intent': 'calculate_average_and_standard_deviation_of_log_transformed_voltage_data', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'original_measurement': 'volts (V)', 'transformed_values': 'unitless (logarithmic)', 'statistical_outputs': ['average (unitless)', 'standard_deviation (unitless)']}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}]}}\nA mathematical logic question is as follows:\nQuery the measurement values in the experimental data table for all experimental data, and calculate the average and standard deviation of the logarithmically transformed values, assuming the data are voltage measurements in volts (V) obtained from an oscilloscope.\nyour response just have a SQL without anything.\n",
        "solution": "WITH LogTransformedData AS (SELECT LOG10(measurementValue) AS logValue FROM ExperimentData WHERE deviceId IN (SELECT deviceId FROM Devices WHERE deviceType = '示波器') AND unit = 'V') SELECT AVG(logValue) AS logAverage, SQRT(AVG(logValue * logValue) - AVG(logValue) * AVG(logValue)) AS logStandardDeviation FROM LogTransformedData;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 262,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['ExperimentData', 'temperature measurements'], 'relations': ['data_to_statistics (ExperimentData → average/standard_deviation)'], 'intent': 'calculate_statistical_summary', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'temperature': '°C (Celsius)'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}]}}\nA common sense reasoning question is as follows:\nQuery all measurement values from the experimental data table, and calculate the average value and standard deviation of these data. Assume these data are temperature measurements obtained using a thermometer, with the unit in degrees Celsius (℃).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(measurementValue) AS mean, SQRT(AVG(POW(measurementValue - (SELECT AVG(measurementValue) FROM ExperimentData WHERE unit = '℃' AND deviceId IN (SELECT deviceId FROM Devices WHERE deviceType = '温度计')), 2))) AS stddev FROM ExperimentData WHERE unit = '℃' AND deviceId IN (SELECT deviceId FROM Devices WHERE deviceType = '温度计');",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 263,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['measured value > 1,000,000 lumens', 'spectrometer'], 'relations': ['measurementValue > 1000000', 'deviceId_to_deviceType (spectrometer)', 'statistical_aggregation (average, standard deviation)'], 'intent': 'calculate_average_and_standard_deviation', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000000], 'units': {'measurement': 'lm (lumens)', 'aggregations': 'lm (implied by database schema)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}, {'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}, {'column': 'deviceId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '100']}], 'PhysicsLabDB.Devices': [{'column': 'deviceType'}]}}\nA hypothetical reasoning question is as follows:\nQuery the experimental data in the table where the measured value exceeds 1,000,000 lumens (lm), and calculate the average value and standard deviation of this data, assuming the data consists of light intensity measurements taken by a spectrometer.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(measurementValue) AS average_value, STDDEV(measurementValue) AS standard_deviation FROM ExperimentData WHERE measurementValue > 1000000 AND unit = 'lm' AND deviceId IN (SELECT deviceId FROM Devices WHERE deviceType = '光谱仪');",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 264,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['wavelength 500 nanometers', 'spectrometer', 'light frequency calculation'], 'relations': ['wavelength_to_frequency (λ→ν via c=λν)', 'measurement_device (spectrometer → wavelength)'], 'intent': 'calculate_frequency_from_wavelength', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [500], 'units': {'wavelength': 'nm (nanometers) → m (meters)', 'frequency': 'Hz (Hertz)', 'conversion': '1 nm = 1e-9 m, c = 3e8 m/s (constant)'}, 'foreign_keys': [{'fk_table': 'Calculations', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'Calculations', 'pk_column': 'calculationId'}, {'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}, {'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}], 'PhysicsLabDB.Calculations': [{'column': 'formula', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['V = IR', 'E = hν', 'F = qvB', 'Q = mcΔT', '并联电阻公式: 1/Req = Σ(1/Ri)']}, {'column': 'result', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.0', '0.0', '42000.0', '4.38', '49.05']}]}}\nA physical knowledge question is as follows:\nPlease calculate the frequency corresponding to the wavelength of light measured with a spectrometer in an experiment, assuming the measured value is 500 nanometers.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (3 * POWER(10, 8)) / (500 * POWER(10, -9)) AS frequency FROM ExperimentData WHERE deviceId IN (SELECT deviceId FROM Devices WHERE deviceType = '光谱仪') AND measurementValue = 500 AND unit = '纳米';",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 265,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['variable A', 'variable B', 'initial value of A 10', 'initial value of B 20', 'experiment'], 'relations': ['variable_to_initial_value (A→10, B→20)', 'value_transformation (A→√B, B→2*A)'], 'intent': 'calculate_final_values_of_variables', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10, 20, 2, 4], 'units': {'initial_values': 'unitless (implied by problem statement)', 'final_values': 'unitless (implied by problem statement)'}, 'foreign_keys': [{'fk_table': 'Calculations', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'Variables', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}], 'primary_keys': [{'pk_table': 'Calculations', 'pk_column': 'calculationId'}, {'pk_table': 'Variables', 'pk_column': 'variableId'}], 'tableinfo': {'PhysicsLabDB.Variables': [{'column': 'variableName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光强', '量子态', '磁场强度', '温差', 'A']}, {'column': 'initialValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['100.0', '0.5', '10.0', '20.0', '28750.0']}], 'PhysicsLabDB.Calculations': [{'column': 'formula', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['V = IR', 'E = hν', 'F = qvB', 'Q = mcΔT', '并联电阻公式: 1/Req = Σ(1/Ri)']}, {'column': 'result', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.0', '0.0', '42000.0', '4.38', '49.05']}]}}\nA mathematical logic question is as follows:\nPlease calculate in a certain experiment, the initial value of variable A is 10, the initial value of variable B is 20. After a series of calculations, the value of variable A becomes the square root of the value of variable B, and the value of variable B becomes twice that of the value of variable A. Find the final values of variables A and B.\nyour response just have a SQL without anything.\n",
        "solution": "WITH RECURSIVE VariableCalculation AS (SELECT variableId, variableName, initialValue AS currentValue, unit, dataQuality FROM Variables WHERE experimentId = (SELECT experimentId FROM Experiments WHERE experimentName = '某个实验') UNION ALL SELECT v.variableId, v.variableName, CASE WHEN v.variableName = 'A' THEN SQRT(vc.currentValue) WHEN v.variableName = 'B' THEN 2 * vc.currentValue END AS currentValue, v.unit, v.dataQuality FROM Variables v JOIN VariableCalculation vc ON v.experimentId = (SELECT experimentId FROM Experiments WHERE experimentName = '某个实验') WHERE (v.variableName = 'A' AND vc.variableName = 'B') OR (v.variableName = 'B' AND vc.variableName = 'A')) SELECT * FROM VariableCalculation;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 266,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['equipment', 'calibration date', 'one year'], 'relations': ['equipment_to_calibration_date (equipment → calibrationDate)', 'date_comparison (calibrationDate < (current_date - 1 year))'], 'intent': 'query_expired_calibration', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [1], 'units': {'time_interval': 'year (interval for date comparison)', 'date_format': 'YYYY-MM-DD (standard SQL date format)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'deviceId'}, {'column': 'deviceName'}, {'column': 'calibrationDate'}]}}\nA common sense reasoning question is as follows:\nIn the laboratory, the calibration date of equipment is very important. Assuming that the calibration date of a certain piece of equipment has exceeded one year, please query all equipment with calibration dates exceeding one year and sort them in ascending order by equipment name.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT deviceId, deviceName, deviceType, calibrationDate, status, labId FROM Devices WHERE calibrationDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR) ORDER BY deviceName ASC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 267,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['calculation result threshold 1e300', 'calculation result records'], 'relations': ['threshold_comparison (result > 1e300)', 'sorting_order (descending by result)'], 'intent': 'query_and_sort_large_calculation_results', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1e+300], 'units': {'value_unit': 'unitless scientific notation (1e300)', 'result_column_unit': 'unit column from Calculations table (implied)'}, 'foreign_keys': [{'fk_table': 'Calculations', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}], 'primary_keys': [{'pk_table': 'Calculations', 'pk_column': 'calculationId'}], 'tableinfo': {'PhysicsLabDB.Calculations': [{'column': 'calculationId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['119', '1', '4004', '2', '3']}, {'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4']}, {'column': 'result', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.0', '0.0', '42000.0', '4.38', '49.05']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'J', 'N', 'Ω', 'W']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a certain experiment's calculation result exceeds the system's maximum processable value, for example, the result is 1 x 10^308, please query all records where the calculation result exceeds 1 x 10^300 and sort them in descending order by the calculation result.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM Calculations WHERE result > 1e300 ORDER BY result DESC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 268,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['spectrometer', 'experiment', 'light intensity data', 'energy value'], 'relations': ['experiment_to_data (Experiments.experimentId → ExperimentData.experimentId)', 'data_to_device (ExperimentData.deviceId → Devices.deviceId)', 'device_to_type (Devices.deviceType → DeviceTypes.deviceType)'], 'intent': 'calculate_energy_from_light_intensity', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [], 'units': {'light_intensity': 'lux/W/m² (from ExperimentData.unit)', 'energy': 'joules/eV (implied by calculation formula)', 'conversion': \"Planck's constant (6.626×10^-34 J·s), wavelength (if applicable)\"}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}, {'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'DeviceTypes', 'pk_column': 'deviceType'}, {'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}, {'column': 'deviceId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '100']}, {'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}], 'PhysicsLabDB.Devices': [{'column': 'deviceType'}], 'PhysicsLabDB.DeviceTypes': [{'column': 'specifications'}]}}\nA physical knowledge question is as follows:\nQuery the light intensity data measured by the spectrometer in a specific experiment, calculate its corresponding energy value, sort in ascending order by energy value, and return the top 10 results.\nyour response just have a SQL without anything.\n",
        "solution": "WITH SpectralData AS (SELECT ed.dataId, ed.experimentId, ed.deviceId, ed.timestamp, ed.measurementValue AS lightIntensity, ed.unit, ed.dataQuality, ed.environmentalConditions FROM ExperimentData ed JOIN Devices d ON ed.deviceId = d.deviceId WHERE d.deviceType = '光谱仪' AND ed.experimentId = '特定实验ID'), EnergyCalculations AS (SELECT sd.dataId, sd.experimentId, sd.deviceId, sd.timestamp, sd.lightIntensity, sd.unit, sd.dataQuality, sd.environmentalConditions, (6.62607015e-34 * 299792458 / sd.lightIntensity) AS energy FROM SpectralData sd) SELECT ec.dataId, ec.experimentId, ec.deviceId, ec.timestamp, ec.lightIntensity, ec.energy, ec.unit, ec.dataQuality, ec.environmentalConditions FROM EnergyCalculations ec ORDER BY ec.energy ASC LIMIT 10;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 269,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['experiments', 'sensitivity analysis results', 'variables'], 'relations': ['experiment_to_sensitivity_analysis (experimentId)', 'variable_to_sensitivity_analysis (variableId)', 'grouping_by_impact (high/medium/low impact levels)'], 'intent': 'analyze_and_filter_sensitivity_results_by_impact_level', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['sensitivityValue'], 'units': {'sensitivity_value': 'Variables.unit (derived from Variables table)'}, 'foreign_keys': [{'fk_table': 'SensitivityAnalysis', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'SensitivityAnalysis', 'fk_column': 'variableId', 'ref_table': 'Variables', 'ref_column': 'variableId'}, {'fk_table': 'Variables', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}], 'primary_keys': [{'pk_table': 'SensitivityAnalysis', 'pk_column': 'analysisId'}, {'pk_table': 'Variables', 'pk_column': 'variableId'}], 'tableinfo': {'PhysicsLabDB.SensitivityAnalysis': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4']}, {'column': 'sensitivityValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['0.75', '0.25', '0.6', '0.4', '1000.0']}, {'column': 'impact', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['高', '中']}, {'column': 'variableId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '24']}], 'PhysicsLabDB.Variables': [{'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['lux', 'probability', 'T', '°C', '无量纲']}]}}\nA mathematical logic question is as follows:\nCalculate the average of sensitivity analysis results for variables in each experiment, group them by high, medium, and low impact levels, and return the experimental results with high impact levels.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT e.experimentId, e.experimentName, AVG(sa.sensitivityValue) AS avgSensitivityValue FROM Experiments e JOIN SensitivityAnalysis sa ON e.experimentId = sa.experimentId WHERE sa.impact = '高' GROUP BY e.experimentId, e.experimentName;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 270,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['completed experiments', 'device types'], 'relations': ['experiment_to_device (Experiments.experimentId → ExperimentData.experimentId)', 'device_to_type (Devices.deviceId → Devices.deviceType)'], 'intent': 'calculate_usage_count_by_device_type', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'usage_count': 'count (discrete)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}, {'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}, {'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'ExperimentData', 'pk_column': 'dataId'}, {'pk_table': 'Experiments', 'pk_column': 'experimentId'}], 'tableinfo': {'PhysicsLabDB.Experiments': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1005', '1006', '1007', '1015', '1']}, {'column': 'status', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['已完成', '进行中']}], 'PhysicsLabDB.ExperimentData': [{'column': 'deviceId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '100']}], 'PhysicsLabDB.Devices': [{'column': 'deviceId'}, {'column': 'deviceType'}]}}\nA common sense reasoning question is as follows:\nQuery the usage of all devices that have completed experiments, grouped by device type, and return the usage count for each device type, sorted in descending order by usage count.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT d.deviceType, COUNT(ed.deviceId) AS usageCount FROM ExperimentData ed JOIN Devices d ON ed.deviceId = d.deviceId JOIN Experiments e ON ed.experimentId = e.experimentId WHERE e.status = '已完成' GROUP BY d.deviceType ORDER BY usageCount DESC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 271,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['lab capacity 10,000 people', 'current number of devices per lab'], 'relations': ['lab_to_devices (labId → device aggregation)', 'ratio_calculation (capacity/device_count)'], 'intent': 'calculate_capacity_to_device_ratio_sort_and_return_top_5', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10000], 'units': {'capacity': 'people', 'device_count': 'count (unitless)', 'ratio': 'people per device (people/device)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '101']}, {'column': 'capacity (assumed fixed at 10,000)'}], 'PhysicsLabDB.Devices': [{'column': 'labId'}, {'column': 'deviceId'}]}}\nA hypothetical reasoning question is as follows:\nAssuming the lab capacity is increased to 10,000 people, query the ratio of capacity to current number of devices for all labs, sort them in descending order by the ratio, and return the top 5 labs with the highest ratios.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT labId, labName, (10000 / equipmentCount) AS ratio FROM Labs ORDER BY ratio DESC LIMIT 5;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 272,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['top 5 experimental data entries', 'average value of wavelengths'], 'relations': ['top_5_selection (highest measurementValue)', 'average_calculation (mean of selected values)'], 'intent': 'retrieve_top_5_and_calculate_average_wavelength', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'wavelength': 'nanometers (nm)', 'conversion': \"unit filtering (unit='nm')\"}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}]}}\nA physical knowledge question is as follows:\nRetrieve the top 5 experimental data entries with the highest measured values from the experimental data table, and calculate the average value of these data, assuming these data represent the wavelengths of light measured by a spectrometer, in units of nanometers.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(measurementValue) AS average_wavelength FROM (SELECT measurementValue FROM ExperimentData WHERE deviceId IN (SELECT deviceId FROM Devices WHERE deviceType = '光谱仪') AND unit = '纳米' ORDER BY measurementValue DESC LIMIT 5) AS top_measurements;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 273,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Calculation table', 'computed result > 1000'], 'relations': ['filter_by_threshold (result > 1000)', 'sort_by_field (result descending)'], 'intent': 'retrieve_top_10_high_computation_records', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000, 10], 'units': {'threshold': 'unit from Calculations.unit column', 'sorting_metric': 'unit from Calculations.unit column'}, 'foreign_keys': [{'fk_table': 'Calculations', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}], 'primary_keys': [{'pk_table': 'Calculations', 'pk_column': 'calculationId'}], 'tableinfo': {'PhysicsLabDB.Calculations': [{'column': 'calculationId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['119', '1', '4004', '2', '3']}, {'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4']}, {'column': 'result', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.0', '0.0', '42000.0', '4.38', '49.05']}, {'column': 'formula', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['V = IR', 'E = hν', 'F = qvB', 'Q = mcΔT', '并联电阻公式: 1/Req = Σ(1/Ri)']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'J', 'N', 'Ω', 'W']}]}}\nA mathematical logic question is as follows:\nQuery all records in the calculation table where the computed result is greater than 1000, sort them in descending order by the computed result, and take the top 10. Assume these computed results are derived from complex physical formulas, such as energy conversion efficiency.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM Calculations WHERE result > 1000 ORDER BY result DESC LIMIT 10;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 274,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laboratories', 'capacity greater than 50 people'], 'relations': ['lab_capacity_greater_than_threshold (labId → capacity > 50)', 'ascending_capacity_order (sorted by capacity)'], 'intent': 'retrieve_laboratories_with_capacity_filter_and_sort', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [50], 'units': {'capacity': 'people'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '101']}, {'column': 'labName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光学实验室', '量子物理实验室', '电磁学实验室', '热力学实验室', '高级物理实验室']}, {'column': 'capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['20', '10', '15', '12', '50']}]}}\nA common sense reasoning question is as follows:\nQuery the laboratory table for laboratories with a capacity greater than 50 people and sort them in ascending order by capacity. Assume these laboratories are used for large-scale physics experiments that require ample space and equipment.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT labId, labName, location, capacity, equipmentCount, status FROM Labs WHERE capacity > 50 ORDER BY capacity ASC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 275,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Variables', 'initial_value', 'physical_experiments', 'extreme_conditions'], 'relations': ['filter_condition (initial_value > 10,000)', 'sorting_order (descending_initial_value)', 'top_records_limit (5)'], 'intent': 'retrieve_top_high_initial_value_variables', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10000], 'units': {'initial_value': 'varies (based on variable unit column)'}, 'foreign_keys': [{'fk_table': 'Variables', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}], 'primary_keys': [{'pk_table': 'Variables', 'pk_column': 'variableId'}], 'tableinfo': {'PhysicsLabDB.Variables': [{'column': 'variableName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光强', '量子态', '磁场强度', '温差', 'A']}, {'column': 'initialValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['100.0', '0.5', '10.0', '20.0', '28750.0']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['lux', 'probability', 'T', '°C', '无量纲']}]}}\nA hypothetical reasoning question is as follows:\nQuery all variables in the variable table where the initial value is greater than 10,000, sorted in descending order by initial value, and retrieve the top five. Assume these variables are used for simulating physical experiments under extreme conditions, such as ultra-high temperature or ultra-high pressure environments.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT variableId, variableName, initialValue, unit FROM Variables WHERE initialValue > 10000 ORDER BY initialValue DESC LIMIT 5;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 276,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['device', 'measurement value'], 'relations': ['device_to_measurement_value (via ExperimentData.deviceId)'], 'intent': 'calculate_average_and_sort_measurements', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'measurement': 'unit (from ExperimentData.unit column)'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'deviceId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '100']}, {'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}]}}\nA physical knowledge question is as follows:\nIn the lab, suppose we have an experiment that measures the values of different devices under various environmental conditions. Calculate the average measurement value for each device, and sort them in ascending order.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT deviceId, AVG(measurementValue) AS averageMeasurementValue FROM ExperimentData GROUP BY deviceId ORDER BY averageMeasurementValue ASC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 277,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['experiment data entries', 'measured values', 'average', 'standard deviation'], 'relations': ['top_entries_selection (highest measurementValue)', 'statistical_calculation (average and standard deviation)'], 'intent': 'retrieve_top_entries_and_calculate_stats', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5], 'units': {'measurement': 'unit from ExperimentData.unit column (e.g., volts, grams, etc., depending on context)'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}]}}\nA mathematical logic question is as follows:\nPlease query the top 5 experimental data entries with the highest measured values in the experimental data table, and calculate the average and standard deviation of these data.\nyour response just have a SQL without anything.\n",
        "solution": "WITH TopMeasurements AS (SELECT measurementValue FROM ExperimentData ORDER BY measurementValue DESC LIMIT 5) SELECT AVG(measurementValue) AS average_value, SQRT(AVG(measurementValue * measurementValue) - AVG(measurementValue) * AVG(measurementValue)) AS standard_deviation FROM TopMeasurements;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 278,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['equipment', 'calibration dates', 'equipment type'], 'relations': ['equipment_to_type (deviceType)', 'date_comparison (current_date - calibrationDate > 1 year)'], 'intent': 'retrieve_equipment_with_expired_calibration', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [1], 'units': {'time': 'year (interval for calibration expiration)', 'date_comparison': 'date difference calculation'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'deviceName'}, {'column': 'calibrationDate'}, {'column': 'deviceType'}]}}\nA common sense reasoning question is as follows:\nIn the lab, suppose we need to find all equipment with calibration dates exceeding one year, grouped by equipment type. Please return the names and calibration dates of these devices.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT deviceType, GROUP_CONCAT(deviceName SEPARATOR ', ') AS deviceNames, GROUP_CONCAT(calibrationDate SEPARATOR ', ') AS calibrationDates FROM Devices WHERE DATEDIFF(CURDATE(), calibrationDate) > 365 GROUP BY deviceType;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 279,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['hypothesis', 'experiment', 'measurement value', 'normal range'], 'relations': ['hypothesis_to_experiment (hypothesis.experimentId → experiment.experimentId)', 'measurement_to_normal (measurementValue > 100 × normal_value)'], 'intent': 'return_false_hypotheses_grouped_by_experiment', 'reasoning_type': 'ideal hypothesis reasoning', 'numerical_values': [100], 'units': {'measurement': 'unit (from ExperimentData.unit)', 'normal_range': 'unit × 100 (hypothetical factor)'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}, {'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Hypotheses', 'fk_column': 'hypothesisId', 'ref_table': 'Experiments', 'ref_column': 'hypothesisId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}, {'pk_table': 'Experiments', 'pk_column': 'experimentId'}, {'pk_table': 'Hypotheses', 'pk_column': 'hypothesisId'}], 'tableinfo': {'PhysicsLabDB.Hypotheses': [{'column': 'hypothesisId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1005']}, {'column': 'verificationResult', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['真', '假']}], 'PhysicsLabDB.Experiments': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1005', '1006', '1007', '1015', '1']}], 'PhysicsLabDB.ExperimentData': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}, {'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}]}}\nA hypothetical reasoning question is as follows:\nIn the hypothesis table, suppose we need to validate a hypothesis, the validation result of which needs to be based on a measurement value that exceeds the normal range (for example, the measurement value is 100 times the normal value). Please return all hypotheses with false validation results, grouped by experiment ID.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT h.experimentId, h.hypothesisId, h.hypothesisText, h.verificationResult FROM Hypotheses h JOIN ExperimentData ed ON h.experimentId = ed.experimentId WHERE h.verificationResult = '假' AND ed.measurementValue > (SELECT initialValue FROM Variables WHERE experimentId = h.experimentId AND variableName = '正常值') * 100 GROUP BY h.experimentId, h.hypothesisId, h.hypothesisText, h.verificationResult;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 280,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['spectrometer', 'experimental data', 'experiment', 'measurement value'], 'relations': ['experiment_to_data (Experiments.experimentId → ExperimentData.experimentId)', 'device_to_data (Devices.deviceId → ExperimentData.deviceId)', \"device_type_filter (Devices.deviceType = 'spectrometer')\"], 'intent': 'calculate_average_measurements_by_experiment', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'measurement': 'unit (from ExperimentData.unit)', 'aggregation': 'average (implied by calculation)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}, {'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}, {'column': 'deviceId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '100']}, {'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}], 'PhysicsLabDB.Devices': [{'column': 'deviceType'}]}}\nA physical knowledge question is as follows:\nQuery all experimental data where the equipment type used is a spectrometer, calculate the average of the measured values for each experiment, and sort the results in ascending order by experiment ID.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT e.experimentId, AVG(ed.measurementValue) AS average_measurement_value FROM Experiments e JOIN ExperimentData ed ON e.experimentId = ed.experimentId JOIN Devices d ON ed.deviceId = d.deviceId WHERE d.deviceType = '光谱仪' GROUP BY e.experimentId ORDER BY e.experimentId ASC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 281,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['oscilloscope', 'experimental data', 'experiment'], 'relations': ['device_to_experiment_data (deviceId → mapping between Devices and ExperimentData)', \"filter_by_device_type (Devices.deviceType = 'oscilloscope')\"], 'intent': 'query_and_calculate_statistics', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'measurement': 'unit (column in ExperimentData, represents the unit of measurementValue)', 'standard_deviation': 'implied derived unit based on measurement values'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}, {'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}, {'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'deviceId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '100']}], 'PhysicsLabDB.Devices': [{'column': 'deviceId'}, {'column': 'deviceType'}]}}\nA mathematical logic question is as follows:\nQuery all experimental data where the equipment type used in the experiments is an oscilloscope, calculate the standard deviation of measured values for each experiment, and sort the results in ascending order by experiment ID.\nyour response just have a SQL without anything.\n",
        "solution": "WITH OscilloscopeExperiments AS (SELECT ed.experimentId, ed.measurementValue FROM ExperimentData ed JOIN Devices d ON ed.deviceId = d.deviceId WHERE d.deviceType = '示波器'), ExperimentStats AS (SELECT experimentId, AVG(measurementValue) AS avg_value, COUNT(measurementValue) AS count_value FROM OscilloscopeExperiments GROUP BY experimentId) SELECT oe.experimentId, SQRT(SUM(POWER(oe.measurementValue - es.avg_value, 2)) / es.count_value) AS std_deviation FROM OscilloscopeExperiments oe JOIN ExperimentStats es ON oe.experimentId = es.experimentId GROUP BY oe.experimentId ORDER BY oe.experimentId ASC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 282,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['other device type', 'experiment', 'measurement value'], 'relations': ['experiment_to_device (via ExperimentData.deviceId → Devices.deviceId)', \"device_type_filter (Devices.deviceType = 'other')\", 'sum_measurement_per_experiment'], 'intent': \"sum measured values for experiments using 'other' devices and sort by experiment ID\", 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'measurement': 'unit from ExperimentData.unit (implied by database schema)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}, {'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}, {'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}], 'PhysicsLabDB.Devices': [{'column': 'deviceType'}]}}\nA common sense reasoning question is as follows:\nRetrieve experimental data where the device type used in all experiments is \"other\" (not spectrometers or oscilloscopes), calculate the sum of measured values for each experiment, and sort the results in ascending order by experiment ID.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT e.experimentId, SUM(ed.measurementValue) AS total_measurement_value FROM Experiments e JOIN ExperimentData ed ON e.experimentId = ed.experimentId JOIN Devices d ON ed.deviceId = d.deviceId WHERE d.deviceType NOT IN ('光谱仪', '示波器') GROUP BY e.experimentId ORDER BY e.experimentId ASC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 283,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laboratory capacity 1000 people', 'devices count exceeding 1000', 'maximum measured value', 'experiment ID'], 'relations': ['lab_to_equipment_count (labId → equipmentCount)', 'experiment_to_lab (experimentId → labId)', 'experiment_to_data (experimentId → dataId)'], 'intent': 'filter_experiments_in_overcrowded_labs_and_calculate_max_measurement', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000, 1000], 'units': {'device_count': 'unitless (count of devices)', 'measurement': 'varies (determined by ExperimentData.unit column)'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}, {'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}, {'pk_table': 'Experiments', 'pk_column': 'experimentId'}, {'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '101']}, {'column': 'equipmentCount', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['15', '8', '12', '10', '100']}], 'PhysicsLabDB.Experiments': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1005', '1006', '1007', '1015', '1']}, {'column': 'labId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4']}], 'PhysicsLabDB.ExperimentData': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}, {'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the laboratory has a capacity of 1,000 people, query all experimental data where the number of devices exceeds 1,000 in any laboratory, calculate the maximum measured value for each experiment, and sort the results by experiment ID in ascending order.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT e.experimentId, MAX(ed.measurementValue) AS max_measurement_value FROM Experiments e JOIN Labs l ON e.labId = l.labId JOIN ExperimentData ed ON e.experimentId = ed.experimentId WHERE l.equipmentCount > 1000 GROUP BY e.experimentId ORDER BY e.experimentId ASC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 284,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laboratory capacity', 'researcher space requirement'], 'relations': ['required_space_per_researcher (2 m²)', 'capacity_comparison (required vs available)'], 'intent': 'calculate_capacity_sufficiency', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'space': 'square meters (m²)'}, 'foreign_keys': [{'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}], 'primary_keys': [{'pk_table': 'Experiments', 'pk_column': 'experimentId'}, {'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '101']}, {'column': 'capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['20', '10', '15', '12', '50']}], 'PhysicsLabDB.Experiments': [{'column': 'labId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4']}, {'column': 'researcherId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4']}]}}\nA physical knowledge question is as follows:\nCalculate whether the laboratory has sufficient capacity to accommodate all researchers when conducting experiments, assuming each researcher requires 2 square meters of space.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT L.labId, L.labName, L.location, L.capacity, COUNT(R.researcherId) AS currentResearchers, (L.capacity >= COUNT(R.researcherId)) AS isCapacitySufficient FROM Labs L JOIN Experiments E ON L.labId = E.labId JOIN Researchers R ON E.researcherId = R.researcherId WHERE E.status = '进行中' GROUP BY L.labId, L.labName, L.location, L.capacity;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 285,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Labs', 'Devices'], 'relations': ['labId_to_devices (Labs.labId → Devices.labId)'], 'intent': 'calculate_equipment_density_and_identify_max', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'equipment_density': 'unitless (number of devices / capacity)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '101']}, {'column': 'labName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光学实验室', '量子物理实验室', '电磁学实验室', '热力学实验室', '高级物理实验室']}, {'column': 'capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['20', '10', '15', '12', '50']}], 'PhysicsLabDB.Devices': [{'column': 'labId'}]}}\nA mathematical logic question is as follows:\nCalculate the equipment density of each lab, which is the ratio of the number of devices to the lab's capacity, and identify the lab with the highest equipment density.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT labId, labName, equipmentCount / capacity AS equipmentDensity FROM Labs ORDER BY equipmentDensity DESC LIMIT 1;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 286,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['unverified hypotheses', 'verification time', 'experiment start date', 'current date'], 'relations': ['hypothesis_to_experiment (hypothesis.experimentId → experiment.experimentId)', 'time_difference (current_date - experiment.startDate)'], 'intent': 'calculate_average_verification_time_for_unverified_hypotheses', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [None], 'units': {'time_difference': 'days (DATE_DIFF or equivalent function)', 'average_verification_time': 'days'}, 'foreign_keys': [{'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Hypotheses', 'fk_column': 'hypothesisId', 'ref_table': 'Experiments', 'ref_column': 'hypothesisId'}], 'primary_keys': [{'pk_table': 'Experiments', 'pk_column': 'experimentId'}, {'pk_table': 'Hypotheses', 'pk_column': 'hypothesisId'}], 'tableinfo': {'PhysicsLabDB.Hypotheses': [{'column': 'status', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['已验证', '未验证']}, {'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1005']}], 'PhysicsLabDB.Experiments': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1005', '1006', '1007', '1015', '1']}, {'column': 'startDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-01 10:00:00']}]}}\nA common sense reasoning question is as follows:\nFind all unverified hypotheses and calculate the average verification time of these hypotheses, where the verification time is the difference between the experiment start date and the current date.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(DATEDIFF(CURDATE(), e.startDate)) AS averageVerificationTime FROM Hypotheses h JOIN Experiments e ON h.experimentId = e.experimentId WHERE h.status = '未验证';",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 287,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laboratory', '0.1 square meters per researcher', 'infinite capacity expansion'], 'relations': ['lab_to_capacity (infinite expansion assumption)', 'space_per_researcher (0.1 m²)'], 'intent': 'calculate_max_researchers_under_extreme_conditions', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.1], 'units': {'space_per_researcher': 'm² (square meters)', 'lab_capacity': 'm² (implied by infinite expansion assumption)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['20', '10', '15', '12', '50']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the laboratory's capacity can be expanded infinitely, calculate the maximum number of researchers the laboratory can accommodate under extreme conditions, given that each researcher requires 0.1 square meters of space.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT labId, labName, (capacity / 0.1) AS maxResearchers FROM Labs;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 288,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laboratory equipment', 'number of devices', 'power consumption formula (n² × 10W)'], 'relations': ['device_count_to_equipment (n devices in lab)', 'power_calculation (n² × 10W)'], 'intent': 'calculate_total_power_consumption', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10], 'units': {'power': 'watts (W)', 'calculation': 'Σ(n² × 10W)'}, 'required_foreign_keys': [], 'additional_conditions': \"Assume each device's power = (total device count)^2 × 10W\", 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'deviceId'}]}}\nA physical knowledge question is as follows:\nCalculate the total power consumption of all equipment in the laboratory, assuming each device's power consumption is the square of the number of devices multiplied by 10 watts.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM(POWER(equipmentCount, 2) * 10) AS total_power_consumption FROM Labs;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 289,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Experiments', 'experiment duration', 'longest duration experiment'], 'relations': ['experiment_duration (endDate - startDate)', 'average_duration (AVG(duration))', 'max_duration (MAX(duration))'], 'intent': 'calculate_average_and_identify_max_experiment_duration', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'duration': 'days (calculated from startDate to endDate difference)'}, 'foreign_keys': [{'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}], 'primary_keys': [{'pk_table': 'Experiments', 'pk_column': 'experimentId'}], 'tableinfo': {'PhysicsLabDB.Experiments': [{'column': 'startDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-01 10:00:00']}, {'column': 'endDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-15 18:00:00']}, {'column': 'experimentName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['双缝实验', '量子纠缠实验', '电磁感应实验', '热传导实验', '极端条件模拟实验']}]}}\nA mathematical logic question is as follows:\nCalculate the average duration of all experiments in the laboratory and identify the experiment with the longest duration.\nyour response just have a SQL without anything.\n",
        "solution": "WITH ExperimentDurations AS (SELECT experimentId, experimentName, (endDate - startDate) AS duration FROM Experiments WHERE status = '已完成') SELECT AVG(duration) AS average_duration, MAX(duration) AS max_duration FROM ExperimentDurations;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 290,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['faulty_devices', 'total_devices'], 'relations': ['count_faulty_devices', 'count_total_devices', 'calculate_percentage'], 'intent': 'find_faulty_devices_and_calculate_percentage', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'percentage': '%'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'status'}, {'column': 'deviceId'}]}}\nA common sense reasoning question is as follows:\nFind all devices in the lab with a status of 'fault' and calculate their percentage of the total number of devices.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT \n    (COUNT(CASE WHEN status = '故障' THEN 1 END) * 100.0 / COUNT(*)) AS fault_percentage\nFROM Devices;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 291,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['lab', 'capacity 10,000 people', 'area 1,000 square meters'], 'relations': ['capacity_to_area_ratio (people per area)', 'density_formula (density = capacity / area)'], 'intent': 'calculate_current_density', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10000, 1000], 'units': {'capacity': 'people', 'area': 'square meters', 'density_unit': 'people/square meter'}, 'foreign_keys': [], 'primary_keys': [], 'tableinfo': 'This sql query does not need table and columns information as it is about mathematical calculations.'}\nA hypothetical reasoning question is as follows:\nAssuming the lab's capacity suddenly increases to 10,000 people, calculate the current density (people/square meter) of the lab, given that the lab's area is 1,000 square meters.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 10000 / 1000 AS lab_density;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 292,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['experiment measuring gravitational acceleration', 'gravitational acceleration measurements', 'experiment start time', 'experiment end time'], 'relations': ['experiment_to_data (Experiments.experimentId → ExperimentData.experimentId)', 'time_range (startDate → endDate)'], 'intent': 'calculate_average_gravitational_acceleration', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'acceleration': 'm/s² (meter per second squared)', 'time': 'timestamp format in database'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}, {'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}, {'pk_table': 'Experiments', 'pk_column': 'experimentId'}], 'tableinfo': {'PhysicsLabDB.Experiments': [{'column': 'experimentName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['双缝实验', '量子纠缠实验', '电磁感应实验', '热传导实验', '极端条件模拟实验']}, {'column': 'startDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-01 10:00:00']}, {'column': 'endDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-15 18:00:00']}], 'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}]}}\nA physical knowledge question is as follows:\nIn the experiment table Experiments, assuming there is an experiment for measuring gravitational acceleration, the experiment data table ExperimentData records measurement values at different time points. Please calculate the average gravitational acceleration during the experiment and return the experiment name, experiment start time, experiment end time, and the average gravitational acceleration.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT e.experimentName AS 实验名称, e.startDate AS 实验开始时间, e.endDate AS 实验结束时间, AVG(ed.measurementValue) AS 平均重力加速度 FROM Experiments e JOIN ExperimentData ed ON e.experimentId = ed.experimentId WHERE e.experimentName = '测量重力加速度' GROUP BY e.experimentId, e.experimentName, e.startDate, e.endDate;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 293,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Experiments', 'ExperimentData', 'Resistance', 'Voltage', 'Current'], 'relations': ['Experiments.experimentId → ExperimentData.experimentId', 'Voltage_measurement (unit: V)', 'Current_measurement (unit: A)'], 'intent': 'calculate_average_resistance_per_experiment', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['measurementValue (Voltage)', 'measurementValue (Current)'], 'units': {'voltage': 'V (Volts)', 'current': 'A (Amperes)', 'resistance': 'Ω (Ohms)', 'conversion': 'Resistance = Voltage / Current'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}, {'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}, {'pk_table': 'Experiments', 'pk_column': 'experimentId'}], 'tableinfo': {'PhysicsLabDB.Experiments': [{'column': 'experimentName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['双缝实验', '量子纠缠实验', '电磁感应实验', '热传导实验', '极端条件模拟实验']}, {'column': 'startDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-01 10:00:00']}, {'column': 'endDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-15 18:00:00']}], 'PhysicsLabDB.ExperimentData': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}, {'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}]}}\nA mathematical logic question is as follows:\nIn the Experiments table, suppose there is an experiment about measuring resistance, and the ExperimentData table records measurement values of different voltages and currents. Please calculate the average resistance for each experiment and return the experiment name, experiment start time, experiment end time, and average resistance.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT e.experimentName, e.startDate, e.endDate, AVG(ed1.measurementValue / ed2.measurementValue) AS averageResistance FROM Experiments e JOIN ExperimentData ed1 ON e.experimentId = ed1.experimentId AND ed1.unit = 'V' JOIN ExperimentData ed2 ON e.experimentId = ed2.experimentId AND ed2.unit = 'A' AND ed1.timestamp = ed2.timestamp GROUP BY e.experimentId, e.experimentName, e.startDate, e.endDate;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 294,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['experiment', 'temperature measurement'], 'relations': ['experimentId_to_experiment_data (Experiments.experimentId → ExperimentData.experimentId)'], 'intent': 'find_max_min_temperature_during_experiment', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'temperature': 'unit column from ExperimentData table (e.g., °C/°F)', 'time': 'startDate/endDate from Experiments table'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}, {'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}, {'pk_table': 'Experiments', 'pk_column': 'experimentId'}], 'tableinfo': {'PhysicsLabDB.Experiments': [{'column': 'experimentName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['双缝实验', '量子纠缠实验', '电磁感应实验', '热传导实验', '极端条件模拟实验']}, {'column': 'startDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-01 10:00:00']}, {'column': 'endDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-15 18:00:00']}], 'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}]}}\nA common sense reasoning question is as follows:\nIn the experiment table Experiments, assuming there is an experiment about temperature measurement, the experimental data table ExperimentData records temperature measurements at different time points. Please calculate the highest and lowest temperatures during the experiment and return the experiment name, experiment start time, experiment end time, as well as the highest and lowest temperatures.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT e.experimentName, e.startDate, e.endDate, MAX(ed.measurementValue) AS maxTemperature, MIN(ed.measurementValue) AS minTemperature FROM Experiments e JOIN ExperimentData ed ON e.experimentId = ed.experimentId WHERE ed.unit = 'Celsius' OR ed.unit = 'Fahrenheit' GROUP BY e.experimentId;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 295,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Experiments table', 'ExperimentData table', 'speed of light measurement', '1,000,000,000 m/s'], 'relations': ['experiments_to_data (Experiments.experimentId → ExperimentData.experimentId)', 'measurement_to_average (individual measurements → average calculation)'], 'intent': 'calculate_average_light_speed_with_metadata', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000000000], 'units': {'speed': 'm/s (meters per second)', 'time': 'timestamp format (YYYY-MM-DD HH:MM:SS)'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}, {'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}, {'pk_table': 'Experiments', 'pk_column': 'experimentId'}], 'tableinfo': {'PhysicsLabDB.Experiments': [{'column': 'experimentName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['双缝实验', '量子纠缠实验', '电磁感应实验', '热传导实验', '极端条件模拟实验']}, {'column': 'startDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-01 10:00:00']}, {'column': 'endDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-15 18:00:00']}], 'PhysicsLabDB.ExperimentData': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}, {'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'timestamp', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-02 10:30:00']}]}}\nA hypothetical reasoning question is as follows:\nIn the Experiments table, assume there is an experiment about measuring the speed of light. The ExperimentData table records the speed of light measurements at different time points. Please calculate the average speed of light during the experiment and return the experiment name, experiment start time, experiment end time, and the average speed of light. Assume the measured value of the speed of light exceeds the normal value, reaching 1,000,000,000 m/s.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT e.experimentName, e.startDate, e.endDate, AVG(ed.measurementValue) AS averageSpeed FROM Experiments e JOIN ExperimentData ed ON e.experimentId = ed.experimentId WHERE e.experimentName = '测量光速实验' AND ed.measurementValue > 1000000000 GROUP BY e.experimentName, e.startDate, e.endDate;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 296,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['spectrometer', '500 watts', '8 hours'], 'relations': ['deviceType_to_count (spectrometer count)', 'power_to_time (500W * 8h = 4kWh per device)'], 'intent': 'calculate_total_energy_consumption', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [500, 8], 'units': {'power': 'watts (W)', 'time': 'hours (h)', 'energy': 'kilowatt-hours (kWh)', 'conversion': '500W = 0.5kW → 0.5kW * 8h = 4kWh per day per spectrometer'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'deviceType'}]}}\nA physical knowledge question is as follows:\nCalculate the total energy consumption of all spectrometers in the laboratory, assuming each spectrometer has a power of 500 watts and operates 8 hours per day.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM(500 * 8) AS total_energy_consumption_kWh FROM Devices WHERE deviceType = '光谱仪';",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 297,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['equipment', 'current date 2023-10-01'], 'relations': ['device_calibration_date (equipment → calibrationDate)'], 'intent': 'calculate_average_calibration_interval', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'interval': 'days'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'calibrationDate'}]}}\nA mathematical logic question is as follows:\nCalculate the average calibration interval in days for all equipment in the laboratory, assuming the current date is 2023-10-01.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(DATEDIFF('2023-10-01', calibrationDate)) AS average_calibration_interval FROM Devices;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 298,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['equipment in the lab', \"status 'faulty'\"], 'relations': [\"equipment_to_status (Devices.status = 'faulty')\", 'device_to_calibration_date (Devices.calibrationDate)'], 'intent': 'find_faulty_equipment_and_calibration_dates', 'reasoning_type': 'common_sense_understanding', 'numerical_values': [], 'units': {'calibration_date': 'date (YYYY-MM-DD)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'deviceName'}, {'column': 'calibrationDate'}, {'column': 'status'}]}}\nA common sense reasoning question is as follows:\nFind all equipment in the lab with a status of 'faulty' and list their names and the date of their last calibration.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT deviceName, calibrationDate FROM Devices WHERE status = '故障';",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 299,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['device', 'laboratory', 'grid load capacity (1000 kW)', 'design maximum', 'measured value (1000x design maximum)'], 'relations': ['device_to_lab (Devices.labId → Labs.labId)', 'device_power_rating (Devices.powerRating)', 'power_exceedance (1000x design maximum)', 'grid_capacity_limit (1000 kW)'], 'intent': 'calculate_energy_exceedance_of_grid_capacity', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000, 1000], 'units': {'grid_capacity': 'kilowatts (kW)', 'power_exceedance_factor': 'unitless (1000x)', 'energy_consumption': 'kW (applies to device power rating)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}, {'fk_table': 'EnergyConsumption', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'EnergyConsumption', 'pk_column': 'deviceId'}, {'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'deviceId'}, {'column': 'deviceName'}, {'column': 'powerRating'}, {'column': 'labId'}], 'PhysicsLabDB.Labs': [{'column': 'labId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '101']}, {'column': 'labName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光学实验室', '量子物理实验室', '电磁学实验室', '热力学实验室', '高级物理实验室']}, {'column': 'capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['20', '10', '15', '12', '50']}], 'PhysicsLabDB.EnergyConsumption': [{'column': 'deviceId'}, {'column': 'energyConsumed'}]}}\nA hypothetical reasoning question is as follows:\nAssuming that the measured value of a device in the laboratory exceeds its design maximum by 1000 times, calculate whether the device's measurement under these conditions would cause the total energy consumption of the laboratory to exceed the grid's load capacity, given that the grid's maximum load capacity is 1000 kilowatts.\nyour response just have a SQL without anything.\n",
        "solution": "WITH DevicePower AS (SELECT deviceId, deviceName, CASE WHEN deviceType = '示波器' THEN 500 WHEN deviceType = '光谱仪' THEN 700 ELSE 300 END AS basePower FROM Devices WHERE labId = (SELECT labId FROM Labs WHERE labName = '目标实验室名称')), MaxPower AS (SELECT deviceId, deviceName, basePower * 1000 AS maxPower FROM DevicePower), TotalEnergy AS (SELECT SUM(maxPower * 24) AS totalEnergy FROM MaxPower) SELECT CASE WHEN totalEnergy > 1000 THEN '超过电网承载能力' ELSE '未超过电网承载能力' END AS result FROM TotalEnergy;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 300,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['spectrometer', 'light intensity measurement'], 'relations': ['ExperimentData.deviceId → Devices.deviceId', 'Devices.deviceType → DeviceTypes.deviceType'], 'intent': 'calculate_average_measurement', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'measurement_unit': 'Lux (lx)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}, {'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'DeviceTypes', 'pk_column': 'deviceType'}, {'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'deviceId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '100']}], 'PhysicsLabDB.Devices': [{'column': 'deviceId'}, {'column': 'deviceType'}], 'PhysicsLabDB.DeviceTypes': [{'column': 'deviceType', 'type': 'VARCHAR(255)', 'primary_key': True, 'comment': '', 'examples': ['光设备', '光谱仪', '其他', '示波器']}]}}\nA physical knowledge question is as follows:\nIn the experimental data table, find all data collected using the spectrometer equipment, and calculate the average measurement value of these data. Assuming the measurement value is light intensity, with the unit of Lux (Lux), please compute the average light intensity of these data.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(measurementValue) AS averageLightIntensity FROM ExperimentData WHERE deviceId IN (SELECT deviceId FROM Devices WHERE deviceType = '光谱仪') AND unit = 'Lux';",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 301,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['high temperature environmental condition', 'temperature measurements in °C'], 'relations': [\"environmental_condition_to_data (filter ExperimentData by 'high temperature')\", 'measurement_to_statistic (calculate standard deviation of filtered measurements)'], 'intent': 'calculate_standard_deviation', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'temperature': '°C (Celsius)', 'statistic': 'standard deviation (unit preserved as °C)'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'environmentalConditions', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['温度: 25°C, 湿度: 50%', '温度: 22°C, 湿度: 45%', '温度: 20°C, 湿度: 40%', '温度: 23°C, 湿度: 55%', '温度25°C,湿度40%']}, {'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}]}}\nA mathematical logic question is as follows:\nIn the experimental data table, find all data collected under the environmental condition of 'high temperature' and calculate the standard deviation of these data measurements, assuming the measured value is temperature, in degrees Celsius (°C).\nyour response just have a SQL without anything.\n",
        "solution": "WITH HighTempData AS (SELECT measurementValue FROM ExperimentData WHERE environmentalConditions = '高温' AND unit = '°C'), AverageValue AS (SELECT AVG(measurementValue) AS avgValue FROM HighTempData) SELECT SQRT(SUM(POWER(measurementValue - avgValue, 2)) / COUNT(*)) AS standardDeviation FROM HighTempData, AverageValue;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 302,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['experimental data with high data quality', 'measured current values in amperes (A)'], 'relations': [\"filter_by_data_quality (dataQuality='high')\", 'sum_of_measured_values (ΣmeasurementValue)'], 'intent': 'calculate_total_sum_of_measured_current_values_with_high_quality', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'current': 'A (Amperes)'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'dataQuality', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['高', '中', '低']}, {'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}]}}\nA common sense reasoning question is as follows:\nIn the experimental data table, find all experimental data with data quality marked as 'high', and calculate the total sum of their measured values, assuming the measured values represent current in amperes (A).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM(measurementValue) AS totalCurrent FROM ExperimentData WHERE dataQuality = '高' AND unit = 'A';",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 303,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['ExperimentData', 'measurementValue', 'voltage', '1000x unit conversion', '1000x data collection time extension'], 'relations': ['ExperimentData_to_measurementValue', 'voltage_to_unit_conversion', 'data_collection_time_to_duration_scaling'], 'intent': 'calculate_total_sum_of_scaled_measurements_with_extended_time', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000, 1000], 'units': {'original': 'volts (V)', 'converted': 'thousand volts (kV or V×1000)', 'time_scaling': 'duration×1000'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}, {'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}, {'column': 'timestamp', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-02 10:30:00']}]}}\nA hypothetical reasoning question is as follows:\nIn the experimental data table, assuming all measured values are converted to units of 'thousand times' (i.e., the original measurements multiplied by 1000), and assuming all data collection times are extended by 1000 times, calculate the total sum of the measurements under these hypothetical conditions, assuming the measurements are voltages with units of volts (V).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM(measurementValue * 1000) * 1000 AS totalVoltage FROM ExperimentData WHERE unit = 'V';",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 304,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['speed of light 3.00 x 10^8 m/s', 'frequency 5.00 x 10^14 Hz', 'spectrometer'], 'relations': ['speed_to_frequency (c = λf → λ = c/f)', 'device_to_measurement (spectrometer → wavelength measurement)'], 'intent': 'calculate_wavelength_from_frequency_and_speed_of_light', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [300000000.0, 500000000000000.0], 'units': {'speed': 'm/s (meters per second)', 'frequency': 'Hz (Hertz)', 'wavelength': 'm (meters) or nm (nanometers)', 'conversion': 'λ = c/f = 6.00 x 10^-7 m or 600 nm'}, 'foreign_keys': [{'fk_table': 'Calculations', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}, {'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}], 'primary_keys': [{'pk_table': 'Calculations', 'pk_column': 'calculationId'}, {'pk_table': 'ExperimentData', 'pk_column': 'dataId'}, {'pk_table': 'Experiments', 'pk_column': 'experimentId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}, {'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}], 'PhysicsLabDB.Calculations': [{'column': 'formula', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['V = IR', 'E = hν', 'F = qvB', 'Q = mcΔT', '并联电阻公式: 1/Req = Σ(1/Ri)']}, {'column': 'result', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.0', '0.0', '42000.0', '4.38', '49.05']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'J', 'N', 'Ω', 'W']}], 'PhysicsLabDB.Experiments': [{'column': 'experimentName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['双缝实验', '量子纠缠实验', '电磁感应实验', '热传导实验', '极端条件模拟实验']}, {'column': 'objective', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['验证光的波动性', '验证量子纠缠', '验证法拉第定律', '验证傅里叶定律']}]}}\nA physical knowledge question is as follows:\nCalculate the wavelength of light measured by a spectrometer in an experiment, given that the speed of light is 3.00 x 10^8 m/s and the frequency is 5.00 x 10^14 Hz. Find the wavelength.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT experimentId, experimentName, (3.00 * POWER(10, 8)) / (5.00 * POWER(10, 14)) AS wavelength, 'm' AS unit FROM Experiments WHERE experimentName = '光谱仪测量实验';",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 305,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['resistor R1=10Ω', 'resistor R2=20Ω', 'resistor R3=30Ω', 'resistor R4=40Ω', 'resistor R5=50Ω'], 'relations': ['resistors_connected_in_parallel (R1-R5 → equivalent_resistance)', 'equivalent_resistance (R_eq)'], 'intent': 'calculate_equivalent_resistance', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10, 20, 30, 40, 50], 'units': {'resistance': 'Ω (ohms)', 'conversion': '1/R_eq = 1/R1 + 1/R2 + 1/R3 + 1/R4 + 1/R5'}, 'foreign_keys': [{'fk_table': 'Calculations', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}], 'primary_keys': [{'pk_table': 'Calculations', 'pk_column': 'calculationId'}, {'pk_table': 'Experiments', 'pk_column': 'experimentId'}], 'tableinfo': {'PhysicsLabDB.Calculations': [{'column': 'formula', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['V = IR', 'E = hν', 'F = qvB', 'Q = mcΔT', '并联电阻公式: 1/Req = Σ(1/Ri)']}, {'column': 'inputData', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['I=2A, R=6Ω', 'h=6.626e-34, ν=1e14', 'q=1.6e-19, v=1e6, B=0.5', 'm=1kg, c=4200, ΔT=10', 'R1=10.00Ω, R2=20.00Ω, R3=30.00Ω, R4=40.00Ω, R5=50.00Ω']}, {'column': 'result', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.0', '0.0', '42000.0', '4.38', '49.05']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'J', 'N', 'Ω', 'W']}], 'PhysicsLabDB.Experiments': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1005', '1006', '1007', '1015', '1']}]}}\nA mathematical logic question is as follows:\nIn a certain experiment, researchers need to calculate the equivalent resistance of a complex circuit. It is known that the circuit contains five resistors: R1=10Ω, R2=20Ω, R3=30Ω, R4=40Ω, R5=50Ω, all connected in parallel. Determine the equivalent resistance.\nyour response just have a SQL without anything.\n",
        "solution": "INSERT INTO Calculations (experimentId, formula, inputData, result, unit, dataQuality) VALUES ((SELECT experimentId FROM Experiments WHERE experimentName = '复杂电路实验'), '1/Req = 1/R1 + 1/R2 + 1/R3 + 1/R4 + 1/R5', 'R1=10Ω, R2=20Ω, R3=30Ω, R4=40Ω, R5=50Ω', 1 / (1/10 + 1/20 + 1/30 + 1/40 + 1/50), 'Ω', '高');",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 306,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laboratory', '10 devices', '500W power', '8 hours per day', '0.5 yuan per kilowatt-hour', 'one month'], 'relations': ['device_count_to_power (10 devices × 500W)', 'daily_energy_consumption (total power × hours)', 'monthly_cost (daily_energy_consumption × days × cost_rate)'], 'intent': 'calculate_electricity_cost', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10, 500, 8, 0.5, 30], 'units': {'power': 'W (Watts)', 'energy_consumption': 'kWh (kilowatt-hours)', 'time': 'hours/day × days', 'cost': 'yuan/kWh', 'conversion': 'kWh = (power(W) × hours) / 1000'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}, {'fk_table': 'EnergyConsumption', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'EnergyConsumption', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'power'}], 'PhysicsLabDB.EnergyConsumption': [{'column': 'energyConsumed'}, {'column': 'consumptionDate'}]}}\nA common sense reasoning question is as follows:\nIn a certain experiment, the researchers needed to calculate the energy consumption of the laboratory. It is known that the laboratory has 10 devices, each with a power of 500W, operating 8 hours per day, and the electricity cost is 0.5 yuan per kilowatt-hour. Determine the laboratory's electricity cost for one month.\nyour response just have a SQL without anything.\n",
        "solution": "WITH DevicePower AS (SELECT 10 * 500 AS total_power), DailyEnergy AS (SELECT total_power * 8 / 1000 AS daily_energy FROM DevicePower), MonthlyCost AS (SELECT daily_energy * 30 * 0.5 AS monthly_cost FROM DailyEnergy) SELECT monthly_cost FROM MonthlyCost;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 307,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\nthere is nothing I can give you about this question.\nA hypothetical reasoning question is as follows:\nSuppose in a certain experiment, researchers need to calculate the energy consumption of a very large laboratory. The laboratory has 1000 pieces of equipment, each with a power of 10000W, operating 24 hours a day. The electricity cost is 0.1 yuan per kilowatt-hour. Calculate the annual electricity cost of the laboratory.\nyour response just have a SQL without anything.\n",
        "solution": "WITH DevicePower AS (SELECT SUM(10000) AS total_power FROM Devices WHERE labId = (SELECT labId FROM Labs WHERE labName = '超大型实验室')), DailyEnergy AS (SELECT total_power * 24 AS daily_energy FROM DevicePower), AnnualCost AS (SELECT daily_energy * 365 * 0.1 AS annual_cost FROM DailyEnergy) SELECT annual_cost FROM AnnualCost;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 308,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['measured voltage', 'current 2 amperes (A)', 'standard temperature 25°C'], 'relations': ['voltage_to_power (V × I = P)', 'temperature_condition (25°C)'], 'intent': 'calculate_power_from_voltage_and_current', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [2], 'units': {'voltage': 'volts (V)', 'current': 'amperes (A)', 'power': 'watts (W)', 'temperature': '°C (Celsius)'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue (voltage in V)'}, {'column': \"unit (must be 'V')\"}, {'column': \"environmentalConditions (must include '25°C')\"}]}}\nA physical knowledge question is as follows:\nIn the experimental data table, assume we have an experimental data record with the measured value being voltage, in volts (V), under standard temperature conditions (25°C). Please calculate the power when the current is 2 amperes (A) in this environment.\nyour response just have a SQL without anything.\n",
        "solution": "INSERT INTO Calculations (experimentId, formula, inputData, result, unit, dataQuality) SELECT experimentId, 'P = V * I', CONCAT('V=', measurementValue, ', I=2'), measurementValue * 2, 'Watt', '高' FROM ExperimentData WHERE unit = 'V' AND environmentalConditions = '25°C';",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 309,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['mass 5 kg', 'acceleration 9.8 m/s²'], 'relations': ['force_formula (F = m * a)'], 'intent': 'calculate_force', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [5, 9.8], 'units': {'mass': 'kg (kilograms)', 'acceleration': 'm/s² (meters per second squared)', 'force': 'N (newtons)', 'conversion': 'F = 5 kg * 9.8 m/s² = 49 N'}, 'foreign_keys': [{'fk_table': 'Calculations', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}], 'primary_keys': [{'pk_table': 'Calculations', 'pk_column': 'calculationId'}], 'tableinfo': {'PhysicsLabDB.Calculations': [{'column': 'formula', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['V = IR', 'E = hν', 'F = qvB', 'Q = mcΔT', '并联电阻公式: 1/Req = Σ(1/Ri)']}, {'column': 'inputData', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['I=2A, R=6Ω', 'h=6.626e-34, ν=1e14', 'q=1.6e-19, v=1e6, B=0.5', 'm=1kg, c=4200, ΔT=10', 'R1=10.00Ω, R2=20.00Ω, R3=30.00Ω, R4=40.00Ω, R5=50.00Ω']}, {'column': 'result', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.0', '0.0', '42000.0', '4.38', '49.05']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'J', 'N', 'Ω', 'W']}]}}\nA mathematical logic question is as follows:\nIn the calculation table, assuming we have a formula F = m * a, where F is force, m is mass, and a is acceleration. Given that the mass is 5 kilograms (kg) and the acceleration is 9.8 meters per second squared (m/s²), please calculate the value of force F.\nyour response just have a SQL without anything.\n",
        "solution": "INSERT INTO Calculations (experimentId, formula, inputData, result, unit, dataQuality) VALUES (1, 'F = m * a', 'm=5kg, a=9.8m/s²', 49, 'N', '高');",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 310,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['lab capacity 50 people', 'equipment count 100'], 'relations': ['equipment_per_researcher (equipment_count ÷ capacity)'], 'intent': 'calculate_average_equipment_per_researcher', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50, 100], 'units': {'researchers': 'people', 'equipment': 'pieces', 'ratio': 'equipment per researcher'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['20', '10', '15', '12', '50']}, {'column': 'equipmentCount', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['15', '8', '12', '10', '100']}]}}\nA common sense reasoning question is as follows:\nIn the lab table, assuming a lab has a capacity of 50 people and 100 pieces of equipment. Please calculate the average number of equipment available per researcher.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT equipmentCount / capacity AS avg_equipment_per_researcher FROM Labs WHERE capacity = 50 AND equipmentCount = 100;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 311,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['hypothesis', 'verification result (true)', 'verification date (October 1, 2023)', '10,000 years later'], 'relations': ['hypothesis_to_verification_date (hypothesis → October 1, 2023)', 'time_span (10,000 years)', 'verification_result_to_hypothesis (true → hypothesis)'], 'intent': 'assess_validity_of_hypothesis_verification_over_time', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [10000, 2023, 10, 1], 'units': {'time': 'years', 'date': 'October 1, 2023 (YYYY-MM-DD)', 'conversion': '10,000 years added to verification date'}, 'foreign_keys': [{'fk_table': 'Hypotheses', 'fk_column': 'hypothesisId', 'ref_table': 'Experiments', 'ref_column': 'hypothesisId'}], 'primary_keys': [{'pk_table': 'Hypotheses', 'pk_column': 'hypothesisId'}], 'tableinfo': {'PhysicsLabDB.Hypotheses': [{'column': 'verificationDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-15 18:00:00']}, {'column': 'verificationResult', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['真', '假']}]}}\nA hypothetical reasoning question is as follows:\nIn the hypothetical table, suppose we have a hypothesis with a verification result of true and a verification date of October 1, 2023. Please calculate whether the hypothesis verification result would still be valid if the verification date were 10,000 years later.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT hypothesisId, hypothesisText, verificationResult, verificationDate, CASE WHEN DATE_ADD(verificationDate, INTERVAL 10000 YEAR) > NOW() THEN '有效' ELSE '无效' END AS validity FROM Hypotheses WHERE verificationResult = '真' AND verificationDate = '2023-10-01';",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 312,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['ExperimentData table', 'volts (V)', '10kV (maximum withstand voltage)'], 'relations': ['experiment_to_measurements (experimentId → measurementValue)', 'voltage_threshold (10kV → 10000 volts)'], 'intent': 'calculate_average_measurements_and_identify_overvoltage_experiments', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10000], 'units': {'measurement': 'volts (V)', 'threshold_conversion': '10kV = 10000 volts', 'calculation_unit': 'average value in volts'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}, {'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}, {'pk_table': 'Experiments', 'pk_column': 'experimentId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}, {'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}], 'PhysicsLabDB.Experiments': [{'column': 'experimentName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['双缝实验', '量子纠缠实验', '电磁感应实验', '热传导实验', '极端条件模拟实验']}]}}\nA physical knowledge question is as follows:\nIn the experimental data table, the unit of measurement is volts (V). Please calculate the average of all measurements for a specific experiment and identify which experiments have measurements exceeding the laboratory equipment's maximum withstand voltage of 10kV.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(measurementValue) AS averageVoltage, experimentId FROM ExperimentData WHERE unit = 'V' GROUP BY experimentId HAVING MAX(measurementValue) > 10000;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 313,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Variables', \"laboratory's safety threshold of 1000 units\"], 'relations': ['sum_of_initial_values (total_sum)', 'threshold_comparison (exceeds_threshold)'], 'intent': 'calculate_total_sum_of_initial_values_and_identify_variables_exceeding_threshold', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000], 'units': {'threshold_unit': 'units', 'variable_units': 'units (as defined in Variables.unit column)'}, 'foreign_keys': [{'fk_table': 'Variables', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}], 'primary_keys': [{'pk_table': 'Variables', 'pk_column': 'variableId'}], 'tableinfo': {'PhysicsLabDB.Variables': [{'column': 'variableId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '24', '25', '2', '3']}, {'column': 'variableName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光强', '量子态', '磁场强度', '温差', 'A']}, {'column': 'initialValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['100.0', '0.5', '10.0', '20.0', '28750.0']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['lux', 'probability', 'T', '°C', '无量纲']}]}}\nA mathematical logic question is as follows:\nIn the variables table, given the initial values and units for each variable, please calculate the total sum of all variables' initial values and identify which variables exceed the laboratory's defined safety threshold of 1000 units.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM(initialValue) AS totalInitialValue, variableId, variableName, initialValue, unit FROM Variables WHERE initialValue > 1000;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 314,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Laboratory', 'Equipment Quantity', 'Per Capita Equipment Quantity', 'Threshold Value'], 'relations': ['laboratory_to_equipment_count (Labs → equipmentCount)', 'laboratory_to_capacity (Labs → capacity)', 'per_capita_calculation (equipmentCount / capacity)', 'threshold_comparison (per_capita_quantity < 2)'], 'intent': 'calculate_per_capita_equipment_and_filter', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'equipment_quantity': 'units (from Labs.equipmentCount)', 'capacity': 'people (from Labs.capacity)', 'per_capita_quantity': 'units/person (calculated as equipmentCount / capacity)', 'threshold': '2 units/person'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '101']}, {'column': 'labName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光学实验室', '量子物理实验室', '电磁学实验室', '热力学实验室', '高级物理实验室']}, {'column': 'capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['20', '10', '15', '12', '50']}, {'column': 'equipmentCount', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['15', '8', '12', '10', '100']}]}}\nA common sense reasoning question is as follows:\nIn the laboratory table, the capacity of each laboratory is 50 people, and the number of equipment is 100 units. Calculate the per capita equipment quantity for each laboratory and identify which laboratories have a per capita equipment quantity below 2 units/person.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT labId, labName, equipmentCount / capacity AS equipmentPerPerson FROM Labs WHERE equipmentCount / capacity < 2;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 315,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['verification date', 'current date (100 years in future)', 'maximum service life of laboratory equipment (100 years)'], 'relations': ['hypothesis_to_verification_date (Hypotheses.verificationDate)', 'device_to_purchase_date (Devices.purchaseDate)', 'service_life_threshold (100 years)'], 'intent': 'calculate_date_difference_and_evaluate_service_life_exceedance', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100], 'units': {'time': 'years', 'date_difference': 'years (calculated from verificationDate - current date)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}, {'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}, {'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Hypotheses', 'fk_column': 'hypothesisId', 'ref_table': 'Experiments', 'ref_column': 'hypothesisId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'ExperimentData', 'pk_column': 'dataId'}, {'pk_table': 'Experiments', 'pk_column': 'experimentId'}, {'pk_table': 'Hypotheses', 'pk_column': 'hypothesisId'}], 'tableinfo': {'PhysicsLabDB.Hypotheses': [{'column': 'hypothesisId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'verificationDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-15 18:00:00']}, {'column': 'verificationResult', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['真', '假']}], 'PhysicsLabDB.Experiments': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1005', '1006', '1007', '1015', '1']}], 'PhysicsLabDB.ExperimentData': [{'column': 'deviceId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '100']}], 'PhysicsLabDB.Devices': [{'column': 'purchaseDate'}]}}\nA hypothetical reasoning question is as follows:\nIn the hypothetical table, assuming the verification result is true and the verification date is 100 years in the future. Calculate the difference between the verification date and the current date for these assumptions, and identify which assumptions have a verification date that exceeds the maximum service life of laboratory equipment, which is 100 years.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM(initialValue) AS totalInitialValue, variableId, variableName, initialValue, unit FROM Variables WHERE initialValue > 1000 GROUP BY variableId, variableName, initialValue, unit;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 316,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['measured voltage 5V', 'environmental conditions 25°C temperature', '50% humidity'], 'relations': ['experiment_data_to_measurement (ExperimentData.measurementValue)', 'environmental_condition_to_data (ExperimentData.environmentalConditions)', 'device_calibration_to_error_range (Devices.calibrationDate)'], 'intent': 'calculate_error_range', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [5, 25, 50], 'units': {'voltage': 'V (Volts)', 'temperature': '°C (Celsius)', 'humidity': '% (Relative Humidity)', 'error_range': 'V (Volts ± uncertainty)'}, 'foreign_keys': [{'fk_table': 'Constraints', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}, {'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}, {'fk_table': 'SensitivityAnalysis', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'SensitivityAnalysis', 'fk_column': 'variableId', 'ref_table': 'Variables', 'ref_column': 'variableId'}], 'primary_keys': [{'pk_table': 'Constraints', 'pk_column': 'constraintId'}, {'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'ExperimentData', 'pk_column': 'dataId'}, {'pk_table': 'SensitivityAnalysis', 'pk_column': 'analysisId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'environmentalConditions', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['温度: 25°C, 湿度: 50%', '温度: 22°C, 湿度: 45%', '温度: 20°C, 湿度: 40%', '温度: 23°C, 湿度: 55%', '温度25°C,湿度40%']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}], 'PhysicsLabDB.Devices': [{'column': 'specifications'}, {'column': 'calibrationDate'}], 'PhysicsLabDB.SensitivityAnalysis': [{'column': 'sensitivityValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['0.75', '0.25', '0.6', '0.4', '1000.0']}], 'PhysicsLabDB.Constraints': [{'column': 'constraintText', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['光强 >= 50 lux', '量子态总和 = 1', '磁场强度 <= 1 T', '温差 >= 5 °C']}]}}\nA physical knowledge question is as follows:\nIn the lab, if the measurement unit of an experiment is volts (V), and the measured value in the experimental data table is 5V with environmental conditions of 25°C temperature and 50% humidity, please calculate the error range of the measured value under these environmental conditions.\nyour response just have a SQL without anything.\n",
        "solution": "WITH EnvironmentalCoefficients AS (SELECT 0.01 AS temperature_coefficient, 0.005 AS humidity_coefficient), StandardConditions AS (SELECT 20 AS standard_temperature, 40 AS standard_humidity), ExperimentData AS (SELECT measurementValue, environmentalConditions FROM ExperimentData WHERE unit = 'V' AND measurementValue = 5 AND environmentalConditions LIKE '%25°C%' AND environmentalConditions LIKE '%50%') SELECT measurementValue * ((SELECT temperature_coefficient FROM EnvironmentalCoefficients) * (25 - (SELECT standard_temperature FROM StandardConditions)) + (SELECT humidity_coefficient FROM EnvironmentalCoefficients) * (50 - (SELECT standard_humidity FROM StandardConditions))) AS error_range FROM ExperimentData;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 317,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['variable A', 'variable B', 'variable C', 'initial values [10, 20, 30]', 'units [m, kg, s]', 'sensitivity values [0.5, 0.3, 0.2]'], 'relations': ['variable_to_sensitivity (A→0.5, B→0.3, C→0.2)', 'impact_contribution (A: 10×0.5=5, B: 20×0.3=6, C: 30×0.2=6)', 'total_impact (5+6+6=17)'], 'intent': 'calculate_total_impact', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10, 20, 30, 0.5, 0.3, 0.2], 'units': {'variable_units': ['m (meter)', 'kg (kilogram)', 's (second)'], 'sensitivity_units': 'unitless (dimensionless scaling factor)', 'impact_units': 'unitless (sum of weighted contributions)'}, 'foreign_keys': [{'fk_table': 'SensitivityAnalysis', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'SensitivityAnalysis', 'fk_column': 'variableId', 'ref_table': 'Variables', 'ref_column': 'variableId'}, {'fk_table': 'Variables', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}], 'primary_keys': [{'pk_table': 'SensitivityAnalysis', 'pk_column': 'analysisId'}, {'pk_table': 'Variables', 'pk_column': 'variableId'}], 'tableinfo': {'PhysicsLabDB.Variables': [{'column': 'initialValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['100.0', '0.5', '10.0', '20.0', '28750.0']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['lux', 'probability', 'T', '°C', '无量纲']}], 'PhysicsLabDB.SensitivityAnalysis': [{'column': 'sensitivityValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['0.75', '0.25', '0.6', '0.4', '1000.0']}]}}\nA mathematical logic question is as follows:\nSuppose there are three variables A, B, and C in an experiment, with initial values of 10, 20, and 30, and units of m, kg, and s respectively. If the sensitivity value of variable A is 0.5, variable B is 0.3, and variable C is 0.2, please calculate the total impact of these three variables on the experimental results.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT SUM(s.sensitivityValue * v.initialValue) AS totalImpact FROM SensitivityAnalysis s JOIN Variables v ON s.variableId = v.variableId WHERE v.variableName IN ('A', 'B', 'C');",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 318,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['calibration date 2022-01-01', 'calibration cycle 1 year', 'check date 2023-05-01'], 'relations': ['calibration_cycle_duration (1 year)', 'time_interval (2022-01-01 → 2023-05-01)', 'threshold_comparison (device_validity)'], 'intent': 'determine_calibration_status', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1, 2022, 2023], 'units': {'date': 'YYYY-MM-DD (ISO 8601)', 'duration': 'years', 'threshold': 'calibration_interval = 1 year'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'calibrationDate'}]}}\nA common sense reasoning question is as follows:\nIn the laboratory, if a device's calibration date is January 1, 2022, and the device's calibration cycle is 1 year, determine whether the device needs to be recalibrated on May 1, 2023.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT deviceId, deviceName, calibrationDate, CASE WHEN DATE_ADD(calibrationDate, INTERVAL 1 YEAR) < '2023-05-01' THEN '需要重新校准' ELSE '不需要重新校准' END AS recalibrationStatus FROM Devices WHERE calibrationDate = '2022-01-01';",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 319,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laboratory area 10000 square meters', 'space per equipment 10 square meters'], 'relations': ['lab_area_to_equipment_capacity (10000 / 10 = 1000)'], 'intent': 'calculate_max_equipment_capacity', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10000, 10], 'units': {'area': 'square meters', 'equipment_space': 'square meters per piece', 'capacity': 'pieces of equipment'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光学实验室', '量子物理实验室', '电磁学实验室', '热力学实验室', '高级物理实验室']}, {'column': 'capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['20', '10', '15', '12', '50']}, {'column': 'equipmentCount', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['15', '8', '12', '10', '100']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a laboratory has a capacity of 100 people and 1000 pieces of equipment, with each piece of equipment requiring 1 square meter of space. If the laboratory's area suddenly increases to 10,000 square meters and the space required per piece of equipment rises to 10 square meters, please calculate the maximum equipment capacity of the laboratory under these new conditions.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 10000 / 10 AS max_equipment_capacity;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 320,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['voltage data', 'ambient temperature 25°C', 'humidity 60%'], 'relations': ['environmental_conditions_to_voltage_data (25°C & 60% → voltage measurements)', 'measurement_value_to_unit (voltage data → volts)'], 'intent': 'calculate_average_voltage_under_conditions', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [25, 60], 'units': {'temperature': '°C (Celsius)', 'humidity': '% (percentage)', 'voltage': 'V (volts)'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'environmentalConditions', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['温度: 25°C, 湿度: 50%', '温度: 22°C, 湿度: 45%', '温度: 20°C, 湿度: 40%', '温度: 23°C, 湿度: 55%', '温度25°C,湿度40%']}, {'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}]}}\nA physical knowledge question is as follows:\nIn the laboratory, suppose there is an experiment that requires calculating the average value of voltage data collected by the equipment under specific environmental conditions. Please calculate the average voltage data collected by the equipment under the conditions where the ambient temperature is 25°C and the humidity is 60%.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(measurementValue) AS average_voltage FROM ExperimentData WHERE environmentalConditions = 'temperature:25°C, humidity:60%' AND unit = 'V';",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 321,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['temperature data', 'January 1, 2023 to January 31, 2023'], 'relations': ['temperature_data_to_time_period (recordedAt → date filter)'], 'intent': 'calculate_standard_deviation_of_temperature_data', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2023, 1, 31], 'units': {'temperature': 'assumed unit (e.g., °C or °F) from database context', 'time_period': 'days'}, 'foreign_keys': [{'fk_table': 'TemperatureReadings', 'fk_column': 'sensorId', 'ref_table': 'Sensors', 'ref_column': 'sensorId'}], 'primary_keys': [{'pk_table': 'TemperatureReadings', 'pk_column': 'recordId'}], 'tableinfo': {'PhysicsLabDB.TemperatureReadings': [{'column': 'recordedAt', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2025-06-17 23:44:59']}, {'column': 'temperature', 'type': 'FLOAT', 'primary_key': False, 'comment': '', 'examples': ['65.0', '-25.0']}]}}\nA mathematical logic question is as follows:\nIn the laboratory, suppose there is an experiment that requires calculating the standard deviation of temperature data collected by a device during a specific time period. Please calculate the standard deviation of the temperature data collected by the device from January 1, 2023 to January 31, 2023.\nyour response just have a SQL without anything.\n",
        "solution": "WITH TemperatureData AS (SELECT measurementValue FROM ExperimentData WHERE timestamp BETWEEN '2023-01-01' AND '2023-01-31' AND unit = 'Celsius') SELECT SQRT(AVG(POWER(measurementValue - (SELECT AVG(measurementValue) FROM TemperatureData), 2))) AS standard_deviation FROM TemperatureData;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 322,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['humidity data', 'equipment', 'January 1, 2023', 'January 31, 2023'], 'relations': ['equipment_to_data (equipment → ExperimentData)', 'time_range (2023-01-01 to 2023-01-31)'], 'intent': 'calculate_max_humidity', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2023, 1, 31], 'units': {'humidity': '% (percentage)', 'time': 'YYYY-MM-DD (ISO 8601)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}, {'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'timestamp', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-02 10:30:00']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}, {'column': 'deviceId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '100']}], 'PhysicsLabDB.Devices': [{'column': 'deviceId'}, {'column': 'deviceName'}]}}\nA common sense reasoning question is as follows:\nIn the laboratory, assuming there is an experiment that requires calculating the maximum value of humidity data collected by the equipment within a specific time period. Please calculate the maximum value of humidity data collected by the equipment between January 1, 2023, and January 31, 2023.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT MAX(measurementValue) AS max_humidity FROM ExperimentData WHERE timestamp BETWEEN '2023-01-01' AND '2023-01-31' AND unit = '%';",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 323,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['pressure data', 'ambient temperature 1000°C', 'humidity 100%'], 'relations': ['device_to_pressure_data (device → ExperimentData.measurementValue)', 'environmental_conditions_to_data (1000°C & 100% humidity → ExperimentData environmental filter)'], 'intent': 'calculate_average_pressure_value', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000, 100], 'units': {'temperature': '°C (Celsius)', 'humidity': '% (percentage)', 'pressure': 'unit unspecified (requires filtering by ExperimentData.unit column)'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'environmentalConditions', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['温度: 25°C, 湿度: 50%', '温度: 22°C, 湿度: 45%', '温度: 20°C, 湿度: 40%', '温度: 23°C, 湿度: 55%', '温度25°C,湿度40%']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}]}}\nA hypothetical reasoning question is as follows:\nIn the laboratory, assuming there is an experiment that requires calculating the average value of pressure data collected by a device under extreme environmental conditions. Please calculate the average value of the pressure data collected by the device under the conditions where the ambient temperature is 1000°C and the humidity is 100%.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT AVG(measurementValue) AS average_pressure FROM ExperimentData WHERE environmentalConditions LIKE '%temperature=1000°C%' AND environmentalConditions LIKE '%humidity=100%' AND unit = 'Pa';",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 324,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laboratory technicians', 'experiments', 'Volts (V)', 'January 1, 2022'], 'relations': ['researcher_to_experiment_via_researcherId', 'experiment_to_measurement_unit_via_ExperimentData', 'experiment_to_start_date_condition'], 'intent': 'query_names_of_technicians_and_experiments', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'measurement_unit': 'Volts (V)', 'date_format': 'YYYY-MM-DD'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}, {'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}, {'pk_table': 'Experiments', 'pk_column': 'experimentId'}, {'pk_table': 'Researchers', 'pk_column': 'researcherId'}], 'tableinfo': {'PhysicsLabDB.Researchers': [{'column': 'researcherName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['张三', '李四', '王五', '赵六', '王研究员']}, {'column': 'role', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['实验员', '数据分析师']}, {'column': 'researcherId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '5']}], 'PhysicsLabDB.Experiments': [{'column': 'experimentName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['双缝实验', '量子纠缠实验', '电磁感应实验', '热传导实验', '极端条件模拟实验']}, {'column': 'startDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-01 10:00:00']}, {'column': 'experimentId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1005', '1006', '1007', '1015', '1']}, {'column': 'researcherId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4']}], 'PhysicsLabDB.ExperimentData': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}]}}\nA physical knowledge question is as follows:\nQuery the names of all laboratory technicians and the names of the experiments they participated in, where the measurement units of these experiments are 'Volts (V)', and the experiment start dates are after January 1, 2022, sorted in ascending order by the technician's name.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT r.researcherName, e.experimentName FROM Researchers r JOIN Experiments e ON r.researcherId = e.researcherId JOIN ExperimentData ed ON e.experimentId = ed.experimentId WHERE ed.unit = '伏特(V)' AND e.startDate > '2022-01-01' ORDER BY r.researcherName ASC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 325,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Laboratory (Lab)', 'Equipment Count', 'Laboratory Capacity'], 'relations': ['lab_to_equipment_count (Lab → equipmentCount)', 'lab_to_capacity (Lab → capacity)'], 'intent': 'calculate_equipment_to_capacity_ratio_and_rank', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'equipment_count': 'unitless (integer count)', 'capacity': 'unitless (integer value)', 'ratio': 'unitless (equipment_count / capacity)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '101']}, {'column': 'equipmentCount', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['15', '8', '12', '10', '100']}, {'column': 'capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['20', '10', '15', '12', '50']}]}}\nA mathematical logic question is as follows:\nCalculate the ratio of the number of equipment to the laboratory capacity for each lab, sort the results in descending order of the ratio, and take the top 5.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT labId, labName, equipmentCount / capacity AS ratio FROM Labs ORDER BY ratio DESC LIMIT 5;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 326,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['experiments', \"status 'Completed'\", \"hypothesis validation result 'True'\", 'experiment end date before 2021-12-31'], 'relations': [\"Experiments.status → filter_condition ('Completed')\", \"Experiments.hypothesis → Hypotheses.verificationResult ('True')\", 'Experiments.endDate → date_condition (before 2021-12-31)'], 'intent': 'query_experiments_with_filters_and_sorting', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': ['2021-12-31'], 'units': {'date': 'YYYY-MM-DD format', 'sorting': 'experimentName ASC (alphabetical order)'}, 'foreign_keys': [{'fk_table': 'Experiments', 'fk_column': 'researcherId', 'ref_table': 'Researchers', 'ref_column': 'researcherId'}, {'fk_table': 'Experiments', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Hypotheses', 'fk_column': 'hypothesisId', 'ref_table': 'Experiments', 'ref_column': 'hypothesisId'}], 'primary_keys': [{'pk_table': 'Experiments', 'pk_column': 'experimentId'}, {'pk_table': 'Hypotheses', 'pk_column': 'hypothesisId'}], 'tableinfo': {'PhysicsLabDB.Experiments': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1005', '1006', '1007', '1015', '1']}, {'column': 'experimentName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['双缝实验', '量子纠缠实验', '电磁感应实验', '热传导实验', '极端条件模拟实验']}, {'column': 'status', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['已完成', '进行中']}, {'column': 'endDate', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-15 18:00:00']}], 'PhysicsLabDB.Hypotheses': [{'column': 'verificationResult', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['真', '假']}, {'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1005']}]}}\nA common sense reasoning question is as follows:\nQuery all experiments with the status 'Completed,' where the hypothesis validation result is 'True' and the experiment end date is before December 31, 2021, sorted by experiment name in ascending order.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT e.experimentId, e.experimentName, e.startDate, e.endDate, e.status, h.verificationResult FROM Experiments e JOIN Hypotheses h ON e.experimentId = h.experimentId WHERE e.status = '已完成' AND h.verificationResult = '真' AND e.endDate <= '2021-12-31' ORDER BY e.experimentName ASC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 327,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Laboratory', 'Equipment Quantity', 'Capacity'], 'relations': ['lab_to_equipment_count', 'lab_to_capacity', 'capacity_to_equipment_ratio'], 'intent': 'calculate_equipment_to_capacity_ratio_and_rank', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10], 'units': {'equipment_quantity': 'unitless', 'capacity': 'unitless', 'ratio': 'dimensionless (equipment/capacity)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '101']}, {'column': 'equipmentCount', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['15', '8', '12', '10', '100']}, {'column': 'capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['20', '10', '15', '12', '50']}, {'column': 'labName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光学实验室', '量子物理实验室', '电磁学实验室', '热力学实验室', '高级物理实验室']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the laboratory's capacity can be expanded infinitely, query the ratio of equipment quantity to capacity for all laboratories, sort in descending order by the ratio, and take the top 10.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT labId, labName, equipmentCount / capacity AS ratio FROM Labs ORDER BY ratio DESC LIMIT 10;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 328,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laboratory', 'equipment count'], 'relations': ['lab_to_equipment_count (labId → equipmentCount)', 'sort_by_equipment_count (DESC)'], 'intent': 'retrieve_lab_with_highest_equipment_count', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'equipment_count': 'unitless (count of devices)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光学实验室', '量子物理实验室', '电磁学实验室', '热力学实验室', '高级物理实验室']}, {'column': 'equipmentCount', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['15', '8', '12', '10', '100']}]}}\nA physical knowledge question is as follows:\nQuery the name of the laboratory with the most equipment in the lab and its equipment count, sorted in descending order by equipment count.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT labName, equipmentCount FROM Labs ORDER BY equipmentCount DESC LIMIT 1;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 329,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Laboratory', 'Devices'], 'relations': ['lab_to_devices (labId → deviceId)'], 'intent': 'calculate_and_compare_laboratory_device_averages', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'device_count': 'unitless (count of devices)', 'average': 'unitless (arithmetic mean)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2', '3', '4', '101']}, {'column': 'labName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光学实验室', '量子物理实验室', '电磁学实验室', '热力学实验室', '高级物理实验室']}], 'PhysicsLabDB.Devices': [{'column': 'labId'}, {'column': 'deviceId'}]}}\nA mathematical logic question is as follows:\nCalculate the average number of devices in each laboratory, and find the names of the laboratories and their average number of devices where the average number of devices is higher than the average number of devices across all laboratories.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT labName, AVG(equipmentCount) AS avgEquipmentCount FROM Labs GROUP BY labName HAVING AVG(equipmentCount) > (SELECT AVG(equipmentCount) FROM Labs);",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 330,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['open labs'], 'relations': [\"lab_status_filter (status = 'open')\", 'lab_capacity_ordering (ascending)'], 'intent': 'retrieve_and_sort_lab_capacity', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'capacity': 'unitless (numerical value representing capacity)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光学实验室', '量子物理实验室', '电磁学实验室', '热力学实验室', '高级物理实验室']}, {'column': 'capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['20', '10', '15', '12', '50']}, {'column': 'status', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['开放', '关闭']}]}}\nA common sense reasoning question is as follows:\nRetrieve the names and capacities of currently open labs, sorted by capacity in ascending order.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT labName, capacity FROM Labs WHERE status = '开放' ORDER BY capacity ASC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 331,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laboratory capacity', '1,000 people threshold'], 'relations': ['capacity_exceeds_threshold (capacity > 1000)', 'sort_by_capacity_descending'], 'intent': 'retrieve_and_sort_laboratory_capacities', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [1000], 'units': {'capacity': 'people (unit of count)', 'threshold': '1000 people (explicit numerical constraint)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光学实验室', '量子物理实验室', '电磁学实验室', '热力学实验室', '高级物理实验室']}, {'column': 'capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['20', '10', '15', '12', '50']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the laboratory capacity can be expanded infinitely, query the names and capacities of laboratories with a capacity exceeding 1,000 people, and sort them in descending order by capacity.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT labName, capacity FROM Labs WHERE capacity > 1000 ORDER BY capacity DESC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 332,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['equipment', 'calibration date', 'equipment type'], 'relations': ['equipment_to_type (deviceId → deviceType)', 'calibration_date_by_type (deviceType → MIN(calibrationDate))'], 'intent': 'retrieve_equipment_with_earliest_calibration_date_grouped_by_type', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'calibration_date': 'DATE (implicit from column data type)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'deviceName'}, {'column': 'calibrationDate'}, {'column': 'deviceType'}]}}\nA physical knowledge question is as follows:\nRetrieve the name and calibration date of the equipment with the earliest calibration date among all devices, grouped by equipment type.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT deviceType, deviceName, MIN(calibrationDate) AS earliestCalibrationDate FROM Devices GROUP BY deviceType;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 333,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n```json\n{\n  \"entities\": [\"Labs\", \"Devices\"],\n  \"relations\": [\"device_to_lab (Devices.labId → Labs.labId)\"],\n  \"intent\": \"calculate_average_devices_per_lab_and_identify_higher_than_average\",\n  \"reasoning_type\": \"mathematical logic reasoning\",\n  \"numerical_values\": [],\n  \"units\": {\n    \"device_count\": \"unitless count\"\n  },\n  \"required_tables\": [\"Labs\", \"Devices\"],\n  \"required_fields\": [\n    \"Labs.labId\",\n    \"Labs.labName\",\n    \"Devices.labId\",\n    \"COUNT(Devices.deviceId) AS deviceCount\"\n  ]\n}\n```\nA mathematical logic question is as follows:\nCalculate the average number of devices in each lab, and find the names of labs with a higher-than-average number of devices along with their respective device counts.\nyour response just have a SQL without anything.\n",
        "solution": "WITH LabEquipmentAvg AS (SELECT AVG(equipmentCount) AS avgEquipmentCount FROM Labs) SELECT labName, equipmentCount FROM Labs, LabEquipmentAvg WHERE equipmentCount > avgEquipmentCount;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 334,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{\n  \"entities\": [\"equipment\", \"normal status\", \"equipment type\"],\n  \"relations\": [\"equipment_to_status (Devices.status=normal)\", \"equipment_to_type (grouping by Devices.deviceType)\"],\n  \"intent\": \"group_equipment_by_type_and_count\",\n  \"reasoning_type\":\nA common sense reasoning question is as follows:\nQuery all equipment with a status of normal, group them by equipment type, and count the number of each type of equipment.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT deviceType, deviceName, MIN(calibrationDate) AS earliestCalibrationDate FROM Devices GROUP BY deviceType, deviceName;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 335,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laboratory', 'equipment count'], 'relations': ['lab_to_equipment_count (labId → equipmentCount)', 'filter_condition (equipmentCount > 1000)'], 'intent': 'query_labs_with_equipment_threshold', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [1000], 'units': {'equipment_count': 'count (unitless)', 'threshold': '1000 (comparative value)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光学实验室', '量子物理实验室', '电磁学实验室', '热力学实验室', '高级物理实验室']}, {'column': 'equipmentCount', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['15', '8', '12', '10', '100']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the laboratory's capacity can be expanded indefinitely, query the names of all laboratories with more than 1,000 pieces of equipment and their respective equipment counts, then sort them in descending order by equipment quantity.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT labName, equipmentCount FROM Labs WHERE equipmentCount > 1000 ORDER BY equipmentCount DESC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 336,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['ExperimentData', 'measurementValue', 'dataQuality', 'unit'], 'relations': ['measurementValue > 1000', \"dataQuality = 'high'\"], 'intent': 'query_and_filter_records', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [1000, 10], 'units': {'threshold': 'units (default unit from ExperimentData.unit)', 'record_limit': '10 records'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'dataId', 'type': 'INTEGER', 'primary_key': True, 'comment': '', 'examples': ['1', '2002', '2', '3', '4']}, {'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}, {'column': 'deviceId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '100']}, {'column': 'timestamp', 'type': 'DATETIME', 'primary_key': False, 'comment': '', 'examples': ['2023-03-02 10:30:00']}, {'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}, {'column': 'dataQuality', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['高', '中', '低']}, {'column': 'environmentalConditions', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['温度: 25°C, 湿度: 50%', '温度: 22°C, 湿度: 45%', '温度: 20°C, 湿度: 40%', '温度: 23°C, 湿度: 55%', '温度25°C,湿度40%']}]}}\nA physical knowledge question is as follows:\nQuery in the experimental data table for records where the measured values exceed 1000 units and the data quality is high, sorted in ascending order by measured value, and return the top 10 records.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM ExperimentData WHERE measurementValue > 1000 AND dataQuality = '高' ORDER BY measurementValue ASC LIMIT 10;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 337,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['ExperimentData', 'measurementValue', 'experimentId', 'average_value'], 'relations': ['experimentId_to_measurements (experimentId → measurementValue)', 'group_by_experiment (experimentId → average_value)'], 'intent': 'calculate_average_measurements_filter_and_sort', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [500], 'units': {'measurement': 'unit (from ExperimentData.unit column)', 'threshold': '500 (dimensionless, as per user input)'}, 'foreign_keys': [{'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'experimentId', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['1', '2', '3', '4', '1002']}, {'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}]}}\nA mathematical logic question is as follows:\nCalculate the average of the measurements for each experiment, and return the experiment IDs with an average value greater than 500 along with their average values, sorted in descending order by the average.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT experimentId, AVG(measurementValue) AS averageValue FROM ExperimentData GROUP BY experimentId HAVING AVG(measurementValue) > 500 ORDER BY averageValue DESC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 338,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laboratory', 'capacity', 'equipment count'], 'relations': ['capacity > 50', 'equipment_count > 100', 'lab_to_location'], 'intent': 'query_laboratories_with_conditions', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50, 100], 'units': {'capacity': 'people', 'equipment_count': 'unitless (count)', 'sorting': 'ascending order by capacity'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光学实验室', '量子物理实验室', '电磁学实验室', '热力学实验室', '高级物理实验室']}, {'column': 'location', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['物理楼101', '物理楼202', '物理楼303', '物理楼404', '科学楼5层']}, {'column': 'capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['20', '10', '15', '12', '50']}, {'column': 'equipmentCount', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['15', '8', '12', '10', '100']}]}}\nA common sense reasoning question is as follows:\nQuery the names and locations of laboratories with a capacity of more than 50 people and equipment count exceeding 100, sorted in ascending order by laboratory capacity.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT labName, location FROM Labs WHERE capacity > 50 AND equipmentCount > 100 ORDER BY capacity ASC;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 339,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Labs', 'capacity', 'labName', 'location'], 'relations': ['Labs.capacity > 1000000', 'Labs.capacity_sorted_desc', 'top_5_records'], 'intent': 'query_labs_with_high_capacity', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [1000000, 5], 'units': {'capacity': 'people (unit for capacity field in Labs table)', 'sorting': 'descending order (by capacity)', 'limit': 'top 5 records'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'Labs', 'pk_column': 'labId'}], 'tableinfo': {'PhysicsLabDB.Labs': [{'column': 'labName', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['光学实验室', '量子物理实验室', '电磁学实验室', '热力学实验室', '高级物理实验室']}, {'column': 'location', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '', 'examples': ['物理楼101', '物理楼202', '物理楼303', '物理楼404', '科学楼5层']}, {'column': 'capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '', 'examples': ['20', '10', '15', '12', '50']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the lab's capacity can be expanded indefinitely, query the names and locations of labs with a capacity exceeding 1,000,000 people, sorted in descending order by capacity, and return the top 5 records.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT labName, location FROM Labs WHERE capacity > 1000000 ORDER BY capacity DESC LIMIT 5;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 340,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['spectrometer', 'wavelength measurement 500nm', 'light wave frequency'], 'relations': ['spectrometer_to_measurement (spectrometer → ExperimentData.measurementValue)', 'wavelength_to_frequency (λ=500nm → f=c/λ)'], 'intent': 'calculate_light_wave_frequency', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [500], 'units': {'wavelength': 'nm (nanometers)', 'frequency': 'Hz (Hertz)', 'conversion': '500nm = 5.0×10⁻⁷ meters (wavelength conversion)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}, {'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}, {'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}], 'PhysicsLabDB.Devices': [{'column': 'deviceType'}]}}\nA physical knowledge question is as follows:\nIn the laboratory, using a spectrometer to measure the wavelength of light, assuming the measured value is 500nm, please calculate the frequency of this light wave.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (3.00 * POWER(10, 8)) / (500 * POWER(10, -9)) AS frequency FROM Experiments e JOIN Devices d ON e.labId = d.labId WHERE d.deviceType = '光谱仪' AND e.status = '进行中';",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 341,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['measured value 5V', 'resistance 10 ohms', 'current'], 'relations': ['voltage_resistance_to_current (V=IR → I=V/R)'], 'intent': 'calculate_current_through_resistor', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [5, 10], 'units': {'voltage': 'V (volts)', 'resistance': 'Ω (ohms)', 'current': 'A (amperes)'}, 'foreign_keys': [{'fk_table': 'Calculations', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'ExperimentData', 'fk_column': 'deviceId', 'ref_table': 'Devices', 'ref_column': 'deviceId'}], 'primary_keys': [{'pk_table': 'Calculations', 'pk_column': 'calculationId'}, {'pk_table': 'ExperimentData', 'pk_column': 'dataId'}], 'tableinfo': {'PhysicsLabDB.ExperimentData': [{'column': 'measurementValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.34', '56.78', '0.45', '98.76', '1.75']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'nm', 'T', '°C', 'mV']}], 'PhysicsLabDB.Calculations': [{'column': 'formula', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['V = IR', 'E = hν', 'F = qvB', 'Q = mcΔT', '并联电阻公式: 1/Req = Σ(1/Ri)']}, {'column': 'inputData', 'type': 'TEXT', 'primary_key': False, 'comment': '', 'examples': ['I=2A, R=6Ω', 'h=6.626e-34, ν=1e14', 'q=1.6e-19, v=1e6, B=0.5', 'm=1kg, c=4200, ΔT=10', 'R1=10.00Ω, R2=20.00Ω, R3=30.00Ω, R4=40.00Ω, R5=50.00Ω']}, {'column': 'result', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['12.0', '0.0', '42000.0', '4.38', '49.05']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['V', 'J', 'N', 'Ω', 'W']}]}}\nA mathematical logic question is as follows:\nIn the experimental data table, the unit of the measured values is volts (V). Assuming the measured value is 5V and the resistance is 10 ohms (Ω), please calculate the current passing through the resistor.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT measurementValue / 10 AS current FROM ExperimentData WHERE unit = 'V' AND measurementValue = 5;",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 342,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['device calibrated on 2020-01-01', 'current date 2023-01-01'], 'relations': ['time_difference (3 years elapsed)', 'device_calibration_policy (assumed standard)'], 'intent': 'determine_rec_calibration_requirement', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [2020, 2023], 'units': {'time_interval': 'years (implied by date difference)'}, 'foreign_keys': [{'fk_table': 'Devices', 'fk_column': 'labId', 'ref_table': 'Labs', 'ref_column': 'labId'}, {'fk_table': 'Devices', 'fk_column': 'supplierId', 'ref_table': 'Suppliers', 'ref_column': 'supplierId'}, {'fk_table': 'Devices', 'fk_column': 'placeId', 'ref_table': 'Places', 'ref_column': 'placeId'}], 'primary_keys': [{'pk_table': 'Devices', 'pk_column': 'deviceId'}], 'tableinfo': {'PhysicsLabDB.Devices': [{'column': 'calibrationDate'}]}}\nA common sense reasoning question is as follows:\nIn the laboratory, the calibration date of equipment is a critical factor in ensuring measurement accuracy. Assuming the device was calibrated on January 1, 2020, and the current date is January 1, 2023, determine whether the device requires recalibration.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT deviceId, deviceName, calibrationDate, CASE WHEN DATE_ADD(calibrationDate, INTERVAL 1 YEAR) < '2023-01-01' THEN '需要重新校准' ELSE '不需要重新校准' END AS calibrationStatus FROM Devices WHERE calibrationDate = '2020-01-01';",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 343,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['variableId (unknown ID)', 'sensitivity_value 1000', 'impact_level high', 'initial_value 1000', 'maximum_value (100×initial)'], 'relations': ['variable_to_sensitivity (variableId → SensitivityAnalysis)', 'initial_to_max_value (1000 → 100000)'], 'intent': 'calculate_extreme_condition_max_value', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000, 100], 'units': {'initial_value': 'meters (m)', 'maximum_value': 'meters (m)', 'multiplier': 'dimensionless factor (100×)'}, 'foreign_keys': [{'fk_table': 'SensitivityAnalysis', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}, {'fk_table': 'SensitivityAnalysis', 'fk_column': 'variableId', 'ref_table': 'Variables', 'ref_column': 'variableId'}, {'fk_table': 'Variables', 'fk_column': 'experimentId', 'ref_table': 'Experiments', 'ref_column': 'experimentId'}], 'primary_keys': [{'pk_table': 'SensitivityAnalysis', 'pk_column': 'analysisId'}, {'pk_table': 'Variables', 'pk_column': 'variableId'}], 'tableinfo': {'PhysicsLabDB.SensitivityAnalysis': [{'column': 'sensitivityValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['0.75', '0.25', '0.6', '0.4', '1000.0']}, {'column': 'impact', 'type': 'ENUM', 'primary_key': False, 'comment': '', 'examples': ['高', '中']}], 'PhysicsLabDB.Variables': [{'column': 'initialValue', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '', 'examples': ['100.0', '0.5', '10.0', '20.0', '28750.0']}, {'column': 'unit', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '', 'examples': ['lux', 'probability', 'T', '°C', '无量纲']}]}}\nA hypothetical reasoning question is as follows:\nIn the sensitivity analysis table, assume that the sensitivity value of a certain variable is 1000, its impact level is high, and its initial value is 1000, with the unit being meters (m). Calculate the maximum value of this variable under extreme conditions, assuming its maximum value is 100 times the initial value.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT variableId, variableName, initialValue * 100 AS maximumValue, unit FROM Variables WHERE variableId IN (SELECT variableId FROM SensitivityAnalysis WHERE sensitivityValue = 1000 AND impact = '高') AND initialValue = 1000 AND unit = '米(m)';",
        "db_id": "PhysicsLabDB"
    },
    {
        "id": 344,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laser printer', '500 watts', '30 pages per minute', '150 pages', 'monochrome printing task'], 'relations': ['printer_to_power_consumption (laser printer → 500 watts)', 'printer_to_print_speed (laser printer → 30 pages per minute)', 'task_to_page_count (monochrome printing task → 150 pages)'], 'intent': 'calculate_total_electrical_energy_consumed', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [500, 30, 150], 'units': {'power': 'watts (W)', 'speed': 'pages per minute (ppm)', 'time': 'converted from minutes to hours', 'energy': 'watt-hours (Wh) = watts × hours'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}, {'column': 'Print_Speed', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '打印速度（如 30 ppm）', 'examples': ['30 ppm', '28 ppm', '25 ppm', '33 ppm', '35 ppm']}], 'printer.print_jobs': [{'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}]}}\nA physical knowledge question is as follows:\nAssume a laser printer has a power consumption of 500 watts and a printing speed of 30 pages per minute. If a user performs a monochrome printing task of 150 pages that must be completed continuously, calculate the total electrical energy consumed by the task (in watt-hours).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (p.Power_Consumption * (j.Page_Count / p.Print_Speed) / 60) AS Total_Energy_Wh FROM printers p JOIN print_jobs j ON p.Printer_ID = j.Printer_ID WHERE j.Color_Usage = 'Monochrome' AND j.Page_Count = 150 AND p.Power_Consumption = 500 AND p.Print_Speed = 30;",
        "db_id": "printer"
    },
    {
        "id": 345,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturer', 'annual revenue $5 billion', 'profit margin 15%', 'R&D expenses 8% of revenue', 'difference between net profit and R&D expenses'], 'relations': ['manufacturer_to_revenue (Revenue = $5B)', 'manufacturer_to_profit_margin (Profit_Margin = 15%)', 'manufacturer_to_R&D_expense (R&D = 8% of Revenue)', 'difference_between_net_profit_and_R&D'], 'intent': 'calculate_difference_between_net_profit_and_R&D_expenses', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5, 15, 8], 'units': {'revenue': 'billion dollars', 'profit_margin': '% (percentage)', 'R&D_expense_ratio': '% (percentage)', 'difference': 'dollars (calculated result)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}], 'tableinfo': {'printer.manufacturers': [{'column': 'Revenue'}, {'column': 'Profit_Margin'}]}}\nA mathematical logic question is as follows:\nA manufacturer has an annual revenue of $5 billion, with a profit margin of 15%, and R&D expenses accounting for 8% of the revenue. Calculate the difference between the manufacturer's annual net profit and R&D expenses (in dollars).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (Revenue * Profit_Margin / 100) - (Revenue * R&D_Spending / 100) AS Net_Profit_RD_Difference FROM manufacturers WHERE Revenue = 5000000000 AND Profit_Margin = 15 AND R&D_Spending = 8;",
        "db_id": "printer"
    },
    {
        "id": 346,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['current toner level 5%', 'labeled capacity 5000 pages', 'urgent print job 800 pages'], 'relations': ['toner_level_to_capacity (5% of 5000 → 250 pages remaining)', 'required_pages_vs_remaining (250 < 800)'], 'intent': 'determine_necessity_of_immediate_consumables_replacement', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5, 5000, 800], 'units': {'toner_level': '% (percentage)', 'capacity': 'pages', 'print_job': 'pages', 'calculation': 'Remaining pages = 5% × 5000 = 250 pages'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}, {'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}]}}\nA common sense reasoning question is as follows:\nCurrent toner remaining is 5%, with a labeled capacity of 5,000 pages. There is an urgent printing task of 800 pages today. Is it necessary to replace the consumables immediately?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CASE WHEN (Capacity * (Current_Level / 100)) >= 800 THEN 'No' ELSE 'Yes' END AS Need_Replacement FROM consumables WHERE Type = 'Toner' AND Capacity = 5000 AND Current_Level = 5;",
        "db_id": "printer"
    },
    {
        "id": 347,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['3D printer consumable capacity 1kg/1000 pages', 'current remaining amount 999.99%', 'printing task 2000kg'], 'relations': ['capacity_to_pages (1kg ↔ 1000 pages)', 'current_level_to_capacity_ratio (999.99% of capacity)', 'material_required_vs_available (2000kg needed vs available 9.9999kg)'], 'intent': 'calculate_consumable_replacement_cycles', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1, 1000, 999.99, 2000], 'units': {'capacity': 'kg per 1000 pages', 'current_level': '% of nominal capacity (1kg)', 'replacement_quantity': 'kg (per replacement cycle)', 'conversion': '1kg = 100% → 999.99% = 9.9999kg available'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}], 'printer.print_jobs': [{'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}]}}\nA hypothetical reasoning question is as follows:\nIf a 3D printer's consumable material capacity is 1kg per 1000 pages, and the current remaining amount is 999.99%, the user submits a printing task requiring 2000kg of material. In theory, how many times does the consumable need to be replaced? (Note: The normal value range is 0-100%)\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (Revenue * Profit_Margin / 100) - (Revenue * `R&D_Spending` / 100) AS Net_Profit_RD_Difference FROM manufacturers WHERE Revenue = 5000000000 AND Profit_Margin = 15 AND `R&D_Spending` = 8;",
        "db_id": "printer"
    },
    {
        "id": 348,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Paper consumables', 'remaining quantity 30%', 'A4 sheet weight 5 grams'], 'relations': ['consumable_type_filter (Paper)', 'weight_calculation_per_consumable (30% of capacity × 5g)'], 'intent': 'calculate_remaining_paper_weight', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [30, 5, 1000], 'units': {'quantity_percentage': '%', 'weight_per_sheet': 'grams', 'total_weight': 'kilograms', 'conversion': '5 grams per sheet, 1000 grams in a kilogram'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Type', 'type': 'ENUM', 'primary_key': False, 'comment': '耗材类型', 'examples': ['Toner', 'Ink', 'Paper', 'Drum', 'Fuser']}, {'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}]}}\nA physical knowledge question is as follows:\nAssuming that the current remaining quantity of all consumables of type Paper is 30%, and the weight of a single A4 sheet is 5 grams, calculate the total remaining paper weight (in kilograms) for each consumable, and list the top 5 in descending order by total weight.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Consumable_ID, (Capacity * 0.3 * 5) / 1000 AS Total_Weight_KG FROM consumables WHERE Type = 'Paper' ORDER BY Total_Weight_KG DESC LIMIT 5;",
        "db_id": "printer"
    },
    {
        "id": 349,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['toner', 'ink', 'drum unit', 'fuser', 'printable pages', 'supported pages', 'printer supplies'], 'relations': ['consumable_type_to_usage (toner/ink → printable_pages)', 'component_to_capacity (drum/fuser → supported_pages)', 'printer_to_supplies (Printer_ID → consumables)', 'aggregation_rule (printable_pages ∩ supported_pages = usable_pages)'], 'intent': 'calculate_remaining_usable_pages_and_rank_printers', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'capacity': 'pages (implied by context)', 'current_level': 'pages (implied by context)', 'calculation': 'usable_pages = MIN(SUM(toner/ink_current_level), SUM(drum/fuser_current_level))'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Type', 'type': 'ENUM', 'primary_key': False, 'comment': '耗材类型', 'examples': ['Toner', 'Ink', 'Paper', 'Drum', 'Fuser']}, {'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}], 'printer.printers': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}]}}\nA mathematical logic question is as follows:\nIf the capacity of toner and ink represents the printable pages, and the capacity of the drum unit and fuser represents the total supported pages. Please calculate the total remaining usable pages for all supplies and list the top 3 printer IDs in descending order by the total sum.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Printer_ID, SUM(CASE WHEN Type IN ('Toner', 'Ink') THEN Capacity * (Current_Level / 100) ELSE Capacity - (Capacity * (Current_Level / 100)) END) AS Total_Remaining_Pages FROM consumables GROUP BY Printer_ID ORDER BY Total_Remaining_Pages DESC LIMIT 3;",
        "db_id": "printer"
    },
    {
        "id": 350,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['consumables', 'Capacity', 'Current_Level', 'Last_Replacement_Date', 'Next_Replacement_Date'], 'relations': ['average_daily_usage = (Capacity - Current_Level) / (CURRENT_DATE - Last_Replacement_Date)', 'threshold = 0.01 * Capacity', 'filter_condition (average_daily_usage > threshold)'], 'intent': 'identify_high_usage_consumables', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1], 'units': {'threshold': '% (percentage of capacity)', 'time_period': 'days (calculated from Last_Replacement_Date to current date)', 'consumption_rate': 'units/day (Capacity-based)'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Consumable_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '耗材唯一标识', 'examples': ['1', '90', '100', '101', '110']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}, {'column': 'Last_Replacement_Date', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '上次更换日期', 'examples': ['2023-01-15', '2023-02-20', '2023-03-10', '2023-04-05', '2023-05-12']}, {'column': 'Next_Replacement_Date', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '预计更换日期', 'examples': ['2023-07-15', '2023-08-20', '2023-09-10', '2023-10-05', '2023-11-12']}]}}\nA common sense reasoning question is as follows:\nBased on the expected replacement date (Next_Replacement_Date) of the consumables and the current remaining quantity, identify which consumables have an average daily usage exceeding 1% of their capacity, and list the top 10 in ascending order of usage.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Consumable_ID, (100 - Current_Level) / DATEDIFF(Next_Replacement_Date, CURDATE()) AS Daily_Usage_Percent FROM consumables WHERE DATEDIFF(Next_Replacement_Date, CURDATE()) > 0 HAVING Daily_Usage_Percent > 1 ORDER BY Daily_Usage_Percent ASC LIMIT 10;",
        "db_id": "printer"
    },
    {
        "id": 351,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['printer consumable', 'Current_Level 10,000%', 'Capacity 100 million pages'], 'relations': ['consumable_to_capacity (Capacity = 100,000,000 pages)', 'current_level_to_remaining_pages (Remaining_Pages = (Current_Level/100) * Capacity)'], 'intent': 'calculate_theoretical_remaining_pages_and_list_abnormal_consumables', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10000, 100000000], 'units': {'current_level': '% (percentage)', 'capacity': 'pages (absolute count)', 'remaining_pages': 'pages (absolute count)'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Consumable_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '耗材唯一标识', 'examples': ['1', '90', '100', '101', '110']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}, {'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}, {'column': 'Model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '耗材型号', 'examples': ['HP 414A', 'Canon 057H', 'Epson 212', 'Brother TN-760', 'Xerox 106R01359']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the Current_Level of a certain printer consumable has been incorrectly set to 10,000%, and its Capacity is 100 million pages. Calculate its theoretical remaining page count and list all abnormal consumables in descending order of page count.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Consumable_ID, Capacity * (Current_Level / 100) AS Theoretical_Pages FROM consumables WHERE Current_Level > 100 ORDER BY Theoretical_Pages DESC;",
        "db_id": "printer"
    },
    {
        "id": 352,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['toner capacity 5,000 pages', 'remaining level 30%', 'printing speed 30 ppm', 'consumable type'], 'relations': ['consumable_capacity (Capacity = 5,000 pages)', 'current_level_percentage (30% remaining)', 'print_speed_to_depletion_time (30 ppm → time calculation)', 'grouping_by_consumable_type'], 'intent': 'calculate_consumable_depletion_time_with_energy_consumption', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [5000, 30, 30], 'units': {'capacity': 'pages', 'print_speed': 'ppm (pages per minute)', 'time': 'hours', 'conversion': '1 hour = 60 minutes, 1 ppm = 1 page per minute'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}, {'column': 'Type', 'type': 'ENUM', 'primary_key': False, 'comment': '耗材类型', 'examples': ['Toner', 'Ink', 'Paper', 'Drum', 'Fuser']}], 'printer.printers': [{'column': 'Print_Speed', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '打印速度（如 30 ppm）', 'examples': ['30 ppm', '28 ppm', '25 ppm', '33 ppm', '35 ppm']}, {'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}]}}\nA physical knowledge question is as follows:\nAssuming all printers have a toner capacity of 5,000 pages, with a current remaining level of 30%, and a printing speed of 30 ppm (pages per minute). If all printers continue to operate at maximum speed, how many hours will it take to deplete each consumable type based on physical energy consumption? Group and return the results by consumable type.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT c.Type, (c.Capacity * (c.Current_Level / 100) / (p.Print_Speed * 60)) AS 耗尽时间_小时 FROM consumables c JOIN printers p ON c.Printer_ID = p.Printer_ID WHERE c.Type = 'Toner' GROUP BY c.Type;",
        "db_id": "printer"
    },
    {
        "id": 353,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Printer_ID', 'Ink', 'Drum'], 'relations': ['printer_to_consumables (Printer_ID)', 'type_filter (Type → Ink/Drum)'], 'intent': 'calculate_cost_efficiency', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['sum(Capacity)', 'sum(Cost)'], 'units': {'capacity': 'undefined (column-specific unit)', 'cost': 'currency (column-specific unit)', 'efficiency': 'unitless (capacity/cost ratio)'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Type', 'type': 'ENUM', 'primary_key': False, 'comment': '耗材类型', 'examples': ['Toner', 'Ink', 'Paper', 'Drum', 'Fuser']}, {'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}, {'column': 'Cost', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '耗材成本（美元）', 'examples': ['100.0', '120.0', '80.0', '90.0', '110.0']}]}}\nA mathematical logic question is as follows:\nCalculate the total cost efficiency (total capacity/total cost) for each printer (Printer_ID) and group in descending order by efficiency value. Include data for supplies of type Ink and Drum.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT c.Printer_ID, SUM(c.Capacity) / SUM(c.Cost) AS 总成本效率 FROM consumables c WHERE c.Type IN ('Ink', 'Drum') GROUP BY c.Printer_ID ORDER BY 总成本效率 DESC;",
        "db_id": "printer"
    },
    {
        "id": 354,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['consumable type', 'average remaining level (Current_Level)', '20% threshold'], 'relations': ['consumable_type_to_current_level (Type → Current_Level)', 'threshold_comparison (Current_Level < 20%)'], 'intent': 'identify_consumables_for_priority_replacement', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [20], 'units': {'current_level': '% (percentage)', 'threshold': '20% (implied as percentage)'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Type', 'type': 'ENUM', 'primary_key': False, 'comment': '耗材类型', 'examples': ['Toner', 'Ink', 'Paper', 'Drum', 'Fuser']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}]}}\nA common sense reasoning question is as follows:\nGroup statistics by consumable type to count the number of records with an average remaining level (Current_Level) below 20%. Which types of consumables need to be prioritized for replacement? Explain the reasoning based on common sense.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT c.Type, MAX(c.Capacity * (c.Current_Level / 100) / (p.Print_Speed * 60)) AS 耗尽时间_小时 FROM consumables c JOIN printers p ON c.Printer_ID = p.Printer_ID WHERE c.Type = 'Toner' GROUP BY c.Type;",
        "db_id": "printer"
    },
    {
        "id": 355,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['drum component', 'drum_capacity', 'current_level', 'printer_type', 'tray_capacity'], 'relations': ['drum_capacity_to_current_level (Capacity=1,000,000 pages, Current_Level=0.01%)', 'theoretical_remaining_pages (Capacity * Current_Level / 100 = 100 pages)', 'printer_type_to_tray_capacity (Type → Tray_Capacity)'], 'intent': 'calculate_remaining_pages_vs_tray_capacity', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000000, 0.01], 'units': {'capacity': 'pages', 'current_level': '%', 'tray_capacity': 'pages', 'calculation': 'theoretical_remaining_pages = Capacity * Current_Level% = 1,000,000 * 0.01% = 100 pages'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}], 'printer.printers': [{'column': 'Tray_Capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '纸盘容量（张）', 'examples': ['250', '300', '150', '350', '500']}, {'column': 'Type', 'type': 'ENUM', 'primary_key': False, 'comment': '打印机类型', 'examples': ['Laser', 'Inkjet', '3D']}]}}\nA hypothetical reasoning question is as follows:\nAssuming a drum component (Drum) has its Capacity incorrectly labeled as 1,000,000 pages (normal value ≤50,000 pages), and the Current_Level is 0.01%. Group by printer type (Type) to calculate whether the theoretical remaining pages exceed the physical tray capacity (Tray_Capacity).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.Type, CASE WHEN (1000000 * 0.0001) > p.Tray_Capacity THEN 1 ELSE 0 END AS 矛盾检测 FROM consumables c JOIN printers p ON c.Printer_ID = p.Printer_ID WHERE c.Type = 'Drum' AND c.Capacity = 1000000 AND c.Current_Level = 0.01 GROUP BY p.Type;",
        "db_id": "printer"
    },
    {
        "id": 356,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['toner supplies', 'printers', 'maintenance log', 'power consumption', 'remaining quantity'], 'relations': ['consumables_to_printers (toner supplies → printers via Printer_ID)', 'printers_to_power_consumption (printers → Power_Consumption field)', 'consumables_to_current_level (toner supplies → Current_Level field)', 'printers_to_maintenance_logs (printers → maintenance_logs via Printer_ID)'], 'intent': 'identify_understocked_toner_with_high_power_usage_and_no_scheduled_replacement', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [30, 1000], 'units': {'quantity': '% (percentage of remaining toner)', 'power': 'watts (W) for printer power consumption'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}], 'printer.printers': [{'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}], 'printer.maintenance_logs': [{'column': 'Maintenance_ID'}]}}\nA physical knowledge question is as follows:\nFind all toner supplies with a current remaining quantity below 30% that are associated with printers consuming over 1000 watts (difference condition: not scheduled for replacement in the maintenance log)\nyour response just have a SQL without anything.\n",
        "solution": "SELECT c.* FROM consumables c INNER JOIN printers p ON c.Printer_ID = p.Printer_ID LEFT JOIN maintenance_logs ml ON c.Printer_ID = ml.Printer_ID AND ml.Maintenance_Type = 'Replacement' WHERE c.Type = 'Toner' AND c.Current_Level < 30 AND p.Power_Consumption > 1000 AND ml.Maintenance_ID IS NULL;",
        "db_id": "printer"
    },
    {
        "id": 357,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['drum component', 'average daily wear rate', 'predicted lifespan', 'scheduled replacement', 'maintenance log', '90 days', '7 days'], 'relations': ['consumable_type_filter (drum component → consumables.Type)', 'wear_rate_calculation (Current_Level/Capacity/Last_Replacement_Date → daily usage)', 'lifespan_prediction (Current_Level/wear_rate → days_remaining)', 'replacement_schedule_check (schedule_status → maintenance_log absence)', 'time_bound_filter (past 90 days → wear rate period)'], 'intent': 'calculate_wear_rate_and_identify_at_risk_consumables', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [90, 7], 'units': {'time_period': 'days', 'wear_rate': 'consumable_level_units/day', 'lifespan': 'days'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Consumable_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '耗材唯一标识', 'examples': ['1', '90', '100', '101', '110']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Type', 'type': 'ENUM', 'primary_key': False, 'comment': '耗材类型', 'examples': ['Toner', 'Ink', 'Paper', 'Drum', 'Fuser']}, {'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}, {'column': 'Last_Replacement_Date', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '上次更换日期', 'examples': ['2023-01-15', '2023-02-20', '2023-03-10', '2023-04-05', '2023-05-12']}, {'column': 'Next_Replacement_Date', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '预计更换日期', 'examples': ['2023-07-15', '2023-08-20', '2023-09-10', '2023-10-05', '2023-11-12']}], 'printer.maintenance_logs': [{'column': 'Maintenance_ID'}, {'column': 'Printer_ID'}, {'column': 'Maintenance_Date'}, {'column': 'Maintenance_Type'}]}}\nA mathematical logic question is as follows:\nCalculate the average daily wear rate of each drum component over the past 90 days, and identify consumables with a predicted lifespan of less than 7 days that have no scheduled replacement (difference condition: no corresponding record in the maintenance log).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.Type, CASE WHEN (1000000 * 0.0001) > p.Tray_Capacity THEN 1 ELSE 0 END AS 矛盾检测 FROM consumables c JOIN printers p ON c.Printer_ID = p.Printer_ID WHERE c.Type = 'Drum' AND c.Capacity = 1000000 AND c.Current_Level = 0.01 GROUP BY p.Type, p.Tray_Capacity;",
        "db_id": "printer"
    },
    {
        "id": 358,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['fuser consumables', 'installation duration >3 years', 'remaining level <15%', 'no replacement plan'], 'relations': ['consumable_type_filter (Type=Fuser)', 'installation_duration_check (Last_Replacement_Date < CURRENT_DATE - 3 years)', 'remaining_level_check (Current_Level < 15%)', 'maintenance_log_absence_check (no Maintenance_Type=Replacement_Planned for Printer_ID)'], 'intent': 'identify_noncompliant_consumables', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3, 15], 'units': {'duration': 'years (3)', 'level': 'percentage (15%)'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Type', 'type': 'ENUM', 'primary_key': False, 'comment': '耗材类型', 'examples': ['Toner', 'Ink', 'Paper', 'Drum', 'Fuser']}, {'column': 'Last_Replacement_Date', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '上次更换日期', 'examples': ['2023-01-15', '2023-02-20', '2023-03-10', '2023-04-05', '2023-05-12']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}], 'printer.maintenance_logs': [{'column': 'Maintenance_Type'}, {'column': 'Printer_ID'}]}}\nA common sense reasoning question is as follows:\nIdentify all fuser consumables that have been installed for more than 3 years and currently have a remaining level below 15% (difference condition: no replacement plan recorded in the maintenance log)\nyour response just have a SQL without anything.\n",
        "solution": "SELECT c.* FROM consumables c INNER JOIN printers p ON c.Printer_ID = p.Printer_ID LEFT JOIN maintenance_logs ml ON c.Printer_ID = ml.Printer_ID AND ml.Maintenance_Type = 'Replacement' WHERE c.Type = 'Fuser' AND c.Current_Level < 15 AND p.Installation_Date < NOW() - INTERVAL 3 YEAR AND ml.Maintenance_ID IS NULL;",
        "db_id": "printer"
    },
    {
        "id": 359,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['abnormal consumables', 'capacity exceeding 100 million pages', 'current remaining amount exceeding 200%', 'no historical records in maintenance logs'], 'relations': ['consumable_to_printer (Consumable.Printer_ID → Printer.Printer_ID)', 'printer_to_maintenance_logs (Printer.Printer_ID → Maintenance_Logs.Printer_ID)', 'capacity_condition (Capacity > 100,000,000 pages)', 'remaining_amount_condition (Current_Level > 200%)', 'maintenance_log_absence (no entries in Maintenance_Logs for Printer_ID)'], 'intent': 'retrieve_abnormal_consumables_with_specific_thresholds_and_no_maintenance_history', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [100000000, 200], 'units': {'capacity': 'pages (unit for Capacity)', 'current_level': '% (unit for Current_Level)'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}], 'printer.maintenance_logs': [{'column': 'Maintenance_ID'}]}}\nA hypothetical reasoning question is as follows:\nRetrieve all abnormal consumables with a capacity exceeding 100 million pages or a current remaining amount exceeding 200% (difference condition: no historical records at all in the maintenance logs)\nyour response just have a SQL without anything.\n",
        "solution": "SELECT c.* FROM consumables c LEFT JOIN maintenance_logs ml ON c.Printer_ID = ml.Printer_ID WHERE (c.Capacity > 100000000 OR c.Current_Level > 200) AND ml.Maintenance_ID IS NULL GROUP BY c.Consumable_ID HAVING COUNT(ml.Maintenance_ID) = 0;",
        "db_id": "printer"
    },
    {
        "id": 360,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laser printer', 'rated power consumption 1500 watts', 'effective printing time 8 hours/day', '30 days', '1 kWh = 0.92 kg CO₂'], 'relations': ['power_consumption_to_usage_time (1500W applied over 8h/day * 30 days)', 'energy_to_carbon_conversion (kWh → CO₂)'], 'intent': 'calculate_energy_consumption_and_carbon_emissions', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1500, 8, 30, 0.92], 'units': {'power': 'watts (W)', 'time_per_day': 'hours (h)', 'duration': 'days (d)', 'energy': 'kWh (calculated as watt-hour → kilowatt-hour)', 'carbon_emission': 'kg CO₂ (conversion factor 0.92 kg/kWh)'}, 'foreign_keys': [{'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}], 'printer.maintenance_logs': [{'column': 'Maintenance_Date'}, {'column': 'Next_Maintenance_Date'}]}}\nA physical knowledge question is as follows:\nA certain laser printer has a rated power consumption of 1500 watts. After maintenance, the actual effective printing time was 8 hours per day, and the maintenance log showed that the printer ran continuously for 30 days after maintenance. Calculate its total energy consumption (in kWh) and the equivalent carbon dioxide emissions (given that 1 kWh = 0.92 kg CO₂).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (1500 * 8 * 30) / 1000 AS Total_Energy_kWh, (1500 * 8 * 30) / 1000 * 0.92 AS CO2_Emissions_kg FROM printers WHERE Printer_ID = '特定打印机ID';",
        "db_id": "printer"
    },
    {
        "id": 361,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\nthere is nothing I can give you about this question.\nA mathematical logic question is as follows:\nA department's color printing tasks account for 60% of the total volume. It is known that color cartridges have a capacity of 5,000 pages for $200, while monochrome cartridges have a capacity of 10,000 pages for $150. If this month's maintenance log shows the replacement of 3 color and 2 monochrome cartridges, calculate the difference rate between the actual per-page printing cost and the theoretical cost.\nyour response just have a SQL without anything.\n",
        "solution": "WITH Theoretical AS (SELECT (0.6*200/5000) + (0.4*150/10000) AS TheoreticalCost), Actual AS (SELECT (3*200 + 2*150) / (3*5000 + 2*10000) AS ActualCost) SELECT ((ActualCost - TheoreticalCost) / TheoreticalCost) * 100 AS DifferenceRate FROM Theoretical, Actual;",
        "db_id": "printer"
    },
    {
        "id": 362,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['printer maintenance interval', '50% exceeded threshold', 'three consecutive times', '20 print jobs', '15% failure rate'], 'relations': ['printer_to_maintenance_logs(Printer_ID)', 'maintenance_interval_deviation(1.5× recommended)', 'print_job_failure_rate(Δ=15%)'], 'intent': 'diagnose_printer_faults_based_on_maintenance_and_failure_data', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [50, 3, 20, 15], 'units': {'maintenance_interval': '% deviation from manufacturer recommendation', 'failure_rate': '% (failed_jobs / total_jobs)', 'count': 'print_jobs (unitless)'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}, {'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}], 'printer.maintenance_logs': [{'column': 'Maintenance_Date'}, {'column': 'Next_Maintenance_Date'}], 'printer.print_jobs': [{'column': 'Job_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印任务唯一标识', 'examples': ['1', '20', '30', '31', '100']}, {'column': 'Status', 'type': 'ENUM', 'primary_key': False, 'comment': '任务状态', 'examples': ['Completed', 'Pending']}], 'printer.consumables': [{'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}, {'column': 'Type', 'type': 'ENUM', 'primary_key': False, 'comment': '耗材类型', 'examples': ['Toner', 'Ink', 'Paper', 'Drum', 'Fuser']}]}}\nA common sense reasoning question is as follows:\nMaintenance logs indicate that a certain printer has exceeded the recommended maintenance interval by 50% for three consecutive times, and its recent 20 print jobs have seen a sudden failure rate increase to 15%. Using common sense, infer the possible fault cause and provide maintenance recommendations.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Printer_ID, '故障原因：维护间隔过长导致机械部件磨损' AS RootCause, '建议：立即执行预防性维护，更换磨损部件，恢复推荐维护周期' AS Recommendation FROM (SELECT Printer_ID, AVG(DATEDIFF(Maintenance_Date, LAG(Maintenance_Date) OVER (ORDER BY Maintenance_Date))) AS AvgInterval FROM maintenance_logs GROUP BY Printer_ID HAVING COUNT(*) >= 3) t WHERE AvgInterval > 推荐周期 * 1.5;",
        "db_id": "printer"
    },
    {
        "id": 363,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['maintenance cost $9.9×10¹⁵', 'unit price $2999', \"maintenance type 'replacing the antimatter cooling system'\"], 'relations': ['maintenance_cost / unit_price = quantity', 'maintenance_type_to_printer_model'], 'intent': 'calculate_number_of_printers_purchasable', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [9900000000000000.0, 2999], 'units': {'cost': '$ (USD)'}, 'foreign_keys': [{'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.maintenance_logs': [{'column': 'Cost'}, {'column': 'Maintenance_Type'}], 'printer.printers': [{'column': 'Model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '型号', 'examples': ['HP LaserJet Pro MFP M428fdw', 'Canon imageCLASS MF644Cdw', 'Epson WorkForce Pro WF-4740', 'Brother HL-L8360CDW', 'Xerox VersaLink C405']}]}}\nA hypothetical reasoning question is as follows:\nAssuming the one-time maintenance cost of a certain 3D printer suddenly reaches $9.9×10¹⁵, which is 10,000 times the manufacturer's market value, and the maintenance type is labeled as 'replacing the antimatter cooling system,' calculate how many units of the same model printer can be purchased with this maintenance cost (given that the unit price of this model is $2999).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 9.9E15 / 2999 AS NumberOfPrinters FROM dual;",
        "db_id": "printer"
    },
    {
        "id": 364,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': [\"maintenance type 'Repair'\", 'printers', 'maintenance_logs', 'power consumption', '2 hours'], 'relations': ['maintenance_logs_to_printers (Printer_ID)', 'power_consumption_per_maintenance_session'], 'intent': 'calculate_theoretical_total_power_consumption_for_repair_sessions_and_list_top_5_records', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'power_consumption': 'W (watts)', 'time': 'hours', 'conversion': '1 kWh = 1000 Wh → (Power_Consumption * 2) / 1000'}, 'foreign_keys': [{'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.maintenance_logs': [{'column': 'Maintenance_ID'}, {'column': 'Printer_ID'}, {'column': 'Maintenance_Type'}], 'printer.printers': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}, {'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}]}}\nA physical knowledge question is as follows:\nCalculate the theoretical total power consumption (in kWh) for all maintenance records with the maintenance type 'Repair', assuming the printer operates at maximum power consumption during each maintenance session, which lasts 2 hours. List the top 5 records in descending order of total power consumption.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Printer_ID, '故障原因：维护间隔过长导致机械部件磨损' AS RootCause, '建议：立即执行预防性维护，更换磨损部件，恢复推荐维护周期' AS Recommendation FROM (SELECT Printer_ID, AVG(DATEDIFF(Maintenance_Date, Prev_Maintenance_Date)) AS AvgInterval FROM (SELECT Printer_ID, Maintenance_Date, LAG(Maintenance_Date) OVER (PARTITION BY Printer_ID ORDER BY Maintenance_Date) AS Prev_Maintenance_Date FROM maintenance_logs) t1 GROUP BY Printer_ID HAVING COUNT(*) >= 3 ) t2;",
        "db_id": "printer"
    },
    {
        "id": 365,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['maintenance_costs', 'month-over-month_growth_rate', '2023_months'], 'relations': ['group_maintenance_logs_by_month', 'calculate_percentage_change_between_consecutive_months', 'default_growth_rate_for_months_with_no_records'], 'intent': 'calculate_month_over_month_percentage_growth_rate_of_maintenance_costs', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0], 'units': {'maintenance_cost': 'currency (assumed to be USD, derived from maintenance_logs.Cost column)', 'growth_rate': 'percentage (%)', 'default_growth_rate': '0% (for months with no maintenance records)'}, 'foreign_keys': [{'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}], 'primary_keys': [{'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}], 'tableinfo': {'printer.maintenance_logs': [{'column': 'Maintenance_Date'}, {'column': 'Cost'}]}}\nA mathematical logic question is as follows:\nStatistical analysis of the month-over-month growth rate (in percentage) of maintenance costs for each month in 2023. If there is no maintenance record for a particular month, the growth rate is considered 0. List all months in ascending order of growth rate.\nyour response just have a SQL without anything.\n",
        "solution": "WITH months AS ( SELECT generate_series(1,12) AS month ), monthly_cost AS ( SELECT months.month, COALESCE(SUM(ml.Cost),0) AS total_cost FROM months LEFT JOIN maintenance_logs ml ON EXTRACT(YEAR FROM ml.Maintenance_Date) = 2023 AND EXTRACT(MONTH FROM ml.Maintenance_Date) = months.month GROUP BY months.month ) SELECT current_month, CASE WHEN previous_month_cost = 0 THEN 0 ELSE ROUND(((current_month_cost - previous_month_cost) / previous_month_cost * 100)::numeric, 2) END AS growth_rate FROM ( SELECT month AS current_month, total_cost AS current_month_cost, LAG(total_cost,1,0) OVER (ORDER BY month) AS previous_month_cost FROM monthly_cost ) t ORDER BY growth_rate ASC;",
        "db_id": "printer"
    },
    {
        "id": 366,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['maintenance_logs', 'average_maintenance_cost', 'printer'], 'relations': ['printer_to_maintenance (printer.Printer_ID → maintenance_logs.Printer_ID)', 'maintenance_cost_comparison (individual cost < average cost)'], 'intent': 'filter_printers_by_maintenance_criteria_and_rank', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [3, 10], 'units': {'maintenance_cost': 'currency (implied by Cost column)', 'maintenance_count': 'dimensionless (count of instances)'}, 'foreign_keys': [{'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}], 'primary_keys': [{'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}], 'tableinfo': {'printer.maintenance_logs': [{'column': 'Printer_ID'}, {'column': 'Cost'}]}}\nA common sense reasoning question is as follows:\nList the printer IDs that have undergone more than 3 maintenance instances but with each maintenance cost below the average maintenance cost, sorted in descending order by the number of maintenance instances, showing the top 10.\nyour response just have a SQL without anything.\n",
        "solution": "WITH global_avg AS ( SELECT AVG(Cost) AS avg_cost FROM maintenance_logs ) SELECT Printer_ID, COUNT(*) AS maintenance_count FROM maintenance_logs WHERE Cost < (SELECT avg_cost FROM global_avg) GROUP BY Printer_ID HAVING COUNT(*) > 3 ORDER BY maintenance_count DESC LIMIT 10;",
        "db_id": "printer"
    },
    {
        "id": 367,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['maintenance cost $100,000', 'total historical maintenance cost', 'normal value <$1,000'], 'relations': ['outlier_cost_to_total_ratio ($100,000 → total_sum)', 'threshold_comparison ($100,000 > $1,000)'], 'intent': 'calculate_proportion_of_outlier_relative_to_total_and_list_top_5_records', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100000, 1000], 'units': {'cost': '$ (USD)', 'proportion': 'dimensionless ratio'}, 'foreign_keys': [{'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}], 'primary_keys': [{'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}], 'tableinfo': {'printer.maintenance_logs': [{'column': 'Cost'}]}}\nA hypothetical reasoning question is as follows:\nAssuming a certain maintenance cost reaches $100,000 (normal value <$1,000), calculate the proportion of this outlier relative to the total historical maintenance cost, and list the top 5 records in descending order of maintenance cost.\nyour response just have a SQL without anything.\n",
        "solution": "WITH months AS (SELECT 1 AS month UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10 UNION SELECT 11 UNION SELECT 12), monthly_cost AS (SELECT months.month, COALESCE(SUM(ml.Cost),0) AS total_cost FROM months LEFT JOIN maintenance_logs ml ON YEAR(ml.Maintenance_Date) = 2023 AND MONTH(ml.Maintenance_Date) = months.month GROUP BY months.month) SELECT current_month, CASE WHEN previous_month_cost = 0 THEN 0 ELSE ROUND(((current_month_cost - previous_month_cost) / previous_month_cost * 100), 2) END AS growth_rate FROM (SELECT month AS current_month, total_cost AS current_month_cost, LAG(total_cost,1,0) OVER (ORDER BY month) AS previous_month_cost FROM monthly_cost) t ORDER BY growth_rate ASC;",
        "db_id": "printer"
    },
    {
        "id": 368,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Printer_ID', 'standby power consumption 20%', 'rated power', 'maintenance intervals'], 'relations': ['Printer_ID_to_power (printer.Power_Consumption)', 'maintenance_interval_duration (Next_Maintenance_Date - Maintenance_Date)'], 'intent': 'calculate_total_energy_consumed_in_standby', 'reasoning_type': 'physical knowledge reasoning & mathematical logic reasoning', 'numerical_values': [0.2], 'units': {'power': 'Watts (from printers.Power_Consumption)', 'energy': 'kWh (kilowatt-hours)', 'time': 'days (maintenance interval duration)', 'conversion': 'kWh = (Watts * 0.2 * hours) / 1000 = (Watts * 0.2 * days * 24) / 1000'}, 'foreign_keys': [{'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}, {'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}], 'printer.maintenance_logs': [{'column': 'Maintenance_Date'}, {'column': 'Next_Maintenance_Date'}, {'column': 'Printer_ID'}]}}\nA physical knowledge question is as follows:\nCalculate the total electrical energy (in kilowatt-hours) consumed by each printer in standby state during the maintenance intervals, grouped by Printer_ID. Assume the standby power consumption is 20% of the rated power.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT m.Printer_ID, SUM(DATEDIFF(m.Next_Maintenance_Date, m.Maintenance_Date) * 24 * (p.Power_Consumption * 0.2) / 1000) AS Total_Standby_Energy_kWh FROM maintenance_logs m JOIN printers p ON m.Printer_ID = p.Printer_ID GROUP BY m.Printer_ID;",
        "db_id": "printer"
    },
    {
        "id": 369,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Maintenance_Type', 'maintenance cost', 'cost standard deviation', 'cost volatility rate'], 'relations': ['maintenance_type_to_cost_data', 'statistical_aggregation'], 'intent': 'calculate_statistical_metrics_for_maintenance_costs', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'cost': 'currency (implied by Cost column)', 'standard_deviation': 'currency (implied by Cost column)', 'volatility_rate': 'percentage (standard deviation/mean ratio)'}, 'foreign_keys': [{'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}], 'primary_keys': [{'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}], 'tableinfo': {'printer.maintenance_logs': [{'column': 'Maintenance_Type'}, {'column': 'Cost'}]}}\nA mathematical logic question is as follows:\nCount the annual average maintenance cost, cost standard deviation, and cost volatility rate for each maintenance type, grouped by Maintenance_Type.\nyour response just have a SQL without anything.\n",
        "solution": "WITH total_cost AS (SELECT SUM(Cost) AS total FROM maintenance_logs) SELECT Maintenance_ID, Cost, ROUND((Cost * 100.0 / (SELECT total FROM total_cost)), 4) AS cost_percentage FROM maintenance_logs WHERE Cost >= 100000 ORDER BY Cost DESC LIMIT 5;",
        "db_id": "printer"
    },
    {
        "id": 370,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['maintenance type', 'preventive maintenance', 'corrective maintenance', 'quarter'], 'relations': ['maintenance_type_distribution_by_quarter', 'preventive_vs_corrective_comparison'], 'intent': 'analyze_maintenance_frequency_by_quarter', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [], 'units': {'frequency': 'count (number of occurrences)', 'time': 'quarter (3-month period)'}, 'foreign_keys': [{'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.maintenance_logs': [{'column': 'Maintenance_Type'}, {'column': 'Maintenance_Date'}, {'column': 'Printer_ID'}], 'printer.printers': [{'column': 'Manufacturer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '制造商ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Type', 'type': 'ENUM', 'primary_key': False, 'comment': '打印机类型', 'examples': ['Laser', 'Inkjet', '3D']}]}}\nA common sense reasoning question is as follows:\nTranslate the frequency of different maintenance types by quarter to analyze whether it follows the industrial principle that \"preventive maintenance frequency is higher than corrective maintenance.\"\nyour response just have a SQL without anything.\n",
        "solution": "SELECT QUARTER(Maintenance_Date) AS Quarter, Maintenance_Type, COUNT(*) AS Frequency, (SUM(CASE WHEN Maintenance_Type = 'Routine' THEN 1 ELSE 0 END)/COUNT(*))*100 AS Preventive_Ratio FROM maintenance_logs WHERE Maintenance_Type IN ('Routine','Repair') GROUP BY Quarter, Maintenance_Type ORDER BY Quarter;",
        "db_id": "printer"
    },
    {
        "id": 371,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['maintenance_logs', 'technicians', 'theoretical maximum single maintenance cost', '95% of total historical budget'], 'relations': ['maintenance_to_technician (maintenance_logs.Technician → technician)', 'cost_percentage_relation (single_maintenance_cost = 95% * total_budget)'], 'intent': 'identify_max_maintenance_cost_by_technician', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [95], 'units': {'cost': 'currency (implied by maintenance_logs.Cost column)'}, 'foreign_keys': [{'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}], 'primary_keys': [{'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}], 'tableinfo': {'printer.maintenance_logs': [{'column': 'Technician'}, {'column': 'Cost'}]}}\nA hypothetical reasoning question is as follows:\nAssuming that a certain maintenance consumed 95% of the company's total historical maintenance budget, calculate the theoretical maximum single maintenance cost by grouping technicians.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Technician, MAX(Cost) AS Actual_Max_Cost, (SELECT SUM(Cost)*0.95 FROM maintenance_logs) AS Theoretical_Max_Cost FROM maintenance_logs GROUP BY Technician;",
        "db_id": "printer"
    },
    {
        "id": 372,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['printer', 'maintenance duration 3 hours', 'printer power consumption 850 watts'], 'relations': ['printer_to_power_consumption (printer → 850 watts)', 'maintenance_to_duration (maintenance period → 3 hours)'], 'intent': 'calculate_energy_consumed_in_joules', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [3, 850], 'units': {'time': 'hours (converted to seconds for calculation)', 'power': 'watts (equivalent to joules per second)', 'energy': 'joules (calculated as watts × seconds)', 'conversion': '3 hours × 3600 seconds/hour = 10800 seconds'}, 'foreign_keys': [{'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}]}}\nA physical knowledge question is as follows:\nCalculate the total energy consumed by the printer in standby mode during a maintenance period (unit: joules), given that the maintenance duration is 3 hours and the printer's power consumption is 850 watts.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT 850 * 3 * 3600 AS Total_Energy_Joules;",
        "db_id": "printer"
    },
    {
        "id": 373,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['maintenance_logs', 'Repair maintenance type', 'average maintenance cost'], 'relations': [\"record_type_filter (Maintenance_Type='Repair')\", 'cost_comparison (Cost > Average_Cost)'], 'intent': 'calculate_proportion_of_high_cost_repairs', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [2], 'units': {'cost': 'currency (assumed from Cost column)', 'proportion': 'percentage (calculated)', 'rounding': 'decimal places=2'}, 'foreign_keys': [{'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}], 'primary_keys': [{'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}], 'tableinfo': {'printer.maintenance_logs': [{'column': 'Maintenance_Type'}, {'column': 'Cost'}]}}\nA mathematical logic question is as follows:\nCount the number of maintenance records where the maintenance cost is higher than the average cost and the maintenance type is 'Repair', expressed as a proportion of all 'Repair' maintenance records (rounded to two decimal places).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ROUND( (COUNT(CASE WHEN Cost > (SELECT AVG(Cost) FROM maintenance_logs WHERE Maintenance_Type = 'Repair') THEN 1 END) * 100.0 / COUNT(*)), 2 ) AS Repair_Proportion FROM maintenance_logs WHERE Maintenance_Type = 'Repair';",
        "db_id": "printer"
    },
    {
        "id": 374,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['maintenance records', 'printer installation date'], 'relations': ['maintenance_log_to_printer (Printer_ID → Printer_ID)', 'date_comparison (Maintenance_Date < Installation_Date)'], 'intent': 'find_unreasonable_maintenance_records', 'reasoning_type': 'common sense understanding reasoning', 'numerical_values': [], 'units': {'dates': 'DATE format (comparative logic)'}, 'foreign_keys': [{'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.maintenance_logs': [{'column': 'Maintenance_ID'}, {'column': 'Printer_ID'}, {'column': 'Maintenance_Date'}], 'printer.printers': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}, {'column': 'Installation_Date', 'type': 'VARCHAR(255)', 'primary_key': False, 'comment': '安装日期', 'examples': ['2023-01-15', '2023-02-20', '2023-03-10', '2023-04-05', '2023-05-12']}]}}\nA common sense reasoning question is as follows:\nFind all unreasonable maintenance records where the maintenance date is earlier than the printer installation date.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ml.* FROM maintenance_logs ml JOIN printers p ON ml.Printer_ID = p.Printer_ID WHERE ml.Maintenance_Date < p.Installation_Date;",
        "db_id": "printer"
    },
    {
        "id": 375,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['maintenance_logs', 'Maintenance Cost', 'Next Maintenance Date'], 'relations': ['maintenance_log_to_cost (Maintenance_ID → Cost)', 'maintenance_log_to_next_date (Maintenance_ID → Next_Maintenance_Date)'], 'intent': 'retrieve_maintenance_records_with_extreme_conditions', 'reasoning_type': 'ideal hypothesis reasoning', 'numerical_values': [1e+18, 3000], 'units': {'currency': 'USD (no inflation adjustment)', 'date': 'AD year (Gregorian calendar)'}, 'foreign_keys': [{'fk_table': 'maintenance_logs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}], 'primary_keys': [{'pk_table': 'maintenance_logs', 'pk_column': 'Maintenance_ID'}], 'tableinfo': {'printer.maintenance_logs': [{'column': 'Cost'}, {'column': 'Next_Maintenance_Date'}]}}\nA hypothetical reasoning question is as follows:\nRetrieve maintenance records where the maintenance cost exceeds $10^18 and the next maintenance date is after the year 3000 AD (assuming no inflationary constraints on currency).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT * FROM maintenance_logs WHERE Cost > 1e18 AND Next_Maintenance_Date > '3000-01-01';",
        "db_id": "printer"
    },
    {
        "id": 376,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\nthere is nothing I can give you about this question.\nA physical knowledge question is as follows:\nWhat is the total annual power consumption in kilowatt-hours for all printers produced by manufacturer ID MAN001 operating for 18 hours daily at maximum power consumption? Given the total production quantity is 100,000 units, with each unit averaging 400 watts power consumption.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (400 * 18 * 365 / 1000) * Production_Volume_Total AS Total_Power_Consumption_kWh FROM manufacturers WHERE Manufacturer_ID = 'MAN001';",
        "db_id": "printer"
    },
    {
        "id": 377,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturer', 'annual revenue $5 billion', 'R&D expenses $800 million', '10,000 employees'], 'relations': ['manufacturer_to_financials (manufacturer → revenue, R&D, employees)', 'per_capita_formula (R&D / employees)', 'spending_ratio_formula (R&D / revenue)'], 'intent': 'calculate_per_capita_rnd_and_spending_ratio', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [5000000000, 800000000, 10000], 'units': {'revenue': 'USD', 'rnd': 'USD', 'employees': 'count', 'per_capita_unit': 'USD per employee', 'ratio_unit': 'percentage (R&D/revenue * 100)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}], 'tableinfo': {'printer.manufacturers': [{'column': 'R&D_Spending'}, {'column': 'Revenue'}, {'column': 'Employee_Count'}]}}\nA mathematical logic question is as follows:\nA manufacturer has an annual revenue of $5 billion, R&D expenses of $800 million, and 10,000 employees. Calculate the per capita R&D expenditure and the R&D spending ratio.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT R&D_Spending / Employee_Count AS Per_Capita_RD, (R&D_Spending / Revenue) * 100 AS RD_Percentage FROM manufacturers WHERE Revenue = 5000000000 AND R&D_Spending = 800000000 AND Employee_Count = 10000;",
        "db_id": "printer"
    },
    {
        "id": 378,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturer founded in 1700', '$500 million R&D expenditure'], 'relations': ['manufacturer_to_R&D_spending (Founded_Year → R&D_Spending)'], 'intent': 'assess_reasonableness_of_R&D_spending_relative_to_company_age', 'reasoning_type': 'common_sense_understanding_reasoning', 'numerical_values': [1700, 500000000], 'units': {'year': 'AD (Founded_Year)', 'R&D_spending': 'USD', 'comparative_benchmark': 'Industry average R&D spending (implied)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}], 'tableinfo': {'printer.manufacturers': [{'column': 'Founded_Year'}, {'column': 'R&D_Spending'}, {'column': 'Revenue'}, {'column': 'Market_Cap'}, {'column': 'Employee_Count'}]}}\nA common sense reasoning question is as follows:\nThe manufacturer was founded in the year 1700 but has $500 million in R&D expenditure—is this reasonable?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Founded_Year, R&D_Spending, CASE WHEN Founded_Year < 1900 AND R&D_Spending > 500000000 THEN '不合理' ELSE '合理' END AS Validity FROM manufacturers WHERE Founded_Year = 1700 AND R&D_Spending = 500000000;",
        "db_id": "printer"
    },
    {
        "id": 379,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturer', 'profit margin 200%', 'annual revenue $10 billion', 'profit'], 'relations': ['manufacturer_to_profit_margin (manufacturer → profit_margin)', 'revenue_to_profit (revenue → profit via margin)', 'feasibility_assessment (200% margin → invalid)'], 'intent': 'calculate_profit_and_assess_feasibility', 'reasoning_type': 'mathematical logic reasoning & common sense understanding reasoning', 'numerical_values': [200, 10], 'units': {'profit_margin': '% (percentage)', 'revenue': '$ billion (dollars)', 'profit': '$ billion (dollars, implied by calculation)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}], 'tableinfo': {'printer.manufacturers': [{'column': 'revenue'}, {'column': 'profit_margin'}]}}\nA hypothetical reasoning question is as follows:\nAssuming a manufacturer has a profit margin of 200%, with an annual revenue of $10 billion, what is its profit? Is it possible?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT `R&D_Spending` / Employee_Count AS Per_Capita_RD, (`R&D_Spending` / Revenue) * 100 AS RD_Percentage FROM manufacturers WHERE Revenue = 5000000000 AND `R&D_Spending` = 800000000 AND Employee_Count = 10000;",
        "db_id": "printer"
    },
    {
        "id": 380,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturers', 'energy consumption per unit (0.5 kWh)', 'total production', 'total energy consumption'], 'relations': ['manufacturer_to_production (Manufacturer → Production_Volume_Total)', 'energy_consumption_formula (total_energy = total_production × 0.5 kWh)', 'energy_per_unit_ratio (total_energy / total_production)'], 'intent': 'rank_top_3_manufacturers_by_energy_per_unit_asc', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.5], 'units': {'energy_consumption_per_unit': 'kWh (kilowatt-hours)', 'total_energy_consumption': 'kWh (implied by formula)', 'total_production': 'unit_count (number of printers produced)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}], 'tableinfo': {'printer.manufacturers': [{'column': 'Manufacturer_ID'}, {'column': 'Name'}, {'column': 'Production_Volume_Total'}]}}\nA physical knowledge question is as follows:\nList the top 3 manufacturers in ascending order of energy consumption per unit of production (total energy consumption/total production), assuming that on average, each printer produced consumes 0.5 kilowatt-hours of energy, where total energy consumption = total production × energy consumption per unit.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Founded_Year, 'R&D_Spending', CASE WHEN Founded_Year < 1900 AND 'R&D_Spending' > 500000000 THEN '不合理' ELSE '合理' END AS Validity FROM manufacturers WHERE Founded_Year = 1700 AND 'R&D_Spending' = 500000000;",
        "db_id": "printer"
    },
    {
        "id": 381,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturer', 'R&D_Spending', 'Revenue', 'percentage'], 'relations': ['manufacturer_to_metrics (Manufacturer_ID → R&D_Spending and Revenue)', 'percentage_calculation (R&D_Spending/Revenue×100)'], 'intent': 'calculate_relative_rnd_spending_percentage_and_rank', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [100], 'units': {'currency': 'USD (assumed for R&D_Spending and Revenue)', 'percentage': '% (calculated value)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}], 'tableinfo': {'printer.manufacturers': [{'column': 'Name'}, {'column': 'R&D_Spending'}, {'column': 'Revenue'}]}}\nA mathematical logic question is as follows:\nCalculate the percentage of R&D spending relative to revenue for each manufacturer ( (R&D_Spending/Revenue)×100 ), and list the top 5 in descending order by percentage.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name, (`R&D_Spending` / Revenue) * 100 AS R_D_Percent FROM manufacturers ORDER BY R_D_Percent DESC LIMIT 5;",
        "db_id": "printer"
    },
    {
        "id": 382,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturers established before 1950', 'profit margins exceeding industry average by 15%'], 'relations': ['founding_year_comparison (Founded_Year < 1950)', 'profit_margin_comparison (Profit_Margin > AVG(Profit_Margin) * 1.15)'], 'intent': 'list_qualified_manufacturers_with_filters', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1950, 15], 'units': {'percentage': '% (profit margin deviation from industry average)', 'year': 'Gregorian calendar year'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}], 'tableinfo': {'printer.manufacturers': [{'column': 'Name'}, {'column': 'Founded_Year'}, {'column': 'Profit_Margin'}]}}\nA common sense reasoning question is as follows:\nList manufacturers established before 1950 with profit margins exceeding the industry average by 15%, sorted in ascending order by founding year.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name, Founded_Year, Profit_Margin FROM manufacturers WHERE Founded_Year < 1950 AND Profit_Margin > 15 ORDER BY Founded_Year ASC;",
        "db_id": "printer"
    },
    {
        "id": 383,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturers', 'per capita output'], 'relations': ['manufacturer_to_revenue', 'manufacturer_to_employee_count', 'per_capita_output (Revenue/Employee_Count)'], 'intent': 'calculate_and_list_per_capita_output', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1, 1000000000000], 'units': {'revenue': 'dollars', 'employee_count': 'count', 'per_capita_output': 'dollars per employee (implied by calculation)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}], 'tableinfo': {'printer.manufacturers': [{'column': 'Name'}, {'column': 'Revenue'}, {'column': 'Employee_Count'}], 'printer.(manufacturers': [{'column': 'Revenue / manufacturers.Employee_Count) AS Per_Capita_Output'}]}}\nA hypothetical reasoning question is as follows:\nAssuming a manufacturer has an annual revenue of 1 trillion dollars (100 times more than the current real enterprise value) with only 1 employee, calculate its per capita output (Revenue/Employee_Count), and list all manufacturers in descending order of per capita output.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name, (Revenue / Employee_Count) AS Per_Capita_Output FROM manufacturers UNION ALL SELECT 'Hypothetical Manufacturer' AS Name, 1000000000000 / 1 AS Per_Capita_Output ORDER BY Per_Capita_Output DESC;",
        "db_id": "printer"
    },
    {
        "id": 384,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturer', 'printer production volume', 'carbon emissions', 'country'], 'relations': ['manufacturer_to_production (Manufacturer_ID → Production_Volume_Total)', 'production_to_emissions (printers → CO2 calculation)'], 'intent': 'calculate_and_aggregate_carbon_emissions_by_country', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50, 0.5], 'units': {'electricity_consumption': 'kWh (kilowatt-hours)', 'carbon_emission_factor': 'kg CO2/kWh', 'total_emissions': 'kg CO2'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}], 'tableinfo': {'printer.manufacturers': [{'column': 'Manufacturer_ID'}, {'column': 'Production_Volume_Total'}, {'column': 'Country'}]}}\nA physical knowledge question is as follows:\nCalculate the theoretical carbon emissions for each manufacturer's total production (assuming that producing one printer consumes 50 kilowatt-hours of electricity, and each kilowatt-hour generates 0.5 kilograms of carbon dioxide), then group and sum the total carbon emissions by country.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Country, SUM(Production_Volume_Total * 50 * 0.5) AS Total_Carbon_Emission FROM manufacturers GROUP BY Country;",
        "db_id": "printer"
    },
    {
        "id": 385,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Manufacturer', 'R&D Intensity', 'Profit Margin', 'Comprehensive Benefit Index'], 'relations': ['manufacturer_to_rnd_spending (Manufacturer → R&D_Spending)', 'manufacturer_to_revenue (Manufacturer → Revenue)', 'manufacturer_to_profit_margin (Manufacturer → Profit_Margin)', 'rnd_intensity_formula (R&D_Spending/Revenue)', 'comprehensive_index_formula (R&D_Intensity * Profit_Margin)'], 'intent': 'calculate_comprehensive_benefit_index_and_count_manufacturers', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': ['R&D_Spending', 'Revenue', 'Profit_Margin'], 'units': {'R&D_Spending': 'currency (assumed USD)', 'Revenue': 'currency (assumed USD)', 'Profit_Margin': 'percentage (%)', 'comprehensive_benefit_index': 'unitless (ratio * percentage)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}], 'tableinfo': {'printer.manufacturers': [{'column': 'R&D_Spending'}, {'column': 'Revenue'}, {'column': 'Profit_Margin'}]}}\nA mathematical logic question is as follows:\nCalculate the comprehensive benefit index of the product of R&D intensity (R&D investment as a proportion of revenue) and profit margin for each manufacturer, and count the number of manufacturers grouped by index value.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (R&D_Spending / Revenue) * (Profit_Margin / 100) AS Comprehensive_Index, COUNT(*) AS Manufacturer_Count FROM manufacturers GROUP BY Comprehensive_Index;",
        "db_id": "printer"
    },
    {
        "id": 386,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturers', '50 years', 'market value < 2x annual revenue', 'countries'], 'relations': ['manufacturer_age (current_year - Founded_Year > 50)', 'market_cap_compared_to_revenue (Market_Cap < 2 * Revenue)', 'country_to_anomaly_count (grouping by Country)'], 'intent': 'identify_anomalous_manufacturers_by_country', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50, 2], 'units': {'age': 'years', 'market_cap': 'monetary unit (implied by database schema)', 'revenue': 'monetary unit (implied by database schema)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}], 'tableinfo': {'printer.manufacturers': [{'column': 'Country'}, {'column': 'Founded_Year'}, {'column': 'Market_Cap'}, {'column': 'Revenue'}]}}\nA common sense reasoning question is as follows:\nFilter out manufacturers that have been established for over 50 years but have a market value less than twice their annual revenue, and then group by country to count the number of anomalous companies.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Country, COUNT(*) AS Abnormal_Company_Count FROM manufacturers WHERE Founded_Year <= 1973 AND Market_Cap < (Revenue * 2) GROUP BY Country;",
        "db_id": "printer"
    },
    {
        "id": 387,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': [\"company's annual output per capita 10^18 units/person/year\", 'industry average 1000 units/person/year'], 'relations': ['output_per_capita (company: 10^18 / 1 employee)', 'industry_comparison_ratio (10^18 / 1000 = 10^15)', 'order_of_magnitude_difference (log10(10^15) = 15)'], 'intent': 'calculate_proportional_difference_in_orders_of_magnitude', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1e+18, 1000, 1], 'units': {'production': 'units/year', 'per_capita': 'units/year/person', 'conversion': 'log10(ratio) → order of magnitude'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}], 'tableinfo': {'printer.manufacturers': [{'column': 'Production_Volume_Total'}, {'column': 'Employee_Count'}]}}\nA hypothetical reasoning question is as follows:\nAssuming a certain manufacturer has only one employee managing a fully automated factory, with a total production output of 10^18 units, calculate the proportional difference between the company's annual output per capita and the industry average (the industry averages 1000 units/person/year), grouped by order of magnitude.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT ('R&D_Spending' / Revenue) * (Profit_Margin / 100) AS Comprehensive_Index, COUNT(*) AS Manufacturer_Count FROM manufacturers GROUP BY Comprehensive_Index;",
        "db_id": "printer"
    },
    {
        "id": 388,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['printer', 'manufacturer', 'power consumption', 'operating hours'], 'relations': ['printer_to_manufacturer (printer.Manufacturer_ID → manufacturer.Manufacturer_ID)', 'power_consumption_to_annual_usage (Power_Consumption * 2920 hours/year)'], 'intent': 'calculate_annual_power_consumption_per_manufacturer', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [8, 365, 1000], 'units': {'power_consumption': 'watts (from printers.Power_Consumption)', 'annual_consumption': 'kilowatt-hours (kWh) calculated as (watts * 8 * 365) / 1000', 'conversion': 'watt-hours to kilowatt-hours (÷1000)'}, 'foreign_keys': [{'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}, {'column': 'Manufacturer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '制造商ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}], 'printer.manufacturers': [{'column': 'Manufacturer_ID'}, {'column': 'Name'}]}}\nA physical knowledge question is as follows:\nCalculate the total theoretical annual power consumption (in kilowatt-hours) for all printers produced by each manufacturer, assuming that all printers operate 8 hours per day and run continuously throughout the year.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT m.Name, (m.Production_Volume_Total * 300 * 8 * 365 / 1000) AS Total_Annual_Power_Consumption_kWh FROM manufacturers m GROUP BY m.Manufacturer_ID;",
        "db_id": "printer"
    },
    {
        "id": 389,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Manufacturer', 'R&D Spending', 'Revenue', 'Profit Margin'], 'relations': ['R&D_to_revenue_ratio (R&D Spending / Revenue)', 'difference (R&D_to_revenue_ratio - Profit Margin)', 'manufacturer_to_attributes (Manufacturer ↔ R&D Spending/Revenue/Profit Margin)'], 'intent': 'calculate_difference_and_filter_manufacturers', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10], 'units': {'R&D Spending': 'currency (e.g., USD)', 'Revenue': 'currency (e.g., USD)', 'Profit Margin': '% (percentage)', 'difference': '% (percentage points)', 'threshold': '10% (percentage points)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}], 'tableinfo': {'printer.manufacturers': [{'column': 'Name'}, {'column': 'R&D_Spending'}, {'column': 'Revenue'}, {'column': 'Profit_Margin'}]}}\nA mathematical logic question is as follows:\nCalculate the difference between the proportion of R&D spending to revenue and the profit margin for each manufacturer, and filter out manufacturers with a difference greater than 10%.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT m.Name, ABS((m.RD_Spending / m.Revenue * 100) - m.Profit_Margin) AS Difference_Percentage FROM manufacturers m HAVING Difference_Percentage > 10;",
        "db_id": "printer"
    },
    {
        "id": 390,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['manufacturers', 'Founded_Year', 'Employee_Count'], 'relations': ['manufacturer_attributes (Founded_Year, Employee_Count)'], 'intent': 'filter_manufacturers_by_age_and_size', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [50, 1000], 'units': {'duration': 'years (establishment duration)', 'count': 'employees (absolute count)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}], 'tableinfo': {'printer.manufacturers': [{'column': 'Name'}, {'column': 'Founded_Year'}, {'column': 'Employee_Count'}]}}\nA common sense reasoning question is as follows:\nFilter out manufacturers that have been established for more than 50 years but have fewer than 1000 employees.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Name, Founded_Year, Employee_Count FROM manufacturers WHERE (YEAR(CURDATE()) - Founded_Year) > 50 AND Employee_Count < 1000;",
        "db_id": "printer"
    },
    {
        "id": 391,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['Manufacturer', 'Annual Income (Revenue)', 'Market Capitalization'], 'relations': ['revenue_to_market_cap_ratio (Revenue / Market_Cap > 500)'], 'intent': 'identify_manufacturers_with_abnormal_revenue_to_market_cap_ratio', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [500], 'units': {'revenue': 'USD (assumed currency)', 'market_cap': 'USD (assumed currency)', 'ratio': 'dimensionless (Revenue / Market_Cap)'}, 'foreign_keys': [], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}], 'tableinfo': {'printer.manufacturers': [{'column': 'Name'}, {'column': 'Revenue'}, {'column': 'Market_Cap'}]}}\nA hypothetical reasoning question is as follows:\nIdentify manufacturers with an annual income exceeding 500 times their market capitalization (under normal circumstances, the price-to-sales ratio does not exceed 10).\nyour response just have a SQL without anything.\n",
        "solution": "SELECT m.Name, ABS(('m.RD_Spending' / m.Revenue * 100) - m.Profit_Margin) AS Difference_Percentage FROM manufacturers m HAVING Difference_Percentage > 10;",
        "db_id": "printer"
    },
    {
        "id": 392,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['monochrome laser printer', '500 pages', '800 watts', '30 ppm'], 'relations': ['printer_to_power_consumption (printers.Power_Consumption)', 'printer_to_print_speed (printers.Print_Speed)', 'pages_to_energy (500 pages → energy calculation)'], 'intent': 'calculate_energy_consumption_for_print_job', 'reasoning_type': 'physical knowledge reasoning', 'numerical_values': [500, 800, 30], 'units': {'power': 'W (watts) → kW (conversion factor: 1 kW = 1000 W)', 'time': 'minutes (from ppm) → hours (conversion factor: 1 hour = 60 minutes)', 'energy': 'kWh (kilowatt-hours) = (kW × hours)'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}, {'column': 'Print_Speed', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '打印速度（如 30 ppm）', 'examples': ['30 ppm', '28 ppm', '25 ppm', '33 ppm', '35 ppm']}], 'printer.print_jobs': [{'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}]}}\nA physical knowledge question is as follows:\nAssume a monochrome laser printer is handling a printing task of 500 pages, with a power consumption of 800 watts and a printing speed of 30 ppm (pages per minute). Calculate the total energy consumption (in kilowatt-hours) required to complete this task.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (Power_Consumption * (500 / (Print_Speed * 60)) / 1000) AS Total_kWh FROM printers WHERE Type = 'Laser' AND Color_Support = 'Monochrome' AND Power_Consumption = 800 AND Print_Speed = 30;",
        "db_id": "printer"
    },
    {
        "id": 393,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['printer', 'ink consumption rate', 'print tasks', 'ink capacity', 'current ink level'], 'relations': ['printer_to_consumables (Printer_ID)', 'print_jobs_to_printer (Printer_ID)', 'color_task_to_ink_rate (0.05 ml/page)', 'monochrome_task_to_ink_rate (0.02 ml/page)', 'ink_capacity_to_current_level (60% of 100 ml)'], 'intent': 'determine_ink_sufficiency_for_pending_jobs', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [0.05, 0.02, 60, 100, 2000, 5000], 'units': {'ink_consumption_rate': 'ml/page', 'ink_capacity': 'ml', 'current_ink_level_percentage': '%', 'print_tasks': 'pages', 'required_ink_calculation': 'ml (total needed = color_pages*0.05 + monochrome_pages*0.02)'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Capacity', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '容量（如 5000页）', 'examples': ['5000 pages', '6000 pages', '3000 pages', '7000 pages', '5000']}, {'column': 'Current_Level', 'type': 'DECIMAL(5, 2)', 'primary_key': False, 'comment': '当前剩余量（%）', 'examples': ['80.0', '70.0', '60.0', '75.0', '65.0']}], 'printer.print_jobs': [{'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}, {'column': 'Color_Usage', 'type': 'ENUM', 'primary_key': False, 'comment': '颜色使用', 'examples': ['Color', 'Monochrome']}]}}\nA mathematical logic question is as follows:\nIf all color printing tasks consume ink at a rate of 0.05 ml/page, and monochrome tasks at 0.02 ml/page. The current ink level is 60%, with a capacity of 100 ml. There are 2000 pages of color tasks and 5000 pages of monochrome tasks pending. Will the remaining ink be sufficient?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT IF((2000*0.05 + 5000*0.02) <= (Capacity * (Current_Level/100)), '足够', '不足够') AS 是否足够 FROM consumables WHERE Type = 'Ink' AND Capacity = 100 AND Current_Level = 60;",
        "db_id": "printer"
    },
    {
        "id": 394,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['7-page double-sided printing job', 'paper tray capacity 250 sheets'], 'relations': ['pages_to_sheets (7 pages → 4 sheets due to duplex calculation)', 'tray_capacity_irrelevant (250 sheets capacity not limiting factor)'], 'intent': 'calculate_paper_consumption_for_print_job', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [7, 2], 'units': {'pages': 'pages', 'sheets': 'sheets', 'duplex_ratio': '2 pages per sheet'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}, {'column': 'Duplex', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否双面打印（0-否，1-是）', 'examples': ['1', '0']}], 'printer.printers': [{'column': 'Tray_Capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '纸盘容量（张）', 'examples': ['250', '300', '150', '350', '500']}]}}\nA common sense reasoning question is as follows:\nA user submitted a 7-page double-sided printing job, and the paper tray capacity is 250 sheets. How many sheets of paper are actually consumed?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT CEIL(7 / 2) AS Actual_Sheets FROM print_jobs WHERE Duplex = 1 AND Page_Count = 7;",
        "db_id": "printer"
    },
    {
        "id": 395,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['3D printing job', '10^18 pages', '0.1mm thickness', '500 sheets tray capacity', 'automatic replenishment every hour'], 'relations': ['job_to_page_count (3D printing job → 10^18 pages)', 'tray_capacity_to_replenishment (500 sheets → hourly replenishment)', 'total_pages_to_time (10^18 pages / 500 sheets/hour)'], 'intent': 'calculate_time_required_for_printing', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1e+18, 500, 1], 'units': {'page_count': 'pages (unitless count)', 'tray_capacity': 'sheets (unitless count)', 'time': 'hours → years conversion', 'thickness': 'mm (irrelevant to time calculation)'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}], 'printer.printers': [{'column': 'Tray_Capacity', 'type': 'INTEGER', 'primary_key': False, 'comment': '纸盘容量（张）', 'examples': ['250', '300', '150', '350', '500']}]}}\nA common sense reasoning question is as follows:\nIf a 3D printing job requires continuously printing 10^18 pages of A4 paper (assuming each sheet is 0.1mm thick), with a paper tray capacity of 500 sheets and an automatic paper replenishment every hour, how many years would it theoretically take to complete?\nyour response just have a SQL without anything.\n",
        "solution": "SELECT (POWER(10, 18) * 0.1 / 1000) / (500 * 0.1 / 1000 * 24 * 365) AS Years FROM printers WHERE Type = '3D' AND Tray_Capacity = 500;",
        "db_id": "printer"
    },
    {
        "id": 396,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['laser printer model', 'energy consumption (joules)', 'print jobs'], 'relations': ['printer_model_to_power_consumption (Model → Power_Consumption)', 'print_job_to_page_count (Job_ID → Page_Count)', 'printer_model_to_print_speed (Model → Print_Speed)'], 'intent': 'calculate_total_energy_consumption_for_printer_model_and_rank_top_5', 'reasoning_type': 'physical knowledge reasoning and mathematical logic reasoning', 'numerical_values': ['Page_Count', 'Power_Consumption', 'Print_Speed'], 'units': {'power_consumption': 'watts (from printers.Power_Consumption)', 'time': 'seconds (calculated from Page_Count / Print_Speed with unit conversion from minutes to seconds)', 'energy': 'joules (watts × seconds)', 'conversion': '1 minute = 60 seconds, 1 watt-second = 1 joule'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '型号', 'examples': ['HP LaserJet Pro MFP M428fdw', 'Canon imageCLASS MF644Cdw', 'Epson WorkForce Pro WF-4740', 'Brother HL-L8360CDW', 'Xerox VersaLink C405']}, {'column': 'Power_Consumption', 'type': 'DECIMAL(6, 2)', 'primary_key': False, 'comment': '功耗（瓦）', 'examples': ['500.0', '550.0', '400.0', '520.0', '600.0']}, {'column': 'Print_Speed', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '打印速度（如 30 ppm）', 'examples': ['30 ppm', '28 ppm', '25 ppm', '33 ppm', '35 ppm']}], 'printer.print_jobs': [{'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}]}}\nA physical knowledge question is as follows:\nCalculate the total energy consumption (in joules) of a certain model of laser printer when completing all print tasks, and rank the top 5 printer models in descending order of energy consumption.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT p.Model, SUM((j.Page_Count / CAST(SUBSTRING_INDEX(p.Print_Speed, 'ppm', 1) AS UNSIGNED)) * 60 * p.Power_Consumption * 1000) AS Total_Energy FROM printers p JOIN print_jobs j ON p.Printer_ID = j.Printer_ID WHERE p.Type = 'Laser' GROUP BY p.Model ORDER BY Total_Energy DESC LIMIT 5;",
        "db_id": "printer"
    },
    {
        "id": 397,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['consumables', 'print_jobs', 'color printing tasks', 'monochrome tasks', 'ink cost ratio'], 'relations': ['consumables_to_printers (Consumable.Printer_ID → Printer.Printer_ID)', 'print_jobs_to_printers (Print_Job.Printer_ID → Printer.Printer_ID)', 'color_usage_classification (Color_Usage=TRUE/FALSE)', 'ink_cost_ratio (color_cost / monochrome_cost)'], 'intent': 'calculate_top_3_consumable_ink_cost_ratios', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [], 'units': {'currency': 'undefined (assumed consistent unit from Consumables.Cost field)', 'ratio': 'unitless (color_cost / monochrome_cost)'}, 'foreign_keys': [{'fk_table': 'consumables', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'consumables', 'pk_column': 'Consumable_ID'}, {'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}], 'tableinfo': {'printer.consumables': [{'column': 'Model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '耗材型号', 'examples': ['HP 414A', 'Canon 057H', 'Epson 212', 'Brother TN-760', 'Xerox 106R01359']}, {'column': 'Cost', 'type': 'DECIMAL(10, 2)', 'primary_key': False, 'comment': '耗材成本（美元）', 'examples': ['100.0', '120.0', '80.0', '90.0', '110.0']}, {'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}], 'printer.print_jobs': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '打印机ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Color_Usage', 'type': 'ENUM', 'primary_key': False, 'comment': '颜色使用', 'examples': ['Color', 'Monochrome']}]}}\nA mathematical logic question is as follows:\nStatistics on the proportion of total ink cost consumed by color printing tasks, requiring the output of the top 3 consumable models with the highest color/monochrome task ink cost ratio.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT c.Model, (SUM(CASE WHEN j.Color_Usage = 'Color' THEN j.Page_Count * 3 * (c.Cost/c.Capacity) ELSE 0 END) / SUM(CASE WHEN j.Color_Usage = 'Monochrome' THEN j.Page_Count * (c.Cost/c.Capacity) ELSE 0 END)) AS Cost_Ratio FROM consumables c JOIN print_jobs j ON c.Printer_ID = j.Printer_ID WHERE c.Type = 'Ink' GROUP BY c.Model HAVING Cost_Ratio IS NOT NULL ORDER BY Cost_Ratio DESC LIMIT 3;",
        "db_id": "printer"
    },
    {
        "id": 398,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['users', 'print_jobs', 'duplex printing'], 'relations': ['user_to_print_jobs (User_ID → User_ID)', 'print_job_to_duplex_setting (Duplex=1)'], 'intent': 'calculate_top_users_by_paper_saving', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [10, 1], 'units': {'paper_saving': 'pages (calculated as Page_Count // 2 per duplex job)'}, 'foreign_keys': [{'fk_table': 'print_jobs', 'fk_column': 'Printer_ID', 'ref_table': 'printers', 'ref_column': 'Printer_ID'}, {'fk_table': 'print_jobs', 'fk_column': 'User_ID', 'ref_table': 'users', 'ref_column': 'User_ID'}], 'primary_keys': [{'pk_table': 'print_jobs', 'pk_column': 'Job_ID'}, {'pk_table': 'users', 'pk_column': 'User_ID'}], 'tableinfo': {'printer.print_jobs': [{'column': 'User_ID', 'type': 'INTEGER', 'primary_key': False, 'comment': '用户ID', 'examples': ['1', '2', '3', '4', '5']}, {'column': 'Page_Count', 'type': 'INTEGER', 'primary_key': False, 'comment': '页数', 'examples': ['50', '100', '30', '40', '20']}, {'column': 'Duplex', 'type': 'TINYINT', 'primary_key': False, 'comment': '是否双面打印（0-否，1-是）', 'examples': ['1', '0']}], 'printer.users': [{'column': 'Name'}]}}\nA common sense reasoning question is as follows:\nFind the top 10 users who saved the most paper by using duplex printing (Duplex=1), sorted in ascending order by the amount saved.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT u.Name, SUM(j.Page_Count * 0.5) AS Saved_Paper FROM users u JOIN print_jobs j ON u.User_ID = j.User_ID WHERE j.Duplex = 1 GROUP BY u.User_ID ORDER BY Saved_Paper DESC LIMIT 10;",
        "db_id": "printer"
    },
    {
        "id": 399,
        "problem": "You are now an expert in SQL statements. I will give you information about a database and subsequently ask you a question. All questions involve 4 types of questions: physical knowledge, mathematical logic, common sense reasoning, and hypothetical reasoning. When I ask you a question, I will tell you the type of the question.Please response me an SQL statement for that question. The database information is as follows:\n{'entities': ['print job containing 1,000,000,000 pages', 'nominal print speed', 'theoretical completion time', 'top 5 slowest models'], 'relations': ['page_count_to_print_speed (1,000,000,000 / printer.print_speed)', 'model_to_manufacturer (printer.model → manufacturer.name)'], 'intent': 'calculate_completion_time_and_retrieve_slowest_models', 'reasoning_type': 'mathematical logic reasoning', 'numerical_values': [1000000000], 'units': {'print_speed': 'pages per minute (ppm)', 'time_conversion': '1 year = 525600 minutes (60*24*365)', 'output_time': 'years'}, 'foreign_keys': [{'fk_table': 'printers', 'fk_column': 'Manufacturer_ID', 'ref_table': 'manufacturers', 'ref_column': 'Manufacturer_ID'}], 'primary_keys': [{'pk_table': 'manufacturers', 'pk_column': 'Manufacturer_ID'}, {'pk_table': 'printers', 'pk_column': 'Printer_ID'}], 'tableinfo': {'printer.printers': [{'column': 'Printer_ID', 'type': 'INTEGER', 'primary_key': True, 'comment': '打印机唯一标识', 'examples': ['1', '11', '21', '32', '44']}, {'column': 'Model', 'type': 'VARCHAR(100)', 'primary_key': False, 'comment': '型号', 'examples': ['HP LaserJet Pro MFP M428fdw', 'Canon imageCLASS MF644Cdw', 'Epson WorkForce Pro WF-4740', 'Brother HL-L8360CDW', 'Xerox VersaLink C405']}, {'column': 'Print_Speed', 'type': 'VARCHAR(50)', 'primary_key': False, 'comment': '打印速度（如 30 ppm）', 'examples': ['30 ppm', '28 ppm', '25 ppm', '33 ppm', '35 ppm']}], 'printer.manufacturers': [{'column': 'Name'}]}}\nA hypothetical reasoning question is as follows:\nAssuming a print job contains 1,000,000,000 pages and requires continuous printing, calculate the theoretical completion time (in years) under the nominal print speed, and retrieve the top 5 slowest models sorted by time in descending order.\nyour response just have a SQL without anything.\n",
        "solution": "SELECT Model, (1000000000 / CAST(SUBSTRING_INDEX(Print_Speed, 'ppm', 1) AS UNSIGNED)) / 525600 AS Years FROM printers ORDER BY Years DESC LIMIT 5;",
        "db_id": "printer"
    }
]